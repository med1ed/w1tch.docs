SYSTEM = {}

function SYSTEM.WAIT(ms)
  native.invoke(
    Type.Void, 0, false,
    arg(Type.Int, ms)
  )
end

function SYSTEM.START_NEW_SCRIPT(scriptName, stackSize)
  return native.invoke(
    Type.Int, 1, false,
    arg(Type.String, scriptName),
    arg(Type.Int, stackSize)
  )
end

function SYSTEM.START_NEW_SCRIPT_WITH_ARGS(scriptName, args, argCount, stackSize)
  return native.invoke(
    Type.Int, 2, false,
    arg(Type.String, scriptName),
    ref(Type.Any, args),
    arg(Type.Int, argCount),
    arg(Type.Int, stackSize)
  )
end

function SYSTEM.START_NEW_SCRIPT_WITH_NAME_HASH(scriptHash, stackSize)
  return native.invoke(
    Type.Int, 3, false,
    arg(Type.Hash, scriptHash),
    arg(Type.Int, stackSize)
  )
end

function SYSTEM.START_NEW_SCRIPT_WITH_NAME_HASH_AND_ARGS(scriptHash, args, argCount, stackSize)
  return native.invoke(
    Type.Int, 4, false,
    arg(Type.Hash, scriptHash),
    ref(Type.Any, args),
    arg(Type.Int, argCount),
    arg(Type.Int, stackSize)
  )
end

function SYSTEM.TIMERA()
  return native.invoke(
    Type.Int, 5, false
  )
end

function SYSTEM.TIMERB()
  return native.invoke(
    Type.Int, 6, false
  )
end

function SYSTEM.SETTIMERA(value)
  native.invoke(
    Type.Void, 7, false,
    arg(Type.Int, value)
  )
end

function SYSTEM.SETTIMERB(value)
  native.invoke(
    Type.Void, 8, false,
    arg(Type.Int, value)
  )
end

function SYSTEM.TIMESTEP()
  return native.invoke(
    Type.Float, 9, false
  )
end

function SYSTEM.SIN(value)
  return native.invoke(
    Type.Float, 10, false,
    arg(Type.Float, value)
  )
end

function SYSTEM.COS(value)
  return native.invoke(
    Type.Float, 11, false,
    arg(Type.Float, value)
  )
end

function SYSTEM.SQRT(value)
  return native.invoke(
    Type.Float, 12, false,
    arg(Type.Float, value)
  )
end

function SYSTEM.POW(base, exponent)
  return native.invoke(
    Type.Float, 13, false,
    arg(Type.Float, base),
    arg(Type.Float, exponent)
  )
end

function SYSTEM.LOG10(value)
  return native.invoke(
    Type.Float, 14, false,
    arg(Type.Float, value)
  )
end

function SYSTEM.VMAG(x, y, z)
  return native.invoke(
    Type.Float, 15, false,
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, z)
  )
end

function SYSTEM.VMAG2(x, y, z)
  return native.invoke(
    Type.Float, 16, false,
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, z)
  )
end

function SYSTEM.VDIST(x1, y1, z1, x2, y2, z2)
  return native.invoke(
    Type.Float, 17, false,
    arg(Type.Float, x1),
    arg(Type.Float, y1),
    arg(Type.Float, z1),
    arg(Type.Float, x2),
    arg(Type.Float, y2),
    arg(Type.Float, z2)
  )
end

function SYSTEM.VDIST2(x1, y1, z1, x2, y2, z2)
  return native.invoke(
    Type.Float, 18, false,
    arg(Type.Float, x1),
    arg(Type.Float, y1),
    arg(Type.Float, z1),
    arg(Type.Float, x2),
    arg(Type.Float, y2),
    arg(Type.Float, z2)
  )
end

function SYSTEM.SHIFT_LEFT(value, bitShift)
  return native.invoke(
    Type.Int, 19, false,
    arg(Type.Int, value),
    arg(Type.Int, bitShift)
  )
end

function SYSTEM.SHIFT_RIGHT(value, bitShift)
  return native.invoke(
    Type.Int, 20, false,
    arg(Type.Int, value),
    arg(Type.Int, bitShift)
  )
end

function SYSTEM.FLOOR(value)
  return native.invoke(
    Type.Int, 21, false,
    arg(Type.Float, value)
  )
end

function SYSTEM.CEIL(value)
  return native.invoke(
    Type.Int, 22, false,
    arg(Type.Float, value)
  )
end

function SYSTEM.ROUND(value)
  return native.invoke(
    Type.Int, 23, false,
    arg(Type.Float, value)
  )
end

function SYSTEM.TO_FLOAT(value)
  return native.invoke(
    Type.Float, 24, false,
    arg(Type.Int, value)
  )
end

function SYSTEM.SET_THIS_THREAD_PRIORITY(priority)
  native.invoke(
    Type.Void, 25, false,
    arg(Type.Int, priority)
  )
end


APP = {}

function APP.APP_DATA_VALID()
  return native.invoke(
    Type.Bool, 26, false
  )
end

function APP.APP_GET_INT(property)
  return native.invoke(
    Type.Int, 27, false,
    arg(Type.String, property)
  )
end

function APP.APP_GET_FLOAT(property)
  return native.invoke(
    Type.Float, 28, false,
    arg(Type.String, property)
  )
end

function APP.APP_GET_STRING(property)
  return native.invoke(
    Type.String, 29, false,
    arg(Type.String, property)
  )
end

function APP.APP_SET_INT(property, value)
  native.invoke(
    Type.Void, 30, false,
    arg(Type.String, property),
    arg(Type.Int, value)
  )
end

function APP.APP_SET_FLOAT(property, value)
  native.invoke(
    Type.Void, 31, false,
    arg(Type.String, property),
    arg(Type.Float, value)
  )
end

function APP.APP_SET_STRING(property, value)
  native.invoke(
    Type.Void, 32, false,
    arg(Type.String, property),
    arg(Type.String, value)
  )
end

function APP.APP_SET_APP(appName)
  native.invoke(
    Type.Void, 33, false,
    arg(Type.String, appName)
  )
end

function APP.APP_SET_BLOCK(blockName)
  native.invoke(
    Type.Void, 34, false,
    arg(Type.String, blockName)
  )
end

function APP.APP_CLEAR_BLOCK()
  native.invoke(
    Type.Void, 35, false
  )
end

function APP.APP_CLOSE_APP()
  native.invoke(
    Type.Void, 36, false
  )
end

function APP.APP_CLOSE_BLOCK()
  native.invoke(
    Type.Void, 37, false
  )
end

function APP.APP_HAS_LINKED_SOCIAL_CLUB_ACCOUNT()
  return native.invoke(
    Type.Bool, 38, false
  )
end

function APP.APP_HAS_SYNCED_DATA(appName)
  return native.invoke(
    Type.Bool, 39, false,
    arg(Type.String, appName)
  )
end

function APP.APP_SAVE_DATA()
  native.invoke(
    Type.Void, 40, false
  )
end

function APP.APP_GET_DELETED_FILE_STATUS()
  return native.invoke(
    Type.Int, 41, false
  )
end

function APP.APP_DELETE_APP_DATA(appName)
  return native.invoke(
    Type.Bool, 42, false,
    arg(Type.String, appName)
  )
end


AUDIO = {}

function AUDIO.PLAY_PED_RINGTONE(ringtoneName, ped, p2)
  native.invoke(
    Type.Void, 43, false,
    arg(Type.String, ringtoneName),
    arg(Type.Ped, ped),
    arg(Type.Bool, p2)
  )
end

function AUDIO.IS_PED_RINGTONE_PLAYING(ped)
  return native.invoke(
    Type.Bool, 44, false,
    arg(Type.Ped, ped)
  )
end

function AUDIO.STOP_PED_RINGTONE(ped)
  native.invoke(
    Type.Void, 45, false,
    arg(Type.Ped, ped)
  )
end

function AUDIO.IS_MOBILE_PHONE_CALL_ONGOING()
  return native.invoke(
    Type.Bool, 46, false
  )
end

function AUDIO.IS_MOBILE_INTERFERENCE_ACTIVE()
  return native.invoke(
    Type.Bool, 47, false
  )
end

function AUDIO.GET_CURRENT_TV_SHOW_PLAY_TIME()
  return native.invoke(
    Type.Int, 48, false
  )
end

function AUDIO.CREATE_NEW_SCRIPTED_CONVERSATION()
  native.invoke(
    Type.Void, 49, false
  )
end

function AUDIO.ADD_LINE_TO_CONVERSATION(index, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12)
  native.invoke(
    Type.Void, 50, false,
    arg(Type.Int, index),
    arg(Type.String, p1),
    arg(Type.String, p2),
    arg(Type.Int, p3),
    arg(Type.Int, p4),
    arg(Type.Bool, p5),
    arg(Type.Bool, p6),
    arg(Type.Bool, p7),
    arg(Type.Bool, p8),
    arg(Type.Int, p9),
    arg(Type.Bool, p10),
    arg(Type.Bool, p11),
    arg(Type.Bool, p12)
  )
end

function AUDIO.ADD_PED_TO_CONVERSATION(index, ped, p2)
  native.invoke(
    Type.Void, 51, false,
    arg(Type.Int, index),
    arg(Type.Ped, ped),
    arg(Type.String, p2)
  )
end

function AUDIO.SET_POSITION_FOR_NULL_CONV_PED(p0, p1, p2, p3)
  native.invoke(
    Type.Void, 52, false,
    arg(Type.Any, p0),
    arg(Type.Float, p1),
    arg(Type.Float, p2),
    arg(Type.Float, p3)
  )
end

function AUDIO.SET_ENTITY_FOR_NULL_CONV_PED(p0, entity)
  native.invoke(
    Type.Void, 53, false,
    arg(Type.Int, p0),
    arg(Type.Entity, entity)
  )
end

function AUDIO.SET_MICROPHONE_POSITION(toggle, x1, y1, z1, x2, y2, z2, x3, y3, z3)
  native.invoke(
    Type.Void, 54, false,
    arg(Type.Bool, toggle),
    arg(Type.Float, x1),
    arg(Type.Float, y1),
    arg(Type.Float, z1),
    arg(Type.Float, x2),
    arg(Type.Float, y2),
    arg(Type.Float, z2),
    arg(Type.Float, x3),
    arg(Type.Float, y3),
    arg(Type.Float, z3)
  )
end

function AUDIO.SET_CONVERSATION_AUDIO_CONTROLLED_BY_ANIM(p0)
  native.invoke(
    Type.Void, 55, false,
    arg(Type.Bool, p0)
  )
end

function AUDIO.SET_CONVERSATION_AUDIO_PLACEHOLDER(p0)
  native.invoke(
    Type.Void, 56, false,
    arg(Type.Bool, p0)
  )
end

function AUDIO.START_SCRIPT_PHONE_CONVERSATION(p0, p1)
  native.invoke(
    Type.Void, 57, false,
    arg(Type.Bool, p0),
    arg(Type.Bool, p1)
  )
end

function AUDIO.PRELOAD_SCRIPT_PHONE_CONVERSATION(p0, p1)
  native.invoke(
    Type.Void, 58, false,
    arg(Type.Bool, p0),
    arg(Type.Bool, p1)
  )
end

function AUDIO.START_SCRIPT_CONVERSATION(p0, p1, p2, p3)
  native.invoke(
    Type.Void, 59, false,
    arg(Type.Bool, p0),
    arg(Type.Bool, p1),
    arg(Type.Bool, p2),
    arg(Type.Bool, p3)
  )
end

function AUDIO.PRELOAD_SCRIPT_CONVERSATION(p0, p1, p2, p3)
  native.invoke(
    Type.Void, 60, false,
    arg(Type.Bool, p0),
    arg(Type.Bool, p1),
    arg(Type.Bool, p2),
    arg(Type.Bool, p3)
  )
end

function AUDIO.START_PRELOADED_CONVERSATION()
  native.invoke(
    Type.Void, 61, false
  )
end

function AUDIO.GET_IS_PRELOADED_CONVERSATION_READY()
  return native.invoke(
    Type.Bool, 62, false
  )
end

function AUDIO.IS_SCRIPTED_CONVERSATION_ONGOING()
  return native.invoke(
    Type.Bool, 63, false
  )
end

function AUDIO.IS_SCRIPTED_CONVERSATION_LOADED()
  return native.invoke(
    Type.Bool, 64, false
  )
end

function AUDIO.GET_CURRENT_SCRIPTED_CONVERSATION_LINE()
  return native.invoke(
    Type.Int, 65, false
  )
end

function AUDIO.PAUSE_SCRIPTED_CONVERSATION(p0)
  native.invoke(
    Type.Void, 66, false,
    arg(Type.Bool, p0)
  )
end

function AUDIO.RESTART_SCRIPTED_CONVERSATION()
  native.invoke(
    Type.Void, 67, false
  )
end

function AUDIO.STOP_SCRIPTED_CONVERSATION(p0)
  return native.invoke(
    Type.Int, 68, false,
    arg(Type.Bool, p0)
  )
end

function AUDIO.SKIP_TO_NEXT_SCRIPTED_CONVERSATION_LINE()
  native.invoke(
    Type.Void, 69, false
  )
end

function AUDIO.INTERRUPT_CONVERSATION(ped, voiceline, speaker)
  native.invoke(
    Type.Void, 70, false,
    arg(Type.Ped, ped),
    arg(Type.String, voiceline),
    arg(Type.String, speaker)
  )
end

function AUDIO.INTERRUPT_CONVERSATION_AND_PAUSE(ped, p1, speaker)
  native.invoke(
    Type.Void, 71, false,
    arg(Type.Ped, ped),
    arg(Type.String, p1),
    arg(Type.String, speaker)
  )
end

function AUDIO.GET_VARIATION_CHOSEN_FOR_SCRIPTED_LINE(p0)
  return native.invoke(
    Type.Int, 72, false,
    ref(Type.Any, p0)
  )
end

function AUDIO.SET_NO_DUCKING_FOR_CONVERSATION(p0)
  native.invoke(
    Type.Void, 73, false,
    arg(Type.Bool, p0)
  )
end

function AUDIO.REGISTER_SCRIPT_WITH_AUDIO(p0)
  native.invoke(
    Type.Void, 74, false,
    arg(Type.Int, p0)
  )
end

function AUDIO.UNREGISTER_SCRIPT_WITH_AUDIO()
  native.invoke(
    Type.Void, 75, false
  )
end

function AUDIO.REQUEST_MISSION_AUDIO_BANK(audioBank, p1, p2)
  return native.invoke(
    Type.Bool, 76, false,
    arg(Type.String, audioBank),
    arg(Type.Bool, p1),
    arg(Type.Any, p2)
  )
end

function AUDIO.REQUEST_AMBIENT_AUDIO_BANK(audioBank, p1, p2)
  return native.invoke(
    Type.Bool, 77, false,
    arg(Type.String, audioBank),
    arg(Type.Bool, p1),
    arg(Type.Any, p2)
  )
end

function AUDIO.REQUEST_SCRIPT_AUDIO_BANK(audioBank, p1, p2)
  return native.invoke(
    Type.Bool, 78, false,
    arg(Type.String, audioBank),
    arg(Type.Bool, p1),
    arg(Type.Any, p2)
  )
end

function AUDIO.HINT_MISSION_AUDIO_BANK(audioBank, p1, p2)
  return native.invoke(
    Type.Bool, 79, false,
    arg(Type.String, audioBank),
    arg(Type.Bool, p1),
    arg(Type.Any, p2)
  )
end

function AUDIO.HINT_AMBIENT_AUDIO_BANK(audioBank, p1, p2)
  return native.invoke(
    Type.Bool, 80, false,
    arg(Type.String, audioBank),
    arg(Type.Bool, p1),
    arg(Type.Any, p2)
  )
end

function AUDIO.HINT_SCRIPT_AUDIO_BANK(audioBank, p1, p2)
  return native.invoke(
    Type.Bool, 81, false,
    arg(Type.String, audioBank),
    arg(Type.Bool, p1),
    arg(Type.Any, p2)
  )
end

function AUDIO.RELEASE_MISSION_AUDIO_BANK()
  native.invoke(
    Type.Void, 82, false
  )
end

function AUDIO.RELEASE_AMBIENT_AUDIO_BANK()
  native.invoke(
    Type.Void, 83, false
  )
end

function AUDIO.RELEASE_NAMED_SCRIPT_AUDIO_BANK(audioBank)
  native.invoke(
    Type.Void, 84, false,
    arg(Type.String, audioBank)
  )
end

function AUDIO.RELEASE_SCRIPT_AUDIO_BANK()
  native.invoke(
    Type.Void, 85, false
  )
end

function AUDIO.UNHINT_AMBIENT_AUDIO_BANK()
  native.invoke(
    Type.Void, 86, false
  )
end

function AUDIO.UNHINT_SCRIPT_AUDIO_BANK()
  native.invoke(
    Type.Void, 87, false
  )
end

function AUDIO.UNHINT_NAMED_SCRIPT_AUDIO_BANK(audioBank)
  native.invoke(
    Type.Void, 88, false,
    arg(Type.String, audioBank)
  )
end

function AUDIO.GET_SOUND_ID()
  return native.invoke(
    Type.Int, 89, false
  )
end

function AUDIO.RELEASE_SOUND_ID(soundId)
  native.invoke(
    Type.Void, 90, false,
    arg(Type.Int, soundId)
  )
end

function AUDIO.PLAY_SOUND(soundId, audioName, audioRef, p3, p4, p5)
  native.invoke(
    Type.Void, 91, false,
    arg(Type.Int, soundId),
    arg(Type.String, audioName),
    arg(Type.String, audioRef),
    arg(Type.Bool, p3),
    arg(Type.Any, p4),
    arg(Type.Bool, p5)
  )
end

function AUDIO.PLAY_SOUND_FRONTEND(soundId, audioName, audioRef, p3)
  native.invoke(
    Type.Void, 92, false,
    arg(Type.Int, soundId),
    arg(Type.String, audioName),
    arg(Type.String, audioRef),
    arg(Type.Bool, p3)
  )
end

function AUDIO.PLAY_DEFERRED_SOUND_FRONTEND(soundName, soundsetName)
  native.invoke(
    Type.Void, 93, false,
    arg(Type.String, soundName),
    arg(Type.String, soundsetName)
  )
end

function AUDIO.PLAY_SOUND_FROM_ENTITY(soundId, audioName, entity, audioRef, isNetwork, p5)
  native.invoke(
    Type.Void, 94, false,
    arg(Type.Int, soundId),
    arg(Type.String, audioName),
    arg(Type.Entity, entity),
    arg(Type.String, audioRef),
    arg(Type.Bool, isNetwork),
    arg(Type.Any, p5)
  )
end

function AUDIO.PLAY_SOUND_FROM_ENTITY_HASH(soundId, model, entity, soundSetHash, p4, p5)
  native.invoke(
    Type.Void, 95, false,
    arg(Type.Int, soundId),
    arg(Type.Hash, model),
    arg(Type.Entity, entity),
    arg(Type.Hash, soundSetHash),
    arg(Type.Any, p4),
    arg(Type.Any, p5)
  )
end

function AUDIO.PLAY_SOUND_FROM_COORD(soundId, audioName, x, y, z, audioRef, isNetwork, range, p8)
  native.invoke(
    Type.Void, 96, false,
    arg(Type.Int, soundId),
    arg(Type.String, audioName),
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, z),
    arg(Type.String, audioRef),
    arg(Type.Bool, isNetwork),
    arg(Type.Int, range),
    arg(Type.Bool, p8)
  )
end

function AUDIO.UPDATE_SOUND_COORD(soundId, x, y, z)
  native.invoke(
    Type.Void, 97, false,
    arg(Type.Int, soundId),
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, z)
  )
end

function AUDIO.STOP_SOUND(soundId)
  native.invoke(
    Type.Void, 98, false,
    arg(Type.Int, soundId)
  )
end

function AUDIO.GET_NETWORK_ID_FROM_SOUND_ID(soundId)
  return native.invoke(
    Type.Int, 99, false,
    arg(Type.Int, soundId)
  )
end

function AUDIO.GET_SOUND_ID_FROM_NETWORK_ID(netId)
  return native.invoke(
    Type.Int, 100, false,
    arg(Type.Int, netId)
  )
end

function AUDIO.SET_VARIABLE_ON_SOUND(soundId, variable, p2)
  native.invoke(
    Type.Void, 101, false,
    arg(Type.Int, soundId),
    arg(Type.String, variable),
    arg(Type.Float, p2)
  )
end

function AUDIO.SET_VARIABLE_ON_STREAM(variable, p1)
  native.invoke(
    Type.Void, 102, false,
    arg(Type.String, variable),
    arg(Type.Float, p1)
  )
end

function AUDIO.OVERRIDE_UNDERWATER_STREAM(p0, p1)
  native.invoke(
    Type.Void, 103, false,
    arg(Type.String, p0),
    arg(Type.Bool, p1)
  )
end

function AUDIO.SET_VARIABLE_ON_UNDER_WATER_STREAM(variableName, value)
  native.invoke(
    Type.Void, 104, false,
    arg(Type.String, variableName),
    arg(Type.Float, value)
  )
end

function AUDIO.HAS_SOUND_FINISHED(soundId)
  return native.invoke(
    Type.Bool, 105, false,
    arg(Type.Int, soundId)
  )
end

function AUDIO.PLAY_PED_AMBIENT_SPEECH_NATIVE(ped, speechName, speechParam, p3)
  native.invoke(
    Type.Void, 106, false,
    arg(Type.Ped, ped),
    arg(Type.String, speechName),
    arg(Type.String, speechParam),
    arg(Type.Any, p3)
  )
end

function AUDIO.PLAY_PED_AMBIENT_SPEECH_AND_CLONE_NATIVE(ped, speechName, speechParam, p3)
  native.invoke(
    Type.Void, 107, false,
    arg(Type.Ped, ped),
    arg(Type.String, speechName),
    arg(Type.String, speechParam),
    arg(Type.Any, p3)
  )
end

function AUDIO.PLAY_PED_AMBIENT_SPEECH_WITH_VOICE_NATIVE(ped, speechName, voiceName, speechParam, p4)
  native.invoke(
    Type.Void, 108, false,
    arg(Type.Ped, ped),
    arg(Type.String, speechName),
    arg(Type.String, voiceName),
    arg(Type.String, speechParam),
    arg(Type.Bool, p4)
  )
end

function AUDIO.PLAY_AMBIENT_SPEECH_FROM_POSITION_NATIVE(speechName, voiceName, x, y, z, speechParam)
  native.invoke(
    Type.Void, 109, false,
    arg(Type.String, speechName),
    arg(Type.String, voiceName),
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, z),
    arg(Type.String, speechParam)
  )
end

function AUDIO.OVERRIDE_TREVOR_RAGE(voiceEffect)
  native.invoke(
    Type.Void, 110, false,
    arg(Type.String, voiceEffect)
  )
end

function AUDIO.RESET_TREVOR_RAGE()
  native.invoke(
    Type.Void, 111, false
  )
end

function AUDIO.SET_PLAYER_ANGRY(ped, toggle)
  native.invoke(
    Type.Void, 112, false,
    arg(Type.Ped, ped),
    arg(Type.Bool, toggle)
  )
end

function AUDIO.PLAY_PAIN(ped, painID, p1, p3)
  native.invoke(
    Type.Void, 113, false,
    arg(Type.Ped, ped),
    arg(Type.Int, painID),
    arg(Type.Int, p1),
    arg(Type.Any, p3)
  )
end

function AUDIO.RELEASE_WEAPON_AUDIO()
  native.invoke(
    Type.Void, 114, false
  )
end

function AUDIO.ACTIVATE_AUDIO_SLOWMO_MODE(mode)
  native.invoke(
    Type.Void, 115, false,
    arg(Type.String, mode)
  )
end

function AUDIO.DEACTIVATE_AUDIO_SLOWMO_MODE(mode)
  native.invoke(
    Type.Void, 116, false,
    arg(Type.String, mode)
  )
end

function AUDIO.SET_AMBIENT_VOICE_NAME(ped, name)
  native.invoke(
    Type.Void, 117, false,
    arg(Type.Ped, ped),
    arg(Type.String, name)
  )
end

function AUDIO.SET_AMBIENT_VOICE_NAME_HASH(ped, hash)
  native.invoke(
    Type.Void, 118, false,
    arg(Type.Ped, ped),
    arg(Type.Hash, hash)
  )
end

function AUDIO.GET_AMBIENT_VOICE_NAME_HASH(ped)
  return native.invoke(
    Type.Hash, 119, false,
    arg(Type.Ped, ped)
  )
end

function AUDIO.SET_PED_VOICE_FULL(ped)
  native.invoke(
    Type.Void, 120, false,
    arg(Type.Ped, ped)
  )
end

function AUDIO.SET_PED_RACE_AND_VOICE_GROUP(ped, p1, voiceGroup)
  native.invoke(
    Type.Void, 121, false,
    arg(Type.Ped, ped),
    arg(Type.Int, p1),
    arg(Type.Hash, voiceGroup)
  )
end

function AUDIO.SET_PED_VOICE_GROUP(ped, voiceGroupHash)
  native.invoke(
    Type.Void, 122, false,
    arg(Type.Ped, ped),
    arg(Type.Hash, voiceGroupHash)
  )
end

function AUDIO.SET_PED_VOICE_GROUP_FROM_RACE_TO_PVG(ped, voiceGroupHash)
  native.invoke(
    Type.Void, 123, false,
    arg(Type.Ped, ped),
    arg(Type.Hash, voiceGroupHash)
  )
end

function AUDIO.SET_PED_GENDER(ped, p1)
  native.invoke(
    Type.Void, 124, false,
    arg(Type.Ped, ped),
    arg(Type.Bool, p1)
  )
end

function AUDIO.STOP_CURRENT_PLAYING_SPEECH(ped)
  native.invoke(
    Type.Void, 125, false,
    arg(Type.Ped, ped)
  )
end

function AUDIO.STOP_CURRENT_PLAYING_AMBIENT_SPEECH(ped)
  native.invoke(
    Type.Void, 126, false,
    arg(Type.Ped, ped)
  )
end

function AUDIO.IS_AMBIENT_SPEECH_PLAYING(ped)
  return native.invoke(
    Type.Bool, 127, false,
    arg(Type.Ped, ped)
  )
end

function AUDIO.IS_SCRIPTED_SPEECH_PLAYING(p0)
  return native.invoke(
    Type.Bool, 128, false,
    arg(Type.Ped, p0)
  )
end

function AUDIO.IS_ANY_SPEECH_PLAYING(ped)
  return native.invoke(
    Type.Bool, 129, false,
    arg(Type.Ped, ped)
  )
end

function AUDIO.IS_ANY_POSITIONAL_SPEECH_PLAYING()
  return native.invoke(
    Type.Bool, 130, false
  )
end

function AUDIO.DOES_CONTEXT_EXIST_FOR_THIS_PED(ped, speechName, p2)
  return native.invoke(
    Type.Bool, 131, false,
    arg(Type.Ped, ped),
    arg(Type.String, speechName),
    arg(Type.Bool, p2)
  )
end

function AUDIO.IS_PED_IN_CURRENT_CONVERSATION(ped)
  return native.invoke(
    Type.Bool, 132, false,
    arg(Type.Ped, ped)
  )
end

function AUDIO.SET_PED_IS_DRUNK(ped, toggle)
  native.invoke(
    Type.Void, 133, false,
    arg(Type.Ped, ped),
    arg(Type.Bool, toggle)
  )
end

function AUDIO.PLAY_ANIMAL_VOCALIZATION(pedHandle, p1, speechName)
  native.invoke(
    Type.Void, 134, false,
    arg(Type.Ped, pedHandle),
    arg(Type.Int, p1),
    arg(Type.String, speechName)
  )
end

function AUDIO.IS_ANIMAL_VOCALIZATION_PLAYING(pedHandle)
  return native.invoke(
    Type.Bool, 135, false,
    arg(Type.Ped, pedHandle)
  )
end

function AUDIO.SET_ANIMAL_MOOD(animal, mood)
  native.invoke(
    Type.Void, 136, false,
    arg(Type.Ped, animal),
    arg(Type.Int, mood)
  )
end

function AUDIO.IS_MOBILE_PHONE_RADIO_ACTIVE()
  return native.invoke(
    Type.Bool, 137, false
  )
end

function AUDIO.SET_MOBILE_PHONE_RADIO_STATE(state)
  native.invoke(
    Type.Void, 138, false,
    arg(Type.Bool, state)
  )
end

function AUDIO.GET_PLAYER_RADIO_STATION_INDEX()
  return native.invoke(
    Type.Int, 139, false
  )
end

function AUDIO.GET_PLAYER_RADIO_STATION_NAME()
  return native.invoke(
    Type.String, 140, false
  )
end

function AUDIO.GET_RADIO_STATION_NAME(radioStation)
  return native.invoke(
    Type.String, 141, false,
    arg(Type.Int, radioStation)
  )
end

function AUDIO.GET_PLAYER_RADIO_STATION_GENRE()
  return native.invoke(
    Type.Int, 142, false
  )
end

function AUDIO.IS_RADIO_RETUNING()
  return native.invoke(
    Type.Bool, 143, false
  )
end

function AUDIO.IS_RADIO_FADED_OUT()
  return native.invoke(
    Type.Bool, 144, false
  )
end

function AUDIO.SET_RADIO_RETUNE_UP()
  native.invoke(
    Type.Void, 145, false
  )
end

function AUDIO.SET_RADIO_RETUNE_DOWN()
  native.invoke(
    Type.Void, 146, false
  )
end

function AUDIO.SET_RADIO_TO_STATION_NAME(stationName)
  native.invoke(
    Type.Void, 147, false,
    arg(Type.String, stationName)
  )
end

function AUDIO.SET_VEH_RADIO_STATION(vehicle, radioStation)
  native.invoke(
    Type.Void, 148, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.String, radioStation)
  )
end

function AUDIO.SET_VEH_HAS_NORMAL_RADIO(vehicle)
  native.invoke(
    Type.Void, 149, false,
    arg(Type.Vehicle, vehicle)
  )
end

function AUDIO.IS_VEHICLE_RADIO_ON(vehicle)
  return native.invoke(
    Type.Bool, 150, false,
    arg(Type.Vehicle, vehicle)
  )
end

function AUDIO.SET_VEH_FORCED_RADIO_THIS_FRAME(vehicle)
  native.invoke(
    Type.Void, 151, false,
    arg(Type.Vehicle, vehicle)
  )
end

function AUDIO.SET_EMITTER_RADIO_STATION(emitterName, radioStation, p2)
  native.invoke(
    Type.Void, 152, false,
    arg(Type.String, emitterName),
    arg(Type.String, radioStation),
    arg(Type.Any, p2)
  )
end

function AUDIO.SET_STATIC_EMITTER_ENABLED(emitterName, toggle)
  native.invoke(
    Type.Void, 153, false,
    arg(Type.String, emitterName),
    arg(Type.Bool, toggle)
  )
end

function AUDIO.LINK_STATIC_EMITTER_TO_ENTITY(emitterName, entity)
  native.invoke(
    Type.Void, 154, false,
    arg(Type.String, emitterName),
    arg(Type.Entity, entity)
  )
end

function AUDIO.SET_RADIO_TO_STATION_INDEX(radioStation)
  native.invoke(
    Type.Void, 155, false,
    arg(Type.Int, radioStation)
  )
end

function AUDIO.SET_FRONTEND_RADIO_ACTIVE(active)
  native.invoke(
    Type.Void, 156, false,
    arg(Type.Bool, active)
  )
end

function AUDIO.UNLOCK_MISSION_NEWS_STORY(newsStory)
  native.invoke(
    Type.Void, 157, false,
    arg(Type.Int, newsStory)
  )
end

function AUDIO.IS_MISSION_NEWS_STORY_UNLOCKED(newsStory)
  return native.invoke(
    Type.Bool, 158, false,
    arg(Type.Int, newsStory)
  )
end

function AUDIO.GET_AUDIBLE_MUSIC_TRACK_TEXT_ID()
  return native.invoke(
    Type.Int, 159, false
  )
end

function AUDIO.PLAY_END_CREDITS_MUSIC(play)
  native.invoke(
    Type.Void, 160, false,
    arg(Type.Bool, play)
  )
end

function AUDIO.SKIP_RADIO_FORWARD()
  native.invoke(
    Type.Void, 161, false
  )
end

function AUDIO.FREEZE_RADIO_STATION(radioStation)
  native.invoke(
    Type.Void, 162, false,
    arg(Type.String, radioStation)
  )
end

function AUDIO.UNFREEZE_RADIO_STATION(radioStation)
  native.invoke(
    Type.Void, 163, false,
    arg(Type.String, radioStation)
  )
end

function AUDIO.SET_RADIO_AUTO_UNFREEZE(toggle)
  native.invoke(
    Type.Void, 164, false,
    arg(Type.Bool, toggle)
  )
end

function AUDIO.SET_INITIAL_PLAYER_STATION(radioStation)
  native.invoke(
    Type.Void, 165, false,
    arg(Type.String, radioStation)
  )
end

function AUDIO.SET_USER_RADIO_CONTROL_ENABLED(toggle)
  native.invoke(
    Type.Void, 166, false,
    arg(Type.Bool, toggle)
  )
end

function AUDIO.SET_RADIO_TRACK(radioStation, radioTrack)
  native.invoke(
    Type.Void, 167, false,
    arg(Type.String, radioStation),
    arg(Type.String, radioTrack)
  )
end

function AUDIO.SET_RADIO_TRACK_WITH_START_OFFSET(radioStationName, mixName, p2)
  native.invoke(
    Type.Void, 168, false,
    arg(Type.String, radioStationName),
    arg(Type.String, mixName),
    arg(Type.Int, p2)
  )
end

function AUDIO.SET_NEXT_RADIO_TRACK(radioName, radioTrack, p2, p3)
  native.invoke(
    Type.Void, 169, false,
    arg(Type.String, radioName),
    arg(Type.String, radioTrack),
    arg(Type.String, p2),
    arg(Type.String, p3)
  )
end

function AUDIO.SET_VEHICLE_RADIO_LOUD(vehicle, toggle)
  native.invoke(
    Type.Void, 170, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Bool, toggle)
  )
end

function AUDIO.CAN_VEHICLE_RECEIVE_CB_RADIO(vehicle)
  return native.invoke(
    Type.Bool, 171, false,
    arg(Type.Vehicle, vehicle)
  )
end

function AUDIO.SET_MOBILE_RADIO_ENABLED_DURING_GAMEPLAY(toggle)
  native.invoke(
    Type.Void, 172, false,
    arg(Type.Bool, toggle)
  )
end

function AUDIO.DOES_PLAYER_VEH_HAVE_RADIO()
  return native.invoke(
    Type.Bool, 173, false
  )
end

function AUDIO.IS_PLAYER_VEH_RADIO_ENABLE()
  return native.invoke(
    Type.Bool, 174, false
  )
end

function AUDIO.SET_VEHICLE_RADIO_ENABLED(vehicle, toggle)
  native.invoke(
    Type.Void, 175, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Bool, toggle)
  )
end

function AUDIO.SET_POSITIONED_PLAYER_VEHICLE_RADIO_EMITTER_ENABLED(p0)
  native.invoke(
    Type.Void, 176, false,
    arg(Type.Any, p0)
  )
end

function AUDIO.SET_CUSTOM_RADIO_TRACK_LIST(radioStation, trackListName, p2)
  native.invoke(
    Type.Void, 177, false,
    arg(Type.String, radioStation),
    arg(Type.String, trackListName),
    arg(Type.Bool, p2)
  )
end

function AUDIO.CLEAR_CUSTOM_RADIO_TRACK_LIST(radioStation)
  native.invoke(
    Type.Void, 178, false,
    arg(Type.String, radioStation)
  )
end

function AUDIO.GET_NUM_UNLOCKED_RADIO_STATIONS()
  return native.invoke(
    Type.Int, 179, false
  )
end

function AUDIO.FIND_RADIO_STATION_INDEX(stationNameHash)
  return native.invoke(
    Type.Int, 180, false,
    arg(Type.Hash, stationNameHash)
  )
end

function AUDIO.SET_RADIO_STATION_MUSIC_ONLY(radioStation, toggle)
  native.invoke(
    Type.Void, 181, false,
    arg(Type.String, radioStation),
    arg(Type.Bool, toggle)
  )
end

function AUDIO.SET_RADIO_FRONTEND_FADE_TIME(fadeTime)
  native.invoke(
    Type.Void, 182, false,
    arg(Type.Float, fadeTime)
  )
end

function AUDIO.UNLOCK_RADIO_STATION_TRACK_LIST(radioStation, trackListName)
  native.invoke(
    Type.Void, 183, false,
    arg(Type.String, radioStation),
    arg(Type.String, trackListName)
  )
end

function AUDIO.LOCK_RADIO_STATION_TRACK_LIST(radioStation, trackListName)
  native.invoke(
    Type.Void, 184, false,
    arg(Type.String, radioStation),
    arg(Type.String, trackListName)
  )
end

function AUDIO.UPDATE_UNLOCKABLE_DJ_RADIO_TRACKS(enableMixes)
  native.invoke(
    Type.Void, 185, false,
    arg(Type.Bool, enableMixes)
  )
end

function AUDIO.LOCK_RADIO_STATION(radioStationName, toggle)
  native.invoke(
    Type.Void, 186, false,
    arg(Type.String, radioStationName),
    arg(Type.Bool, toggle)
  )
end

function AUDIO.SET_RADIO_STATION_AS_FAVOURITE(radioStation, toggle)
  native.invoke(
    Type.Void, 187, false,
    arg(Type.String, radioStation),
    arg(Type.Bool, toggle)
  )
end

function AUDIO.IS_RADIO_STATION_FAVOURITED(radioStation)
  return native.invoke(
    Type.Bool, 188, false,
    arg(Type.String, radioStation)
  )
end

function AUDIO.GET_NEXT_AUDIBLE_BEAT(out1, out2, out3)
  return native.invoke(
    Type.Bool, 189, false,
    ref(Type.Float, out1),
    ref(Type.Float, out2),
    ref(Type.Int, out3)
  )
end

function AUDIO.FORCE_MUSIC_TRACK_LIST(radioStation, trackListName, milliseconds)
  native.invoke(
    Type.Void, 190, false,
    arg(Type.String, radioStation),
    arg(Type.String, trackListName),
    arg(Type.Int, milliseconds)
  )
end

function AUDIO.GET_CURRENT_TRACK_PLAY_TIME(radioStationName)
  return native.invoke(
    Type.Int, 191, false,
    arg(Type.String, radioStationName)
  )
end

function AUDIO.GET_CURRENT_TRACK_SOUND_NAME(radioStationName)
  return native.invoke(
    Type.Hash, 192, false,
    arg(Type.String, radioStationName)
  )
end

function AUDIO.SET_VEHICLE_MISSILE_WARNING_ENABLED(vehicle, toggle)
  native.invoke(
    Type.Void, 193, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Bool, toggle)
  )
end

function AUDIO.SET_AMBIENT_ZONE_STATE(zoneName, p1, p2)
  native.invoke(
    Type.Void, 194, false,
    arg(Type.String, zoneName),
    arg(Type.Bool, p1),
    arg(Type.Bool, p2)
  )
end

function AUDIO.CLEAR_AMBIENT_ZONE_STATE(zoneName, p1)
  native.invoke(
    Type.Void, 195, false,
    arg(Type.String, zoneName),
    arg(Type.Bool, p1)
  )
end

function AUDIO.SET_AMBIENT_ZONE_LIST_STATE(ambientZone, p1, p2)
  native.invoke(
    Type.Void, 196, false,
    arg(Type.String, ambientZone),
    arg(Type.Bool, p1),
    arg(Type.Bool, p2)
  )
end

function AUDIO.CLEAR_AMBIENT_ZONE_LIST_STATE(ambientZone, p1)
  native.invoke(
    Type.Void, 197, false,
    arg(Type.String, ambientZone),
    arg(Type.Bool, p1)
  )
end

function AUDIO.SET_AMBIENT_ZONE_STATE_PERSISTENT(ambientZone, p1, p2)
  native.invoke(
    Type.Void, 198, false,
    arg(Type.String, ambientZone),
    arg(Type.Bool, p1),
    arg(Type.Bool, p2)
  )
end

function AUDIO.SET_AMBIENT_ZONE_LIST_STATE_PERSISTENT(ambientZone, p1, p2)
  native.invoke(
    Type.Void, 199, false,
    arg(Type.String, ambientZone),
    arg(Type.Bool, p1),
    arg(Type.Bool, p2)
  )
end

function AUDIO.IS_AMBIENT_ZONE_ENABLED(ambientZone)
  return native.invoke(
    Type.Bool, 200, false,
    arg(Type.String, ambientZone)
  )
end

function AUDIO.REFRESH_CLOSEST_OCEAN_SHORELINE()
  native.invoke(
    Type.Void, 201, false
  )
end

function AUDIO.SET_CUTSCENE_AUDIO_OVERRIDE(name)
  native.invoke(
    Type.Void, 202, false,
    arg(Type.String, name)
  )
end

function AUDIO.SET_VARIABLE_ON_SYNCH_SCENE_AUDIO(variableName, value)
  native.invoke(
    Type.Void, 203, false,
    arg(Type.String, variableName),
    arg(Type.Float, value)
  )
end

function AUDIO.PLAY_POLICE_REPORT(name, p1)
  return native.invoke(
    Type.Int, 204, false,
    arg(Type.String, name),
    arg(Type.Float, p1)
  )
end

function AUDIO.CANCEL_ALL_POLICE_REPORTS()
  native.invoke(
    Type.Void, 205, false
  )
end

function AUDIO.BLIP_SIREN(vehicle)
  native.invoke(
    Type.Void, 206, false,
    arg(Type.Vehicle, vehicle)
  )
end

function AUDIO.OVERRIDE_VEH_HORN(vehicle, override, hornHash)
  native.invoke(
    Type.Void, 207, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Bool, override),
    arg(Type.Int, hornHash)
  )
end

function AUDIO.IS_HORN_ACTIVE(vehicle)
  return native.invoke(
    Type.Bool, 208, false,
    arg(Type.Vehicle, vehicle)
  )
end

function AUDIO.SET_AGGRESSIVE_HORNS(toggle)
  native.invoke(
    Type.Void, 209, false,
    arg(Type.Bool, toggle)
  )
end

function AUDIO.SET_RADIO_POSITION_AUDIO_MUTE(p0)
  native.invoke(
    Type.Void, 210, false,
    arg(Type.Bool, p0)
  )
end

function AUDIO.SET_VEHICLE_CONVERSATIONS_PERSIST(p0, p1)
  native.invoke(
    Type.Void, 211, false,
    arg(Type.Bool, p0),
    arg(Type.Bool, p1)
  )
end

function AUDIO.SET_VEHICLE_CONVERSATIONS_PERSIST_NEW(p0, p1, p2)
  native.invoke(
    Type.Void, 212, false,
    arg(Type.Bool, p0),
    arg(Type.Bool, p1),
    arg(Type.Bool, p2)
  )
end

function AUDIO.IS_STREAM_PLAYING()
  return native.invoke(
    Type.Bool, 213, false
  )
end

function AUDIO.GET_STREAM_PLAY_TIME()
  return native.invoke(
    Type.Int, 214, false
  )
end

function AUDIO.LOAD_STREAM(streamName, soundSet)
  return native.invoke(
    Type.Bool, 215, false,
    arg(Type.String, streamName),
    arg(Type.String, soundSet)
  )
end

function AUDIO.LOAD_STREAM_WITH_START_OFFSET(streamName, startOffset, soundSet)
  return native.invoke(
    Type.Bool, 216, false,
    arg(Type.String, streamName),
    arg(Type.Int, startOffset),
    arg(Type.String, soundSet)
  )
end

function AUDIO.PLAY_STREAM_FROM_PED(ped)
  native.invoke(
    Type.Void, 217, false,
    arg(Type.Ped, ped)
  )
end

function AUDIO.PLAY_STREAM_FROM_VEHICLE(vehicle)
  native.invoke(
    Type.Void, 218, false,
    arg(Type.Vehicle, vehicle)
  )
end

function AUDIO.PLAY_STREAM_FROM_OBJECT(object)
  native.invoke(
    Type.Void, 219, false,
    arg(Type.Object, object)
  )
end

function AUDIO.PLAY_STREAM_FRONTEND()
  native.invoke(
    Type.Void, 220, false
  )
end

function AUDIO.PLAY_STREAM_FROM_POSITION(x, y, z)
  native.invoke(
    Type.Void, 221, false,
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, z)
  )
end

function AUDIO.STOP_STREAM()
  native.invoke(
    Type.Void, 222, false
  )
end

function AUDIO.STOP_PED_SPEAKING(ped, shaking)
  native.invoke(
    Type.Void, 223, false,
    arg(Type.Ped, ped),
    arg(Type.Bool, shaking)
  )
end

function AUDIO.BLOCK_ALL_SPEECH_FROM_PED(ped, p1, p2)
  native.invoke(
    Type.Void, 224, false,
    arg(Type.Ped, ped),
    arg(Type.Bool, p1),
    arg(Type.Bool, p2)
  )
end

function AUDIO.STOP_PED_SPEAKING_SYNCED(ped, p1)
  native.invoke(
    Type.Void, 225, false,
    arg(Type.Ped, ped),
    arg(Type.Bool, p1)
  )
end

function AUDIO.DISABLE_PED_PAIN_AUDIO(ped, toggle)
  native.invoke(
    Type.Void, 226, false,
    arg(Type.Ped, ped),
    arg(Type.Bool, toggle)
  )
end

function AUDIO.IS_AMBIENT_SPEECH_DISABLED(ped)
  return native.invoke(
    Type.Bool, 227, false,
    arg(Type.Ped, ped)
  )
end

function AUDIO.BLOCK_SPEECH_CONTEXT_GROUP(p0, p1)
  native.invoke(
    Type.Void, 228, false,
    arg(Type.String, p0),
    arg(Type.Int, p1)
  )
end

function AUDIO.UNBLOCK_SPEECH_CONTEXT_GROUP(p0)
  native.invoke(
    Type.Void, 229, false,
    arg(Type.String, p0)
  )
end

function AUDIO.SET_SIREN_WITH_NO_DRIVER(vehicle, toggle)
  native.invoke(
    Type.Void, 230, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Bool, toggle)
  )
end

function AUDIO.SET_SIREN_BYPASS_MP_DRIVER_CHECK(vehicle, toggle)
  native.invoke(
    Type.Void, 231, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Bool, toggle)
  )
end

function AUDIO.TRIGGER_SIREN_AUDIO(vehicle)
  native.invoke(
    Type.Void, 232, false,
    arg(Type.Vehicle, vehicle)
  )
end

function AUDIO.SET_HORN_PERMANENTLY_ON(vehicle)
  native.invoke(
    Type.Void, 233, false,
    arg(Type.Vehicle, vehicle)
  )
end

function AUDIO.SET_HORN_ENABLED(vehicle, toggle)
  native.invoke(
    Type.Void, 234, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Bool, toggle)
  )
end

function AUDIO.SET_AUDIO_VEHICLE_PRIORITY(vehicle, p1)
  native.invoke(
    Type.Void, 235, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Any, p1)
  )
end

function AUDIO.SET_HORN_PERMANENTLY_ON_TIME(vehicle, time)
  native.invoke(
    Type.Void, 236, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Float, time)
  )
end

function AUDIO.USE_SIREN_AS_HORN(vehicle, toggle)
  native.invoke(
    Type.Void, 237, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Bool, toggle)
  )
end

function AUDIO.FORCE_USE_AUDIO_GAME_OBJECT(vehicle, audioName)
  native.invoke(
    Type.Void, 238, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.String, audioName)
  )
end

function AUDIO.PRELOAD_VEHICLE_AUDIO_BANK(vehicleModel)
  native.invoke(
    Type.Void, 239, false,
    arg(Type.Hash, vehicleModel)
  )
end

function AUDIO.SET_VEHICLE_STARTUP_REV_SOUND(vehicle, p1, p2)
  native.invoke(
    Type.Void, 240, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.String, p1),
    arg(Type.String, p2)
  )
end

function AUDIO.RESET_VEHICLE_STARTUP_REV_SOUND(vehicle)
  native.invoke(
    Type.Void, 241, false,
    arg(Type.Vehicle, vehicle)
  )
end

function AUDIO.SET_VEHICLE_FORCE_REVERSE_WARNING(p0, p1)
  native.invoke(
    Type.Void, 242, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1)
  )
end

function AUDIO.IS_VEHICLE_AUDIBLY_DAMAGED(vehicle)
  return native.invoke(
    Type.Bool, 243, false,
    arg(Type.Vehicle, vehicle)
  )
end

function AUDIO.SET_VEHICLE_AUDIO_ENGINE_DAMAGE_FACTOR(vehicle, damageFactor)
  native.invoke(
    Type.Void, 244, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Float, damageFactor)
  )
end

function AUDIO.SET_VEHICLE_AUDIO_BODY_DAMAGE_FACTOR(vehicle, intensity)
  native.invoke(
    Type.Void, 245, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Float, intensity)
  )
end

function AUDIO.ENABLE_VEHICLE_FANBELT_DAMAGE(vehicle, toggle)
  native.invoke(
    Type.Void, 246, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Bool, toggle)
  )
end

function AUDIO.ENABLE_VEHICLE_EXHAUST_POPS(vehicle, toggle)
  native.invoke(
    Type.Void, 247, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Bool, toggle)
  )
end

function AUDIO.SET_VEHICLE_BOOST_ACTIVE(vehicle, toggle)
  native.invoke(
    Type.Void, 248, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Bool, toggle)
  )
end

function AUDIO.SET_PLAYER_VEHICLE_ALARM_AUDIO_ACTIVE(vehicle, toggle)
  native.invoke(
    Type.Void, 249, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Bool, toggle)
  )
end

function AUDIO.SET_SCRIPT_UPDATE_DOOR_AUDIO(doorHash, toggle)
  native.invoke(
    Type.Void, 250, false,
    arg(Type.Hash, doorHash),
    arg(Type.Bool, toggle)
  )
end

function AUDIO.PLAY_VEHICLE_DOOR_OPEN_SOUND(vehicle, doorId)
  native.invoke(
    Type.Void, 251, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Int, doorId)
  )
end

function AUDIO.PLAY_VEHICLE_DOOR_CLOSE_SOUND(vehicle, doorId)
  native.invoke(
    Type.Void, 252, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Int, doorId)
  )
end

function AUDIO.ENABLE_STALL_WARNING_SOUNDS(vehicle, toggle)
  native.invoke(
    Type.Void, 253, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Bool, toggle)
  )
end

function AUDIO._ENABLE_DRAG_RACE_STATIONARY_WARNING_SOUNDS(vehicle, enable)
  native.invoke(
    Type.Void, 254, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Bool, enable)
  )
end

function AUDIO.IS_GAME_IN_CONTROL_OF_MUSIC()
  return native.invoke(
    Type.Bool, 255, false
  )
end

function AUDIO.SET_GPS_ACTIVE(active)
  native.invoke(
    Type.Void, 256, false,
    arg(Type.Bool, active)
  )
end

function AUDIO.PLAY_MISSION_COMPLETE_AUDIO(audioName)
  native.invoke(
    Type.Void, 257, false,
    arg(Type.String, audioName)
  )
end

function AUDIO.IS_MISSION_COMPLETE_PLAYING()
  return native.invoke(
    Type.Bool, 258, false
  )
end

function AUDIO.IS_MISSION_COMPLETE_READY_FOR_UI()
  return native.invoke(
    Type.Bool, 259, false
  )
end

function AUDIO.BLOCK_DEATH_JINGLE(toggle)
  native.invoke(
    Type.Void, 260, false,
    arg(Type.Bool, toggle)
  )
end

function AUDIO.START_AUDIO_SCENE(scene)
  return native.invoke(
    Type.Bool, 261, false,
    arg(Type.String, scene)
  )
end

function AUDIO.STOP_AUDIO_SCENE(scene)
  native.invoke(
    Type.Void, 262, false,
    arg(Type.String, scene)
  )
end

function AUDIO.STOP_AUDIO_SCENES()
  native.invoke(
    Type.Void, 263, false
  )
end

function AUDIO.IS_AUDIO_SCENE_ACTIVE(scene)
  return native.invoke(
    Type.Bool, 264, false,
    arg(Type.String, scene)
  )
end

function AUDIO.SET_AUDIO_SCENE_VARIABLE(scene, variable, value)
  native.invoke(
    Type.Void, 265, false,
    arg(Type.String, scene),
    arg(Type.String, variable),
    arg(Type.Float, value)
  )
end

function AUDIO.SET_AUDIO_SCRIPT_CLEANUP_TIME(time)
  native.invoke(
    Type.Void, 266, false,
    arg(Type.Int, time)
  )
end

function AUDIO.ADD_ENTITY_TO_AUDIO_MIX_GROUP(entity, groupName, p2)
  native.invoke(
    Type.Void, 267, false,
    arg(Type.Entity, entity),
    arg(Type.String, groupName),
    arg(Type.Float, p2)
  )
end

function AUDIO.REMOVE_ENTITY_FROM_AUDIO_MIX_GROUP(entity, p1)
  native.invoke(
    Type.Void, 268, false,
    arg(Type.Entity, entity),
    arg(Type.Float, p1)
  )
end

function AUDIO.AUDIO_IS_MUSIC_PLAYING()
  return native.invoke(
    Type.Bool, 269, false
  )
end

function AUDIO.AUDIO_IS_SCRIPTED_MUSIC_PLAYING()
  return native.invoke(
    Type.Bool, 270, false
  )
end

function AUDIO.PREPARE_MUSIC_EVENT(eventName)
  return native.invoke(
    Type.Bool, 271, false,
    arg(Type.String, eventName)
  )
end

function AUDIO.CANCEL_MUSIC_EVENT(eventName)
  return native.invoke(
    Type.Bool, 272, false,
    arg(Type.String, eventName)
  )
end

function AUDIO.TRIGGER_MUSIC_EVENT(eventName)
  return native.invoke(
    Type.Bool, 273, false,
    arg(Type.String, eventName)
  )
end

function AUDIO.IS_MUSIC_ONESHOT_PLAYING()
  return native.invoke(
    Type.Bool, 274, false
  )
end

function AUDIO.GET_MUSIC_PLAYTIME()
  return native.invoke(
    Type.Int, 275, false
  )
end

function AUDIO.SET_GLOBAL_RADIO_SIGNAL_LEVEL(p0)
  native.invoke(
    Type.Void, 276, false,
    arg(Type.Any, p0)
  )
end

function AUDIO.RECORD_BROKEN_GLASS(x, y, z, radius)
  native.invoke(
    Type.Void, 277, false,
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, z),
    arg(Type.Float, radius)
  )
end

function AUDIO.CLEAR_ALL_BROKEN_GLASS()
  native.invoke(
    Type.Void, 278, false
  )
end

function AUDIO.SCRIPT_OVERRIDES_WIND_ELEVATION(p0, p1)
  native.invoke(
    Type.Void, 279, false,
    arg(Type.Bool, p0),
    arg(Type.Any, p1)
  )
end

function AUDIO.SET_PED_WALLA_DENSITY(p0, p1)
  native.invoke(
    Type.Void, 280, false,
    arg(Type.Float, p0),
    arg(Type.Float, p1)
  )
end

function AUDIO.SET_PED_INTERIOR_WALLA_DENSITY(p0, p1)
  native.invoke(
    Type.Void, 281, false,
    arg(Type.Float, p0),
    arg(Type.Float, p1)
  )
end

function AUDIO.FORCE_PED_PANIC_WALLA()
  native.invoke(
    Type.Void, 282, false
  )
end

function AUDIO.PREPARE_ALARM(alarmName)
  return native.invoke(
    Type.Bool, 283, false,
    arg(Type.String, alarmName)
  )
end

function AUDIO.START_ALARM(alarmName, p2)
  native.invoke(
    Type.Void, 284, false,
    arg(Type.String, alarmName),
    arg(Type.Bool, p2)
  )
end

function AUDIO.STOP_ALARM(alarmName, toggle)
  native.invoke(
    Type.Void, 285, false,
    arg(Type.String, alarmName),
    arg(Type.Bool, toggle)
  )
end

function AUDIO.STOP_ALL_ALARMS(stop)
  native.invoke(
    Type.Void, 286, false,
    arg(Type.Bool, stop)
  )
end

function AUDIO.IS_ALARM_PLAYING(alarmName)
  return native.invoke(
    Type.Bool, 287, false,
    arg(Type.String, alarmName)
  )
end

function AUDIO.GET_VEHICLE_DEFAULT_HORN(vehicle)
  return native.invoke(
    Type.Hash, 288, false,
    arg(Type.Vehicle, vehicle)
  )
end

function AUDIO.GET_VEHICLE_DEFAULT_HORN_IGNORE_MODS(vehicle)
  return native.invoke(
    Type.Hash, 289, false,
    arg(Type.Vehicle, vehicle)
  )
end

function AUDIO.RESET_PED_AUDIO_FLAGS(ped)
  native.invoke(
    Type.Void, 290, false,
    arg(Type.Ped, ped)
  )
end

function AUDIO.SET_PED_FOOTSTEPS_EVENTS_ENABLED(ped, toggle)
  native.invoke(
    Type.Void, 291, false,
    arg(Type.Ped, ped),
    arg(Type.Bool, toggle)
  )
end

function AUDIO.SET_PED_CLOTH_EVENTS_ENABLED(ped, toggle)
  native.invoke(
    Type.Void, 292, false,
    arg(Type.Ped, ped),
    arg(Type.Bool, toggle)
  )
end

function AUDIO.OVERRIDE_PLAYER_GROUND_MATERIAL(hash, toggle)
  native.invoke(
    Type.Void, 293, false,
    arg(Type.Hash, hash),
    arg(Type.Bool, toggle)
  )
end

function AUDIO.USE_FOOTSTEP_SCRIPT_SWEETENERS(ped, p1, hash)
  native.invoke(
    Type.Void, 294, false,
    arg(Type.Ped, ped),
    arg(Type.Bool, p1),
    arg(Type.Hash, hash)
  )
end

function AUDIO.OVERRIDE_MICROPHONE_SETTINGS(hash, toggle)
  native.invoke(
    Type.Void, 295, false,
    arg(Type.Hash, hash),
    arg(Type.Bool, toggle)
  )
end

function AUDIO.FREEZE_MICROPHONE()
  native.invoke(
    Type.Void, 296, false
  )
end

function AUDIO.DISTANT_COP_CAR_SIRENS(value)
  native.invoke(
    Type.Void, 297, false,
    arg(Type.Bool, value)
  )
end

function AUDIO.SET_SIREN_CAN_BE_CONTROLLED_BY_AUDIO(vehicle, p1)
  native.invoke(
    Type.Void, 298, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Bool, p1)
  )
end

function AUDIO.ENABLE_STUNT_JUMP_AUDIO()
  native.invoke(
    Type.Void, 299, false
  )
end

function AUDIO.SET_AUDIO_FLAG(flagName, toggle)
  native.invoke(
    Type.Void, 300, false,
    arg(Type.String, flagName),
    arg(Type.Bool, toggle)
  )
end

function AUDIO.PREPARE_SYNCHRONIZED_AUDIO_EVENT(audioEvent, p1)
  return native.invoke(
    Type.Bool, 301, false,
    arg(Type.String, audioEvent),
    arg(Type.Any, p1)
  )
end

function AUDIO.PREPARE_SYNCHRONIZED_AUDIO_EVENT_FOR_SCENE(sceneID, audioEvent)
  return native.invoke(
    Type.Bool, 302, false,
    arg(Type.Int, sceneID),
    arg(Type.String, audioEvent)
  )
end

function AUDIO.PLAY_SYNCHRONIZED_AUDIO_EVENT(sceneID)
  return native.invoke(
    Type.Bool, 303, false,
    arg(Type.Int, sceneID)
  )
end

function AUDIO.STOP_SYNCHRONIZED_AUDIO_EVENT(sceneID)
  return native.invoke(
    Type.Bool, 304, false,
    arg(Type.Int, sceneID)
  )
end

function AUDIO.INIT_SYNCH_SCENE_AUDIO_WITH_POSITION(audioEvent, x, y, z)
  native.invoke(
    Type.Void, 305, false,
    arg(Type.String, audioEvent),
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, z)
  )
end

function AUDIO.INIT_SYNCH_SCENE_AUDIO_WITH_ENTITY(audioEvent, entity)
  native.invoke(
    Type.Void, 306, false,
    arg(Type.String, audioEvent),
    arg(Type.Entity, entity)
  )
end

function AUDIO.SET_AUDIO_SPECIAL_EFFECT_MODE(mode)
  native.invoke(
    Type.Void, 307, false,
    arg(Type.Int, mode)
  )
end

function AUDIO.SET_PORTAL_SETTINGS_OVERRIDE(p0, p1)
  native.invoke(
    Type.Void, 308, false,
    arg(Type.String, p0),
    arg(Type.String, p1)
  )
end

function AUDIO.REMOVE_PORTAL_SETTINGS_OVERRIDE(p0)
  native.invoke(
    Type.Void, 309, false,
    arg(Type.String, p0)
  )
end

function AUDIO.STOP_SMOKE_GRENADE_EXPLOSION_SOUNDS()
  native.invoke(
    Type.Void, 310, false
  )
end

function AUDIO.GET_MUSIC_VOL_SLIDER()
  return native.invoke(
    Type.Int, 311, false
  )
end

function AUDIO.REQUEST_TENNIS_BANKS(ped)
  native.invoke(
    Type.Void, 312, false,
    arg(Type.Ped, ped)
  )
end

function AUDIO.UNREQUEST_TENNIS_BANKS()
  native.invoke(
    Type.Void, 313, false
  )
end

function AUDIO.SET_SKIP_MINIGUN_SPIN_UP_AUDIO(p0)
  native.invoke(
    Type.Void, 314, false,
    arg(Type.Bool, p0)
  )
end

function AUDIO.STOP_CUTSCENE_AUDIO()
  native.invoke(
    Type.Void, 315, false
  )
end

function AUDIO.HAS_LOADED_MP_DATA_SET()
  return native.invoke(
    Type.Bool, 316, false
  )
end

function AUDIO.HAS_LOADED_SP_DATA_SET()
  return native.invoke(
    Type.Bool, 317, false
  )
end

function AUDIO.GET_VEHICLE_HORN_SOUND_INDEX(vehicle)
  return native.invoke(
    Type.Int, 318, false,
    arg(Type.Vehicle, vehicle)
  )
end

function AUDIO.SET_VEHICLE_HORN_SOUND_INDEX(vehicle, value)
  native.invoke(
    Type.Void, 319, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Int, value)
  )
end


BRAIN = {}

function BRAIN.ADD_SCRIPT_TO_RANDOM_PED(name, model, p2, p3)
  native.invoke(
    Type.Void, 320, false,
    arg(Type.String, name),
    arg(Type.Hash, model),
    arg(Type.Float, p2),
    arg(Type.Float, p3)
  )
end

function BRAIN.REGISTER_OBJECT_SCRIPT_BRAIN(scriptName, modelHash, p2, activationRange, p4, p5)
  native.invoke(
    Type.Void, 321, false,
    arg(Type.String, scriptName),
    arg(Type.Hash, modelHash),
    arg(Type.Int, p2),
    arg(Type.Float, activationRange),
    arg(Type.Int, p4),
    arg(Type.Int, p5)
  )
end

function BRAIN.IS_OBJECT_WITHIN_BRAIN_ACTIVATION_RANGE(object)
  return native.invoke(
    Type.Bool, 322, false,
    arg(Type.Object, object)
  )
end

function BRAIN.REGISTER_WORLD_POINT_SCRIPT_BRAIN(scriptName, activationRange, p2)
  native.invoke(
    Type.Void, 323, false,
    arg(Type.String, scriptName),
    arg(Type.Float, activationRange),
    arg(Type.Int, p2)
  )
end

function BRAIN.IS_WORLD_POINT_WITHIN_BRAIN_ACTIVATION_RANGE()
  return native.invoke(
    Type.Bool, 324, false
  )
end

function BRAIN.ENABLE_SCRIPT_BRAIN_SET(brainSet)
  native.invoke(
    Type.Void, 325, false,
    arg(Type.Int, brainSet)
  )
end

function BRAIN.DISABLE_SCRIPT_BRAIN_SET(brainSet)
  native.invoke(
    Type.Void, 326, false,
    arg(Type.Int, brainSet)
  )
end

function BRAIN.REACTIVATE_ALL_WORLD_BRAINS_THAT_ARE_WAITING_TILL_OUT_OF_RANGE()
  native.invoke(
    Type.Void, 327, false
  )
end

function BRAIN.REACTIVATE_ALL_OBJECT_BRAINS_THAT_ARE_WAITING_TILL_OUT_OF_RANGE()
  native.invoke(
    Type.Void, 328, false
  )
end

function BRAIN.REACTIVATE_NAMED_WORLD_BRAINS_WAITING_TILL_OUT_OF_RANGE(scriptName)
  native.invoke(
    Type.Void, 329, false,
    arg(Type.String, scriptName)
  )
end

function BRAIN.REACTIVATE_NAMED_OBJECT_BRAINS_WAITING_TILL_OUT_OF_RANGE(scriptName)
  native.invoke(
    Type.Void, 330, false,
    arg(Type.String, scriptName)
  )
end


CAM = {}

function CAM.RENDER_SCRIPT_CAMS(render, ease, easeTime, p3, p4, p5)
  native.invoke(
    Type.Void, 331, false,
    arg(Type.Bool, render),
    arg(Type.Bool, ease),
    arg(Type.Int, easeTime),
    arg(Type.Bool, p3),
    arg(Type.Bool, p4),
    arg(Type.Any, p5)
  )
end

function CAM.STOP_RENDERING_SCRIPT_CAMS_USING_CATCH_UP(render, p1, p2, p3)
  native.invoke(
    Type.Void, 332, false,
    arg(Type.Bool, render),
    arg(Type.Float, p1),
    arg(Type.Int, p2),
    arg(Type.Any, p3)
  )
end

function CAM.CREATE_CAM(camName, p1)
  return native.invoke(
    Type.Cam, 333, false,
    arg(Type.String, camName),
    arg(Type.Bool, p1)
  )
end

function CAM.CREATE_CAM_WITH_PARAMS(camName, posX, posY, posZ, rotX, rotY, rotZ, fov, p8, p9)
  return native.invoke(
    Type.Cam, 334, false,
    arg(Type.String, camName),
    arg(Type.Float, posX),
    arg(Type.Float, posY),
    arg(Type.Float, posZ),
    arg(Type.Float, rotX),
    arg(Type.Float, rotY),
    arg(Type.Float, rotZ),
    arg(Type.Float, fov),
    arg(Type.Bool, p8),
    arg(Type.Int, p9)
  )
end

function CAM.CREATE_CAMERA(camHash, p1)
  return native.invoke(
    Type.Cam, 335, false,
    arg(Type.Hash, camHash),
    arg(Type.Bool, p1)
  )
end

function CAM.CREATE_CAMERA_WITH_PARAMS(camHash, posX, posY, posZ, rotX, rotY, rotZ, fov, p8, p9)
  return native.invoke(
    Type.Cam, 336, false,
    arg(Type.Hash, camHash),
    arg(Type.Float, posX),
    arg(Type.Float, posY),
    arg(Type.Float, posZ),
    arg(Type.Float, rotX),
    arg(Type.Float, rotY),
    arg(Type.Float, rotZ),
    arg(Type.Float, fov),
    arg(Type.Bool, p8),
    arg(Type.Any, p9)
  )
end

function CAM.DESTROY_CAM(cam, bScriptHostCam)
  native.invoke(
    Type.Void, 337, false,
    arg(Type.Cam, cam),
    arg(Type.Bool, bScriptHostCam)
  )
end

function CAM.DESTROY_ALL_CAMS(bScriptHostCam)
  native.invoke(
    Type.Void, 338, false,
    arg(Type.Bool, bScriptHostCam)
  )
end

function CAM.DOES_CAM_EXIST(cam)
  return native.invoke(
    Type.Bool, 339, false,
    arg(Type.Cam, cam)
  )
end

function CAM.SET_CAM_ACTIVE(cam, active)
  native.invoke(
    Type.Void, 340, false,
    arg(Type.Cam, cam),
    arg(Type.Bool, active)
  )
end

function CAM.IS_CAM_ACTIVE(cam)
  return native.invoke(
    Type.Bool, 341, false,
    arg(Type.Cam, cam)
  )
end

function CAM.IS_CAM_RENDERING(cam)
  return native.invoke(
    Type.Bool, 342, false,
    arg(Type.Cam, cam)
  )
end

function CAM.GET_RENDERING_CAM()
  return native.invoke(
    Type.Cam, 343, false
  )
end

function CAM.GET_CAM_COORD(cam)
  return native.invoke(
    Type.Vector3, 344, false,
    arg(Type.Cam, cam)
  )
end

function CAM.GET_CAM_ROT(cam, rotationOrder)
  return native.invoke(
    Type.Vector3, 345, false,
    arg(Type.Cam, cam),
    arg(Type.Int, rotationOrder)
  )
end

function CAM.GET_CAM_FOV(cam)
  return native.invoke(
    Type.Float, 346, false,
    arg(Type.Cam, cam)
  )
end

function CAM.GET_CAM_NEAR_CLIP(cam)
  return native.invoke(
    Type.Float, 347, false,
    arg(Type.Cam, cam)
  )
end

function CAM.GET_CAM_FAR_CLIP(cam)
  return native.invoke(
    Type.Float, 348, false,
    arg(Type.Cam, cam)
  )
end

function CAM.GET_CAM_NEAR_DOF(cam)
  return native.invoke(
    Type.Float, 349, false,
    arg(Type.Cam, cam)
  )
end

function CAM.GET_CAM_FAR_DOF(cam)
  return native.invoke(
    Type.Float, 350, false,
    arg(Type.Cam, cam)
  )
end

function CAM.GET_CAM_DOF_STRENGTH(cam)
  return native.invoke(
    Type.Float, 351, false,
    arg(Type.Cam, cam)
  )
end

function CAM.SET_CAM_PARAMS(cam, posX, posY, posZ, rotX, rotY, rotZ, fieldOfView, p8, p9, p10, p11)
  native.invoke(
    Type.Void, 352, false,
    arg(Type.Cam, cam),
    arg(Type.Float, posX),
    arg(Type.Float, posY),
    arg(Type.Float, posZ),
    arg(Type.Float, rotX),
    arg(Type.Float, rotY),
    arg(Type.Float, rotZ),
    arg(Type.Float, fieldOfView),
    arg(Type.Any, p8),
    arg(Type.Int, p9),
    arg(Type.Int, p10),
    arg(Type.Int, p11)
  )
end

function CAM.SET_CAM_COORD(cam, posX, posY, posZ)
  native.invoke(
    Type.Void, 353, false,
    arg(Type.Cam, cam),
    arg(Type.Float, posX),
    arg(Type.Float, posY),
    arg(Type.Float, posZ)
  )
end

function CAM.SET_CAM_ROT(cam, rotX, rotY, rotZ, rotationOrder)
  native.invoke(
    Type.Void, 354, false,
    arg(Type.Cam, cam),
    arg(Type.Float, rotX),
    arg(Type.Float, rotY),
    arg(Type.Float, rotZ),
    arg(Type.Int, rotationOrder)
  )
end

function CAM.SET_CAM_FOV(cam, fieldOfView)
  native.invoke(
    Type.Void, 355, false,
    arg(Type.Cam, cam),
    arg(Type.Float, fieldOfView)
  )
end

function CAM.SET_CAM_NEAR_CLIP(cam, nearClip)
  native.invoke(
    Type.Void, 356, false,
    arg(Type.Cam, cam),
    arg(Type.Float, nearClip)
  )
end

function CAM.SET_CAM_FAR_CLIP(cam, farClip)
  native.invoke(
    Type.Void, 357, false,
    arg(Type.Cam, cam),
    arg(Type.Float, farClip)
  )
end

function CAM.FORCE_CAM_FAR_CLIP(cam, p1)
  native.invoke(
    Type.Void, 358, false,
    arg(Type.Cam, cam),
    arg(Type.Float, p1)
  )
end

function CAM.SET_CAM_MOTION_BLUR_STRENGTH(cam, strength)
  native.invoke(
    Type.Void, 359, false,
    arg(Type.Cam, cam),
    arg(Type.Float, strength)
  )
end

function CAM.SET_CAM_NEAR_DOF(cam, nearDOF)
  native.invoke(
    Type.Void, 360, false,
    arg(Type.Cam, cam),
    arg(Type.Float, nearDOF)
  )
end

function CAM.SET_CAM_FAR_DOF(cam, farDOF)
  native.invoke(
    Type.Void, 361, false,
    arg(Type.Cam, cam),
    arg(Type.Float, farDOF)
  )
end

function CAM.SET_CAM_DOF_STRENGTH(cam, dofStrength)
  native.invoke(
    Type.Void, 362, false,
    arg(Type.Cam, cam),
    arg(Type.Float, dofStrength)
  )
end

function CAM.SET_CAM_DOF_PLANES(cam, p1, p2, p3, p4)
  native.invoke(
    Type.Void, 363, false,
    arg(Type.Cam, cam),
    arg(Type.Float, p1),
    arg(Type.Float, p2),
    arg(Type.Float, p3),
    arg(Type.Float, p4)
  )
end

function CAM.SET_CAM_USE_SHALLOW_DOF_MODE(cam, toggle)
  native.invoke(
    Type.Void, 364, false,
    arg(Type.Cam, cam),
    arg(Type.Bool, toggle)
  )
end

function CAM.SET_USE_HI_DOF()
  native.invoke(
    Type.Void, 365, false
  )
end

function CAM.SET_USE_HI_DOF_ON_SYNCED_SCENE_THIS_UPDATE()
  native.invoke(
    Type.Void, 366, false
  )
end

function CAM.SET_CAM_DOF_OVERRIDDEN_FOCUS_DISTANCE(camera, p1)
  native.invoke(
    Type.Void, 367, false,
    arg(Type.Cam, camera),
    arg(Type.Float, p1)
  )
end

function CAM.SET_CAM_DOF_OVERRIDDEN_FOCUS_DISTANCE_BLEND_LEVEL(p0, p1)
  native.invoke(
    Type.Void, 368, false,
    arg(Type.Any, p0),
    arg(Type.Float, p1)
  )
end

function CAM.SET_CAM_DOF_FNUMBER_OF_LENS(camera, p1)
  native.invoke(
    Type.Void, 369, false,
    arg(Type.Cam, camera),
    arg(Type.Float, p1)
  )
end

function CAM.SET_CAM_DOF_FOCAL_LENGTH_MULTIPLIER(camera, multiplier)
  native.invoke(
    Type.Void, 370, false,
    arg(Type.Cam, camera),
    arg(Type.Float, multiplier)
  )
end

function CAM.SET_CAM_DOF_FOCUS_DISTANCE_BIAS(camera, p1)
  native.invoke(
    Type.Void, 371, false,
    arg(Type.Cam, camera),
    arg(Type.Float, p1)
  )
end

function CAM.SET_CAM_DOF_MAX_NEAR_IN_FOCUS_DISTANCE(camera, p1)
  native.invoke(
    Type.Void, 372, false,
    arg(Type.Cam, camera),
    arg(Type.Float, p1)
  )
end

function CAM.SET_CAM_DOF_MAX_NEAR_IN_FOCUS_DISTANCE_BLEND_LEVEL(camera, p1)
  native.invoke(
    Type.Void, 373, false,
    arg(Type.Cam, camera),
    arg(Type.Float, p1)
  )
end

function CAM.SET_CAM_DOF_SHOULD_KEEP_LOOK_AT_TARGET_IN_FOCUS(camera, state)
  native.invoke(
    Type.Void, 374, false,
    arg(Type.Cam, camera),
    arg(Type.Bool, state)
  )
end

function CAM.ATTACH_CAM_TO_ENTITY(cam, entity, xOffset, yOffset, zOffset, isRelative)
  native.invoke(
    Type.Void, 375, false,
    arg(Type.Cam, cam),
    arg(Type.Entity, entity),
    arg(Type.Float, xOffset),
    arg(Type.Float, yOffset),
    arg(Type.Float, zOffset),
    arg(Type.Bool, isRelative)
  )
end

function CAM.ATTACH_CAM_TO_PED_BONE(cam, ped, boneIndex, x, y, z, heading)
  native.invoke(
    Type.Void, 376, false,
    arg(Type.Cam, cam),
    arg(Type.Ped, ped),
    arg(Type.Int, boneIndex),
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, z),
    arg(Type.Bool, heading)
  )
end

function CAM.HARD_ATTACH_CAM_TO_PED_BONE(cam, ped, boneIndex, p3, p4, p5, p6, p7, p8, p9)
  native.invoke(
    Type.Void, 377, false,
    arg(Type.Cam, cam),
    arg(Type.Ped, ped),
    arg(Type.Int, boneIndex),
    arg(Type.Float, p3),
    arg(Type.Float, p4),
    arg(Type.Float, p5),
    arg(Type.Float, p6),
    arg(Type.Float, p7),
    arg(Type.Float, p8),
    arg(Type.Bool, p9)
  )
end

function CAM.HARD_ATTACH_CAM_TO_ENTITY(cam, entity, xRot, yRot, zRot, xOffset, yOffset, zOffset, isRelative)
  native.invoke(
    Type.Void, 378, false,
    arg(Type.Cam, cam),
    arg(Type.Entity, entity),
    arg(Type.Float, xRot),
    arg(Type.Float, yRot),
    arg(Type.Float, zRot),
    arg(Type.Float, xOffset),
    arg(Type.Float, yOffset),
    arg(Type.Float, zOffset),
    arg(Type.Bool, isRelative)
  )
end

function CAM.ATTACH_CAM_TO_VEHICLE_BONE(cam, vehicle, boneIndex, relativeRotation, rotX, rotY, rotZ, offsetX, offsetY, offsetZ, fixedDirection)
  native.invoke(
    Type.Void, 379, false,
    arg(Type.Cam, cam),
    arg(Type.Vehicle, vehicle),
    arg(Type.Int, boneIndex),
    arg(Type.Bool, relativeRotation),
    arg(Type.Float, rotX),
    arg(Type.Float, rotY),
    arg(Type.Float, rotZ),
    arg(Type.Float, offsetX),
    arg(Type.Float, offsetY),
    arg(Type.Float, offsetZ),
    arg(Type.Bool, fixedDirection)
  )
end

function CAM.DETACH_CAM(cam)
  native.invoke(
    Type.Void, 380, false,
    arg(Type.Cam, cam)
  )
end

function CAM.SET_CAM_INHERIT_ROLL_VEHICLE(cam, p1)
  native.invoke(
    Type.Void, 381, false,
    arg(Type.Cam, cam),
    arg(Type.Bool, p1)
  )
end

function CAM.POINT_CAM_AT_COORD(cam, x, y, z)
  native.invoke(
    Type.Void, 382, false,
    arg(Type.Cam, cam),
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, z)
  )
end

function CAM.POINT_CAM_AT_ENTITY(cam, entity, p2, p3, p4, p5)
  native.invoke(
    Type.Void, 383, false,
    arg(Type.Cam, cam),
    arg(Type.Entity, entity),
    arg(Type.Float, p2),
    arg(Type.Float, p3),
    arg(Type.Float, p4),
    arg(Type.Bool, p5)
  )
end

function CAM.POINT_CAM_AT_PED_BONE(cam, ped, boneIndex, x, y, z, p6)
  native.invoke(
    Type.Void, 384, false,
    arg(Type.Cam, cam),
    arg(Type.Ped, ped),
    arg(Type.Int, boneIndex),
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, z),
    arg(Type.Bool, p6)
  )
end

function CAM.STOP_CAM_POINTING(cam)
  native.invoke(
    Type.Void, 385, false,
    arg(Type.Cam, cam)
  )
end

function CAM.SET_CAM_AFFECTS_AIMING(cam, toggle)
  native.invoke(
    Type.Void, 386, false,
    arg(Type.Cam, cam),
    arg(Type.Bool, toggle)
  )
end

function CAM.SET_CAM_CONTROLS_MINI_MAP_HEADING(cam, toggle)
  native.invoke(
    Type.Void, 387, false,
    arg(Type.Cam, cam),
    arg(Type.Bool, toggle)
  )
end

function CAM.SET_CAM_IS_INSIDE_VEHICLE(cam, toggle)
  native.invoke(
    Type.Void, 388, false,
    arg(Type.Cam, cam),
    arg(Type.Bool, toggle)
  )
end

function CAM.ALLOW_MOTION_BLUR_DECAY(p0, p1)
  native.invoke(
    Type.Void, 389, false,
    arg(Type.Any, p0),
    arg(Type.Bool, p1)
  )
end

function CAM.SET_CAM_DEBUG_NAME(camera, name)
  native.invoke(
    Type.Void, 390, false,
    arg(Type.Cam, camera),
    arg(Type.String, name)
  )
end

function CAM.GET_DEBUG_CAM()
  return native.invoke(
    Type.Cam, 391, false
  )
end

function CAM.ADD_CAM_SPLINE_NODE(camera, x, y, z, xRot, yRot, zRot, length, smoothingStyle, rotationOrder)
  native.invoke(
    Type.Void, 392, false,
    arg(Type.Cam, camera),
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, z),
    arg(Type.Float, xRot),
    arg(Type.Float, yRot),
    arg(Type.Float, zRot),
    arg(Type.Int, length),
    arg(Type.Int, smoothingStyle),
    arg(Type.Int, rotationOrder)
  )
end

function CAM.ADD_CAM_SPLINE_NODE_USING_CAMERA_FRAME(cam, cam2, length, p3)
  native.invoke(
    Type.Void, 393, false,
    arg(Type.Cam, cam),
    arg(Type.Cam, cam2),
    arg(Type.Int, length),
    arg(Type.Int, p3)
  )
end

function CAM.ADD_CAM_SPLINE_NODE_USING_CAMERA(cam, cam2, length, p3)
  native.invoke(
    Type.Void, 394, false,
    arg(Type.Cam, cam),
    arg(Type.Cam, cam2),
    arg(Type.Int, length),
    arg(Type.Int, p3)
  )
end

function CAM.ADD_CAM_SPLINE_NODE_USING_GAMEPLAY_FRAME(cam, length, p2)
  native.invoke(
    Type.Void, 395, false,
    arg(Type.Cam, cam),
    arg(Type.Int, length),
    arg(Type.Int, p2)
  )
end

function CAM.SET_CAM_SPLINE_PHASE(cam, p1)
  native.invoke(
    Type.Void, 396, false,
    arg(Type.Cam, cam),
    arg(Type.Float, p1)
  )
end

function CAM.GET_CAM_SPLINE_PHASE(cam)
  return native.invoke(
    Type.Float, 397, false,
    arg(Type.Cam, cam)
  )
end

function CAM.GET_CAM_SPLINE_NODE_PHASE(cam)
  return native.invoke(
    Type.Float, 398, false,
    arg(Type.Cam, cam)
  )
end

function CAM.SET_CAM_SPLINE_DURATION(cam, timeDuration)
  native.invoke(
    Type.Void, 399, false,
    arg(Type.Cam, cam),
    arg(Type.Int, timeDuration)
  )
end

function CAM.SET_CAM_SPLINE_SMOOTHING_STYLE(cam, smoothingStyle)
  native.invoke(
    Type.Void, 400, false,
    arg(Type.Cam, cam),
    arg(Type.Int, smoothingStyle)
  )
end

function CAM.GET_CAM_SPLINE_NODE_INDEX(cam)
  return native.invoke(
    Type.Int, 401, false,
    arg(Type.Cam, cam)
  )
end

function CAM.SET_CAM_SPLINE_NODE_EASE(cam, easingFunction, p2, p3)
  native.invoke(
    Type.Void, 402, false,
    arg(Type.Cam, cam),
    arg(Type.Int, easingFunction),
    arg(Type.Int, p2),
    arg(Type.Float, p3)
  )
end

function CAM.SET_CAM_SPLINE_NODE_VELOCITY_SCALE(cam, p1, scale)
  native.invoke(
    Type.Void, 403, false,
    arg(Type.Cam, cam),
    arg(Type.Int, p1),
    arg(Type.Float, scale)
  )
end

function CAM.OVERRIDE_CAM_SPLINE_VELOCITY(cam, p1, p2, p3)
  native.invoke(
    Type.Void, 404, false,
    arg(Type.Cam, cam),
    arg(Type.Int, p1),
    arg(Type.Float, p2),
    arg(Type.Float, p3)
  )
end

function CAM.OVERRIDE_CAM_SPLINE_MOTION_BLUR(cam, p1, p2, p3)
  native.invoke(
    Type.Void, 405, false,
    arg(Type.Cam, cam),
    arg(Type.Int, p1),
    arg(Type.Float, p2),
    arg(Type.Float, p3)
  )
end

function CAM.SET_CAM_SPLINE_NODE_EXTRA_FLAGS(cam, p1, flags)
  native.invoke(
    Type.Void, 406, false,
    arg(Type.Cam, cam),
    arg(Type.Int, p1),
    arg(Type.Int, flags)
  )
end

function CAM.IS_CAM_SPLINE_PAUSED(cam)
  return native.invoke(
    Type.Bool, 407, false,
    arg(Type.Cam, cam)
  )
end

function CAM.SET_CAM_ACTIVE_WITH_INTERP(camTo, camFrom, duration, easeLocation, easeRotation)
  native.invoke(
    Type.Void, 408, false,
    arg(Type.Cam, camTo),
    arg(Type.Cam, camFrom),
    arg(Type.Int, duration),
    arg(Type.Int, easeLocation),
    arg(Type.Int, easeRotation)
  )
end

function CAM.IS_CAM_INTERPOLATING(cam)
  return native.invoke(
    Type.Bool, 409, false,
    arg(Type.Cam, cam)
  )
end

function CAM.SHAKE_CAM(cam, type, amplitude)
  native.invoke(
    Type.Void, 410, false,
    arg(Type.Cam, cam),
    arg(Type.String, type),
    arg(Type.Float, amplitude)
  )
end

function CAM.ANIMATED_SHAKE_CAM(cam, p1, p2, p3, amplitude)
  native.invoke(
    Type.Void, 411, false,
    arg(Type.Cam, cam),
    arg(Type.String, p1),
    arg(Type.String, p2),
    arg(Type.String, p3),
    arg(Type.Float, amplitude)
  )
end

function CAM.IS_CAM_SHAKING(cam)
  return native.invoke(
    Type.Bool, 412, false,
    arg(Type.Cam, cam)
  )
end

function CAM.SET_CAM_SHAKE_AMPLITUDE(cam, amplitude)
  native.invoke(
    Type.Void, 413, false,
    arg(Type.Cam, cam),
    arg(Type.Float, amplitude)
  )
end

function CAM.STOP_CAM_SHAKING(cam, p1)
  native.invoke(
    Type.Void, 414, false,
    arg(Type.Cam, cam),
    arg(Type.Bool, p1)
  )
end

function CAM.SHAKE_SCRIPT_GLOBAL(p0, p1)
  native.invoke(
    Type.Void, 415, false,
    arg(Type.String, p0),
    arg(Type.Float, p1)
  )
end

function CAM.ANIMATED_SHAKE_SCRIPT_GLOBAL(p0, p1, p2, p3)
  native.invoke(
    Type.Void, 416, false,
    arg(Type.String, p0),
    arg(Type.String, p1),
    arg(Type.String, p2),
    arg(Type.Float, p3)
  )
end

function CAM.IS_SCRIPT_GLOBAL_SHAKING()
  return native.invoke(
    Type.Bool, 417, false
  )
end

function CAM.STOP_SCRIPT_GLOBAL_SHAKING(p0)
  native.invoke(
    Type.Void, 418, false,
    arg(Type.Bool, p0)
  )
end

function CAM.TRIGGER_VEHICLE_PART_BROKEN_CAMERA_SHAKE(vehicle, p1, p2)
  native.invoke(
    Type.Void, 419, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Int, p1),
    arg(Type.Float, p2)
  )
end

function CAM.PLAY_CAM_ANIM(cam, animName, animDictionary, x, y, z, xRot, yRot, zRot, p9, p10)
  return native.invoke(
    Type.Bool, 420, false,
    arg(Type.Cam, cam),
    arg(Type.String, animName),
    arg(Type.String, animDictionary),
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, z),
    arg(Type.Float, xRot),
    arg(Type.Float, yRot),
    arg(Type.Float, zRot),
    arg(Type.Bool, p9),
    arg(Type.Int, p10)
  )
end

function CAM.IS_CAM_PLAYING_ANIM(cam, animName, animDictionary)
  return native.invoke(
    Type.Bool, 421, false,
    arg(Type.Cam, cam),
    arg(Type.String, animName),
    arg(Type.String, animDictionary)
  )
end

function CAM.SET_CAM_ANIM_CURRENT_PHASE(cam, phase)
  native.invoke(
    Type.Void, 422, false,
    arg(Type.Cam, cam),
    arg(Type.Float, phase)
  )
end

function CAM.GET_CAM_ANIM_CURRENT_PHASE(cam)
  return native.invoke(
    Type.Float, 423, false,
    arg(Type.Cam, cam)
  )
end

function CAM.PLAY_SYNCHRONIZED_CAM_ANIM(p0, p1, animName, animDictionary)
  return native.invoke(
    Type.Bool, 424, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1),
    arg(Type.String, animName),
    arg(Type.String, animDictionary)
  )
end

function CAM.SET_FLY_CAM_HORIZONTAL_RESPONSE(cam, p1, p2, p3)
  native.invoke(
    Type.Void, 425, false,
    arg(Type.Cam, cam),
    arg(Type.Float, p1),
    arg(Type.Float, p2),
    arg(Type.Float, p3)
  )
end

function CAM.SET_FLY_CAM_VERTICAL_RESPONSE(cam, p1, p2, p3)
  native.invoke(
    Type.Void, 426, false,
    arg(Type.Cam, cam),
    arg(Type.Float, p1),
    arg(Type.Float, p2),
    arg(Type.Float, p3)
  )
end

function CAM.SET_FLY_CAM_MAX_HEIGHT(cam, height)
  native.invoke(
    Type.Void, 427, false,
    arg(Type.Cam, cam),
    arg(Type.Float, height)
  )
end

function CAM.SET_FLY_CAM_COORD_AND_CONSTRAIN(cam, x, y, z)
  native.invoke(
    Type.Void, 428, false,
    arg(Type.Cam, cam),
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, z)
  )
end

function CAM.SET_FLY_CAM_VERTICAL_CONTROLS_THIS_UPDATE(cam)
  native.invoke(
    Type.Void, 429, false,
    arg(Type.Cam, cam)
  )
end

function CAM.WAS_FLY_CAM_CONSTRAINED_ON_PREVIOUS_UDPATE(cam)
  return native.invoke(
    Type.Bool, 430, false,
    arg(Type.Cam, cam)
  )
end

function CAM.IS_SCREEN_FADED_OUT()
  return native.invoke(
    Type.Bool, 431, false
  )
end

function CAM.IS_SCREEN_FADED_IN()
  return native.invoke(
    Type.Bool, 432, false
  )
end

function CAM.IS_SCREEN_FADING_OUT()
  return native.invoke(
    Type.Bool, 433, false
  )
end

function CAM.IS_SCREEN_FADING_IN()
  return native.invoke(
    Type.Bool, 434, false
  )
end

function CAM.DO_SCREEN_FADE_IN(duration)
  native.invoke(
    Type.Void, 435, false,
    arg(Type.Int, duration)
  )
end

function CAM.DO_SCREEN_FADE_OUT(duration)
  native.invoke(
    Type.Void, 436, false,
    arg(Type.Int, duration)
  )
end

function CAM.SET_WIDESCREEN_BORDERS(p0, p1)
  native.invoke(
    Type.Void, 437, false,
    arg(Type.Bool, p0),
    arg(Type.Int, p1)
  )
end

function CAM.ARE_WIDESCREEN_BORDERS_ACTIVE()
  return native.invoke(
    Type.Bool, 438, false
  )
end

function CAM.GET_GAMEPLAY_CAM_COORD()
  return native.invoke(
    Type.Vector3, 439, false
  )
end

function CAM.GET_GAMEPLAY_CAM_ROT(rotationOrder)
  return native.invoke(
    Type.Vector3, 440, false,
    arg(Type.Int, rotationOrder)
  )
end

function CAM.GET_GAMEPLAY_CAM_FOV()
  return native.invoke(
    Type.Float, 441, false
  )
end

function CAM.SET_GAMEPLAY_CAM_MOTION_BLUR_SCALING_THIS_UPDATE(p0)
  native.invoke(
    Type.Void, 442, false,
    arg(Type.Float, p0)
  )
end

function CAM.SET_GAMEPLAY_CAM_MAX_MOTION_BLUR_STRENGTH_THIS_UPDATE(p0)
  native.invoke(
    Type.Void, 443, false,
    arg(Type.Float, p0)
  )
end

function CAM.GET_GAMEPLAY_CAM_RELATIVE_HEADING()
  return native.invoke(
    Type.Float, 444, false
  )
end

function CAM.SET_GAMEPLAY_CAM_RELATIVE_HEADING(heading)
  native.invoke(
    Type.Void, 445, false,
    arg(Type.Float, heading)
  )
end

function CAM.GET_GAMEPLAY_CAM_RELATIVE_PITCH()
  return native.invoke(
    Type.Float, 446, false
  )
end

function CAM.SET_GAMEPLAY_CAM_RELATIVE_PITCH(angle, scalingFactor)
  native.invoke(
    Type.Void, 447, false,
    arg(Type.Float, angle),
    arg(Type.Float, scalingFactor)
  )
end

function CAM.RESET_GAMEPLAY_CAM_FULL_ATTACH_PARENT_TRANSFORM_TIMER()
  native.invoke(
    Type.Void, 448, false
  )
end

function CAM.FORCE_CAMERA_RELATIVE_HEADING_AND_PITCH(roll, pitch, yaw)
  native.invoke(
    Type.Void, 449, false,
    arg(Type.Float, roll),
    arg(Type.Float, pitch),
    arg(Type.Float, yaw)
  )
end

function CAM.FORCE_BONNET_CAMERA_RELATIVE_HEADING_AND_PITCH(p0, p1)
  native.invoke(
    Type.Void, 450, false,
    arg(Type.Float, p0),
    arg(Type.Float, p1)
  )
end

function CAM.SET_FIRST_PERSON_SHOOTER_CAMERA_HEADING(yaw)
  native.invoke(
    Type.Void, 451, false,
    arg(Type.Float, yaw)
  )
end

function CAM.SET_FIRST_PERSON_SHOOTER_CAMERA_PITCH(pitch)
  native.invoke(
    Type.Void, 452, false,
    arg(Type.Float, pitch)
  )
end

function CAM.SET_SCRIPTED_CAMERA_IS_FIRST_PERSON_THIS_FRAME(p0)
  native.invoke(
    Type.Void, 453, false,
    arg(Type.Bool, p0)
  )
end

function CAM.SHAKE_GAMEPLAY_CAM(shakeName, intensity)
  native.invoke(
    Type.Void, 454, false,
    arg(Type.String, shakeName),
    arg(Type.Float, intensity)
  )
end

function CAM.IS_GAMEPLAY_CAM_SHAKING()
  return native.invoke(
    Type.Bool, 455, false
  )
end

function CAM.SET_GAMEPLAY_CAM_SHAKE_AMPLITUDE(amplitude)
  native.invoke(
    Type.Void, 456, false,
    arg(Type.Float, amplitude)
  )
end

function CAM.STOP_GAMEPLAY_CAM_SHAKING(p0)
  native.invoke(
    Type.Void, 457, false,
    arg(Type.Bool, p0)
  )
end

function CAM.SET_GAMEPLAY_CAM_FOLLOW_PED_THIS_UPDATE(ped)
  native.invoke(
    Type.Void, 458, false,
    arg(Type.Ped, ped)
  )
end

function CAM.IS_GAMEPLAY_CAM_RENDERING()
  return native.invoke(
    Type.Bool, 459, false
  )
end

function CAM.IS_INTERPOLATING_FROM_SCRIPT_CAMS()
  return native.invoke(
    Type.Bool, 460, false
  )
end

function CAM.IS_INTERPOLATING_TO_SCRIPT_CAMS()
  return native.invoke(
    Type.Bool, 461, false
  )
end

function CAM.SET_GAMEPLAY_CAM_ALTITUDE_FOV_SCALING_STATE(p0)
  native.invoke(
    Type.Void, 462, false,
    arg(Type.Bool, p0)
  )
end

function CAM.DISABLE_GAMEPLAY_CAM_ALTITUDE_FOV_SCALING_THIS_UPDATE()
  native.invoke(
    Type.Void, 463, false
  )
end

function CAM.IS_GAMEPLAY_CAM_LOOKING_BEHIND()
  return native.invoke(
    Type.Bool, 464, false
  )
end

function CAM.SET_GAMEPLAY_CAM_IGNORE_ENTITY_COLLISION_THIS_UPDATE(entity)
  native.invoke(
    Type.Void, 465, false,
    arg(Type.Entity, entity)
  )
end

function CAM.DISABLE_CAM_COLLISION_FOR_OBJECT(entity)
  native.invoke(
    Type.Void, 466, false,
    arg(Type.Entity, entity)
  )
end

function CAM.BYPASS_CAMERA_COLLISION_BUOYANCY_TEST_THIS_UPDATE()
  native.invoke(
    Type.Void, 467, false
  )
end

function CAM.SET_GAMEPLAY_CAM_ENTITY_TO_LIMIT_FOCUS_OVER_BOUNDING_SPHERE_THIS_UPDATE(entity)
  native.invoke(
    Type.Void, 468, false,
    arg(Type.Entity, entity)
  )
end

function CAM.DISABLE_FIRST_PERSON_CAMERA_WATER_CLIPPING_TEST_THIS_UPDATE()
  native.invoke(
    Type.Void, 469, false
  )
end

function CAM.SET_FOLLOW_CAM_IGNORE_ATTACH_PARENT_MOVEMENT_THIS_UPDATE()
  native.invoke(
    Type.Void, 470, false
  )
end

function CAM.IS_SPHERE_VISIBLE(x, y, z, radius)
  return native.invoke(
    Type.Bool, 471, false,
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, z),
    arg(Type.Float, radius)
  )
end

function CAM.IS_FOLLOW_PED_CAM_ACTIVE()
  return native.invoke(
    Type.Bool, 472, false
  )
end

function CAM.SET_FOLLOW_PED_CAM_THIS_UPDATE(camName, p1)
  return native.invoke(
    Type.Bool, 473, false,
    arg(Type.String, camName),
    arg(Type.Int, p1)
  )
end

function CAM.USE_SCRIPT_CAM_FOR_AMBIENT_POPULATION_ORIGIN_THIS_FRAME(p0, p1)
  native.invoke(
    Type.Void, 474, false,
    arg(Type.Bool, p0),
    arg(Type.Bool, p1)
  )
end

function CAM.SET_FOLLOW_PED_CAM_LADDER_ALIGN_THIS_UPDATE()
  native.invoke(
    Type.Void, 475, false
  )
end

function CAM.SET_THIRD_PERSON_CAM_RELATIVE_HEADING_LIMITS_THIS_UPDATE(minimum, maximum)
  native.invoke(
    Type.Void, 476, false,
    arg(Type.Float, minimum),
    arg(Type.Float, maximum)
  )
end

function CAM.SET_THIRD_PERSON_CAM_RELATIVE_PITCH_LIMITS_THIS_UPDATE(minimum, maximum)
  native.invoke(
    Type.Void, 477, false,
    arg(Type.Float, minimum),
    arg(Type.Float, maximum)
  )
end

function CAM.SET_THIRD_PERSON_CAM_ORBIT_DISTANCE_LIMITS_THIS_UPDATE(p0, distance)
  native.invoke(
    Type.Void, 478, false,
    arg(Type.Float, p0),
    arg(Type.Float, distance)
  )
end

function CAM._GET_THIRD_PERSON_CAM_MIN_ORBIT_DISTANCE_SPRING()
  return native.invoke(
    Type.Float, 479, false
  )
end

function CAM._GET_THIRD_PERSON_CAM_MAX_ORBIT_DISTANCE_SPRING()
  return native.invoke(
    Type.Float, 480, false
  )
end

function CAM.SET_IN_VEHICLE_CAM_STATE_THIS_UPDATE(p0, p1)
  native.invoke(
    Type.Void, 481, false,
    arg(Type.Vehicle, p0),
    arg(Type.Int, p1)
  )
end

function CAM.DISABLE_ON_FOOT_FIRST_PERSON_VIEW_THIS_UPDATE()
  native.invoke(
    Type.Void, 482, false
  )
end

function CAM.DISABLE_FIRST_PERSON_FLASH_EFFECT_THIS_UPDATE()
  native.invoke(
    Type.Void, 483, false
  )
end

function CAM.BLOCK_FIRST_PERSON_ORIENTATION_RESET_THIS_UPDATE()
  native.invoke(
    Type.Void, 484, false
  )
end

function CAM.GET_FOLLOW_PED_CAM_ZOOM_LEVEL()
  return native.invoke(
    Type.Int, 485, false
  )
end

function CAM.GET_FOLLOW_PED_CAM_VIEW_MODE()
  return native.invoke(
    Type.Int, 486, false
  )
end

function CAM.SET_FOLLOW_PED_CAM_VIEW_MODE(viewMode)
  native.invoke(
    Type.Void, 487, false,
    arg(Type.Int, viewMode)
  )
end

function CAM.IS_FOLLOW_VEHICLE_CAM_ACTIVE()
  return native.invoke(
    Type.Bool, 488, false
  )
end

function CAM.SET_FOLLOW_VEHICLE_CAM_HIGH_ANGLE_MODE_THIS_UPDATE(p0)
  native.invoke(
    Type.Void, 489, false,
    arg(Type.Bool, p0)
  )
end

function CAM.SET_FOLLOW_VEHICLE_CAM_HIGH_ANGLE_MODE_EVERY_UPDATE(p0, p1)
  native.invoke(
    Type.Void, 490, false,
    arg(Type.Bool, p0),
    arg(Type.Bool, p1)
  )
end

function CAM.SET_TABLE_GAMES_CAMERA_THIS_UPDATE(hash)
  return native.invoke(
    Type.Bool, 491, false,
    arg(Type.Hash, hash)
  )
end

function CAM.GET_FOLLOW_VEHICLE_CAM_ZOOM_LEVEL()
  return native.invoke(
    Type.Int, 492, false
  )
end

function CAM.SET_FOLLOW_VEHICLE_CAM_ZOOM_LEVEL(zoomLevel)
  native.invoke(
    Type.Void, 493, false,
    arg(Type.Int, zoomLevel)
  )
end

function CAM.GET_FOLLOW_VEHICLE_CAM_VIEW_MODE()
  return native.invoke(
    Type.Int, 494, false
  )
end

function CAM.SET_FOLLOW_VEHICLE_CAM_VIEW_MODE(viewMode)
  native.invoke(
    Type.Void, 495, false,
    arg(Type.Int, viewMode)
  )
end

function CAM.GET_CAM_VIEW_MODE_FOR_CONTEXT(context)
  return native.invoke(
    Type.Int, 496, false,
    arg(Type.Int, context)
  )
end

function CAM.SET_CAM_VIEW_MODE_FOR_CONTEXT(context, viewMode)
  native.invoke(
    Type.Void, 497, false,
    arg(Type.Int, context),
    arg(Type.Int, viewMode)
  )
end

function CAM.GET_CAM_ACTIVE_VIEW_MODE_CONTEXT()
  return native.invoke(
    Type.Int, 498, false
  )
end

function CAM.USE_VEHICLE_CAM_STUNT_SETTINGS_THIS_UPDATE()
  native.invoke(
    Type.Void, 499, false
  )
end

function CAM.USE_DEDICATED_STUNT_CAMERA_THIS_UPDATE(camName)
  native.invoke(
    Type.Void, 500, false,
    arg(Type.String, camName)
  )
end

function CAM.FORCE_VEHICLE_CAM_STUNT_SETTINGS_THIS_UPDATE()
  native.invoke(
    Type.Void, 501, false
  )
end

function CAM.SET_FOLLOW_VEHICLE_CAM_SEAT_THIS_UPDATE(seatIndex)
  native.invoke(
    Type.Void, 502, false,
    arg(Type.Int, seatIndex)
  )
end

function CAM.IS_AIM_CAM_ACTIVE()
  return native.invoke(
    Type.Bool, 503, false
  )
end

function CAM.IS_AIM_CAM_ACTIVE_IN_ACCURATE_MODE()
  return native.invoke(
    Type.Bool, 504, false
  )
end

function CAM.IS_FIRST_PERSON_AIM_CAM_ACTIVE()
  return native.invoke(
    Type.Bool, 505, false
  )
end

function CAM.DISABLE_AIM_CAM_THIS_UPDATE()
  native.invoke(
    Type.Void, 506, false
  )
end

function CAM.GET_FIRST_PERSON_AIM_CAM_ZOOM_FACTOR()
  return native.invoke(
    Type.Float, 507, false
  )
end

function CAM.SET_FIRST_PERSON_AIM_CAM_ZOOM_FACTOR(zoomFactor)
  native.invoke(
    Type.Void, 508, false,
    arg(Type.Float, zoomFactor)
  )
end

function CAM.SET_FIRST_PERSON_AIM_CAM_ZOOM_FACTOR_LIMITS_THIS_UPDATE(p0, p1)
  native.invoke(
    Type.Void, 509, false,
    arg(Type.Float, p0),
    arg(Type.Float, p1)
  )
end

function CAM.SET_FIRST_PERSON_AIM_CAM_RELATIVE_HEADING_LIMITS_THIS_UPDATE(p0, p1)
  native.invoke(
    Type.Void, 510, false,
    arg(Type.Float, p0),
    arg(Type.Float, p1)
  )
end

function CAM.SET_FIRST_PERSON_AIM_CAM_RELATIVE_PITCH_LIMITS_THIS_UPDATE(p0, p1)
  native.invoke(
    Type.Void, 511, false,
    arg(Type.Float, p0),
    arg(Type.Float, p1)
  )
end

function CAM.SET_FIRST_PERSON_AIM_CAM_NEAR_CLIP_THIS_UPDATE(p0)
  native.invoke(
    Type.Void, 512, false,
    arg(Type.Float, p0)
  )
end

function CAM.SET_THIRD_PERSON_AIM_CAM_NEAR_CLIP_THIS_UPDATE(p0)
  native.invoke(
    Type.Void, 513, false,
    arg(Type.Float, p0)
  )
end

function CAM.SET_ALLOW_CUSTOM_VEHICLE_DRIVE_BY_CAM_THIS_UPDATE(p0)
  native.invoke(
    Type.Void, 514, false,
    arg(Type.Bool, p0)
  )
end

function CAM.FORCE_TIGHTSPACE_CUSTOM_FRAMING_THIS_UPDATE()
  native.invoke(
    Type.Void, 515, false
  )
end

function CAM.GET_FINAL_RENDERED_CAM_COORD()
  return native.invoke(
    Type.Vector3, 516, false
  )
end

function CAM.GET_FINAL_RENDERED_CAM_ROT(rotationOrder)
  return native.invoke(
    Type.Vector3, 517, false,
    arg(Type.Int, rotationOrder)
  )
end

function CAM.GET_FINAL_RENDERED_REMOTE_PLAYER_CAM_ROT(player, rotationOrder)
  return native.invoke(
    Type.Vector3, 518, false,
    arg(Type.Player, player),
    arg(Type.Int, rotationOrder)
  )
end

function CAM.GET_FINAL_RENDERED_CAM_FOV()
  return native.invoke(
    Type.Float, 519, false
  )
end

function CAM.GET_FINAL_RENDERED_REMOTE_PLAYER_CAM_FOV(player)
  return native.invoke(
    Type.Float, 520, false,
    arg(Type.Player, player)
  )
end

function CAM.GET_FINAL_RENDERED_CAM_NEAR_CLIP()
  return native.invoke(
    Type.Float, 521, false
  )
end

function CAM.GET_FINAL_RENDERED_CAM_FAR_CLIP()
  return native.invoke(
    Type.Float, 522, false
  )
end

function CAM.GET_FINAL_RENDERED_CAM_NEAR_DOF()
  return native.invoke(
    Type.Float, 523, false
  )
end

function CAM.GET_FINAL_RENDERED_CAM_FAR_DOF()
  return native.invoke(
    Type.Float, 524, false
  )
end

function CAM.GET_FINAL_RENDERED_CAM_MOTION_BLUR_STRENGTH()
  return native.invoke(
    Type.Float, 525, false
  )
end

function CAM.SET_GAMEPLAY_COORD_HINT(x, y, z, duration, blendOutDuration, blendInDuration, p6)
  native.invoke(
    Type.Void, 526, false,
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, z),
    arg(Type.Int, duration),
    arg(Type.Int, blendOutDuration),
    arg(Type.Int, blendInDuration),
    arg(Type.Int, p6)
  )
end

function CAM.SET_GAMEPLAY_PED_HINT(ped, x1, y1, z1, p4, duration, blendOutDuration, blendInDuration)
  native.invoke(
    Type.Void, 527, false,
    arg(Type.Ped, ped),
    arg(Type.Float, x1),
    arg(Type.Float, y1),
    arg(Type.Float, z1),
    arg(Type.Bool, p4),
    arg(Type.Int, duration),
    arg(Type.Int, blendOutDuration),
    arg(Type.Int, blendInDuration)
  )
end

function CAM.SET_GAMEPLAY_VEHICLE_HINT(vehicle, offsetX, offsetY, offsetZ, p4, time, easeInTime, easeOutTime)
  native.invoke(
    Type.Void, 528, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Float, offsetX),
    arg(Type.Float, offsetY),
    arg(Type.Float, offsetZ),
    arg(Type.Bool, p4),
    arg(Type.Int, time),
    arg(Type.Int, easeInTime),
    arg(Type.Int, easeOutTime)
  )
end

function CAM.SET_GAMEPLAY_OBJECT_HINT(object, xOffset, yOffset, zOffset, p4, time, easeInTime, easeOutTime)
  native.invoke(
    Type.Void, 529, false,
    arg(Type.Object, object),
    arg(Type.Float, xOffset),
    arg(Type.Float, yOffset),
    arg(Type.Float, zOffset),
    arg(Type.Bool, p4),
    arg(Type.Int, time),
    arg(Type.Int, easeInTime),
    arg(Type.Int, easeOutTime)
  )
end

function CAM.SET_GAMEPLAY_ENTITY_HINT(entity, xOffset, yOffset, zOffset, p4, time, easeInTime, easeOutTime, p8)
  native.invoke(
    Type.Void, 530, false,
    arg(Type.Entity, entity),
    arg(Type.Float, xOffset),
    arg(Type.Float, yOffset),
    arg(Type.Float, zOffset),
    arg(Type.Bool, p4),
    arg(Type.Int, time),
    arg(Type.Int, easeInTime),
    arg(Type.Int, easeOutTime),
    arg(Type.Int, p8)
  )
end

function CAM.IS_GAMEPLAY_HINT_ACTIVE()
  return native.invoke(
    Type.Bool, 531, false
  )
end

function CAM.STOP_GAMEPLAY_HINT(p0)
  native.invoke(
    Type.Void, 532, false,
    arg(Type.Bool, p0)
  )
end

function CAM.STOP_GAMEPLAY_HINT_BEING_CANCELLED_THIS_UPDATE(p0)
  native.invoke(
    Type.Void, 533, false,
    arg(Type.Bool, p0)
  )
end

function CAM.STOP_CODE_GAMEPLAY_HINT(p0)
  native.invoke(
    Type.Void, 534, false,
    arg(Type.Bool, p0)
  )
end

function CAM.IS_CODE_GAMEPLAY_HINT_ACTIVE()
  return native.invoke(
    Type.Bool, 535, false
  )
end

function CAM.SET_GAMEPLAY_HINT_FOV(FOV)
  native.invoke(
    Type.Void, 536, false,
    arg(Type.Float, FOV)
  )
end

function CAM.SET_GAMEPLAY_HINT_FOLLOW_DISTANCE_SCALAR(value)
  native.invoke(
    Type.Void, 537, false,
    arg(Type.Float, value)
  )
end

function CAM.SET_GAMEPLAY_HINT_BASE_ORBIT_PITCH_OFFSET(value)
  native.invoke(
    Type.Void, 538, false,
    arg(Type.Float, value)
  )
end

function CAM.SET_GAMEPLAY_HINT_CAMERA_RELATIVE_SIDE_OFFSET(xOffset)
  native.invoke(
    Type.Void, 539, false,
    arg(Type.Float, xOffset)
  )
end

function CAM.SET_GAMEPLAY_HINT_CAMERA_RELATIVE_VERTICAL_OFFSET(yOffset)
  native.invoke(
    Type.Void, 540, false,
    arg(Type.Float, yOffset)
  )
end

function CAM.SET_GAMEPLAY_HINT_CAMERA_BLEND_TO_FOLLOW_PED_MEDIUM_VIEW_MODE(toggle)
  native.invoke(
    Type.Void, 541, false,
    arg(Type.Bool, toggle)
  )
end

function CAM.SET_CINEMATIC_BUTTON_ACTIVE(p0)
  native.invoke(
    Type.Void, 542, false,
    arg(Type.Bool, p0)
  )
end

function CAM.IS_CINEMATIC_CAM_RENDERING()
  return native.invoke(
    Type.Bool, 543, false
  )
end

function CAM.SHAKE_CINEMATIC_CAM(shakeType, amount)
  native.invoke(
    Type.Void, 544, false,
    arg(Type.String, shakeType),
    arg(Type.Float, amount)
  )
end

function CAM.IS_CINEMATIC_CAM_SHAKING()
  return native.invoke(
    Type.Bool, 545, false
  )
end

function CAM.SET_CINEMATIC_CAM_SHAKE_AMPLITUDE(p0)
  native.invoke(
    Type.Void, 546, false,
    arg(Type.Float, p0)
  )
end

function CAM.STOP_CINEMATIC_CAM_SHAKING(p0)
  native.invoke(
    Type.Void, 547, false,
    arg(Type.Bool, p0)
  )
end

function CAM.DISABLE_CINEMATIC_BONNET_CAMERA_THIS_UPDATE()
  native.invoke(
    Type.Void, 548, false
  )
end

function CAM.DISABLE_CINEMATIC_VEHICLE_IDLE_MODE_THIS_UPDATE()
  native.invoke(
    Type.Void, 549, false
  )
end

function CAM.INVALIDATE_CINEMATIC_VEHICLE_IDLE_MODE()
  native.invoke(
    Type.Void, 550, false
  )
end

function CAM.INVALIDATE_IDLE_CAM()
  native.invoke(
    Type.Void, 551, false
  )
end

function CAM.IS_CINEMATIC_IDLE_CAM_RENDERING()
  return native.invoke(
    Type.Bool, 552, false
  )
end

function CAM.IS_CINEMATIC_FIRST_PERSON_VEHICLE_INTERIOR_CAM_RENDERING()
  return native.invoke(
    Type.Bool, 553, false
  )
end

function CAM.CREATE_CINEMATIC_SHOT(p0, time, p2, entity)
  native.invoke(
    Type.Void, 554, false,
    arg(Type.Hash, p0),
    arg(Type.Int, time),
    arg(Type.Bool, p2),
    arg(Type.Entity, entity)
  )
end

function CAM.IS_CINEMATIC_SHOT_ACTIVE(p0)
  return native.invoke(
    Type.Bool, 555, false,
    arg(Type.Hash, p0)
  )
end

function CAM.STOP_CINEMATIC_SHOT(p0)
  native.invoke(
    Type.Void, 556, false,
    arg(Type.Hash, p0)
  )
end

function CAM.FORCE_CINEMATIC_RENDERING_THIS_UPDATE(toggle)
  native.invoke(
    Type.Void, 557, false,
    arg(Type.Bool, toggle)
  )
end

function CAM.SET_CINEMATIC_NEWS_CHANNEL_ACTIVE_THIS_UPDATE()
  native.invoke(
    Type.Void, 558, false
  )
end

function CAM.SET_CINEMATIC_MODE_ACTIVE(toggle)
  native.invoke(
    Type.Void, 559, false,
    arg(Type.Bool, toggle)
  )
end

function CAM.IS_IN_VEHICLE_MOBILE_PHONE_CAMERA_RENDERING()
  return native.invoke(
    Type.Bool, 560, false
  )
end

function CAM.DISABLE_CINEMATIC_SLOW_MO_THIS_UPDATE()
  return native.invoke(
    Type.Bool, 561, false
  )
end

function CAM.IS_BONNET_CINEMATIC_CAM_RENDERING()
  return native.invoke(
    Type.Bool, 562, false
  )
end

function CAM.IS_CINEMATIC_CAM_INPUT_ACTIVE()
  return native.invoke(
    Type.Bool, 563, false
  )
end

function CAM.IGNORE_MENU_PREFERENCE_FOR_BONNET_CAMERA_THIS_UPDATE()
  native.invoke(
    Type.Void, 564, false
  )
end

function CAM.BYPASS_CUTSCENE_CAM_RENDERING_THIS_UPDATE()
  native.invoke(
    Type.Void, 565, false
  )
end

function CAM.STOP_CUTSCENE_CAM_SHAKING(p0)
  native.invoke(
    Type.Void, 566, false,
    arg(Type.Any, p0)
  )
end

function CAM.SET_CUTSCENE_CAM_FAR_CLIP_THIS_UPDATE(p0)
  native.invoke(
    Type.Void, 567, false,
    arg(Type.Float, p0)
  )
end

function CAM.GET_FOCUS_PED_ON_SCREEN(p0, p1, p2, p3, p4, p5, p6, p7, p8)
  return native.invoke(
    Type.Ped, 568, false,
    arg(Type.Float, p0),
    arg(Type.Int, p1),
    arg(Type.Float, p2),
    arg(Type.Float, p3),
    arg(Type.Float, p4),
    arg(Type.Float, p5),
    arg(Type.Float, p6),
    arg(Type.Int, p7),
    arg(Type.Int, p8)
  )
end

function CAM.DISABLE_NEAR_CLIP_SCAN_THIS_UPDATE()
  native.invoke(
    Type.Void, 569, false
  )
end

function CAM.SET_CAM_DEATH_FAIL_EFFECT_STATE(p0)
  native.invoke(
    Type.Void, 570, false,
    arg(Type.Int, p0)
  )
end

function CAM.SET_FIRST_PERSON_FLASH_EFFECT_TYPE(p0)
  native.invoke(
    Type.Void, 571, false,
    arg(Type.Any, p0)
  )
end

function CAM.SET_FIRST_PERSON_FLASH_EFFECT_VEHICLE_MODEL_NAME(vehicleName)
  native.invoke(
    Type.Void, 572, false,
    arg(Type.String, vehicleName)
  )
end

function CAM.SET_FIRST_PERSON_FLASH_EFFECT_VEHICLE_MODEL_HASH(vehicleModel)
  native.invoke(
    Type.Void, 573, false,
    arg(Type.Hash, vehicleModel)
  )
end

function CAM.IS_ALLOWED_INDEPENDENT_CAMERA_MODES()
  return native.invoke(
    Type.Bool, 574, false
  )
end

function CAM.CAMERA_PREVENT_COLLISION_SETTINGS_FOR_TRIPLEHEAD_IN_INTERIORS_THIS_UPDATE()
  native.invoke(
    Type.Void, 575, false
  )
end

function CAM.REPLAY_GET_MAX_DISTANCE_ALLOWED_FROM_PLAYER()
  return native.invoke(
    Type.Float, 576, false
  )
end


CLOCK = {}

function CLOCK.SET_CLOCK_TIME(hour, minute, second)
  native.invoke(
    Type.Void, 577, false,
    arg(Type.Int, hour),
    arg(Type.Int, minute),
    arg(Type.Int, second)
  )
end

function CLOCK.PAUSE_CLOCK(toggle)
  native.invoke(
    Type.Void, 578, false,
    arg(Type.Bool, toggle)
  )
end

function CLOCK.ADVANCE_CLOCK_TIME_TO(hour, minute, second)
  native.invoke(
    Type.Void, 579, false,
    arg(Type.Int, hour),
    arg(Type.Int, minute),
    arg(Type.Int, second)
  )
end

function CLOCK.ADD_TO_CLOCK_TIME(hours, minutes, seconds)
  native.invoke(
    Type.Void, 580, false,
    arg(Type.Int, hours),
    arg(Type.Int, minutes),
    arg(Type.Int, seconds)
  )
end

function CLOCK.GET_CLOCK_HOURS()
  return native.invoke(
    Type.Int, 581, false
  )
end

function CLOCK.GET_CLOCK_MINUTES()
  return native.invoke(
    Type.Int, 582, false
  )
end

function CLOCK.GET_CLOCK_SECONDS()
  return native.invoke(
    Type.Int, 583, false
  )
end

function CLOCK.SET_CLOCK_DATE(day, month, year)
  native.invoke(
    Type.Void, 584, false,
    arg(Type.Int, day),
    arg(Type.Int, month),
    arg(Type.Int, year)
  )
end

function CLOCK.GET_CLOCK_DAY_OF_WEEK()
  return native.invoke(
    Type.Int, 585, false
  )
end

function CLOCK.GET_CLOCK_DAY_OF_MONTH()
  return native.invoke(
    Type.Int, 586, false
  )
end

function CLOCK.GET_CLOCK_MONTH()
  return native.invoke(
    Type.Int, 587, false
  )
end

function CLOCK.GET_CLOCK_YEAR()
  return native.invoke(
    Type.Int, 588, false
  )
end

function CLOCK.GET_MILLISECONDS_PER_GAME_MINUTE()
  return native.invoke(
    Type.Int, 589, false
  )
end

function CLOCK.GET_POSIX_TIME(year, month, day, hour, minute, second)
  native.invoke(
    Type.Void, 590, false,
    ref(Type.Int, year),
    ref(Type.Int, month),
    ref(Type.Int, day),
    ref(Type.Int, hour),
    ref(Type.Int, minute),
    ref(Type.Int, second)
  )
end

function CLOCK.GET_UTC_TIME(year, month, day, hour, minute, second)
  native.invoke(
    Type.Void, 591, false,
    ref(Type.Int, year),
    ref(Type.Int, month),
    ref(Type.Int, day),
    ref(Type.Int, hour),
    ref(Type.Int, minute),
    ref(Type.Int, second)
  )
end

function CLOCK.GET_LOCAL_TIME(year, month, day, hour, minute, second)
  native.invoke(
    Type.Void, 592, false,
    ref(Type.Int, year),
    ref(Type.Int, month),
    ref(Type.Int, day),
    ref(Type.Int, hour),
    ref(Type.Int, minute),
    ref(Type.Int, second)
  )
end


CUTSCENE = {}

function CUTSCENE.REQUEST_CUTSCENE(cutsceneName, flags)
  native.invoke(
    Type.Void, 593, false,
    arg(Type.String, cutsceneName),
    arg(Type.Int, flags)
  )
end

function CUTSCENE.REQUEST_CUTSCENE_WITH_PLAYBACK_LIST(cutsceneName, playbackFlags, flags)
  native.invoke(
    Type.Void, 594, false,
    arg(Type.String, cutsceneName),
    arg(Type.Int, playbackFlags),
    arg(Type.Int, flags)
  )
end

function CUTSCENE.REMOVE_CUTSCENE()
  native.invoke(
    Type.Void, 595, false
  )
end

function CUTSCENE.HAS_CUTSCENE_LOADED()
  return native.invoke(
    Type.Bool, 596, false
  )
end

function CUTSCENE.HAS_THIS_CUTSCENE_LOADED(cutsceneName)
  return native.invoke(
    Type.Bool, 597, false,
    arg(Type.String, cutsceneName)
  )
end

function CUTSCENE.SET_SCRIPT_CAN_START_CUTSCENE(threadId)
  native.invoke(
    Type.Void, 598, false,
    arg(Type.Int, threadId)
  )
end

function CUTSCENE.CAN_REQUEST_ASSETS_FOR_CUTSCENE_ENTITY()
  return native.invoke(
    Type.Bool, 599, false
  )
end

function CUTSCENE.IS_CUTSCENE_PLAYBACK_FLAG_SET(flag)
  return native.invoke(
    Type.Bool, 600, false,
    arg(Type.Int, flag)
  )
end

function CUTSCENE.SET_CUTSCENE_ENTITY_STREAMING_FLAGS(cutsceneEntName, p1, p2)
  native.invoke(
    Type.Void, 601, false,
    arg(Type.String, cutsceneEntName),
    arg(Type.Int, p1),
    arg(Type.Int, p2)
  )
end

function CUTSCENE.REQUEST_CUT_FILE(cutsceneName)
  native.invoke(
    Type.Void, 602, false,
    arg(Type.String, cutsceneName)
  )
end

function CUTSCENE.HAS_CUT_FILE_LOADED(cutsceneName)
  return native.invoke(
    Type.Bool, 603, false,
    arg(Type.String, cutsceneName)
  )
end

function CUTSCENE.REMOVE_CUT_FILE(cutsceneName)
  native.invoke(
    Type.Void, 604, false,
    arg(Type.String, cutsceneName)
  )
end

function CUTSCENE.GET_CUT_FILE_CONCAT_COUNT(cutsceneName)
  return native.invoke(
    Type.Int, 605, false,
    arg(Type.String, cutsceneName)
  )
end

function CUTSCENE.START_CUTSCENE(flags)
  native.invoke(
    Type.Void, 606, false,
    arg(Type.Int, flags)
  )
end

function CUTSCENE.START_CUTSCENE_AT_COORDS(x, y, z, flags)
  native.invoke(
    Type.Void, 607, false,
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, z),
    arg(Type.Int, flags)
  )
end

function CUTSCENE.STOP_CUTSCENE(p0)
  native.invoke(
    Type.Void, 608, false,
    arg(Type.Bool, p0)
  )
end

function CUTSCENE.STOP_CUTSCENE_IMMEDIATELY()
  native.invoke(
    Type.Void, 609, false
  )
end

function CUTSCENE.SET_CUTSCENE_ORIGIN(x, y, z, p3, p4)
  native.invoke(
    Type.Void, 610, false,
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, z),
    arg(Type.Float, p3),
    arg(Type.Int, p4)
  )
end

function CUTSCENE.SET_CUTSCENE_ORIGIN_AND_ORIENTATION(x1, y1, z1, x2, y2, z2, p6)
  native.invoke(
    Type.Void, 611, false,
    arg(Type.Float, x1),
    arg(Type.Float, y1),
    arg(Type.Float, z1),
    arg(Type.Float, x2),
    arg(Type.Float, y2),
    arg(Type.Float, z2),
    arg(Type.Int, p6)
  )
end

function CUTSCENE.GET_CUTSCENE_TIME()
  return native.invoke(
    Type.Int, 612, false
  )
end

function CUTSCENE.GET_CUTSCENE_TOTAL_DURATION()
  return native.invoke(
    Type.Int, 613, false
  )
end

function CUTSCENE.GET_CUTSCENE_END_TIME()
  return native.invoke(
    Type.Int, 614, false
  )
end

function CUTSCENE.GET_CUTSCENE_PLAY_DURATION()
  return native.invoke(
    Type.Int, 615, false
  )
end

function CUTSCENE.WAS_CUTSCENE_SKIPPED()
  return native.invoke(
    Type.Bool, 616, false
  )
end

function CUTSCENE.HAS_CUTSCENE_FINISHED()
  return native.invoke(
    Type.Bool, 617, false
  )
end

function CUTSCENE.IS_CUTSCENE_ACTIVE()
  return native.invoke(
    Type.Bool, 618, false
  )
end

function CUTSCENE.IS_CUTSCENE_PLAYING()
  return native.invoke(
    Type.Bool, 619, false
  )
end

function CUTSCENE.GET_CUTSCENE_SECTION_PLAYING()
  return native.invoke(
    Type.Int, 620, false
  )
end

function CUTSCENE.GET_ENTITY_INDEX_OF_CUTSCENE_ENTITY(cutsceneEntName, modelHash)
  return native.invoke(
    Type.Entity, 621, false,
    arg(Type.String, cutsceneEntName),
    arg(Type.Hash, modelHash)
  )
end

function CUTSCENE.GET_CUTSCENE_CONCAT_SECTION_PLAYING()
  return native.invoke(
    Type.Int, 622, false
  )
end

function CUTSCENE.IS_CUTSCENE_AUTHORIZED(cutsceneName)
  return native.invoke(
    Type.Bool, 623, false,
    arg(Type.String, cutsceneName)
  )
end

function CUTSCENE.DOES_CUTSCENE_HANDLE_EXIST(cutsceneHandle)
  return native.invoke(
    Type.Int, 624, false,
    arg(Type.Int, cutsceneHandle)
  )
end

function CUTSCENE.REGISTER_ENTITY_FOR_CUTSCENE(cutscenePed, cutsceneEntName, p2, modelHash, p4)
  native.invoke(
    Type.Void, 625, false,
    arg(Type.Ped, cutscenePed),
    arg(Type.String, cutsceneEntName),
    arg(Type.Int, p2),
    arg(Type.Hash, modelHash),
    arg(Type.Int, p4)
  )
end

function CUTSCENE.GET_ENTITY_INDEX_OF_REGISTERED_ENTITY(cutsceneEntName, modelHash)
  return native.invoke(
    Type.Entity, 626, false,
    arg(Type.String, cutsceneEntName),
    arg(Type.Hash, modelHash)
  )
end

function CUTSCENE.SET_VEHICLE_MODEL_PLAYER_WILL_EXIT_SCENE(modelHash)
  native.invoke(
    Type.Void, 627, false,
    arg(Type.Hash, modelHash)
  )
end

function CUTSCENE.SET_CUTSCENE_TRIGGER_AREA(x1, y1, z1, x2, y2, z2)
  native.invoke(
    Type.Void, 628, false,
    arg(Type.Float, x1),
    arg(Type.Float, y1),
    arg(Type.Float, z1),
    arg(Type.Float, x2),
    arg(Type.Float, y2),
    arg(Type.Float, z2)
  )
end

function CUTSCENE.CAN_SET_ENTER_STATE_FOR_REGISTERED_ENTITY(cutsceneEntName, modelHash)
  return native.invoke(
    Type.Bool, 629, false,
    arg(Type.String, cutsceneEntName),
    arg(Type.Hash, modelHash)
  )
end

function CUTSCENE.CAN_SET_EXIT_STATE_FOR_REGISTERED_ENTITY(cutsceneEntName, modelHash)
  return native.invoke(
    Type.Bool, 630, false,
    arg(Type.String, cutsceneEntName),
    arg(Type.Hash, modelHash)
  )
end

function CUTSCENE.CAN_SET_EXIT_STATE_FOR_CAMERA(p0)
  return native.invoke(
    Type.Bool, 631, false,
    arg(Type.Bool, p0)
  )
end

function CUTSCENE.SET_PAD_CAN_SHAKE_DURING_CUTSCENE(toggle)
  native.invoke(
    Type.Void, 632, false,
    arg(Type.Bool, toggle)
  )
end

function CUTSCENE.SET_CUTSCENE_FADE_VALUES(p0, p1, p2, p3)
  native.invoke(
    Type.Void, 633, false,
    arg(Type.Bool, p0),
    arg(Type.Bool, p1),
    arg(Type.Bool, p2),
    arg(Type.Bool, p3)
  )
end

function CUTSCENE.SET_CUTSCENE_MULTIHEAD_FADE(p0, p1, p2, p3)
  native.invoke(
    Type.Void, 634, false,
    arg(Type.Bool, p0),
    arg(Type.Bool, p1),
    arg(Type.Bool, p2),
    arg(Type.Bool, p3)
  )
end

function CUTSCENE.SET_CUTSCENE_MULTIHEAD_FADE_MANUAL(p0)
  native.invoke(
    Type.Void, 635, false,
    arg(Type.Bool, p0)
  )
end

function CUTSCENE.IS_MULTIHEAD_FADE_UP()
  return native.invoke(
    Type.Bool, 636, false
  )
end

function CUTSCENE.NETWORK_SET_MOCAP_CUTSCENE_CAN_BE_SKIPPED(p0)
  native.invoke(
    Type.Void, 637, false,
    arg(Type.Bool, p0)
  )
end

function CUTSCENE.SET_CAR_GENERATORS_CAN_UPDATE_DURING_CUTSCENE(p0)
  native.invoke(
    Type.Void, 638, false,
    arg(Type.Bool, p0)
  )
end

function CUTSCENE.CAN_USE_MOBILE_PHONE_DURING_CUTSCENE()
  return native.invoke(
    Type.Bool, 639, false
  )
end

function CUTSCENE.SET_CUTSCENE_CAN_BE_SKIPPED(p0)
  native.invoke(
    Type.Void, 640, false,
    arg(Type.Bool, p0)
  )
end

function CUTSCENE.SET_CAN_DISPLAY_MINIMAP_DURING_CUTSCENE_THIS_UPDATE()
  native.invoke(
    Type.Void, 641, false
  )
end

function CUTSCENE.SET_CUTSCENE_PED_COMPONENT_VARIATION(cutsceneEntName, componentId, drawableId, textureId, modelHash)
  native.invoke(
    Type.Void, 642, false,
    arg(Type.String, cutsceneEntName),
    arg(Type.Int, componentId),
    arg(Type.Int, drawableId),
    arg(Type.Int, textureId),
    arg(Type.Hash, modelHash)
  )
end

function CUTSCENE.SET_CUTSCENE_PED_COMPONENT_VARIATION_FROM_PED(cutsceneEntName, ped, modelHash)
  native.invoke(
    Type.Void, 643, false,
    arg(Type.String, cutsceneEntName),
    arg(Type.Ped, ped),
    arg(Type.Hash, modelHash)
  )
end

function CUTSCENE.DOES_CUTSCENE_ENTITY_EXIST(cutsceneEntName, modelHash)
  return native.invoke(
    Type.Bool, 644, false,
    arg(Type.String, cutsceneEntName),
    arg(Type.Hash, modelHash)
  )
end

function CUTSCENE.SET_CUTSCENE_PED_PROP_VARIATION(cutsceneEntName, componentId, drawableId, textureId, modelHash)
  native.invoke(
    Type.Void, 645, false,
    arg(Type.String, cutsceneEntName),
    arg(Type.Int, componentId),
    arg(Type.Int, drawableId),
    arg(Type.Int, textureId),
    arg(Type.Hash, modelHash)
  )
end

function CUTSCENE.HAS_CUTSCENE_CUT_THIS_FRAME()
  return native.invoke(
    Type.Bool, 646, false
  )
end


DATAFILE = {}

function DATAFILE.DATAFILE_WATCH_REQUEST_ID(requestId)
  native.invoke(
    Type.Void, 647, false,
    arg(Type.Int, requestId)
  )
end

function DATAFILE.DATAFILE_CLEAR_WATCH_LIST()
  native.invoke(
    Type.Void, 648, false
  )
end

function DATAFILE.DATAFILE_IS_VALID_REQUEST_ID(index)
  return native.invoke(
    Type.Bool, 649, false,
    arg(Type.Int, index)
  )
end

function DATAFILE.DATAFILE_HAS_LOADED_FILE_DATA(requestId)
  return native.invoke(
    Type.Bool, 650, false,
    arg(Type.Int, requestId)
  )
end

function DATAFILE.DATAFILE_HAS_VALID_FILE_DATA(requestId)
  return native.invoke(
    Type.Bool, 651, false,
    arg(Type.Int, requestId)
  )
end

function DATAFILE.DATAFILE_SELECT_ACTIVE_FILE(requestId, p1)
  return native.invoke(
    Type.Bool, 652, false,
    arg(Type.Int, requestId),
    arg(Type.Any, p1)
  )
end

function DATAFILE.DATAFILE_DELETE_REQUESTED_FILE(requestId)
  return native.invoke(
    Type.Bool, 653, false,
    arg(Type.Int, requestId)
  )
end

function DATAFILE.UGC_CREATE_CONTENT(data, dataCount, contentName, description, tagsCsv, contentTypeName, publish, p7)
  return native.invoke(
    Type.Bool, 654, false,
    ref(Type.Any, data),
    arg(Type.Int, dataCount),
    arg(Type.String, contentName),
    arg(Type.String, description),
    arg(Type.String, tagsCsv),
    arg(Type.String, contentTypeName),
    arg(Type.Bool, publish),
    arg(Type.Any, p7)
  )
end

function DATAFILE.UGC_CREATE_MISSION(contentName, description, tagsCsv, contentTypeName, publish, p5)
  return native.invoke(
    Type.Bool, 655, false,
    arg(Type.String, contentName),
    arg(Type.String, description),
    arg(Type.String, tagsCsv),
    arg(Type.String, contentTypeName),
    arg(Type.Bool, publish),
    arg(Type.Any, p5)
  )
end

function DATAFILE.UGC_UPDATE_CONTENT(contentId, data, dataCount, contentName, description, tagsCsv, contentTypeName, p7)
  return native.invoke(
    Type.Bool, 656, false,
    arg(Type.String, contentId),
    ref(Type.Any, data),
    arg(Type.Int, dataCount),
    arg(Type.String, contentName),
    arg(Type.String, description),
    arg(Type.String, tagsCsv),
    arg(Type.String, contentTypeName),
    arg(Type.Any, p7)
  )
end

function DATAFILE.UGC_UPDATE_MISSION(contentId, contentName, description, tagsCsv, contentTypeName, p5)
  return native.invoke(
    Type.Bool, 657, false,
    arg(Type.String, contentId),
    arg(Type.String, contentName),
    arg(Type.String, description),
    arg(Type.String, tagsCsv),
    arg(Type.String, contentTypeName),
    arg(Type.Any, p5)
  )
end

function DATAFILE.UGC_SET_PLAYER_DATA(contentId, rating, contentTypeName, p3)
  return native.invoke(
    Type.Bool, 658, false,
    arg(Type.String, contentId),
    arg(Type.Float, rating),
    arg(Type.String, contentTypeName),
    arg(Type.Any, p3)
  )
end

function DATAFILE.DATAFILE_SELECT_UGC_DATA(p0, p1)
  return native.invoke(
    Type.Bool, 659, false,
    arg(Type.Int, p0),
    arg(Type.Any, p1)
  )
end

function DATAFILE.DATAFILE_SELECT_UGC_STATS(p0, p1, p2)
  return native.invoke(
    Type.Bool, 660, false,
    arg(Type.Int, p0),
    arg(Type.Bool, p1),
    arg(Type.Any, p2)
  )
end

function DATAFILE.DATAFILE_SELECT_UGC_PLAYER_DATA(p0, p1)
  return native.invoke(
    Type.Bool, 661, false,
    arg(Type.Int, p0),
    arg(Type.Any, p1)
  )
end

function DATAFILE.DATAFILE_SELECT_CREATOR_STATS(p0, p1)
  return native.invoke(
    Type.Bool, 662, false,
    arg(Type.Int, p0),
    arg(Type.Any, p1)
  )
end

function DATAFILE.DATAFILE_LOAD_OFFLINE_UGC(filename, p1)
  return native.invoke(
    Type.Bool, 663, false,
    arg(Type.String, filename),
    arg(Type.Any, p1)
  )
end

function DATAFILE.DATAFILE_CREATE(p0)
  native.invoke(
    Type.Void, 664, false,
    arg(Type.Int, p0)
  )
end

function DATAFILE.DATAFILE_DELETE(p0)
  native.invoke(
    Type.Void, 665, false,
    arg(Type.Int, p0)
  )
end

function DATAFILE.DATAFILE_STORE_MISSION_HEADER(p0)
  native.invoke(
    Type.Void, 666, false,
    arg(Type.Int, p0)
  )
end

function DATAFILE.DATAFILE_FLUSH_MISSION_HEADER()
  native.invoke(
    Type.Void, 667, false
  )
end

function DATAFILE.DATAFILE_GET_FILE_DICT(p0)
  return native.invoke(
    Type.Any, 668, false,
    arg(Type.Int, p0)
  )
end

function DATAFILE.DATAFILE_START_SAVE_TO_CLOUD(filename, p1)
  return native.invoke(
    Type.Bool, 669, false,
    arg(Type.String, filename),
    arg(Type.Any, p1)
  )
end

function DATAFILE.DATAFILE_UPDATE_SAVE_TO_CLOUD(p0)
  return native.invoke(
    Type.Bool, 670, false,
    ref(Type.Bool, p0)
  )
end

function DATAFILE.DATAFILE_IS_SAVE_PENDING()
  return native.invoke(
    Type.Bool, 671, false
  )
end

function DATAFILE.DATAFILE_LOAD_OFFLINE_UGC_FOR_ADDITIONAL_DATA_FILE(p0, p1)
  return native.invoke(
    Type.Bool, 672, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1)
  )
end

function DATAFILE.DATAFILE_DELETE_FOR_ADDITIONAL_DATA_FILE(p0)
  native.invoke(
    Type.Void, 673, false,
    arg(Type.Any, p0)
  )
end

function DATAFILE.DATAFILE_GET_FILE_DICT_FOR_ADDITIONAL_DATA_FILE(p0)
  return native.invoke(
    Type.Any, 674, false,
    arg(Type.Any, p0)
  )
end

function DATAFILE.DATADICT_SET_BOOL(objectData, key, value)
  native.invoke(
    Type.Void, 675, false,
    ref(Type.Any, objectData),
    arg(Type.String, key),
    arg(Type.Bool, value)
  )
end

function DATAFILE.DATADICT_SET_INT(objectData, key, value)
  native.invoke(
    Type.Void, 676, false,
    ref(Type.Any, objectData),
    arg(Type.String, key),
    arg(Type.Int, value)
  )
end

function DATAFILE.DATADICT_SET_FLOAT(objectData, key, value)
  native.invoke(
    Type.Void, 677, false,
    ref(Type.Any, objectData),
    arg(Type.String, key),
    arg(Type.Float, value)
  )
end

function DATAFILE.DATADICT_SET_STRING(objectData, key, value)
  native.invoke(
    Type.Void, 678, false,
    ref(Type.Any, objectData),
    arg(Type.String, key),
    arg(Type.String, value)
  )
end

function DATAFILE.DATADICT_SET_VECTOR(objectData, key, valueX, valueY, valueZ)
  native.invoke(
    Type.Void, 679, false,
    ref(Type.Any, objectData),
    arg(Type.String, key),
    arg(Type.Float, valueX),
    arg(Type.Float, valueY),
    arg(Type.Float, valueZ)
  )
end

function DATAFILE.DATADICT_CREATE_DICT(objectData, key)
  return native.invoke(
    Type.Any, 680, false,
    ref(Type.Any, objectData),
    arg(Type.String, key)
  )
end

function DATAFILE.DATADICT_CREATE_ARRAY(objectData, key)
  return native.invoke(
    Type.Any, 681, false,
    ref(Type.Any, objectData),
    arg(Type.String, key)
  )
end

function DATAFILE.DATADICT_GET_BOOL(objectData, key)
  return native.invoke(
    Type.Bool, 682, false,
    ref(Type.Any, objectData),
    arg(Type.String, key)
  )
end

function DATAFILE.DATADICT_GET_INT(objectData, key)
  return native.invoke(
    Type.Int, 683, false,
    ref(Type.Any, objectData),
    arg(Type.String, key)
  )
end

function DATAFILE.DATADICT_GET_FLOAT(objectData, key)
  return native.invoke(
    Type.Float, 684, false,
    ref(Type.Any, objectData),
    arg(Type.String, key)
  )
end

function DATAFILE.DATADICT_GET_STRING(objectData, key)
  return native.invoke(
    Type.String, 685, false,
    ref(Type.Any, objectData),
    arg(Type.String, key)
  )
end

function DATAFILE.DATADICT_GET_VECTOR(objectData, key)
  return native.invoke(
    Type.Vector3, 686, false,
    ref(Type.Any, objectData),
    arg(Type.String, key)
  )
end

function DATAFILE.DATADICT_GET_DICT(objectData, key)
  return native.invoke(
    Type.Any, 687, false,
    ref(Type.Any, objectData),
    arg(Type.String, key)
  )
end

function DATAFILE.DATADICT_GET_ARRAY(objectData, key)
  return native.invoke(
    Type.Any, 688, false,
    ref(Type.Any, objectData),
    arg(Type.String, key)
  )
end

function DATAFILE.DATADICT_GET_TYPE(objectData, key)
  return native.invoke(
    Type.Int, 689, false,
    ref(Type.Any, objectData),
    arg(Type.String, key)
  )
end

function DATAFILE.DATAARRAY_ADD_BOOL(arrayData, value)
  native.invoke(
    Type.Void, 690, false,
    ref(Type.Any, arrayData),
    arg(Type.Bool, value)
  )
end

function DATAFILE.DATAARRAY_ADD_INT(arrayData, value)
  native.invoke(
    Type.Void, 691, false,
    ref(Type.Any, arrayData),
    arg(Type.Int, value)
  )
end

function DATAFILE.DATAARRAY_ADD_FLOAT(arrayData, value)
  native.invoke(
    Type.Void, 692, false,
    ref(Type.Any, arrayData),
    arg(Type.Float, value)
  )
end

function DATAFILE.DATAARRAY_ADD_STRING(arrayData, value)
  native.invoke(
    Type.Void, 693, false,
    ref(Type.Any, arrayData),
    arg(Type.String, value)
  )
end

function DATAFILE.DATAARRAY_ADD_VECTOR(arrayData, valueX, valueY, valueZ)
  native.invoke(
    Type.Void, 694, false,
    ref(Type.Any, arrayData),
    arg(Type.Float, valueX),
    arg(Type.Float, valueY),
    arg(Type.Float, valueZ)
  )
end

function DATAFILE.DATAARRAY_ADD_DICT(arrayData)
  return native.invoke(
    Type.Any, 695, false,
    ref(Type.Any, arrayData)
  )
end

function DATAFILE.DATAARRAY_GET_BOOL(arrayData, arrayIndex)
  return native.invoke(
    Type.Bool, 696, false,
    ref(Type.Any, arrayData),
    arg(Type.Int, arrayIndex)
  )
end

function DATAFILE.DATAARRAY_GET_INT(arrayData, arrayIndex)
  return native.invoke(
    Type.Int, 697, false,
    ref(Type.Any, arrayData),
    arg(Type.Int, arrayIndex)
  )
end

function DATAFILE.DATAARRAY_GET_FLOAT(arrayData, arrayIndex)
  return native.invoke(
    Type.Float, 698, false,
    ref(Type.Any, arrayData),
    arg(Type.Int, arrayIndex)
  )
end

function DATAFILE.DATAARRAY_GET_STRING(arrayData, arrayIndex)
  return native.invoke(
    Type.String, 699, false,
    ref(Type.Any, arrayData),
    arg(Type.Int, arrayIndex)
  )
end

function DATAFILE.DATAARRAY_GET_VECTOR(arrayData, arrayIndex)
  return native.invoke(
    Type.Vector3, 700, false,
    ref(Type.Any, arrayData),
    arg(Type.Int, arrayIndex)
  )
end

function DATAFILE.DATAARRAY_GET_DICT(arrayData, arrayIndex)
  return native.invoke(
    Type.Any, 701, false,
    ref(Type.Any, arrayData),
    arg(Type.Int, arrayIndex)
  )
end

function DATAFILE.DATAARRAY_GET_COUNT(arrayData)
  return native.invoke(
    Type.Int, 702, false,
    ref(Type.Any, arrayData)
  )
end

function DATAFILE.DATAARRAY_GET_TYPE(arrayData, arrayIndex)
  return native.invoke(
    Type.Int, 703, false,
    ref(Type.Any, arrayData),
    arg(Type.Int, arrayIndex)
  )
end


DECORATOR = {}

function DECORATOR.DECOR_SET_TIME(entity, propertyName, timestamp)
  return native.invoke(
    Type.Bool, 704, false,
    arg(Type.Entity, entity),
    arg(Type.String, propertyName),
    arg(Type.Int, timestamp)
  )
end

function DECORATOR.DECOR_SET_BOOL(entity, propertyName, value)
  return native.invoke(
    Type.Bool, 705, false,
    arg(Type.Entity, entity),
    arg(Type.String, propertyName),
    arg(Type.Bool, value)
  )
end

function DECORATOR.DECOR_SET_FLOAT(entity, propertyName, value)
  return native.invoke(
    Type.Bool, 706, false,
    arg(Type.Entity, entity),
    arg(Type.String, propertyName),
    arg(Type.Float, value)
  )
end

function DECORATOR.DECOR_SET_INT(entity, propertyName, value)
  return native.invoke(
    Type.Bool, 707, false,
    arg(Type.Entity, entity),
    arg(Type.String, propertyName),
    arg(Type.Int, value)
  )
end

function DECORATOR.DECOR_GET_BOOL(entity, propertyName)
  return native.invoke(
    Type.Bool, 708, false,
    arg(Type.Entity, entity),
    arg(Type.String, propertyName)
  )
end

function DECORATOR.DECOR_GET_FLOAT(entity, propertyName)
  return native.invoke(
    Type.Float, 709, false,
    arg(Type.Entity, entity),
    arg(Type.String, propertyName)
  )
end

function DECORATOR.DECOR_GET_INT(entity, propertyName)
  return native.invoke(
    Type.Int, 710, false,
    arg(Type.Entity, entity),
    arg(Type.String, propertyName)
  )
end

function DECORATOR.DECOR_EXIST_ON(entity, propertyName)
  return native.invoke(
    Type.Bool, 711, false,
    arg(Type.Entity, entity),
    arg(Type.String, propertyName)
  )
end

function DECORATOR.DECOR_REMOVE(entity, propertyName)
  return native.invoke(
    Type.Bool, 712, false,
    arg(Type.Entity, entity),
    arg(Type.String, propertyName)
  )
end

function DECORATOR.DECOR_REGISTER(propertyName, type)
  native.invoke(
    Type.Void, 713, false,
    arg(Type.String, propertyName),
    arg(Type.Int, type)
  )
end

function DECORATOR.DECOR_IS_REGISTERED_AS_TYPE(propertyName, type)
  return native.invoke(
    Type.Bool, 714, false,
    arg(Type.String, propertyName),
    arg(Type.Int, type)
  )
end

function DECORATOR.DECOR_REGISTER_LOCK()
  native.invoke(
    Type.Void, 715, false
  )
end


DLC = {}

function DLC.ARE_ANY_CCS_PENDING()
  return native.invoke(
    Type.Bool, 716, false
  )
end

function DLC.IS_DLC_PRESENT(dlcHash)
  return native.invoke(
    Type.Bool, 717, false,
    arg(Type.Hash, dlcHash)
  )
end

function DLC.DLC_CHECK_CLOUD_DATA_CORRECT()
  return native.invoke(
    Type.Bool, 718, false
  )
end

function DLC.GET_EXTRACONTENT_CLOUD_RESULT()
  return native.invoke(
    Type.Int, 719, false
  )
end

function DLC.DLC_CHECK_COMPAT_PACK_CONFIGURATION()
  return native.invoke(
    Type.Bool, 720, false
  )
end

function DLC.GET_EVER_HAD_BAD_PACK_ORDER()
  return native.invoke(
    Type.Bool, 721, false
  )
end

function DLC.GET_IS_LOADING_SCREEN_ACTIVE()
  return native.invoke(
    Type.Bool, 722, false
  )
end

function DLC.GET_IS_INITIAL_LOADING_SCREEN_ACTIVE()
  return native.invoke(
    Type.Bool, 723, false
  )
end

function DLC.HAS_CLOUD_REQUESTS_FINISHED(p0, unused)
  return native.invoke(
    Type.Bool, 724, false,
    ref(Type.Bool, p0),
    arg(Type.Int, unused)
  )
end

function DLC.ON_ENTER_SP()
  native.invoke(
    Type.Void, 725, false
  )
end

function DLC.ON_ENTER_MP()
  native.invoke(
    Type.Void, 726, false
  )
end


ENTITY = {}

function ENTITY.DOES_ENTITY_EXIST(entity)
  return native.invoke(
    Type.Bool, 727, false,
    arg(Type.Entity, entity)
  )
end

function ENTITY.DOES_ENTITY_BELONG_TO_THIS_SCRIPT(entity, p1)
  return native.invoke(
    Type.Bool, 728, false,
    arg(Type.Entity, entity),
    arg(Type.Bool, p1)
  )
end

function ENTITY.DOES_ENTITY_HAVE_DRAWABLE(entity)
  return native.invoke(
    Type.Bool, 729, false,
    arg(Type.Entity, entity)
  )
end

function ENTITY.DOES_ENTITY_HAVE_PHYSICS(entity)
  return native.invoke(
    Type.Bool, 730, false,
    arg(Type.Entity, entity)
  )
end

function ENTITY.DOES_ENTITY_HAVE_SKELETON(entity)
  return native.invoke(
    Type.Bool, 731, false,
    arg(Type.Entity, entity)
  )
end

function ENTITY.DOES_ENTITY_HAVE_ANIM_DIRECTOR(entity)
  return native.invoke(
    Type.Bool, 732, false,
    arg(Type.Entity, entity)
  )
end

function ENTITY.HAS_ENTITY_ANIM_FINISHED(entity, animDict, animName, p3)
  return native.invoke(
    Type.Bool, 733, false,
    arg(Type.Entity, entity),
    arg(Type.String, animDict),
    arg(Type.String, animName),
    arg(Type.Int, p3)
  )
end

function ENTITY.HAS_ENTITY_BEEN_DAMAGED_BY_ANY_OBJECT(entity)
  return native.invoke(
    Type.Bool, 734, false,
    arg(Type.Entity, entity)
  )
end

function ENTITY.HAS_ENTITY_BEEN_DAMAGED_BY_ANY_PED(entity)
  return native.invoke(
    Type.Bool, 735, false,
    arg(Type.Entity, entity)
  )
end

function ENTITY.HAS_ENTITY_BEEN_DAMAGED_BY_ANY_VEHICLE(entity)
  return native.invoke(
    Type.Bool, 736, false,
    arg(Type.Entity, entity)
  )
end

function ENTITY.HAS_ENTITY_BEEN_DAMAGED_BY_ENTITY(entity1, entity2, p2)
  return native.invoke(
    Type.Bool, 737, false,
    arg(Type.Entity, entity1),
    arg(Type.Entity, entity2),
    arg(Type.Bool, p2)
  )
end

function ENTITY.HAS_ENTITY_CLEAR_LOS_TO_ENTITY(entity1, entity2, traceType)
  return native.invoke(
    Type.Bool, 738, false,
    arg(Type.Entity, entity1),
    arg(Type.Entity, entity2),
    arg(Type.Int, traceType)
  )
end

function ENTITY.HAS_ENTITY_CLEAR_LOS_TO_ENTITY_ADJUST_FOR_COVER(entity1, entity2, traceType)
  return native.invoke(
    Type.Bool, 739, false,
    arg(Type.Entity, entity1),
    arg(Type.Entity, entity2),
    arg(Type.Int, traceType)
  )
end

function ENTITY.HAS_ENTITY_CLEAR_LOS_TO_ENTITY_IN_FRONT(entity1, entity2)
  return native.invoke(
    Type.Bool, 740, false,
    arg(Type.Entity, entity1),
    arg(Type.Entity, entity2)
  )
end

function ENTITY.HAS_ENTITY_COLLIDED_WITH_ANYTHING(entity)
  return native.invoke(
    Type.Bool, 741, false,
    arg(Type.Entity, entity)
  )
end

function ENTITY._GET_LAST_ENTITY_HIT_BY_ENTITY(entity)
  return native.invoke(
    Type.Entity, 742, false,
    arg(Type.Entity, entity)
  )
end

function ENTITY.GET_LAST_MATERIAL_HIT_BY_ENTITY(entity)
  return native.invoke(
    Type.Hash, 743, false,
    arg(Type.Entity, entity)
  )
end

function ENTITY.GET_COLLISION_NORMAL_OF_LAST_HIT_FOR_ENTITY(entity)
  return native.invoke(
    Type.Vector3, 744, false,
    arg(Type.Entity, entity)
  )
end

function ENTITY.FORCE_ENTITY_AI_AND_ANIMATION_UPDATE(entity)
  native.invoke(
    Type.Void, 745, false,
    arg(Type.Entity, entity)
  )
end

function ENTITY.GET_ENTITY_ANIM_CURRENT_TIME(entity, animDict, animName)
  return native.invoke(
    Type.Float, 746, false,
    arg(Type.Entity, entity),
    arg(Type.String, animDict),
    arg(Type.String, animName)
  )
end

function ENTITY.GET_ENTITY_ANIM_TOTAL_TIME(entity, animDict, animName)
  return native.invoke(
    Type.Float, 747, false,
    arg(Type.Entity, entity),
    arg(Type.String, animDict),
    arg(Type.String, animName)
  )
end

function ENTITY.GET_ANIM_DURATION(animDict, animName)
  return native.invoke(
    Type.Float, 748, false,
    arg(Type.String, animDict),
    arg(Type.String, animName)
  )
end

function ENTITY.GET_ENTITY_ATTACHED_TO(entity)
  return native.invoke(
    Type.Entity, 749, false,
    arg(Type.Entity, entity)
  )
end

function ENTITY.GET_ENTITY_COORDS(entity, alive)
  return native.invoke(
    Type.Vector3, 750, false,
    arg(Type.Entity, entity),
    arg(Type.Bool, alive)
  )
end

function ENTITY.GET_ENTITY_FORWARD_VECTOR(entity)
  return native.invoke(
    Type.Vector3, 751, false,
    arg(Type.Entity, entity)
  )
end

function ENTITY.GET_ENTITY_FORWARD_X(entity)
  return native.invoke(
    Type.Float, 752, false,
    arg(Type.Entity, entity)
  )
end

function ENTITY.GET_ENTITY_FORWARD_Y(entity)
  return native.invoke(
    Type.Float, 753, false,
    arg(Type.Entity, entity)
  )
end

function ENTITY.GET_ENTITY_HEADING(entity)
  return native.invoke(
    Type.Float, 754, false,
    arg(Type.Entity, entity)
  )
end

function ENTITY.GET_ENTITY_HEADING_FROM_EULERS(entity)
  return native.invoke(
    Type.Float, 755, false,
    arg(Type.Entity, entity)
  )
end

function ENTITY.GET_ENTITY_HEALTH(entity)
  return native.invoke(
    Type.Int, 756, false,
    arg(Type.Entity, entity)
  )
end

function ENTITY.GET_ENTITY_MAX_HEALTH(entity)
  return native.invoke(
    Type.Int, 757, false,
    arg(Type.Entity, entity)
  )
end

function ENTITY.SET_ENTITY_MAX_HEALTH(entity, value)
  native.invoke(
    Type.Void, 758, false,
    arg(Type.Entity, entity),
    arg(Type.Int, value)
  )
end

function ENTITY.GET_ENTITY_HEIGHT(entity, X, Y, Z, atTop, inWorldCoords)
  return native.invoke(
    Type.Float, 759, false,
    arg(Type.Entity, entity),
    arg(Type.Float, X),
    arg(Type.Float, Y),
    arg(Type.Float, Z),
    arg(Type.Bool, atTop),
    arg(Type.Bool, inWorldCoords)
  )
end

function ENTITY.GET_ENTITY_HEIGHT_ABOVE_GROUND(entity)
  return native.invoke(
    Type.Float, 760, false,
    arg(Type.Entity, entity)
  )
end

function ENTITY.GET_ENTITY_MATRIX(entity, forwardVector, rightVector, upVector, position)
  native.invoke(
    Type.Void, 761, true,
    arg(Type.Entity, entity),
    ref(Type.Vector3, forwardVector),
    ref(Type.Vector3, rightVector),
    ref(Type.Vector3, upVector),
    ref(Type.Vector3, position)
  )
end

function ENTITY.GET_ENTITY_MODEL(entity)
  return native.invoke(
    Type.Hash, 762, false,
    arg(Type.Entity, entity)
  )
end

function ENTITY.GET_OFFSET_FROM_ENTITY_GIVEN_WORLD_COORDS(entity, posX, posY, posZ)
  return native.invoke(
    Type.Vector3, 763, false,
    arg(Type.Entity, entity),
    arg(Type.Float, posX),
    arg(Type.Float, posY),
    arg(Type.Float, posZ)
  )
end

function ENTITY.GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS(entity, offsetX, offsetY, offsetZ)
  return native.invoke(
    Type.Vector3, 764, false,
    arg(Type.Entity, entity),
    arg(Type.Float, offsetX),
    arg(Type.Float, offsetY),
    arg(Type.Float, offsetZ)
  )
end

function ENTITY.GET_ENTITY_PITCH(entity)
  return native.invoke(
    Type.Float, 765, false,
    arg(Type.Entity, entity)
  )
end

function ENTITY.GET_ENTITY_QUATERNION(entity, x, y, z, w)
  native.invoke(
    Type.Void, 766, false,
    arg(Type.Entity, entity),
    ref(Type.Float, x),
    ref(Type.Float, y),
    ref(Type.Float, z),
    ref(Type.Float, w)
  )
end

function ENTITY.GET_ENTITY_ROLL(entity)
  return native.invoke(
    Type.Float, 767, false,
    arg(Type.Entity, entity)
  )
end

function ENTITY.GET_ENTITY_ROTATION(entity, rotationOrder)
  return native.invoke(
    Type.Vector3, 768, false,
    arg(Type.Entity, entity),
    arg(Type.Int, rotationOrder)
  )
end

function ENTITY.GET_ENTITY_ROTATION_VELOCITY(entity)
  return native.invoke(
    Type.Vector3, 769, false,
    arg(Type.Entity, entity)
  )
end

function ENTITY.GET_ENTITY_SCRIPT(entity, script)
  return native.invoke(
    Type.String, 770, false,
    arg(Type.Entity, entity),
    ref(Type.Scrhandle, script)
  )
end

function ENTITY.GET_ENTITY_SPEED(entity)
  return native.invoke(
    Type.Float, 771, false,
    arg(Type.Entity, entity)
  )
end

function ENTITY.GET_ENTITY_SPEED_VECTOR(entity, relative)
  return native.invoke(
    Type.Vector3, 772, false,
    arg(Type.Entity, entity),
    arg(Type.Bool, relative)
  )
end

function ENTITY.GET_ENTITY_UPRIGHT_VALUE(entity)
  return native.invoke(
    Type.Float, 773, false,
    arg(Type.Entity, entity)
  )
end

function ENTITY.GET_ENTITY_VELOCITY(entity)
  return native.invoke(
    Type.Vector3, 774, false,
    arg(Type.Entity, entity)
  )
end

function ENTITY.GET_OBJECT_INDEX_FROM_ENTITY_INDEX(entity)
  return native.invoke(
    Type.Object, 775, false,
    arg(Type.Entity, entity)
  )
end

function ENTITY.GET_PED_INDEX_FROM_ENTITY_INDEX(entity)
  return native.invoke(
    Type.Ped, 776, false,
    arg(Type.Entity, entity)
  )
end

function ENTITY.GET_VEHICLE_INDEX_FROM_ENTITY_INDEX(entity)
  return native.invoke(
    Type.Vehicle, 777, false,
    arg(Type.Entity, entity)
  )
end

function ENTITY.GET_WORLD_POSITION_OF_ENTITY_BONE(entity, boneIndex)
  return native.invoke(
    Type.Vector3, 778, false,
    arg(Type.Entity, entity),
    arg(Type.Int, boneIndex)
  )
end

function ENTITY.GET_NEAREST_PLAYER_TO_ENTITY(entity)
  return native.invoke(
    Type.Player, 779, false,
    arg(Type.Entity, entity)
  )
end

function ENTITY.GET_NEAREST_PLAYER_TO_ENTITY_ON_TEAM(entity, team)
  return native.invoke(
    Type.Player, 780, false,
    arg(Type.Entity, entity),
    arg(Type.Int, team)
  )
end

function ENTITY.GET_NEAREST_PARTICIPANT_TO_ENTITY(entity)
  return native.invoke(
    Type.Int, 781, false,
    arg(Type.Entity, entity)
  )
end

function ENTITY.GET_ENTITY_TYPE(entity)
  return native.invoke(
    Type.Int, 782, false,
    arg(Type.Entity, entity)
  )
end

function ENTITY.GET_ENTITY_POPULATION_TYPE(entity)
  return native.invoke(
    Type.Int, 783, false,
    arg(Type.Entity, entity)
  )
end

function ENTITY.IS_AN_ENTITY(handle)
  return native.invoke(
    Type.Bool, 784, false,
    arg(Type.Scrhandle, handle)
  )
end

function ENTITY.IS_ENTITY_A_PED(entity)
  return native.invoke(
    Type.Bool, 785, false,
    arg(Type.Entity, entity)
  )
end

function ENTITY.IS_ENTITY_A_MISSION_ENTITY(entity)
  return native.invoke(
    Type.Bool, 786, false,
    arg(Type.Entity, entity)
  )
end

function ENTITY.IS_ENTITY_A_VEHICLE(entity)
  return native.invoke(
    Type.Bool, 787, false,
    arg(Type.Entity, entity)
  )
end

function ENTITY.IS_ENTITY_AN_OBJECT(entity)
  return native.invoke(
    Type.Bool, 788, false,
    arg(Type.Entity, entity)
  )
end

function ENTITY.IS_ENTITY_AT_COORD(entity, xPos, yPos, zPos, xSize, ySize, zSize, p7, p8, p9)
  return native.invoke(
    Type.Bool, 789, false,
    arg(Type.Entity, entity),
    arg(Type.Float, xPos),
    arg(Type.Float, yPos),
    arg(Type.Float, zPos),
    arg(Type.Float, xSize),
    arg(Type.Float, ySize),
    arg(Type.Float, zSize),
    arg(Type.Bool, p7),
    arg(Type.Bool, p8),
    arg(Type.Int, p9)
  )
end

function ENTITY.IS_ENTITY_AT_ENTITY(entity1, entity2, xSize, ySize, zSize, p5, p6, p7)
  return native.invoke(
    Type.Bool, 790, false,
    arg(Type.Entity, entity1),
    arg(Type.Entity, entity2),
    arg(Type.Float, xSize),
    arg(Type.Float, ySize),
    arg(Type.Float, zSize),
    arg(Type.Bool, p5),
    arg(Type.Bool, p6),
    arg(Type.Int, p7)
  )
end

function ENTITY.IS_ENTITY_ATTACHED(entity)
  return native.invoke(
    Type.Bool, 791, false,
    arg(Type.Entity, entity)
  )
end

function ENTITY.IS_ENTITY_ATTACHED_TO_ANY_OBJECT(entity)
  return native.invoke(
    Type.Bool, 792, false,
    arg(Type.Entity, entity)
  )
end

function ENTITY.IS_ENTITY_ATTACHED_TO_ANY_PED(entity)
  return native.invoke(
    Type.Bool, 793, false,
    arg(Type.Entity, entity)
  )
end

function ENTITY.IS_ENTITY_ATTACHED_TO_ANY_VEHICLE(entity)
  return native.invoke(
    Type.Bool, 794, false,
    arg(Type.Entity, entity)
  )
end

function ENTITY.IS_ENTITY_ATTACHED_TO_ENTITY(from, to)
  return native.invoke(
    Type.Bool, 795, false,
    arg(Type.Entity, from),
    arg(Type.Entity, to)
  )
end

function ENTITY.IS_ENTITY_DEAD(entity, p1)
  return native.invoke(
    Type.Bool, 796, false,
    arg(Type.Entity, entity),
    arg(Type.Bool, p1)
  )
end

function ENTITY.IS_ENTITY_IN_AIR(entity)
  return native.invoke(
    Type.Bool, 797, false,
    arg(Type.Entity, entity)
  )
end

function ENTITY.IS_ENTITY_IN_ANGLED_AREA(entity, x1, y1, z1, x2, y2, z2, width, debug, includeZ, p10)
  return native.invoke(
    Type.Bool, 798, false,
    arg(Type.Entity, entity),
    arg(Type.Float, x1),
    arg(Type.Float, y1),
    arg(Type.Float, z1),
    arg(Type.Float, x2),
    arg(Type.Float, y2),
    arg(Type.Float, z2),
    arg(Type.Float, width),
    arg(Type.Bool, debug),
    arg(Type.Bool, includeZ),
    arg(Type.Any, p10)
  )
end

function ENTITY.IS_ENTITY_IN_AREA(entity, x1, y1, z1, x2, y2, z2, p7, p8, p9)
  return native.invoke(
    Type.Bool, 799, false,
    arg(Type.Entity, entity),
    arg(Type.Float, x1),
    arg(Type.Float, y1),
    arg(Type.Float, z1),
    arg(Type.Float, x2),
    arg(Type.Float, y2),
    arg(Type.Float, z2),
    arg(Type.Bool, p7),
    arg(Type.Bool, p8),
    arg(Type.Any, p9)
  )
end

function ENTITY.IS_ENTITY_IN_ZONE(entity, zone)
  return native.invoke(
    Type.Bool, 800, false,
    arg(Type.Entity, entity),
    arg(Type.String, zone)
  )
end

function ENTITY.IS_ENTITY_IN_WATER(entity)
  return native.invoke(
    Type.Bool, 801, false,
    arg(Type.Entity, entity)
  )
end

function ENTITY.GET_ENTITY_SUBMERGED_LEVEL(entity)
  return native.invoke(
    Type.Float, 802, false,
    arg(Type.Entity, entity)
  )
end

function ENTITY.SET_ENTITY_REQUIRES_MORE_EXPENSIVE_RIVER_CHECK(entity, toggle)
  native.invoke(
    Type.Void, 803, false,
    arg(Type.Entity, entity),
    arg(Type.Bool, toggle)
  )
end

function ENTITY.IS_ENTITY_ON_SCREEN(entity)
  return native.invoke(
    Type.Bool, 804, false,
    arg(Type.Entity, entity)
  )
end

function ENTITY.IS_ENTITY_PLAYING_ANIM(entity, animDict, animName, taskFlag)
  return native.invoke(
    Type.Bool, 805, false,
    arg(Type.Entity, entity),
    arg(Type.String, animDict),
    arg(Type.String, animName),
    arg(Type.Int, taskFlag)
  )
end

function ENTITY.IS_ENTITY_STATIC(entity)
  return native.invoke(
    Type.Bool, 806, false,
    arg(Type.Entity, entity)
  )
end

function ENTITY.IS_ENTITY_TOUCHING_ENTITY(entity, targetEntity)
  return native.invoke(
    Type.Bool, 807, false,
    arg(Type.Entity, entity),
    arg(Type.Entity, targetEntity)
  )
end

function ENTITY.IS_ENTITY_TOUCHING_MODEL(entity, modelHash)
  return native.invoke(
    Type.Bool, 808, false,
    arg(Type.Entity, entity),
    arg(Type.Hash, modelHash)
  )
end

function ENTITY.IS_ENTITY_UPRIGHT(entity, angle)
  return native.invoke(
    Type.Bool, 809, false,
    arg(Type.Entity, entity),
    arg(Type.Float, angle)
  )
end

function ENTITY.IS_ENTITY_UPSIDEDOWN(entity)
  return native.invoke(
    Type.Bool, 810, false,
    arg(Type.Entity, entity)
  )
end

function ENTITY.IS_ENTITY_VISIBLE(entity)
  return native.invoke(
    Type.Bool, 811, false,
    arg(Type.Entity, entity)
  )
end

function ENTITY.IS_ENTITY_VISIBLE_TO_SCRIPT(entity)
  return native.invoke(
    Type.Bool, 812, false,
    arg(Type.Entity, entity)
  )
end

function ENTITY.IS_ENTITY_OCCLUDED(entity)
  return native.invoke(
    Type.Bool, 813, false,
    arg(Type.Entity, entity)
  )
end

function ENTITY.WOULD_ENTITY_BE_OCCLUDED(entityModelHash, x, y, z, p4)
  return native.invoke(
    Type.Bool, 814, false,
    arg(Type.Hash, entityModelHash),
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, z),
    arg(Type.Bool, p4)
  )
end

function ENTITY.IS_ENTITY_WAITING_FOR_WORLD_COLLISION(entity)
  return native.invoke(
    Type.Bool, 815, false,
    arg(Type.Entity, entity)
  )
end

function ENTITY.APPLY_FORCE_TO_ENTITY_CENTER_OF_MASS(entity, forceType, x, y, z, p5, isDirectionRel, isForceRel, p8)
  native.invoke(
    Type.Void, 816, false,
    arg(Type.Entity, entity),
    arg(Type.Int, forceType),
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, z),
    arg(Type.Bool, p5),
    arg(Type.Bool, isDirectionRel),
    arg(Type.Bool, isForceRel),
    arg(Type.Bool, p8)
  )
end

function ENTITY.APPLY_FORCE_TO_ENTITY(entity, forceFlags, x, y, z, offX, offY, offZ, boneIndex, isDirectionRel, ignoreUpVec, isForceRel, p12, p13)
  native.invoke(
    Type.Void, 817, false,
    arg(Type.Entity, entity),
    arg(Type.Int, forceFlags),
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, z),
    arg(Type.Float, offX),
    arg(Type.Float, offY),
    arg(Type.Float, offZ),
    arg(Type.Int, boneIndex),
    arg(Type.Bool, isDirectionRel),
    arg(Type.Bool, ignoreUpVec),
    arg(Type.Bool, isForceRel),
    arg(Type.Bool, p12),
    arg(Type.Bool, p13)
  )
end

function ENTITY.ATTACH_ENTITY_TO_ENTITY(entity1, entity2, boneIndex, xPos, yPos, zPos, xRot, yRot, zRot, p9, useSoftPinning, collision, isPed, vertexIndex, fixedRot, p15)
  native.invoke(
    Type.Void, 818, false,
    arg(Type.Entity, entity1),
    arg(Type.Entity, entity2),
    arg(Type.Int, boneIndex),
    arg(Type.Float, xPos),
    arg(Type.Float, yPos),
    arg(Type.Float, zPos),
    arg(Type.Float, xRot),
    arg(Type.Float, yRot),
    arg(Type.Float, zRot),
    arg(Type.Bool, p9),
    arg(Type.Bool, useSoftPinning),
    arg(Type.Bool, collision),
    arg(Type.Bool, isPed),
    arg(Type.Int, vertexIndex),
    arg(Type.Bool, fixedRot),
    arg(Type.Any, p15)
  )
end

function ENTITY.ATTACH_ENTITY_BONE_TO_ENTITY_BONE(entity1, entity2, boneIndex1, boneIndex2, p4, p5)
  native.invoke(
    Type.Void, 819, false,
    arg(Type.Entity, entity1),
    arg(Type.Entity, entity2),
    arg(Type.Int, boneIndex1),
    arg(Type.Int, boneIndex2),
    arg(Type.Bool, p4),
    arg(Type.Bool, p5)
  )
end

function ENTITY.ATTACH_ENTITY_BONE_TO_ENTITY_BONE_Y_FORWARD(entity1, entity2, boneIndex1, boneIndex2, p4, p5)
  native.invoke(
    Type.Void, 820, false,
    arg(Type.Entity, entity1),
    arg(Type.Entity, entity2),
    arg(Type.Int, boneIndex1),
    arg(Type.Int, boneIndex2),
    arg(Type.Bool, p4),
    arg(Type.Bool, p5)
  )
end

function ENTITY.ATTACH_ENTITY_TO_ENTITY_PHYSICALLY(entity1, entity2, boneIndex1, boneIndex2, xPos1, yPos1, zPos1, xPos2, yPos2, zPos2, xRot, yRot, zRot, breakForce, fixedRot, p15, collision, p17, p18)
  native.invoke(
    Type.Void, 821, false,
    arg(Type.Entity, entity1),
    arg(Type.Entity, entity2),
    arg(Type.Int, boneIndex1),
    arg(Type.Int, boneIndex2),
    arg(Type.Float, xPos1),
    arg(Type.Float, yPos1),
    arg(Type.Float, zPos1),
    arg(Type.Float, xPos2),
    arg(Type.Float, yPos2),
    arg(Type.Float, zPos2),
    arg(Type.Float, xRot),
    arg(Type.Float, yRot),
    arg(Type.Float, zRot),
    arg(Type.Float, breakForce),
    arg(Type.Bool, fixedRot),
    arg(Type.Bool, p15),
    arg(Type.Bool, collision),
    arg(Type.Bool, p17),
    arg(Type.Int, p18)
  )
end

function ENTITY.ATTACH_ENTITY_TO_ENTITY_PHYSICALLY_OVERRIDE_INVERSE_MASS(firstEntityIndex, secondEntityIndex, firstEntityBoneIndex, secondEntityBoneIndex, secondEntityOffsetX, secondEntityOffsetY, secondEntityOffsetZ, firstEntityOffsetX, firstEntityOffsetY, firstEntityOffsetZ, vecRotationX, vecRotationY, vecRotationZ, physicalStrength, constrainRotation, doInitialWarp, collideWithEntity, addInitialSeperation, rotOrder, invMassScaleA, invMassScaleB)
  native.invoke(
    Type.Void, 822, false,
    arg(Type.Entity, firstEntityIndex),
    arg(Type.Entity, secondEntityIndex),
    arg(Type.Int, firstEntityBoneIndex),
    arg(Type.Int, secondEntityBoneIndex),
    arg(Type.Float, secondEntityOffsetX),
    arg(Type.Float, secondEntityOffsetY),
    arg(Type.Float, secondEntityOffsetZ),
    arg(Type.Float, firstEntityOffsetX),
    arg(Type.Float, firstEntityOffsetY),
    arg(Type.Float, firstEntityOffsetZ),
    arg(Type.Float, vecRotationX),
    arg(Type.Float, vecRotationY),
    arg(Type.Float, vecRotationZ),
    arg(Type.Float, physicalStrength),
    arg(Type.Bool, constrainRotation),
    arg(Type.Bool, doInitialWarp),
    arg(Type.Bool, collideWithEntity),
    arg(Type.Bool, addInitialSeperation),
    arg(Type.Int, rotOrder),
    arg(Type.Float, invMassScaleA),
    arg(Type.Float, invMassScaleB)
  )
end

function ENTITY.PROCESS_ENTITY_ATTACHMENTS(entity)
  native.invoke(
    Type.Void, 823, false,
    arg(Type.Entity, entity)
  )
end

function ENTITY.GET_ENTITY_BONE_INDEX_BY_NAME(entity, boneName)
  return native.invoke(
    Type.Int, 824, false,
    arg(Type.Entity, entity),
    arg(Type.String, boneName)
  )
end

function ENTITY.CLEAR_ENTITY_LAST_DAMAGE_ENTITY(entity)
  native.invoke(
    Type.Void, 825, false,
    arg(Type.Entity, entity)
  )
end

function ENTITY.DELETE_ENTITY(entity)
  native.invoke(
    Type.Void, 826, false,
    ref(Type.Entity, entity)
  )
end

function ENTITY.DETACH_ENTITY(entity, dynamic, collision)
  native.invoke(
    Type.Void, 827, false,
    arg(Type.Entity, entity),
    arg(Type.Bool, dynamic),
    arg(Type.Bool, collision)
  )
end

function ENTITY.FREEZE_ENTITY_POSITION(entity, toggle)
  native.invoke(
    Type.Void, 828, false,
    arg(Type.Entity, entity),
    arg(Type.Bool, toggle)
  )
end

function ENTITY.SET_ENTITY_SHOULD_FREEZE_WAITING_ON_COLLISION(entity, toggle)
  native.invoke(
    Type.Void, 829, false,
    arg(Type.Entity, entity),
    arg(Type.Bool, toggle)
  )
end

function ENTITY.PLAY_ENTITY_ANIM(entity, animName, animDict, p3, loop, stayInAnim, p6, delta, bitset)
  return native.invoke(
    Type.Bool, 830, false,
    arg(Type.Entity, entity),
    arg(Type.String, animName),
    arg(Type.String, animDict),
    arg(Type.Float, p3),
    arg(Type.Bool, loop),
    arg(Type.Bool, stayInAnim),
    arg(Type.Bool, p6),
    arg(Type.Float, delta),
    arg(Type.Any, bitset)
  )
end

function ENTITY.PLAY_SYNCHRONIZED_ENTITY_ANIM(entity, syncedScene, animation, propName, p4, p5, p6, p7)
  return native.invoke(
    Type.Bool, 831, false,
    arg(Type.Entity, entity),
    arg(Type.Int, syncedScene),
    arg(Type.String, animation),
    arg(Type.String, propName),
    arg(Type.Float, p4),
    arg(Type.Float, p5),
    arg(Type.Any, p6),
    arg(Type.Float, p7)
  )
end

function ENTITY.PLAY_SYNCHRONIZED_MAP_ENTITY_ANIM(x1, y1, z1, x2, y2, z2, p6, p7, p8, p9, p10, p11)
  return native.invoke(
    Type.Bool, 832, false,
    arg(Type.Float, x1),
    arg(Type.Float, y1),
    arg(Type.Float, z1),
    arg(Type.Float, x2),
    arg(Type.Any, y2),
    arg(Type.Float, z2),
    arg(Type.String, p6),
    arg(Type.String, p7),
    arg(Type.Float, p8),
    arg(Type.Float, p9),
    arg(Type.Any, p10),
    arg(Type.Float, p11)
  )
end

function ENTITY.STOP_SYNCHRONIZED_MAP_ENTITY_ANIM(x1, y1, z1, x2, y2, z2)
  return native.invoke(
    Type.Bool, 833, false,
    arg(Type.Float, x1),
    arg(Type.Float, y1),
    arg(Type.Float, z1),
    arg(Type.Float, x2),
    arg(Type.Any, y2),
    arg(Type.Float, z2)
  )
end

function ENTITY.STOP_ENTITY_ANIM(entity, animation, animGroup, p3)
  return native.invoke(
    Type.Bool, 834, false,
    arg(Type.Entity, entity),
    arg(Type.String, animation),
    arg(Type.String, animGroup),
    arg(Type.Float, p3)
  )
end

function ENTITY.STOP_SYNCHRONIZED_ENTITY_ANIM(entity, p1, p2)
  return native.invoke(
    Type.Bool, 835, false,
    arg(Type.Entity, entity),
    arg(Type.Float, p1),
    arg(Type.Bool, p2)
  )
end

function ENTITY.HAS_ANIM_EVENT_FIRED(entity, actionHash)
  return native.invoke(
    Type.Bool, 836, false,
    arg(Type.Entity, entity),
    arg(Type.Hash, actionHash)
  )
end

function ENTITY.FIND_ANIM_EVENT_PHASE(animDictionary, animName, p2, p3, p4)
  return native.invoke(
    Type.Bool, 837, false,
    arg(Type.String, animDictionary),
    arg(Type.String, animName),
    arg(Type.String, p2),
    ref(Type.Any, p3),
    ref(Type.Any, p4)
  )
end

function ENTITY.SET_ENTITY_ANIM_CURRENT_TIME(entity, animDictionary, animName, time)
  native.invoke(
    Type.Void, 838, false,
    arg(Type.Entity, entity),
    arg(Type.String, animDictionary),
    arg(Type.String, animName),
    arg(Type.Float, time)
  )
end

function ENTITY.SET_ENTITY_ANIM_SPEED(entity, animDictionary, animName, speedMultiplier)
  native.invoke(
    Type.Void, 839, false,
    arg(Type.Entity, entity),
    arg(Type.String, animDictionary),
    arg(Type.String, animName),
    arg(Type.Float, speedMultiplier)
  )
end

function ENTITY.SET_ENTITY_AS_MISSION_ENTITY(entity, p1, p2)
  native.invoke(
    Type.Void, 840, false,
    arg(Type.Entity, entity),
    arg(Type.Bool, p1),
    arg(Type.Bool, p2)
  )
end

function ENTITY.SET_ENTITY_AS_NO_LONGER_NEEDED(entity)
  native.invoke(
    Type.Void, 841, false,
    ref(Type.Entity, entity)
  )
end

function ENTITY.SET_PED_AS_NO_LONGER_NEEDED(ped)
  native.invoke(
    Type.Void, 842, false,
    ref(Type.Ped, ped)
  )
end

function ENTITY.SET_VEHICLE_AS_NO_LONGER_NEEDED(vehicle)
  native.invoke(
    Type.Void, 843, false,
    ref(Type.Vehicle, vehicle)
  )
end

function ENTITY.SET_OBJECT_AS_NO_LONGER_NEEDED(object)
  native.invoke(
    Type.Void, 844, false,
    ref(Type.Object, object)
  )
end

function ENTITY.SET_ENTITY_CAN_BE_DAMAGED(entity, toggle)
  native.invoke(
    Type.Void, 845, false,
    arg(Type.Entity, entity),
    arg(Type.Bool, toggle)
  )
end

function ENTITY.GET_ENTITY_CAN_BE_DAMAGED(entity)
  return native.invoke(
    Type.Bool, 846, false,
    arg(Type.Entity, entity)
  )
end

function ENTITY.SET_ENTITY_CAN_BE_DAMAGED_BY_RELATIONSHIP_GROUP(entity, bCanBeDamaged, relGroup)
  native.invoke(
    Type.Void, 847, false,
    arg(Type.Entity, entity),
    arg(Type.Bool, bCanBeDamaged),
    arg(Type.Int, relGroup)
  )
end

function ENTITY.SET_ENTITY_CAN_ONLY_BE_DAMAGED_BY_SCRIPT_PARTICIPANTS(entity, toggle)
  native.invoke(
    Type.Void, 848, false,
    arg(Type.Entity, entity),
    arg(Type.Bool, toggle)
  )
end

function ENTITY.SET_ENTITY_CAN_BE_TARGETED_WITHOUT_LOS(entity, toggle)
  native.invoke(
    Type.Void, 849, false,
    arg(Type.Entity, entity),
    arg(Type.Bool, toggle)
  )
end

function ENTITY.SET_ENTITY_COLLISION(entity, toggle, keepPhysics)
  native.invoke(
    Type.Void, 850, false,
    arg(Type.Entity, entity),
    arg(Type.Bool, toggle),
    arg(Type.Bool, keepPhysics)
  )
end

function ENTITY.GET_ENTITY_COLLISION_DISABLED(entity)
  return native.invoke(
    Type.Bool, 851, false,
    arg(Type.Entity, entity)
  )
end

function ENTITY.SET_ENTITY_COMPLETELY_DISABLE_COLLISION(entity, toggle, keepPhysics)
  native.invoke(
    Type.Void, 852, false,
    arg(Type.Entity, entity),
    arg(Type.Bool, toggle),
    arg(Type.Bool, keepPhysics)
  )
end

function ENTITY.SET_ENTITY_COORDS(entity, xPos, yPos, zPos, xAxis, yAxis, zAxis, clearArea)
  native.invoke(
    Type.Void, 853, false,
    arg(Type.Entity, entity),
    arg(Type.Float, xPos),
    arg(Type.Float, yPos),
    arg(Type.Float, zPos),
    arg(Type.Bool, xAxis),
    arg(Type.Bool, yAxis),
    arg(Type.Bool, zAxis),
    arg(Type.Bool, clearArea)
  )
end

function ENTITY.SET_ENTITY_COORDS_WITHOUT_PLANTS_RESET(entity, xPos, yPos, zPos, alive, deadFlag, ragdollFlag, clearArea)
  native.invoke(
    Type.Void, 854, false,
    arg(Type.Entity, entity),
    arg(Type.Float, xPos),
    arg(Type.Float, yPos),
    arg(Type.Float, zPos),
    arg(Type.Bool, alive),
    arg(Type.Bool, deadFlag),
    arg(Type.Bool, ragdollFlag),
    arg(Type.Bool, clearArea)
  )
end

function ENTITY.SET_ENTITY_COORDS_NO_OFFSET(entity, xPos, yPos, zPos, xAxis, yAxis, zAxis)
  native.invoke(
    Type.Void, 855, false,
    arg(Type.Entity, entity),
    arg(Type.Float, xPos),
    arg(Type.Float, yPos),
    arg(Type.Float, zPos),
    arg(Type.Bool, xAxis),
    arg(Type.Bool, yAxis),
    arg(Type.Bool, zAxis)
  )
end

function ENTITY.SET_ENTITY_DYNAMIC(entity, toggle)
  native.invoke(
    Type.Void, 856, false,
    arg(Type.Entity, entity),
    arg(Type.Bool, toggle)
  )
end

function ENTITY.SET_ENTITY_HEADING(entity, heading)
  native.invoke(
    Type.Void, 857, false,
    arg(Type.Entity, entity),
    arg(Type.Float, heading)
  )
end

function ENTITY.SET_ENTITY_HEALTH(entity, health, instigator, weaponType)
  native.invoke(
    Type.Void, 858, false,
    arg(Type.Entity, entity),
    arg(Type.Int, health),
    arg(Type.Entity, instigator),
    arg(Type.Hash, weaponType)
  )
end

function ENTITY.SET_ENTITY_INVINCIBLE(entity, toggle)
  native.invoke(
    Type.Void, 859, false,
    arg(Type.Entity, entity),
    arg(Type.Bool, toggle)
  )
end

function ENTITY.SET_ENTITY_IS_TARGET_PRIORITY(entity, p1, p2)
  native.invoke(
    Type.Void, 860, false,
    arg(Type.Entity, entity),
    arg(Type.Bool, p1),
    arg(Type.Float, p2)
  )
end

function ENTITY.SET_ENTITY_LIGHTS(entity, toggle)
  native.invoke(
    Type.Void, 861, false,
    arg(Type.Entity, entity),
    arg(Type.Bool, toggle)
  )
end

function ENTITY.SET_ENTITY_LOAD_COLLISION_FLAG(entity, toggle, p2)
  native.invoke(
    Type.Void, 862, false,
    arg(Type.Entity, entity),
    arg(Type.Bool, toggle),
    arg(Type.Any, p2)
  )
end

function ENTITY.HAS_COLLISION_LOADED_AROUND_ENTITY(entity)
  return native.invoke(
    Type.Bool, 863, false,
    arg(Type.Entity, entity)
  )
end

function ENTITY.SET_ENTITY_MAX_SPEED(entity, speed)
  native.invoke(
    Type.Void, 864, false,
    arg(Type.Entity, entity),
    arg(Type.Float, speed)
  )
end

function ENTITY.SET_ENTITY_ONLY_DAMAGED_BY_PLAYER(entity, toggle)
  native.invoke(
    Type.Void, 865, false,
    arg(Type.Entity, entity),
    arg(Type.Bool, toggle)
  )
end

function ENTITY.SET_ENTITY_ONLY_DAMAGED_BY_RELATIONSHIP_GROUP(entity, p1, p2)
  native.invoke(
    Type.Void, 866, false,
    arg(Type.Entity, entity),
    arg(Type.Bool, p1),
    arg(Type.Any, p2)
  )
end

function ENTITY.SET_ENTITY_PROOFS(entity, bulletProof, fireProof, explosionProof, collisionProof, meleeProof, steamProof, p7, waterProof)
  native.invoke(
    Type.Void, 867, false,
    arg(Type.Entity, entity),
    arg(Type.Bool, bulletProof),
    arg(Type.Bool, fireProof),
    arg(Type.Bool, explosionProof),
    arg(Type.Bool, collisionProof),
    arg(Type.Bool, meleeProof),
    arg(Type.Bool, steamProof),
    arg(Type.Bool, p7),
    arg(Type.Bool, waterProof)
  )
end

function ENTITY.GET_ENTITY_PROOFS(entity, bulletProof, fireProof, explosionProof, collisionProof, meleeProof, steamProof, p7, drownProof)
  return native.invoke(
    Type.Bool, 868, false,
    arg(Type.Entity, entity),
    ref(Type.Bool, bulletProof),
    ref(Type.Bool, fireProof),
    ref(Type.Bool, explosionProof),
    ref(Type.Bool, collisionProof),
    ref(Type.Bool, meleeProof),
    ref(Type.Bool, steamProof),
    ref(Type.Bool, p7),
    ref(Type.Bool, drownProof)
  )
end

function ENTITY.SET_ENTITY_QUATERNION(entity, x, y, z, w)
  native.invoke(
    Type.Void, 869, false,
    arg(Type.Entity, entity),
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, z),
    arg(Type.Float, w)
  )
end

function ENTITY.SET_ENTITY_RECORDS_COLLISIONS(entity, toggle)
  native.invoke(
    Type.Void, 870, false,
    arg(Type.Entity, entity),
    arg(Type.Bool, toggle)
  )
end

function ENTITY.SET_ENTITY_ROTATION(entity, pitch, roll, yaw, rotationOrder, p5)
  native.invoke(
    Type.Void, 871, false,
    arg(Type.Entity, entity),
    arg(Type.Float, pitch),
    arg(Type.Float, roll),
    arg(Type.Float, yaw),
    arg(Type.Int, rotationOrder),
    arg(Type.Bool, p5)
  )
end

function ENTITY.SET_ENTITY_VISIBLE(entity, toggle, p2)
  native.invoke(
    Type.Void, 872, false,
    arg(Type.Entity, entity),
    arg(Type.Bool, toggle),
    arg(Type.Bool, p2)
  )
end

function ENTITY.SET_ENTITY_WATER_REFLECTION_FLAG(entity, toggle)
  native.invoke(
    Type.Void, 873, false,
    arg(Type.Entity, entity),
    arg(Type.Bool, toggle)
  )
end

function ENTITY.SET_ENTITY_MIRROR_REFLECTION_FLAG(entity, p1)
  native.invoke(
    Type.Void, 874, false,
    arg(Type.Entity, entity),
    arg(Type.Bool, p1)
  )
end

function ENTITY.SET_ENTITY_VELOCITY(entity, x, y, z)
  native.invoke(
    Type.Void, 875, false,
    arg(Type.Entity, entity),
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, z)
  )
end

function ENTITY.SET_ENTITY_ANGULAR_VELOCITY(entity, x, y, z)
  native.invoke(
    Type.Void, 876, false,
    arg(Type.Entity, entity),
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, z)
  )
end

function ENTITY.SET_ENTITY_HAS_GRAVITY(entity, toggle)
  native.invoke(
    Type.Void, 877, false,
    arg(Type.Entity, entity),
    arg(Type.Bool, toggle)
  )
end

function ENTITY.SET_ENTITY_LOD_DIST(entity, value)
  native.invoke(
    Type.Void, 878, false,
    arg(Type.Entity, entity),
    arg(Type.Int, value)
  )
end

function ENTITY.GET_ENTITY_LOD_DIST(entity)
  return native.invoke(
    Type.Int, 879, false,
    arg(Type.Entity, entity)
  )
end

function ENTITY.SET_ENTITY_ALPHA(entity, alphaLevel, skin)
  native.invoke(
    Type.Void, 880, false,
    arg(Type.Entity, entity),
    arg(Type.Int, alphaLevel),
    arg(Type.Bool, skin)
  )
end

function ENTITY.GET_ENTITY_ALPHA(entity)
  return native.invoke(
    Type.Int, 881, false,
    arg(Type.Entity, entity)
  )
end

function ENTITY.RESET_ENTITY_ALPHA(entity)
  native.invoke(
    Type.Void, 882, false,
    arg(Type.Entity, entity)
  )
end

function ENTITY.RESET_PICKUP_ENTITY_GLOW(entity)
  native.invoke(
    Type.Void, 883, false,
    arg(Type.Entity, entity)
  )
end

function ENTITY.SET_PICKUP_COLLIDES_WITH_PROJECTILES(p0, p1)
  native.invoke(
    Type.Void, 884, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1)
  )
end

function ENTITY.SET_ENTITY_SORT_BIAS(entity, p1)
  native.invoke(
    Type.Void, 885, false,
    arg(Type.Entity, entity),
    arg(Type.Float, p1)
  )
end

function ENTITY.SET_ENTITY_ALWAYS_PRERENDER(entity, toggle)
  native.invoke(
    Type.Void, 886, false,
    arg(Type.Entity, entity),
    arg(Type.Bool, toggle)
  )
end

function ENTITY.SET_ENTITY_RENDER_SCORCHED(entity, toggle)
  native.invoke(
    Type.Void, 887, false,
    arg(Type.Entity, entity),
    arg(Type.Bool, toggle)
  )
end

function ENTITY.SET_ENTITY_TRAFFICLIGHT_OVERRIDE(entity, state)
  native.invoke(
    Type.Void, 888, false,
    arg(Type.Entity, entity),
    arg(Type.Int, state)
  )
end

function ENTITY.SET_ENTITY_IS_IN_VEHICLE(entity)
  native.invoke(
    Type.Void, 889, false,
    arg(Type.Entity, entity)
  )
end

function ENTITY.CREATE_MODEL_SWAP(x, y, z, radius, originalModel, newModel, p6)
  native.invoke(
    Type.Void, 890, false,
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, z),
    arg(Type.Float, radius),
    arg(Type.Hash, originalModel),
    arg(Type.Hash, newModel),
    arg(Type.Bool, p6)
  )
end

function ENTITY.REMOVE_MODEL_SWAP(x, y, z, radius, originalModel, newModel, p6)
  native.invoke(
    Type.Void, 891, false,
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, z),
    arg(Type.Float, radius),
    arg(Type.Hash, originalModel),
    arg(Type.Hash, newModel),
    arg(Type.Bool, p6)
  )
end

function ENTITY.CREATE_MODEL_HIDE(x, y, z, radius, modelHash, p5)
  native.invoke(
    Type.Void, 892, false,
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, z),
    arg(Type.Float, radius),
    arg(Type.Hash, modelHash),
    arg(Type.Bool, p5)
  )
end

function ENTITY.CREATE_MODEL_HIDE_EXCLUDING_SCRIPT_OBJECTS(x, y, z, radius, modelHash, p5)
  native.invoke(
    Type.Void, 893, false,
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, z),
    arg(Type.Float, radius),
    arg(Type.Hash, modelHash),
    arg(Type.Bool, p5)
  )
end

function ENTITY.REMOVE_MODEL_HIDE(x, y, z, radius, modelHash, p5)
  native.invoke(
    Type.Void, 894, false,
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, z),
    arg(Type.Float, radius),
    arg(Type.Hash, modelHash),
    arg(Type.Bool, p5)
  )
end

function ENTITY.CREATE_FORCED_OBJECT(x, y, z, p3, modelHash, p5)
  native.invoke(
    Type.Void, 895, false,
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, z),
    arg(Type.Any, p3),
    arg(Type.Hash, modelHash),
    arg(Type.Bool, p5)
  )
end

function ENTITY.REMOVE_FORCED_OBJECT(x, y, z, p3, modelHash)
  native.invoke(
    Type.Void, 896, false,
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, z),
    arg(Type.Float, p3),
    arg(Type.Hash, modelHash)
  )
end

function ENTITY.SET_ENTITY_NO_COLLISION_ENTITY(entity1, entity2, thisFrameOnly)
  native.invoke(
    Type.Void, 897, false,
    arg(Type.Entity, entity1),
    arg(Type.Entity, entity2),
    arg(Type.Bool, thisFrameOnly)
  )
end

function ENTITY.SET_ENTITY_MOTION_BLUR(entity, toggle)
  native.invoke(
    Type.Void, 898, false,
    arg(Type.Entity, entity),
    arg(Type.Bool, toggle)
  )
end

function ENTITY.SET_CAN_AUTO_VAULT_ON_ENTITY(entity, toggle)
  native.invoke(
    Type.Void, 899, false,
    arg(Type.Entity, entity),
    arg(Type.Bool, toggle)
  )
end

function ENTITY.SET_CAN_CLIMB_ON_ENTITY(entity, toggle)
  native.invoke(
    Type.Void, 900, false,
    arg(Type.Entity, entity),
    arg(Type.Bool, toggle)
  )
end

function ENTITY.SET_WAIT_FOR_COLLISIONS_BEFORE_PROBE(entity, toggle)
  native.invoke(
    Type.Void, 901, false,
    arg(Type.Entity, entity),
    arg(Type.Bool, toggle)
  )
end

function ENTITY.SET_ENTITY_NOWEAPONDECALS(entity, p1)
  native.invoke(
    Type.Void, 902, false,
    arg(Type.Entity, entity),
    arg(Type.Bool, p1)
  )
end

function ENTITY.SET_ENTITY_USE_MAX_DISTANCE_FOR_WATER_REFLECTION(entity, p1)
  native.invoke(
    Type.Void, 903, false,
    arg(Type.Entity, entity),
    arg(Type.Bool, p1)
  )
end

function ENTITY.GET_ENTITY_BONE_ROTATION(entity, boneIndex)
  return native.invoke(
    Type.Vector3, 904, false,
    arg(Type.Entity, entity),
    arg(Type.Int, boneIndex)
  )
end

function ENTITY.GET_ENTITY_BONE_POSTION(entity, boneIndex)
  return native.invoke(
    Type.Vector3, 905, false,
    arg(Type.Entity, entity),
    arg(Type.Int, boneIndex)
  )
end

function ENTITY.GET_ENTITY_BONE_OBJECT_ROTATION(entity, boneIndex)
  return native.invoke(
    Type.Vector3, 906, false,
    arg(Type.Entity, entity),
    arg(Type.Int, boneIndex)
  )
end

function ENTITY.GET_ENTITY_BONE_OBJECT_POSTION(entity, boneIndex)
  return native.invoke(
    Type.Vector3, 907, false,
    arg(Type.Entity, entity),
    arg(Type.Int, boneIndex)
  )
end

function ENTITY.GET_ENTITY_BONE_COUNT(entity)
  return native.invoke(
    Type.Int, 908, false,
    arg(Type.Entity, entity)
  )
end

function ENTITY.ENABLE_ENTITY_BULLET_COLLISION(entity)
  native.invoke(
    Type.Void, 909, false,
    arg(Type.Entity, entity)
  )
end

function ENTITY.SET_ENTITY_CAN_ONLY_BE_DAMAGED_BY_ENTITY(entity1, entity2)
  native.invoke(
    Type.Void, 910, false,
    arg(Type.Entity, entity1),
    arg(Type.Entity, entity2)
  )
end

function ENTITY.SET_ENTITY_CANT_CAUSE_COLLISION_DAMAGED_ENTITY(entity1, entity2)
  native.invoke(
    Type.Void, 911, false,
    arg(Type.Entity, entity1),
    arg(Type.Entity, entity2)
  )
end

function ENTITY.SET_ALLOW_MIGRATE_TO_SPECTATOR(entity, p1)
  native.invoke(
    Type.Void, 912, false,
    arg(Type.Entity, entity),
    arg(Type.Any, p1)
  )
end

function ENTITY.GET_ENTITY_OF_TYPE_ATTACHED_TO_ENTITY(entity, modelHash)
  return native.invoke(
    Type.Entity, 913, false,
    arg(Type.Entity, entity),
    arg(Type.Hash, modelHash)
  )
end

function ENTITY.SET_PICK_UP_BY_CARGOBOB_DISABLED(entity, toggle)
  native.invoke(
    Type.Void, 914, false,
    arg(Type.Entity, entity),
    arg(Type.Bool, toggle)
  )
end


EVENT = {}

function EVENT.SET_DECISION_MAKER(ped, name)
  native.invoke(
    Type.Void, 915, false,
    arg(Type.Ped, ped),
    arg(Type.Hash, name)
  )
end

function EVENT.CLEAR_DECISION_MAKER_EVENT_RESPONSE(name, eventType)
  native.invoke(
    Type.Void, 916, false,
    arg(Type.Hash, name),
    arg(Type.Int, eventType)
  )
end

function EVENT.BLOCK_DECISION_MAKER_EVENT(name, eventType)
  native.invoke(
    Type.Void, 917, false,
    arg(Type.Hash, name),
    arg(Type.Int, eventType)
  )
end

function EVENT.UNBLOCK_DECISION_MAKER_EVENT(name, eventType)
  native.invoke(
    Type.Void, 918, false,
    arg(Type.Hash, name),
    arg(Type.Int, eventType)
  )
end

function EVENT.ADD_SHOCKING_EVENT_AT_POSITION(eventType, x, y, z, duration)
  return native.invoke(
    Type.Int, 919, false,
    arg(Type.Int, eventType),
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, z),
    arg(Type.Float, duration)
  )
end

function EVENT.ADD_SHOCKING_EVENT_FOR_ENTITY(eventType, entity, duration)
  return native.invoke(
    Type.Int, 920, false,
    arg(Type.Int, eventType),
    arg(Type.Entity, entity),
    arg(Type.Float, duration)
  )
end

function EVENT.IS_SHOCKING_EVENT_IN_SPHERE(eventType, x, y, z, radius)
  return native.invoke(
    Type.Bool, 921, false,
    arg(Type.Int, eventType),
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, z),
    arg(Type.Float, radius)
  )
end

function EVENT.REMOVE_SHOCKING_EVENT(event)
  return native.invoke(
    Type.Bool, 922, false,
    arg(Type.Scrhandle, event)
  )
end

function EVENT.REMOVE_ALL_SHOCKING_EVENTS(p0)
  native.invoke(
    Type.Void, 923, false,
    arg(Type.Bool, p0)
  )
end

function EVENT.REMOVE_SHOCKING_EVENT_SPAWN_BLOCKING_AREAS()
  native.invoke(
    Type.Void, 924, false
  )
end

function EVENT.SUPPRESS_SHOCKING_EVENTS_NEXT_FRAME()
  native.invoke(
    Type.Void, 925, false
  )
end

function EVENT.SUPPRESS_SHOCKING_EVENT_TYPE_NEXT_FRAME(eventType)
  native.invoke(
    Type.Void, 926, false,
    arg(Type.Int, eventType)
  )
end

function EVENT.SUPPRESS_AGITATION_EVENTS_NEXT_FRAME()
  native.invoke(
    Type.Void, 927, false
  )
end


FILES = {}

function FILES.GET_NUM_TATTOO_SHOP_DLC_ITEMS(character)
  return native.invoke(
    Type.Int, 928, false,
    arg(Type.Int, character)
  )
end

function FILES.GET_TATTOO_SHOP_DLC_ITEM_DATA(characterType, decorationIndex, outComponent)
  return native.invoke(
    Type.Bool, 929, false,
    arg(Type.Int, characterType),
    arg(Type.Int, decorationIndex),
    ref(Type.Any, outComponent)
  )
end

function FILES.GET_TATTOO_SHOP_DLC_ITEM_INDEX(overlayHash, p1, character)
  return native.invoke(
    Type.Int, 930, false,
    arg(Type.Hash, overlayHash),
    arg(Type.Any, p1),
    arg(Type.Int, character)
  )
end

function FILES.INIT_SHOP_PED_COMPONENT(outComponent)
  native.invoke(
    Type.Void, 931, false,
    ref(Type.Any, outComponent)
  )
end

function FILES.INIT_SHOP_PED_PROP(outProp)
  native.invoke(
    Type.Void, 932, false,
    ref(Type.Any, outProp)
  )
end

function FILES.SETUP_SHOP_PED_APPAREL_QUERY(p0, p1, p2, p3)
  return native.invoke(
    Type.Int, 933, false,
    arg(Type.Int, p0),
    arg(Type.Int, p1),
    arg(Type.Int, p2),
    arg(Type.Int, p3)
  )
end

function FILES.SETUP_SHOP_PED_APPAREL_QUERY_TU(character, p1, p2, p3, p4, componentId)
  return native.invoke(
    Type.Int, 934, false,
    arg(Type.Int, character),
    arg(Type.Int, p1),
    arg(Type.Int, p2),
    arg(Type.Bool, p3),
    arg(Type.Int, p4),
    arg(Type.Int, componentId)
  )
end

function FILES.GET_SHOP_PED_QUERY_COMPONENT(componentId, outComponent)
  native.invoke(
    Type.Void, 935, false,
    arg(Type.Int, componentId),
    ref(Type.Any, outComponent)
  )
end

function FILES.GET_SHOP_PED_QUERY_COMPONENT_INDEX(componentHash)
  return native.invoke(
    Type.Int, 936, false,
    arg(Type.Hash, componentHash)
  )
end

function FILES.GET_SHOP_PED_COMPONENT(componentHash, outComponent)
  native.invoke(
    Type.Void, 937, false,
    arg(Type.Hash, componentHash),
    ref(Type.Any, outComponent)
  )
end

function FILES.GET_SHOP_PED_QUERY_PROP(componentId, outProp)
  native.invoke(
    Type.Void, 938, false,
    arg(Type.Int, componentId),
    ref(Type.Any, outProp)
  )
end

function FILES.GET_SHOP_PED_QUERY_PROP_INDEX(componentHash)
  return native.invoke(
    Type.Int, 939, false,
    arg(Type.Hash, componentHash)
  )
end

function FILES.GET_SHOP_PED_PROP(componentHash, outProp)
  native.invoke(
    Type.Void, 940, false,
    arg(Type.Hash, componentHash),
    ref(Type.Any, outProp)
  )
end

function FILES.GET_HASH_NAME_FOR_COMPONENT(entity, componentId, drawableVariant, textureVariant)
  return native.invoke(
    Type.Hash, 941, false,
    arg(Type.Entity, entity),
    arg(Type.Int, componentId),
    arg(Type.Int, drawableVariant),
    arg(Type.Int, textureVariant)
  )
end

function FILES.GET_HASH_NAME_FOR_PROP(entity, componentId, propIndex, propTextureIndex)
  return native.invoke(
    Type.Hash, 942, false,
    arg(Type.Entity, entity),
    arg(Type.Int, componentId),
    arg(Type.Int, propIndex),
    arg(Type.Int, propTextureIndex)
  )
end

function FILES.GET_SHOP_PED_APPAREL_VARIANT_COMPONENT_COUNT(componentHash)
  return native.invoke(
    Type.Int, 943, false,
    arg(Type.Hash, componentHash)
  )
end

function FILES.GET_SHOP_PED_APPAREL_VARIANT_PROP_COUNT(propHash)
  return native.invoke(
    Type.Int, 944, false,
    arg(Type.Hash, propHash)
  )
end

function FILES.GET_VARIANT_COMPONENT(componentHash, variantComponentIndex, nameHash, enumValue, componentType)
  native.invoke(
    Type.Void, 945, false,
    arg(Type.Hash, componentHash),
    arg(Type.Int, variantComponentIndex),
    ref(Type.Hash, nameHash),
    ref(Type.Int, enumValue),
    ref(Type.Int, componentType)
  )
end

function FILES.GET_VARIANT_PROP(componentHash, variantPropIndex, nameHash, enumValue, anchorPoint)
  native.invoke(
    Type.Void, 946, false,
    arg(Type.Hash, componentHash),
    arg(Type.Int, variantPropIndex),
    ref(Type.Hash, nameHash),
    ref(Type.Int, enumValue),
    ref(Type.Int, anchorPoint)
  )
end

function FILES.GET_SHOP_PED_APPAREL_FORCED_COMPONENT_COUNT(componentHash)
  return native.invoke(
    Type.Int, 947, false,
    arg(Type.Hash, componentHash)
  )
end

function FILES.GET_SHOP_PED_APPAREL_FORCED_PROP_COUNT(componentHash)
  return native.invoke(
    Type.Int, 948, false,
    arg(Type.Hash, componentHash)
  )
end

function FILES.GET_FORCED_COMPONENT(componentHash, forcedComponentIndex, nameHash, enumValue, componentType)
  native.invoke(
    Type.Void, 949, false,
    arg(Type.Hash, componentHash),
    arg(Type.Int, forcedComponentIndex),
    ref(Type.Hash, nameHash),
    ref(Type.Int, enumValue),
    ref(Type.Int, componentType)
  )
end

function FILES.GET_FORCED_PROP(componentHash, forcedPropIndex, nameHash, enumValue, anchorPoint)
  native.invoke(
    Type.Void, 950, false,
    arg(Type.Hash, componentHash),
    arg(Type.Int, forcedPropIndex),
    ref(Type.Hash, nameHash),
    ref(Type.Int, enumValue),
    ref(Type.Int, anchorPoint)
  )
end

function FILES.DOES_SHOP_PED_APPAREL_HAVE_RESTRICTION_TAG(componentHash, restrictionTagHash, componentId)
  return native.invoke(
    Type.Bool, 951, false,
    arg(Type.Hash, componentHash),
    arg(Type.Hash, restrictionTagHash),
    arg(Type.Int, componentId)
  )
end

function FILES.DOES_CURRENT_PED_COMPONENT_HAVE_RESTRICTION_TAG(ped, componentId, restrictionTagHash)
  return native.invoke(
    Type.Bool, 952, false,
    arg(Type.Ped, ped),
    arg(Type.Int, componentId),
    arg(Type.Hash, restrictionTagHash)
  )
end

function FILES.DOES_CURRENT_PED_PROP_HAVE_RESTRICTION_TAG(ped, componentId, restrictionTagHash)
  return native.invoke(
    Type.Bool, 953, false,
    arg(Type.Ped, ped),
    arg(Type.Int, componentId),
    arg(Type.Hash, restrictionTagHash)
  )
end

function FILES.SETUP_SHOP_PED_OUTFIT_QUERY(character, p1)
  return native.invoke(
    Type.Int, 954, false,
    arg(Type.Int, character),
    arg(Type.Bool, p1)
  )
end

function FILES.GET_SHOP_PED_QUERY_OUTFIT(outfitIndex, outfit)
  native.invoke(
    Type.Void, 955, false,
    arg(Type.Int, outfitIndex),
    ref(Type.Any, outfit)
  )
end

function FILES.GET_SHOP_PED_OUTFIT(p0, p1)
  native.invoke(
    Type.Void, 956, false,
    arg(Type.Any, p0),
    ref(Type.Any, p1)
  )
end

function FILES.GET_SHOP_PED_OUTFIT_LOCATE(p0)
  return native.invoke(
    Type.Int, 957, false,
    arg(Type.Any, p0)
  )
end

function FILES.GET_SHOP_PED_OUTFIT_PROP_VARIANT(outfitHash, variantIndex, outPropVariant)
  return native.invoke(
    Type.Bool, 958, false,
    arg(Type.Hash, outfitHash),
    arg(Type.Int, variantIndex),
    ref(Type.Any, outPropVariant)
  )
end

function FILES.GET_SHOP_PED_OUTFIT_COMPONENT_VARIANT(outfitHash, variantIndex, outComponentVariant)
  return native.invoke(
    Type.Bool, 959, false,
    arg(Type.Hash, outfitHash),
    arg(Type.Int, variantIndex),
    ref(Type.Any, outComponentVariant)
  )
end

function FILES.GET_NUM_DLC_VEHICLES()
  return native.invoke(
    Type.Int, 960, false
  )
end

function FILES.GET_DLC_VEHICLE_MODEL(dlcVehicleIndex)
  return native.invoke(
    Type.Hash, 961, false,
    arg(Type.Int, dlcVehicleIndex)
  )
end

function FILES.GET_DLC_VEHICLE_DATA(dlcVehicleIndex, outData)
  return native.invoke(
    Type.Bool, 962, false,
    arg(Type.Int, dlcVehicleIndex),
    ref(Type.Any, outData)
  )
end

function FILES.GET_DLC_VEHICLE_FLAGS(dlcVehicleIndex)
  return native.invoke(
    Type.Int, 963, false,
    arg(Type.Int, dlcVehicleIndex)
  )
end

function FILES.GET_NUM_DLC_WEAPONS()
  return native.invoke(
    Type.Int, 964, false
  )
end

function FILES.GET_NUM_DLC_WEAPONS_SP()
  return native.invoke(
    Type.Int, 965, false
  )
end

function FILES.GET_DLC_WEAPON_DATA(dlcWeaponIndex, outData)
  return native.invoke(
    Type.Bool, 966, false,
    arg(Type.Int, dlcWeaponIndex),
    ref(Type.Any, outData)
  )
end

function FILES.GET_DLC_WEAPON_DATA_SP(dlcWeaponIndex, outData)
  return native.invoke(
    Type.Bool, 967, false,
    arg(Type.Int, dlcWeaponIndex),
    ref(Type.Any, outData)
  )
end

function FILES.GET_NUM_DLC_WEAPON_COMPONENTS(dlcWeaponIndex)
  return native.invoke(
    Type.Int, 968, false,
    arg(Type.Int, dlcWeaponIndex)
  )
end

function FILES.GET_NUM_DLC_WEAPON_COMPONENTS_SP(dlcWeaponIndex)
  return native.invoke(
    Type.Int, 969, false,
    arg(Type.Int, dlcWeaponIndex)
  )
end

function FILES.GET_DLC_WEAPON_COMPONENT_DATA(dlcWeaponIndex, dlcWeapCompIndex, ComponentDataPtr)
  return native.invoke(
    Type.Bool, 970, false,
    arg(Type.Int, dlcWeaponIndex),
    arg(Type.Int, dlcWeapCompIndex),
    ref(Type.Any, ComponentDataPtr)
  )
end

function FILES.GET_DLC_WEAPON_COMPONENT_DATA_SP(dlcWeaponIndex, dlcWeapCompIndex, ComponentDataPtr)
  return native.invoke(
    Type.Bool, 971, false,
    arg(Type.Int, dlcWeaponIndex),
    arg(Type.Int, dlcWeapCompIndex),
    ref(Type.Any, ComponentDataPtr)
  )
end

function FILES.IS_CONTENT_ITEM_LOCKED(itemHash)
  return native.invoke(
    Type.Bool, 972, false,
    arg(Type.Hash, itemHash)
  )
end

function FILES.IS_DLC_VEHICLE_MOD(hash)
  return native.invoke(
    Type.Bool, 973, false,
    arg(Type.Hash, hash)
  )
end

function FILES.GET_DLC_VEHICLE_MOD_LOCK_HASH(hash)
  return native.invoke(
    Type.Hash, 974, false,
    arg(Type.Hash, hash)
  )
end

function FILES.EXECUTE_CONTENT_CHANGESET_GROUP_FOR_ALL(hash)
  native.invoke(
    Type.Void, 975, false,
    arg(Type.Hash, hash)
  )
end

function FILES.REVERT_CONTENT_CHANGESET_GROUP_FOR_ALL(hash)
  native.invoke(
    Type.Void, 976, false,
    arg(Type.Hash, hash)
  )
end


FIRE = {}

function FIRE.START_SCRIPT_FIRE(X, Y, Z, maxChildren, isGasFire)
  return native.invoke(
    Type.Fireid, 977, false,
    arg(Type.Float, X),
    arg(Type.Float, Y),
    arg(Type.Float, Z),
    arg(Type.Int, maxChildren),
    arg(Type.Bool, isGasFire)
  )
end

function FIRE.REMOVE_SCRIPT_FIRE(fireHandle)
  native.invoke(
    Type.Void, 978, false,
    arg(Type.Fireid, fireHandle)
  )
end

function FIRE.START_ENTITY_FIRE(entity)
  return native.invoke(
    Type.Fireid, 979, false,
    arg(Type.Entity, entity)
  )
end

function FIRE.STOP_ENTITY_FIRE(entity)
  native.invoke(
    Type.Void, 980, false,
    arg(Type.Entity, entity)
  )
end

function FIRE.IS_ENTITY_ON_FIRE(entity)
  return native.invoke(
    Type.Bool, 981, false,
    arg(Type.Entity, entity)
  )
end

function FIRE.GET_NUMBER_OF_FIRES_IN_RANGE(x, y, z, radius)
  return native.invoke(
    Type.Int, 982, false,
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, z),
    arg(Type.Float, radius)
  )
end

function FIRE.SET_FLAMMABILITY_MULTIPLIER(p0)
  native.invoke(
    Type.Void, 983, false,
    arg(Type.Float, p0)
  )
end

function FIRE.STOP_FIRE_IN_RANGE(x, y, z, radius)
  native.invoke(
    Type.Void, 984, false,
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, z),
    arg(Type.Float, radius)
  )
end

function FIRE.GET_CLOSEST_FIRE_POS(outPosition, x, y, z)
  return native.invoke(
    Type.Bool, 985, true,
    ref(Type.Vector3, outPosition),
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, z)
  )
end

function FIRE.ADD_EXPLOSION(x, y, z, explosionType, damageScale, isAudible, isInvisible, cameraShake, noDamage)
  native.invoke(
    Type.Void, 986, false,
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, z),
    arg(Type.Int, explosionType),
    arg(Type.Float, damageScale),
    arg(Type.Bool, isAudible),
    arg(Type.Bool, isInvisible),
    arg(Type.Float, cameraShake),
    arg(Type.Bool, noDamage)
  )
end

function FIRE.ADD_OWNED_EXPLOSION(ped, x, y, z, explosionType, damageScale, isAudible, isInvisible, cameraShake)
  native.invoke(
    Type.Void, 987, false,
    arg(Type.Ped, ped),
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, z),
    arg(Type.Int, explosionType),
    arg(Type.Float, damageScale),
    arg(Type.Bool, isAudible),
    arg(Type.Bool, isInvisible),
    arg(Type.Float, cameraShake)
  )
end

function FIRE.ADD_EXPLOSION_WITH_USER_VFX(x, y, z, explosionType, explosionFx, damageScale, isAudible, isInvisible, cameraShake)
  native.invoke(
    Type.Void, 988, false,
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, z),
    arg(Type.Int, explosionType),
    arg(Type.Hash, explosionFx),
    arg(Type.Float, damageScale),
    arg(Type.Bool, isAudible),
    arg(Type.Bool, isInvisible),
    arg(Type.Float, cameraShake)
  )
end

function FIRE.IS_EXPLOSION_IN_AREA(explosionType, x1, y1, z1, x2, y2, z2)
  return native.invoke(
    Type.Bool, 989, false,
    arg(Type.Int, explosionType),
    arg(Type.Float, x1),
    arg(Type.Float, y1),
    arg(Type.Float, z1),
    arg(Type.Float, x2),
    arg(Type.Float, y2),
    arg(Type.Float, z2)
  )
end

function FIRE.IS_EXPLOSION_ACTIVE_IN_AREA(explosionType, x1, y1, z1, x2, y2, z2)
  return native.invoke(
    Type.Bool, 990, false,
    arg(Type.Int, explosionType),
    arg(Type.Float, x1),
    arg(Type.Float, y1),
    arg(Type.Float, z1),
    arg(Type.Float, x2),
    arg(Type.Float, y2),
    arg(Type.Float, z2)
  )
end

function FIRE.IS_EXPLOSION_IN_SPHERE(explosionType, x, y, z, radius)
  return native.invoke(
    Type.Bool, 991, false,
    arg(Type.Int, explosionType),
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, z),
    arg(Type.Float, radius)
  )
end

function FIRE.GET_OWNER_OF_EXPLOSION_IN_SPHERE(explosionType, x, y, z, radius)
  return native.invoke(
    Type.Entity, 992, false,
    arg(Type.Int, explosionType),
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, z),
    arg(Type.Float, radius)
  )
end

function FIRE.IS_EXPLOSION_IN_ANGLED_AREA(explosionType, x1, y1, z1, x2, y2, z2, width)
  return native.invoke(
    Type.Bool, 993, false,
    arg(Type.Int, explosionType),
    arg(Type.Float, x1),
    arg(Type.Float, y1),
    arg(Type.Float, z1),
    arg(Type.Float, x2),
    arg(Type.Float, y2),
    arg(Type.Float, z2),
    arg(Type.Float, width)
  )
end

function FIRE.GET_OWNER_OF_EXPLOSION_IN_ANGLED_AREA(explosionType, x1, y1, z1, x2, y2, z2, radius)
  return native.invoke(
    Type.Entity, 994, false,
    arg(Type.Int, explosionType),
    arg(Type.Float, x1),
    arg(Type.Float, y1),
    arg(Type.Float, z1),
    arg(Type.Float, x2),
    arg(Type.Float, y2),
    arg(Type.Float, z2),
    arg(Type.Float, radius)
  )
end


GRAPHICS = {}

function GRAPHICS.SET_DEBUG_LINES_AND_SPHERES_DRAWING_ACTIVE(enabled)
  native.invoke(
    Type.Void, 995, false,
    arg(Type.Bool, enabled)
  )
end

function GRAPHICS.DRAW_DEBUG_LINE(x1, y1, z1, x2, y2, z2, r, g, b, alpha)
  native.invoke(
    Type.Void, 996, false,
    arg(Type.Float, x1),
    arg(Type.Float, y1),
    arg(Type.Float, z1),
    arg(Type.Float, x2),
    arg(Type.Float, y2),
    arg(Type.Float, z2),
    arg(Type.Int, r),
    arg(Type.Int, g),
    arg(Type.Int, b),
    arg(Type.Int, alpha)
  )
end

function GRAPHICS.DRAW_DEBUG_LINE_WITH_TWO_COLOURS(x1, y1, z1, x2, y2, z2, r1, g1, b1, r2, g2, b2, alpha1, alpha2)
  native.invoke(
    Type.Void, 997, false,
    arg(Type.Float, x1),
    arg(Type.Float, y1),
    arg(Type.Float, z1),
    arg(Type.Float, x2),
    arg(Type.Float, y2),
    arg(Type.Float, z2),
    arg(Type.Int, r1),
    arg(Type.Int, g1),
    arg(Type.Int, b1),
    arg(Type.Int, r2),
    arg(Type.Int, g2),
    arg(Type.Int, b2),
    arg(Type.Int, alpha1),
    arg(Type.Int, alpha2)
  )
end

function GRAPHICS.DRAW_DEBUG_SPHERE(x, y, z, radius, red, green, blue, alpha)
  native.invoke(
    Type.Void, 998, false,
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, z),
    arg(Type.Float, radius),
    arg(Type.Int, red),
    arg(Type.Int, green),
    arg(Type.Int, blue),
    arg(Type.Int, alpha)
  )
end

function GRAPHICS.DRAW_DEBUG_BOX(x1, y1, z1, x2, y2, z2, r, g, b, alpha)
  native.invoke(
    Type.Void, 999, false,
    arg(Type.Float, x1),
    arg(Type.Float, y1),
    arg(Type.Float, z1),
    arg(Type.Float, x2),
    arg(Type.Float, y2),
    arg(Type.Float, z2),
    arg(Type.Int, r),
    arg(Type.Int, g),
    arg(Type.Int, b),
    arg(Type.Int, alpha)
  )
end

function GRAPHICS.DRAW_DEBUG_CROSS(x, y, z, size, red, green, blue, alpha)
  native.invoke(
    Type.Void, 1000, false,
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, z),
    arg(Type.Float, size),
    arg(Type.Int, red),
    arg(Type.Int, green),
    arg(Type.Int, blue),
    arg(Type.Int, alpha)
  )
end

function GRAPHICS.DRAW_DEBUG_TEXT(text, x, y, z, red, green, blue, alpha)
  native.invoke(
    Type.Void, 1001, false,
    arg(Type.String, text),
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, z),
    arg(Type.Int, red),
    arg(Type.Int, green),
    arg(Type.Int, blue),
    arg(Type.Int, alpha)
  )
end

function GRAPHICS.DRAW_DEBUG_TEXT_2D(text, x, y, z, red, green, blue, alpha)
  native.invoke(
    Type.Void, 1002, false,
    arg(Type.String, text),
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, z),
    arg(Type.Int, red),
    arg(Type.Int, green),
    arg(Type.Int, blue),
    arg(Type.Int, alpha)
  )
end

function GRAPHICS.DRAW_LINE(x1, y1, z1, x2, y2, z2, red, green, blue, alpha)
  native.invoke(
    Type.Void, 1003, false,
    arg(Type.Float, x1),
    arg(Type.Float, y1),
    arg(Type.Float, z1),
    arg(Type.Float, x2),
    arg(Type.Float, y2),
    arg(Type.Float, z2),
    arg(Type.Int, red),
    arg(Type.Int, green),
    arg(Type.Int, blue),
    arg(Type.Int, alpha)
  )
end

function GRAPHICS.DRAW_POLY(x1, y1, z1, x2, y2, z2, x3, y3, z3, red, green, blue, alpha)
  native.invoke(
    Type.Void, 1004, false,
    arg(Type.Float, x1),
    arg(Type.Float, y1),
    arg(Type.Float, z1),
    arg(Type.Float, x2),
    arg(Type.Float, y2),
    arg(Type.Float, z2),
    arg(Type.Float, x3),
    arg(Type.Float, y3),
    arg(Type.Float, z3),
    arg(Type.Int, red),
    arg(Type.Int, green),
    arg(Type.Int, blue),
    arg(Type.Int, alpha)
  )
end

function GRAPHICS.DRAW_TEXTURED_POLY(x1, y1, z1, x2, y2, z2, x3, y3, z3, red, green, blue, alpha, textureDict, textureName, u1, v1, w1, u2, v2, w2, u3, v3, w3)
  native.invoke(
    Type.Void, 1005, false,
    arg(Type.Float, x1),
    arg(Type.Float, y1),
    arg(Type.Float, z1),
    arg(Type.Float, x2),
    arg(Type.Float, y2),
    arg(Type.Float, z2),
    arg(Type.Float, x3),
    arg(Type.Float, y3),
    arg(Type.Float, z3),
    arg(Type.Int, red),
    arg(Type.Int, green),
    arg(Type.Int, blue),
    arg(Type.Int, alpha),
    arg(Type.String, textureDict),
    arg(Type.String, textureName),
    arg(Type.Float, u1),
    arg(Type.Float, v1),
    arg(Type.Float, w1),
    arg(Type.Float, u2),
    arg(Type.Float, v2),
    arg(Type.Float, w2),
    arg(Type.Float, u3),
    arg(Type.Float, v3),
    arg(Type.Float, w3)
  )
end

function GRAPHICS.DRAW_TEXTURED_POLY_WITH_THREE_COLOURS(x1, y1, z1, x2, y2, z2, x3, y3, z3, red1, green1, blue1, alpha1, red2, green2, blue2, alpha2, red3, green3, blue3, alpha3, textureDict, textureName, u1, v1, w1, u2, v2, w2, u3, v3, w3)
  native.invoke(
    Type.Void, 1006, false,
    arg(Type.Float, x1),
    arg(Type.Float, y1),
    arg(Type.Float, z1),
    arg(Type.Float, x2),
    arg(Type.Float, y2),
    arg(Type.Float, z2),
    arg(Type.Float, x3),
    arg(Type.Float, y3),
    arg(Type.Float, z3),
    arg(Type.Float, red1),
    arg(Type.Float, green1),
    arg(Type.Float, blue1),
    arg(Type.Int, alpha1),
    arg(Type.Float, red2),
    arg(Type.Float, green2),
    arg(Type.Float, blue2),
    arg(Type.Int, alpha2),
    arg(Type.Float, red3),
    arg(Type.Float, green3),
    arg(Type.Float, blue3),
    arg(Type.Int, alpha3),
    arg(Type.String, textureDict),
    arg(Type.String, textureName),
    arg(Type.Float, u1),
    arg(Type.Float, v1),
    arg(Type.Float, w1),
    arg(Type.Float, u2),
    arg(Type.Float, v2),
    arg(Type.Float, w2),
    arg(Type.Float, u3),
    arg(Type.Float, v3),
    arg(Type.Float, w3)
  )
end

function GRAPHICS.DRAW_BOX(x1, y1, z1, x2, y2, z2, red, green, blue, alpha)
  native.invoke(
    Type.Void, 1007, false,
    arg(Type.Float, x1),
    arg(Type.Float, y1),
    arg(Type.Float, z1),
    arg(Type.Float, x2),
    arg(Type.Float, y2),
    arg(Type.Float, z2),
    arg(Type.Int, red),
    arg(Type.Int, green),
    arg(Type.Int, blue),
    arg(Type.Int, alpha)
  )
end

function GRAPHICS.SET_BACKFACECULLING(toggle)
  native.invoke(
    Type.Void, 1008, false,
    arg(Type.Bool, toggle)
  )
end

function GRAPHICS.SET_DEPTHWRITING(toggle)
  native.invoke(
    Type.Void, 1009, false,
    arg(Type.Bool, toggle)
  )
end

function GRAPHICS.BEGIN_TAKE_MISSION_CREATOR_PHOTO()
  return native.invoke(
    Type.Bool, 1010, false
  )
end

function GRAPHICS.GET_STATUS_OF_TAKE_MISSION_CREATOR_PHOTO()
  return native.invoke(
    Type.Int, 1011, false
  )
end

function GRAPHICS.FREE_MEMORY_FOR_MISSION_CREATOR_PHOTO()
  native.invoke(
    Type.Void, 1012, false
  )
end

function GRAPHICS.LOAD_MISSION_CREATOR_PHOTO(p0, p1, p2, p3)
  return native.invoke(
    Type.Bool, 1013, false,
    ref(Type.Any, p0),
    arg(Type.Any, p1),
    arg(Type.Any, p2),
    arg(Type.Any, p3)
  )
end

function GRAPHICS.GET_STATUS_OF_LOAD_MISSION_CREATOR_PHOTO(p0)
  return native.invoke(
    Type.Int, 1014, false,
    ref(Type.Any, p0)
  )
end

function GRAPHICS.BEGIN_CREATE_MISSION_CREATOR_PHOTO_PREVIEW()
  return native.invoke(
    Type.Bool, 1015, false
  )
end

function GRAPHICS.GET_STATUS_OF_CREATE_MISSION_CREATOR_PHOTO_PREVIEW()
  return native.invoke(
    Type.Int, 1016, false
  )
end

function GRAPHICS.FREE_MEMORY_FOR_MISSION_CREATOR_PHOTO_PREVIEW()
  native.invoke(
    Type.Void, 1017, false
  )
end

function GRAPHICS.BEGIN_TAKE_HIGH_QUALITY_PHOTO()
  return native.invoke(
    Type.Bool, 1018, false
  )
end

function GRAPHICS.GET_STATUS_OF_TAKE_HIGH_QUALITY_PHOTO()
  return native.invoke(
    Type.Int, 1019, false
  )
end

function GRAPHICS.FREE_MEMORY_FOR_HIGH_QUALITY_PHOTO()
  native.invoke(
    Type.Void, 1020, false
  )
end

function GRAPHICS.SET_TAKEN_PHOTO_IS_MUGSHOT(toggle)
  native.invoke(
    Type.Void, 1021, false,
    arg(Type.Bool, toggle)
  )
end

function GRAPHICS.SET_ARENA_THEME_AND_VARIATION_FOR_TAKEN_PHOTO(p0, p1)
  native.invoke(
    Type.Void, 1022, false,
    arg(Type.Any, p0),
    arg(Type.Int, p1)
  )
end

function GRAPHICS.SET_ON_ISLAND_X_FOR_TAKEN_PHOTO(p0)
  native.invoke(
    Type.Void, 1023, false,
    arg(Type.Any, p0)
  )
end

function GRAPHICS.SAVE_HIGH_QUALITY_PHOTO(unused)
  return native.invoke(
    Type.Bool, 1024, false,
    arg(Type.Int, unused)
  )
end

function GRAPHICS.GET_STATUS_OF_SAVE_HIGH_QUALITY_PHOTO()
  return native.invoke(
    Type.Int, 1025, false
  )
end

function GRAPHICS.BEGIN_CREATE_LOW_QUALITY_COPY_OF_PHOTO(p0)
  return native.invoke(
    Type.Bool, 1026, false,
    arg(Type.Any, p0)
  )
end

function GRAPHICS.GET_STATUS_OF_CREATE_LOW_QUALITY_COPY_OF_PHOTO(p0)
  return native.invoke(
    Type.Int, 1027, false,
    arg(Type.Int, p0)
  )
end

function GRAPHICS.FREE_MEMORY_FOR_LOW_QUALITY_PHOTO()
  native.invoke(
    Type.Void, 1028, false
  )
end

function GRAPHICS.DRAW_LOW_QUALITY_PHOTO_TO_PHONE(p0, p1)
  native.invoke(
    Type.Void, 1029, false,
    arg(Type.Bool, p0),
    arg(Type.Bool, p1)
  )
end

function GRAPHICS.GET_MAXIMUM_NUMBER_OF_PHOTOS()
  return native.invoke(
    Type.Int, 1030, false
  )
end

function GRAPHICS.GET_MAXIMUM_NUMBER_OF_CLOUD_PHOTOS()
  return native.invoke(
    Type.Int, 1031, false
  )
end

function GRAPHICS.GET_CURRENT_NUMBER_OF_CLOUD_PHOTOS()
  return native.invoke(
    Type.Int, 1032, false
  )
end

function GRAPHICS.QUEUE_OPERATION_TO_CREATE_SORTED_LIST_OF_PHOTOS(p0)
  return native.invoke(
    Type.Bool, 1033, false,
    arg(Type.Any, p0)
  )
end

function GRAPHICS.GET_STATUS_OF_SORTED_LIST_OPERATION(p0)
  return native.invoke(
    Type.Int, 1034, false,
    arg(Type.Any, p0)
  )
end

function GRAPHICS.CLEAR_STATUS_OF_SORTED_LIST_OPERATION()
  native.invoke(
    Type.Void, 1035, false
  )
end

function GRAPHICS.DOES_THIS_PHOTO_SLOT_CONTAIN_A_VALID_PHOTO(p0)
  return native.invoke(
    Type.Bool, 1036, false,
    arg(Type.Any, p0)
  )
end

function GRAPHICS.LOAD_HIGH_QUALITY_PHOTO(p0)
  return native.invoke(
    Type.Bool, 1037, false,
    arg(Type.Any, p0)
  )
end

function GRAPHICS.GET_LOAD_HIGH_QUALITY_PHOTO_STATUS(p0)
  return native.invoke(
    Type.Int, 1038, false,
    arg(Type.Int, p0)
  )
end

function GRAPHICS.DRAW_LIGHT_WITH_RANGEEX(x, y, z, r, g, b, range, intensity, shadow)
  native.invoke(
    Type.Void, 1039, false,
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, z),
    arg(Type.Int, r),
    arg(Type.Int, g),
    arg(Type.Int, b),
    arg(Type.Float, range),
    arg(Type.Float, intensity),
    arg(Type.Float, shadow)
  )
end

function GRAPHICS.DRAW_LIGHT_WITH_RANGE(posX, posY, posZ, colorR, colorG, colorB, range, intensity)
  native.invoke(
    Type.Void, 1040, false,
    arg(Type.Float, posX),
    arg(Type.Float, posY),
    arg(Type.Float, posZ),
    arg(Type.Int, colorR),
    arg(Type.Int, colorG),
    arg(Type.Int, colorB),
    arg(Type.Float, range),
    arg(Type.Float, intensity)
  )
end

function GRAPHICS.DRAW_SPOT_LIGHT(posX, posY, posZ, dirX, dirY, dirZ, colorR, colorG, colorB, distance, brightness, hardness, radius, falloff)
  native.invoke(
    Type.Void, 1041, false,
    arg(Type.Float, posX),
    arg(Type.Float, posY),
    arg(Type.Float, posZ),
    arg(Type.Float, dirX),
    arg(Type.Float, dirY),
    arg(Type.Float, dirZ),
    arg(Type.Int, colorR),
    arg(Type.Int, colorG),
    arg(Type.Int, colorB),
    arg(Type.Float, distance),
    arg(Type.Float, brightness),
    arg(Type.Float, hardness),
    arg(Type.Float, radius),
    arg(Type.Float, falloff)
  )
end

function GRAPHICS.DRAW_SHADOWED_SPOT_LIGHT(posX, posY, posZ, dirX, dirY, dirZ, colorR, colorG, colorB, distance, brightness, roundness, radius, falloff, shadowId)
  native.invoke(
    Type.Void, 1042, false,
    arg(Type.Float, posX),
    arg(Type.Float, posY),
    arg(Type.Float, posZ),
    arg(Type.Float, dirX),
    arg(Type.Float, dirY),
    arg(Type.Float, dirZ),
    arg(Type.Int, colorR),
    arg(Type.Int, colorG),
    arg(Type.Int, colorB),
    arg(Type.Float, distance),
    arg(Type.Float, brightness),
    arg(Type.Float, roundness),
    arg(Type.Float, radius),
    arg(Type.Float, falloff),
    arg(Type.Int, shadowId)
  )
end

function GRAPHICS.FADE_UP_PED_LIGHT(p0)
  native.invoke(
    Type.Void, 1043, false,
    arg(Type.Float, p0)
  )
end

function GRAPHICS.UPDATE_LIGHTS_ON_ENTITY(entity)
  native.invoke(
    Type.Void, 1044, false,
    arg(Type.Entity, entity)
  )
end

function GRAPHICS.SET_LIGHT_OVERRIDE_MAX_INTENSITY_SCALE(p0)
  native.invoke(
    Type.Void, 1045, false,
    arg(Type.Any, p0)
  )
end

function GRAPHICS.GET_LIGHT_OVERRIDE_MAX_INTENSITY_SCALE()
  return native.invoke(
    Type.Float, 1046, false
  )
end

function GRAPHICS.DRAW_MARKER(type, posX, posY, posZ, dirX, dirY, dirZ, rotX, rotY, rotZ, scaleX, scaleY, scaleZ, red, green, blue, alpha, bobUpAndDown, faceCamera, p19, rotate, textureDict, textureName, drawOnEnts)
  native.invoke(
    Type.Void, 1047, false,
    arg(Type.Int, type),
    arg(Type.Float, posX),
    arg(Type.Float, posY),
    arg(Type.Float, posZ),
    arg(Type.Float, dirX),
    arg(Type.Float, dirY),
    arg(Type.Float, dirZ),
    arg(Type.Float, rotX),
    arg(Type.Float, rotY),
    arg(Type.Float, rotZ),
    arg(Type.Float, scaleX),
    arg(Type.Float, scaleY),
    arg(Type.Float, scaleZ),
    arg(Type.Int, red),
    arg(Type.Int, green),
    arg(Type.Int, blue),
    arg(Type.Int, alpha),
    arg(Type.Bool, bobUpAndDown),
    arg(Type.Bool, faceCamera),
    arg(Type.Int, p19),
    arg(Type.Bool, rotate),
    arg(Type.String, textureDict),
    arg(Type.String, textureName),
    arg(Type.Bool, drawOnEnts)
  )
end

function GRAPHICS.DRAW_MARKER_EX(type, posX, posY, posZ, dirX, dirY, dirZ, rotX, rotY, rotZ, scaleX, scaleY, scaleZ, red, green, blue, alpha, bobUpAndDown, faceCamera, p19, rotate, textureDict, textureName, drawOnEnts, p24, p25)
  native.invoke(
    Type.Void, 1048, false,
    arg(Type.Int, type),
    arg(Type.Float, posX),
    arg(Type.Float, posY),
    arg(Type.Float, posZ),
    arg(Type.Float, dirX),
    arg(Type.Float, dirY),
    arg(Type.Float, dirZ),
    arg(Type.Float, rotX),
    arg(Type.Float, rotY),
    arg(Type.Float, rotZ),
    arg(Type.Float, scaleX),
    arg(Type.Float, scaleY),
    arg(Type.Float, scaleZ),
    arg(Type.Int, red),
    arg(Type.Int, green),
    arg(Type.Int, blue),
    arg(Type.Int, alpha),
    arg(Type.Bool, bobUpAndDown),
    arg(Type.Bool, faceCamera),
    arg(Type.Any, p19),
    arg(Type.Bool, rotate),
    arg(Type.String, textureDict),
    arg(Type.String, textureName),
    arg(Type.Bool, drawOnEnts),
    arg(Type.Bool, p24),
    arg(Type.Bool, p25)
  )
end

function GRAPHICS.DRAW_MARKER_SPHERE(x, y, z, radius, red, green, blue, alpha)
  native.invoke(
    Type.Void, 1049, false,
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, z),
    arg(Type.Float, radius),
    arg(Type.Int, red),
    arg(Type.Int, green),
    arg(Type.Int, blue),
    arg(Type.Float, alpha)
  )
end

function GRAPHICS.CREATE_CHECKPOINT(type, posX1, posY1, posZ1, posX2, posY2, posZ2, diameter, red, green, blue, alpha, reserved)
  return native.invoke(
    Type.Int, 1050, false,
    arg(Type.Int, type),
    arg(Type.Float, posX1),
    arg(Type.Float, posY1),
    arg(Type.Float, posZ1),
    arg(Type.Float, posX2),
    arg(Type.Float, posY2),
    arg(Type.Float, posZ2),
    arg(Type.Float, diameter),
    arg(Type.Int, red),
    arg(Type.Int, green),
    arg(Type.Int, blue),
    arg(Type.Int, alpha),
    arg(Type.Int, reserved)
  )
end

function GRAPHICS.SET_CHECKPOINT_INSIDE_CYLINDER_HEIGHT_SCALE(checkpoint, scale)
  native.invoke(
    Type.Void, 1051, false,
    arg(Type.Int, checkpoint),
    arg(Type.Float, scale)
  )
end

function GRAPHICS.SET_CHECKPOINT_INSIDE_CYLINDER_SCALE(checkpoint, scale)
  native.invoke(
    Type.Void, 1052, false,
    arg(Type.Int, checkpoint),
    arg(Type.Float, scale)
  )
end

function GRAPHICS.SET_CHECKPOINT_CYLINDER_HEIGHT(checkpoint, nearHeight, farHeight, radius)
  native.invoke(
    Type.Void, 1053, false,
    arg(Type.Int, checkpoint),
    arg(Type.Float, nearHeight),
    arg(Type.Float, farHeight),
    arg(Type.Float, radius)
  )
end

function GRAPHICS.SET_CHECKPOINT_RGBA(checkpoint, red, green, blue, alpha)
  native.invoke(
    Type.Void, 1054, false,
    arg(Type.Int, checkpoint),
    arg(Type.Int, red),
    arg(Type.Int, green),
    arg(Type.Int, blue),
    arg(Type.Int, alpha)
  )
end

function GRAPHICS.SET_CHECKPOINT_RGBA2(checkpoint, red, green, blue, alpha)
  native.invoke(
    Type.Void, 1055, false,
    arg(Type.Int, checkpoint),
    arg(Type.Int, red),
    arg(Type.Int, green),
    arg(Type.Int, blue),
    arg(Type.Int, alpha)
  )
end

function GRAPHICS.SET_CHECKPOINT_CLIPPLANE_WITH_POS_NORM(checkpoint, posX, posY, posZ, unkX, unkY, unkZ)
  native.invoke(
    Type.Void, 1056, false,
    arg(Type.Int, checkpoint),
    arg(Type.Float, posX),
    arg(Type.Float, posY),
    arg(Type.Float, posZ),
    arg(Type.Float, unkX),
    arg(Type.Float, unkY),
    arg(Type.Float, unkZ)
  )
end

function GRAPHICS.SET_CHECKPOINT_FORCE_OLD_ARROW_POINTING(checkpoint)
  native.invoke(
    Type.Void, 1057, false,
    arg(Type.Int, checkpoint)
  )
end

function GRAPHICS.SET_CHECKPOINT_DECAL_ROT_ALIGNED_TO_CAMERA_ROT(checkpoint)
  native.invoke(
    Type.Void, 1058, false,
    arg(Type.Int, checkpoint)
  )
end

function GRAPHICS.SET_CHECKPOINT_FORCE_DIRECTION(checkpoint)
  native.invoke(
    Type.Void, 1059, false,
    arg(Type.Int, checkpoint)
  )
end

function GRAPHICS.SET_CHECKPOINT_DIRECTION(checkpoint, posX, posY, posZ)
  native.invoke(
    Type.Void, 1060, false,
    arg(Type.Int, checkpoint),
    arg(Type.Float, posX),
    arg(Type.Float, posY),
    arg(Type.Float, posZ)
  )
end

function GRAPHICS.DELETE_CHECKPOINT(checkpoint)
  native.invoke(
    Type.Void, 1061, false,
    arg(Type.Int, checkpoint)
  )
end

function GRAPHICS.DONT_RENDER_IN_GAME_UI(p0)
  native.invoke(
    Type.Void, 1062, false,
    arg(Type.Bool, p0)
  )
end

function GRAPHICS.FORCE_RENDER_IN_GAME_UI(toggle)
  native.invoke(
    Type.Void, 1063, false,
    arg(Type.Bool, toggle)
  )
end

function GRAPHICS.REQUEST_STREAMED_TEXTURE_DICT(textureDict, p1)
  native.invoke(
    Type.Void, 1064, false,
    arg(Type.String, textureDict),
    arg(Type.Bool, p1)
  )
end

function GRAPHICS.HAS_STREAMED_TEXTURE_DICT_LOADED(textureDict)
  return native.invoke(
    Type.Bool, 1065, false,
    arg(Type.String, textureDict)
  )
end

function GRAPHICS.SET_STREAMED_TEXTURE_DICT_AS_NO_LONGER_NEEDED(textureDict)
  native.invoke(
    Type.Void, 1066, false,
    arg(Type.String, textureDict)
  )
end

function GRAPHICS.DRAW_RECT(x, y, width, height, r, g, b, a, p8)
  native.invoke(
    Type.Void, 1067, false,
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, width),
    arg(Type.Float, height),
    arg(Type.Int, r),
    arg(Type.Int, g),
    arg(Type.Int, b),
    arg(Type.Int, a),
    arg(Type.Bool, p8)
  )
end

function GRAPHICS.SET_SCRIPT_GFX_DRAW_BEHIND_PAUSEMENU(toggle)
  native.invoke(
    Type.Void, 1068, false,
    arg(Type.Bool, toggle)
  )
end

function GRAPHICS.SET_SCRIPT_GFX_DRAW_ORDER(drawOrder)
  native.invoke(
    Type.Void, 1069, false,
    arg(Type.Int, drawOrder)
  )
end

function GRAPHICS.SET_SCRIPT_GFX_ALIGN(horizontalAlign, verticalAlign)
  native.invoke(
    Type.Void, 1070, false,
    arg(Type.Int, horizontalAlign),
    arg(Type.Int, verticalAlign)
  )
end

function GRAPHICS.RESET_SCRIPT_GFX_ALIGN()
  native.invoke(
    Type.Void, 1071, false
  )
end

function GRAPHICS.SET_SCRIPT_GFX_ALIGN_PARAMS(x, y, w, h)
  native.invoke(
    Type.Void, 1072, false,
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, w),
    arg(Type.Float, h)
  )
end

function GRAPHICS.GET_SCRIPT_GFX_ALIGN_POSITION(x, y, calculatedX, calculatedY)
  native.invoke(
    Type.Void, 1073, false,
    arg(Type.Float, x),
    arg(Type.Float, y),
    ref(Type.Float, calculatedX),
    ref(Type.Float, calculatedY)
  )
end

function GRAPHICS.GET_SAFE_ZONE_SIZE()
  return native.invoke(
    Type.Float, 1074, false
  )
end

function GRAPHICS.DRAW_SPRITE(textureDict, textureName, screenX, screenY, width, height, heading, red, green, blue, alpha, p11, p12)
  native.invoke(
    Type.Void, 1075, false,
    arg(Type.String, textureDict),
    arg(Type.String, textureName),
    arg(Type.Float, screenX),
    arg(Type.Float, screenY),
    arg(Type.Float, width),
    arg(Type.Float, height),
    arg(Type.Float, heading),
    arg(Type.Int, red),
    arg(Type.Int, green),
    arg(Type.Int, blue),
    arg(Type.Int, alpha),
    arg(Type.Bool, p11),
    arg(Type.Any, p12)
  )
end

function GRAPHICS.DRAW_SPRITE_ARX(textureDict, textureName, x, y, width, height, p6, red, green, blue, alpha, p11, p12)
  native.invoke(
    Type.Void, 1076, false,
    arg(Type.String, textureDict),
    arg(Type.String, textureName),
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, width),
    arg(Type.Float, height),
    arg(Type.Float, p6),
    arg(Type.Int, red),
    arg(Type.Int, green),
    arg(Type.Int, blue),
    arg(Type.Int, alpha),
    arg(Type.Any, p11),
    arg(Type.Any, p12)
  )
end

function GRAPHICS.DRAW_SPRITE_NAMED_RENDERTARGET(textureDict, textureName, screenX, screenY, width, height, heading, red, green, blue, alpha, p11)
  native.invoke(
    Type.Void, 1077, false,
    arg(Type.String, textureDict),
    arg(Type.String, textureName),
    arg(Type.Float, screenX),
    arg(Type.Float, screenY),
    arg(Type.Float, width),
    arg(Type.Float, height),
    arg(Type.Float, heading),
    arg(Type.Int, red),
    arg(Type.Int, green),
    arg(Type.Int, blue),
    arg(Type.Int, alpha),
    arg(Type.Any, p11)
  )
end

function GRAPHICS.DRAW_SPRITE_ARX_WITH_UV(textureDict, textureName, x, y, width, height, u1, v1, u2, v2, heading, red, green, blue, alpha, p15)
  native.invoke(
    Type.Void, 1078, false,
    arg(Type.String, textureDict),
    arg(Type.String, textureName),
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, width),
    arg(Type.Float, height),
    arg(Type.Float, u1),
    arg(Type.Float, v1),
    arg(Type.Float, u2),
    arg(Type.Float, v2),
    arg(Type.Float, heading),
    arg(Type.Int, red),
    arg(Type.Int, green),
    arg(Type.Int, blue),
    arg(Type.Int, alpha),
    arg(Type.Any, p15)
  )
end

function GRAPHICS.ADD_ENTITY_ICON(entity, icon)
  return native.invoke(
    Type.Int, 1079, false,
    arg(Type.Entity, entity),
    arg(Type.String, icon)
  )
end

function GRAPHICS.SET_ENTITY_ICON_VISIBILITY(entity, toggle)
  native.invoke(
    Type.Void, 1080, false,
    arg(Type.Entity, entity),
    arg(Type.Bool, toggle)
  )
end

function GRAPHICS.SET_ENTITY_ICON_COLOR(entity, red, green, blue, alpha)
  native.invoke(
    Type.Void, 1081, false,
    arg(Type.Entity, entity),
    arg(Type.Int, red),
    arg(Type.Int, green),
    arg(Type.Int, blue),
    arg(Type.Int, alpha)
  )
end

function GRAPHICS.SET_DRAW_ORIGIN(x, y, z, p3)
  native.invoke(
    Type.Void, 1082, false,
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, z),
    arg(Type.Bool, p3)
  )
end

function GRAPHICS.CLEAR_DRAW_ORIGIN()
  native.invoke(
    Type.Void, 1083, false
  )
end

function GRAPHICS.SET_BINK_MOVIE(name)
  return native.invoke(
    Type.Int, 1084, false,
    arg(Type.String, name)
  )
end

function GRAPHICS.PLAY_BINK_MOVIE(binkMovie)
  native.invoke(
    Type.Void, 1085, false,
    arg(Type.Int, binkMovie)
  )
end

function GRAPHICS.STOP_BINK_MOVIE(binkMovie)
  native.invoke(
    Type.Void, 1086, false,
    arg(Type.Int, binkMovie)
  )
end

function GRAPHICS.RELEASE_BINK_MOVIE(binkMovie)
  native.invoke(
    Type.Void, 1087, false,
    arg(Type.Int, binkMovie)
  )
end

function GRAPHICS.DRAW_BINK_MOVIE(binkMovie, p1, p2, p3, p4, p5, r, g, b, a)
  native.invoke(
    Type.Void, 1088, false,
    arg(Type.Int, binkMovie),
    arg(Type.Float, p1),
    arg(Type.Float, p2),
    arg(Type.Float, p3),
    arg(Type.Float, p4),
    arg(Type.Float, p5),
    arg(Type.Int, r),
    arg(Type.Int, g),
    arg(Type.Int, b),
    arg(Type.Int, a)
  )
end

function GRAPHICS.SET_BINK_MOVIE_TIME(binkMovie, progress)
  native.invoke(
    Type.Void, 1089, false,
    arg(Type.Int, binkMovie),
    arg(Type.Float, progress)
  )
end

function GRAPHICS.GET_BINK_MOVIE_TIME(binkMovie)
  return native.invoke(
    Type.Float, 1090, false,
    arg(Type.Int, binkMovie)
  )
end

function GRAPHICS.SET_BINK_MOVIE_VOLUME(binkMovie, value)
  native.invoke(
    Type.Void, 1091, false,
    arg(Type.Int, binkMovie),
    arg(Type.Float, value)
  )
end

function GRAPHICS.ATTACH_TV_AUDIO_TO_ENTITY(entity)
  native.invoke(
    Type.Void, 1092, false,
    arg(Type.Entity, entity)
  )
end

function GRAPHICS.SET_BINK_MOVIE_AUDIO_FRONTEND(binkMovie, p1)
  native.invoke(
    Type.Void, 1093, false,
    arg(Type.Int, binkMovie),
    arg(Type.Bool, p1)
  )
end

function GRAPHICS.SET_TV_AUDIO_FRONTEND(toggle)
  native.invoke(
    Type.Void, 1094, false,
    arg(Type.Bool, toggle)
  )
end

function GRAPHICS.SET_BINK_SHOULD_SKIP(binkMovie, bShouldSkip)
  native.invoke(
    Type.Void, 1095, false,
    arg(Type.Int, binkMovie),
    arg(Type.Bool, bShouldSkip)
  )
end

function GRAPHICS.LOAD_MOVIE_MESH_SET(movieMeshSetName)
  return native.invoke(
    Type.Int, 1096, false,
    arg(Type.String, movieMeshSetName)
  )
end

function GRAPHICS.RELEASE_MOVIE_MESH_SET(movieMeshSet)
  native.invoke(
    Type.Void, 1097, false,
    arg(Type.Int, movieMeshSet)
  )
end

function GRAPHICS.QUERY_MOVIE_MESH_SET_STATE(p0)
  return native.invoke(
    Type.Int, 1098, false,
    arg(Type.Any, p0)
  )
end

function GRAPHICS.GET_SCREEN_RESOLUTION(x, y)
  native.invoke(
    Type.Void, 1099, false,
    ref(Type.Int, x),
    ref(Type.Int, y)
  )
end

function GRAPHICS.GET_ACTUAL_SCREEN_RESOLUTION(x, y)
  native.invoke(
    Type.Void, 1100, false,
    ref(Type.Int, x),
    ref(Type.Int, y)
  )
end

function GRAPHICS.GET_ASPECT_RATIO(b)
  return native.invoke(
    Type.Float, 1101, false,
    arg(Type.Bool, b)
  )
end

function GRAPHICS.GET_SCREEN_ASPECT_RATIO()
  return native.invoke(
    Type.Float, 1102, false
  )
end

function GRAPHICS.GET_IS_WIDESCREEN()
  return native.invoke(
    Type.Bool, 1103, false
  )
end

function GRAPHICS.GET_IS_HIDEF()
  return native.invoke(
    Type.Bool, 1104, false
  )
end

function GRAPHICS.ADJUST_NEXT_POS_SIZE_AS_NORMALIZED_16_9()
  native.invoke(
    Type.Void, 1105, false
  )
end

function GRAPHICS.SET_NIGHTVISION(toggle)
  native.invoke(
    Type.Void, 1106, false,
    arg(Type.Bool, toggle)
  )
end

function GRAPHICS.GET_REQUESTINGNIGHTVISION()
  return native.invoke(
    Type.Bool, 1107, false
  )
end

function GRAPHICS.GET_USINGNIGHTVISION()
  return native.invoke(
    Type.Bool, 1108, false
  )
end

function GRAPHICS.SET_EXPOSURETWEAK(toggle)
  native.invoke(
    Type.Void, 1109, false,
    arg(Type.Bool, toggle)
  )
end

function GRAPHICS.FORCE_EXPOSURE_READBACK(toggle)
  native.invoke(
    Type.Void, 1110, false,
    arg(Type.Bool, toggle)
  )
end

function GRAPHICS.OVERRIDE_NIGHTVISION_LIGHT_RANGE(p0)
  native.invoke(
    Type.Void, 1111, false,
    arg(Type.Float, p0)
  )
end

function GRAPHICS.SET_NOISEOVERIDE(toggle)
  native.invoke(
    Type.Void, 1112, false,
    arg(Type.Bool, toggle)
  )
end

function GRAPHICS.SET_NOISINESSOVERIDE(value)
  native.invoke(
    Type.Void, 1113, false,
    arg(Type.Float, value)
  )
end

function GRAPHICS.GET_SCREEN_COORD_FROM_WORLD_COORD(worldX, worldY, worldZ, screenX, screenY)
  return native.invoke(
    Type.Bool, 1114, false,
    arg(Type.Float, worldX),
    arg(Type.Float, worldY),
    arg(Type.Float, worldZ),
    ref(Type.Float, screenX),
    ref(Type.Float, screenY)
  )
end

function GRAPHICS.GET_TEXTURE_RESOLUTION(textureDict, textureName)
  return native.invoke(
    Type.Vector3, 1115, false,
    arg(Type.String, textureDict),
    arg(Type.String, textureName)
  )
end

function GRAPHICS.OVERRIDE_PED_CREW_LOGO_TEXTURE(ped, txd, txn)
  return native.invoke(
    Type.Bool, 1116, false,
    arg(Type.Ped, ped),
    arg(Type.String, txd),
    arg(Type.String, txn)
  )
end

function GRAPHICS.SET_DISTANCE_BLUR_STRENGTH_OVERRIDE(p0)
  native.invoke(
    Type.Void, 1117, false,
    arg(Type.Float, p0)
  )
end

function GRAPHICS.SET_FLASH(p0, p1, fadeIn, duration, fadeOut)
  native.invoke(
    Type.Void, 1118, false,
    arg(Type.Float, p0),
    arg(Type.Float, p1),
    arg(Type.Float, fadeIn),
    arg(Type.Float, duration),
    arg(Type.Float, fadeOut)
  )
end

function GRAPHICS.DISABLE_OCCLUSION_THIS_FRAME()
  native.invoke(
    Type.Void, 1119, false
  )
end

function GRAPHICS.SET_ARTIFICIAL_LIGHTS_STATE(state)
  native.invoke(
    Type.Void, 1120, false,
    arg(Type.Bool, state)
  )
end

function GRAPHICS.SET_ARTIFICIAL_VEHICLE_LIGHTS_STATE(toggle)
  native.invoke(
    Type.Void, 1121, false,
    arg(Type.Bool, toggle)
  )
end

function GRAPHICS.DISABLE_HDTEX_THIS_FRAME()
  native.invoke(
    Type.Void, 1122, false
  )
end

function GRAPHICS.CREATE_TRACKED_POINT()
  return native.invoke(
    Type.Int, 1123, false
  )
end

function GRAPHICS.SET_TRACKED_POINT_INFO(point, x, y, z, radius)
  native.invoke(
    Type.Void, 1124, false,
    arg(Type.Int, point),
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, z),
    arg(Type.Float, radius)
  )
end

function GRAPHICS.IS_TRACKED_POINT_VISIBLE(point)
  return native.invoke(
    Type.Bool, 1125, false,
    arg(Type.Int, point)
  )
end

function GRAPHICS.DESTROY_TRACKED_POINT(point)
  native.invoke(
    Type.Void, 1126, false,
    arg(Type.Int, point)
  )
end

function GRAPHICS.SET_GRASS_CULL_SPHERE(p0, p1, p2, p3)
  return native.invoke(
    Type.Int, 1127, false,
    arg(Type.Float, p0),
    arg(Type.Float, p1),
    arg(Type.Float, p2),
    arg(Type.Float, p3)
  )
end

function GRAPHICS.REMOVE_GRASS_CULL_SPHERE(handle)
  native.invoke(
    Type.Void, 1128, false,
    arg(Type.Int, handle)
  )
end

function GRAPHICS.PROCGRASS_ENABLE_CULLSPHERE(handle, x, y, z, scale)
  native.invoke(
    Type.Void, 1129, false,
    arg(Type.Int, handle),
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, z),
    arg(Type.Float, scale)
  )
end

function GRAPHICS.PROCGRASS_DISABLE_CULLSPHERE(handle)
  native.invoke(
    Type.Void, 1130, false,
    arg(Type.Int, handle)
  )
end

function GRAPHICS.PROCGRASS_IS_CULLSPHERE_ENABLED(handle)
  return native.invoke(
    Type.Bool, 1131, false,
    arg(Type.Int, handle)
  )
end

function GRAPHICS.PROCGRASS_ENABLE_AMBSCALESCAN()
  native.invoke(
    Type.Void, 1132, false
  )
end

function GRAPHICS.PROCGRASS_DISABLE_AMBSCALESCAN()
  native.invoke(
    Type.Void, 1133, false
  )
end

function GRAPHICS.DISABLE_PROCOBJ_CREATION()
  native.invoke(
    Type.Void, 1134, false
  )
end

function GRAPHICS.ENABLE_PROCOBJ_CREATION()
  native.invoke(
    Type.Void, 1135, false
  )
end

function GRAPHICS.GRASSBATCH_ENABLE_FLATTENING_EXT_IN_SPHERE(x, y, z, p3, p4, p5, p6, scale)
  native.invoke(
    Type.Void, 1136, false,
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, z),
    arg(Type.Any, p3),
    arg(Type.Float, p4),
    arg(Type.Float, p5),
    arg(Type.Float, p6),
    arg(Type.Float, scale)
  )
end

function GRAPHICS.GRASSBATCH_ENABLE_FLATTENING_IN_SPHERE(x, y, z, radius, p4, p5, p6)
  native.invoke(
    Type.Void, 1137, false,
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, z),
    arg(Type.Float, radius),
    arg(Type.Float, p4),
    arg(Type.Float, p5),
    arg(Type.Float, p6)
  )
end

function GRAPHICS.GRASSBATCH_DISABLE_FLATTENING()
  native.invoke(
    Type.Void, 1138, false
  )
end

function GRAPHICS.CASCADE_SHADOWS_INIT_SESSION()
  native.invoke(
    Type.Void, 1139, false
  )
end

function GRAPHICS.CASCADE_SHADOWS_SET_CASCADE_BOUNDS(p0, p1, p2, p3, p4, p5, p6, p7)
  native.invoke(
    Type.Void, 1140, false,
    arg(Type.Any, p0),
    arg(Type.Bool, p1),
    arg(Type.Float, p2),
    arg(Type.Float, p3),
    arg(Type.Float, p4),
    arg(Type.Float, p5),
    arg(Type.Bool, p6),
    arg(Type.Float, p7)
  )
end

function GRAPHICS.CASCADE_SHADOWS_SET_CASCADE_BOUNDS_SCALE(p0)
  native.invoke(
    Type.Void, 1141, false,
    arg(Type.Float, p0)
  )
end

function GRAPHICS.CASCADE_SHADOWS_SET_ENTITY_TRACKER_SCALE(p0)
  native.invoke(
    Type.Void, 1142, false,
    arg(Type.Float, p0)
  )
end

function GRAPHICS.CASCADE_SHADOWS_SET_SPLIT_Z_EXP_WEIGHT(p0)
  native.invoke(
    Type.Void, 1143, false,
    arg(Type.Float, p0)
  )
end

function GRAPHICS.CASCADE_SHADOWS_SET_BOUND_POSITION(p0)
  native.invoke(
    Type.Void, 1144, false,
    arg(Type.Any, p0)
  )
end

function GRAPHICS.CASCADE_SHADOWS_ENABLE_ENTITY_TRACKER(toggle)
  native.invoke(
    Type.Void, 1145, false,
    arg(Type.Bool, toggle)
  )
end

function GRAPHICS.CASCADE_SHADOWS_SET_SCREEN_SIZE_CHECK_ENABLED(p0)
  native.invoke(
    Type.Void, 1146, false,
    arg(Type.Bool, p0)
  )
end

function GRAPHICS.CASCADE_SHADOWS_SET_SHADOW_SAMPLE_TYPE(type)
  native.invoke(
    Type.Void, 1147, false,
    arg(Type.String, type)
  )
end

function GRAPHICS.CASCADE_SHADOWS_CLEAR_SHADOW_SAMPLE_TYPE()
  native.invoke(
    Type.Void, 1148, false
  )
end

function GRAPHICS.CASCADE_SHADOWS_SET_AIRCRAFT_MODE(p0)
  native.invoke(
    Type.Void, 1149, false,
    arg(Type.Bool, p0)
  )
end

function GRAPHICS.CASCADE_SHADOWS_SET_DYNAMIC_DEPTH_MODE(p0)
  native.invoke(
    Type.Void, 1150, false,
    arg(Type.Bool, p0)
  )
end

function GRAPHICS.CASCADE_SHADOWS_SET_DYNAMIC_DEPTH_VALUE(p0)
  native.invoke(
    Type.Void, 1151, false,
    arg(Type.Float, p0)
  )
end

function GRAPHICS.CASCADE_SHADOWS_ENABLE_FREEZER(p0)
  native.invoke(
    Type.Void, 1152, false,
    arg(Type.Bool, p0)
  )
end

function GRAPHICS.WATER_REFLECTION_SET_SCRIPT_OBJECT_VISIBILITY(p0)
  native.invoke(
    Type.Void, 1153, false,
    arg(Type.Any, p0)
  )
end

function GRAPHICS.GOLF_TRAIL_SET_ENABLED(toggle)
  native.invoke(
    Type.Void, 1154, false,
    arg(Type.Bool, toggle)
  )
end

function GRAPHICS.GOLF_TRAIL_SET_PATH(p0, p1, p2, p3, p4, p5, p6, p7, p8)
  native.invoke(
    Type.Void, 1155, false,
    arg(Type.Float, p0),
    arg(Type.Float, p1),
    arg(Type.Float, p2),
    arg(Type.Float, p3),
    arg(Type.Float, p4),
    arg(Type.Float, p5),
    arg(Type.Float, p6),
    arg(Type.Float, p7),
    arg(Type.Bool, p8)
  )
end

function GRAPHICS.GOLF_TRAIL_SET_RADIUS(p0, p1, p2)
  native.invoke(
    Type.Void, 1156, false,
    arg(Type.Float, p0),
    arg(Type.Float, p1),
    arg(Type.Float, p2)
  )
end

function GRAPHICS.GOLF_TRAIL_SET_COLOUR(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11)
  native.invoke(
    Type.Void, 1157, false,
    arg(Type.Int, p0),
    arg(Type.Int, p1),
    arg(Type.Int, p2),
    arg(Type.Int, p3),
    arg(Type.Int, p4),
    arg(Type.Int, p5),
    arg(Type.Int, p6),
    arg(Type.Int, p7),
    arg(Type.Int, p8),
    arg(Type.Int, p9),
    arg(Type.Int, p10),
    arg(Type.Int, p11)
  )
end

function GRAPHICS.GOLF_TRAIL_SET_TESSELLATION(p0, p1)
  native.invoke(
    Type.Void, 1158, false,
    arg(Type.Int, p0),
    arg(Type.Int, p1)
  )
end

function GRAPHICS.GOLF_TRAIL_SET_FIXED_CONTROL_POINT_ENABLE(p0)
  native.invoke(
    Type.Void, 1159, false,
    arg(Type.Bool, p0)
  )
end

function GRAPHICS.GOLF_TRAIL_SET_FIXED_CONTROL_POINT(type, xPos, yPos, zPos, p4, red, green, blue, alpha)
  native.invoke(
    Type.Void, 1160, false,
    arg(Type.Int, type),
    arg(Type.Float, xPos),
    arg(Type.Float, yPos),
    arg(Type.Float, zPos),
    arg(Type.Float, p4),
    arg(Type.Int, red),
    arg(Type.Int, green),
    arg(Type.Int, blue),
    arg(Type.Int, alpha)
  )
end

function GRAPHICS.GOLF_TRAIL_SET_SHADER_PARAMS(p0, p1, p2, p3, p4)
  native.invoke(
    Type.Void, 1161, false,
    arg(Type.Float, p0),
    arg(Type.Float, p1),
    arg(Type.Float, p2),
    arg(Type.Float, p3),
    arg(Type.Float, p4)
  )
end

function GRAPHICS.GOLF_TRAIL_SET_FACING(p0)
  native.invoke(
    Type.Void, 1162, false,
    arg(Type.Bool, p0)
  )
end

function GRAPHICS.GOLF_TRAIL_GET_MAX_HEIGHT()
  return native.invoke(
    Type.Float, 1163, false
  )
end

function GRAPHICS.GOLF_TRAIL_GET_VISUAL_CONTROL_POINT(p0)
  return native.invoke(
    Type.Vector3, 1164, false,
    arg(Type.Int, p0)
  )
end

function GRAPHICS.SET_SEETHROUGH(toggle)
  native.invoke(
    Type.Void, 1165, false,
    arg(Type.Bool, toggle)
  )
end

function GRAPHICS.GET_USINGSEETHROUGH()
  return native.invoke(
    Type.Bool, 1166, false
  )
end

function GRAPHICS.SEETHROUGH_RESET()
  native.invoke(
    Type.Void, 1167, false
  )
end

function GRAPHICS.SEETHROUGH_SET_FADE_STARTDISTANCE(distance)
  native.invoke(
    Type.Void, 1168, false,
    arg(Type.Float, distance)
  )
end

function GRAPHICS.SEETHROUGH_SET_FADE_ENDDISTANCE(distance)
  native.invoke(
    Type.Void, 1169, false,
    arg(Type.Float, distance)
  )
end

function GRAPHICS.SEETHROUGH_GET_MAX_THICKNESS()
  return native.invoke(
    Type.Float, 1170, false
  )
end

function GRAPHICS.SEETHROUGH_SET_MAX_THICKNESS(thickness)
  native.invoke(
    Type.Void, 1171, false,
    arg(Type.Float, thickness)
  )
end

function GRAPHICS.SEETHROUGH_SET_NOISE_MIN(amount)
  native.invoke(
    Type.Void, 1172, false,
    arg(Type.Float, amount)
  )
end

function GRAPHICS.SEETHROUGH_SET_NOISE_MAX(amount)
  native.invoke(
    Type.Void, 1173, false,
    arg(Type.Float, amount)
  )
end

function GRAPHICS.SEETHROUGH_SET_HILIGHT_INTENSITY(intensity)
  native.invoke(
    Type.Void, 1174, false,
    arg(Type.Float, intensity)
  )
end

function GRAPHICS.SEETHROUGH_SET_HIGHLIGHT_NOISE(noise)
  native.invoke(
    Type.Void, 1175, false,
    arg(Type.Float, noise)
  )
end

function GRAPHICS.SEETHROUGH_SET_HEATSCALE(index, heatScale)
  native.invoke(
    Type.Void, 1176, false,
    arg(Type.Int, index),
    arg(Type.Float, heatScale)
  )
end

function GRAPHICS.SEETHROUGH_SET_COLOR_NEAR(red, green, blue)
  native.invoke(
    Type.Void, 1177, false,
    arg(Type.Int, red),
    arg(Type.Int, green),
    arg(Type.Int, blue)
  )
end

function GRAPHICS.SET_MOTIONBLUR_MAX_VEL_SCALER(p0)
  native.invoke(
    Type.Void, 1178, false,
    arg(Type.Float, p0)
  )
end

function GRAPHICS.GET_MOTIONBLUR_MAX_VEL_SCALER()
  return native.invoke(
    Type.Float, 1179, false
  )
end

function GRAPHICS.SET_FORCE_MOTIONBLUR(toggle)
  native.invoke(
    Type.Void, 1180, false,
    arg(Type.Bool, toggle)
  )
end

function GRAPHICS.TOGGLE_PLAYER_DAMAGE_OVERLAY(toggle)
  native.invoke(
    Type.Void, 1181, false,
    arg(Type.Bool, toggle)
  )
end

function GRAPHICS.RESET_ADAPTATION(p0)
  native.invoke(
    Type.Void, 1182, false,
    arg(Type.Int, p0)
  )
end

function GRAPHICS.TRIGGER_SCREENBLUR_FADE_IN(transitionTime)
  return native.invoke(
    Type.Bool, 1183, false,
    arg(Type.Float, transitionTime)
  )
end

function GRAPHICS.TRIGGER_SCREENBLUR_FADE_OUT(transitionTime)
  return native.invoke(
    Type.Bool, 1184, false,
    arg(Type.Float, transitionTime)
  )
end

function GRAPHICS.DISABLE_SCREENBLUR_FADE()
  native.invoke(
    Type.Void, 1185, false
  )
end

function GRAPHICS.GET_SCREENBLUR_FADE_CURRENT_TIME()
  return native.invoke(
    Type.Float, 1186, false
  )
end

function GRAPHICS.IS_SCREENBLUR_FADE_RUNNING()
  return native.invoke(
    Type.Bool, 1187, false
  )
end

function GRAPHICS.TOGGLE_PAUSED_RENDERPHASES(toggle)
  native.invoke(
    Type.Void, 1188, false,
    arg(Type.Bool, toggle)
  )
end

function GRAPHICS.GET_TOGGLE_PAUSED_RENDERPHASES_STATUS()
  return native.invoke(
    Type.Bool, 1189, false
  )
end

function GRAPHICS.RESET_PAUSED_RENDERPHASES()
  native.invoke(
    Type.Void, 1190, false
  )
end

function GRAPHICS.GRAB_PAUSEMENU_OWNERSHIP()
  native.invoke(
    Type.Void, 1191, false
  )
end

function GRAPHICS.SET_HIDOF_OVERRIDE(p0, p1, nearplaneOut, nearplaneIn, farplaneOut, farplaneIn)
  native.invoke(
    Type.Void, 1192, false,
    arg(Type.Bool, p0),
    arg(Type.Bool, p1),
    arg(Type.Float, nearplaneOut),
    arg(Type.Float, nearplaneIn),
    arg(Type.Float, farplaneOut),
    arg(Type.Float, farplaneIn)
  )
end

function GRAPHICS.SET_LOCK_ADAPTIVE_DOF_DISTANCE(p0)
  native.invoke(
    Type.Void, 1193, false,
    arg(Type.Bool, p0)
  )
end

function GRAPHICS.PHONEPHOTOEDITOR_TOGGLE(p0)
  return native.invoke(
    Type.Bool, 1194, false,
    arg(Type.Bool, p0)
  )
end

function GRAPHICS.PHONEPHOTOEDITOR_IS_ACTIVE()
  return native.invoke(
    Type.Bool, 1195, false
  )
end

function GRAPHICS.PHONEPHOTOEDITOR_SET_FRAME_TXD(textureDict, p1)
  return native.invoke(
    Type.Bool, 1196, false,
    arg(Type.String, textureDict),
    arg(Type.Bool, p1)
  )
end

function GRAPHICS.START_PARTICLE_FX_NON_LOOPED_AT_COORD(effectName, xPos, yPos, zPos, xRot, yRot, zRot, scale, xAxis, yAxis, zAxis)
  return native.invoke(
    Type.Bool, 1197, false,
    arg(Type.String, effectName),
    arg(Type.Float, xPos),
    arg(Type.Float, yPos),
    arg(Type.Float, zPos),
    arg(Type.Float, xRot),
    arg(Type.Float, yRot),
    arg(Type.Float, zRot),
    arg(Type.Float, scale),
    arg(Type.Bool, xAxis),
    arg(Type.Bool, yAxis),
    arg(Type.Bool, zAxis)
  )
end

function GRAPHICS.START_NETWORKED_PARTICLE_FX_NON_LOOPED_AT_COORD(effectName, xPos, yPos, zPos, xRot, yRot, zRot, scale, xAxis, yAxis, zAxis, p11)
  return native.invoke(
    Type.Bool, 1198, false,
    arg(Type.String, effectName),
    arg(Type.Float, xPos),
    arg(Type.Float, yPos),
    arg(Type.Float, zPos),
    arg(Type.Float, xRot),
    arg(Type.Float, yRot),
    arg(Type.Float, zRot),
    arg(Type.Float, scale),
    arg(Type.Bool, xAxis),
    arg(Type.Bool, yAxis),
    arg(Type.Bool, zAxis),
    arg(Type.Bool, p11)
  )
end

function GRAPHICS.START_PARTICLE_FX_NON_LOOPED_ON_PED_BONE(effectName, ped, offsetX, offsetY, offsetZ, rotX, rotY, rotZ, boneIndex, scale, axisX, axisY, axisZ)
  return native.invoke(
    Type.Bool, 1199, false,
    arg(Type.String, effectName),
    arg(Type.Ped, ped),
    arg(Type.Float, offsetX),
    arg(Type.Float, offsetY),
    arg(Type.Float, offsetZ),
    arg(Type.Float, rotX),
    arg(Type.Float, rotY),
    arg(Type.Float, rotZ),
    arg(Type.Int, boneIndex),
    arg(Type.Float, scale),
    arg(Type.Bool, axisX),
    arg(Type.Bool, axisY),
    arg(Type.Bool, axisZ)
  )
end

function GRAPHICS.START_NETWORKED_PARTICLE_FX_NON_LOOPED_ON_PED_BONE(effectName, ped, offsetX, offsetY, offsetZ, rotX, rotY, rotZ, boneIndex, scale, axisX, axisY, axisZ)
  return native.invoke(
    Type.Bool, 1200, false,
    arg(Type.String, effectName),
    arg(Type.Ped, ped),
    arg(Type.Float, offsetX),
    arg(Type.Float, offsetY),
    arg(Type.Float, offsetZ),
    arg(Type.Float, rotX),
    arg(Type.Float, rotY),
    arg(Type.Float, rotZ),
    arg(Type.Int, boneIndex),
    arg(Type.Float, scale),
    arg(Type.Bool, axisX),
    arg(Type.Bool, axisY),
    arg(Type.Bool, axisZ)
  )
end

function GRAPHICS.START_PARTICLE_FX_NON_LOOPED_ON_ENTITY(effectName, entity, offsetX, offsetY, offsetZ, rotX, rotY, rotZ, scale, axisX, axisY, axisZ)
  return native.invoke(
    Type.Bool, 1201, false,
    arg(Type.String, effectName),
    arg(Type.Entity, entity),
    arg(Type.Float, offsetX),
    arg(Type.Float, offsetY),
    arg(Type.Float, offsetZ),
    arg(Type.Float, rotX),
    arg(Type.Float, rotY),
    arg(Type.Float, rotZ),
    arg(Type.Float, scale),
    arg(Type.Bool, axisX),
    arg(Type.Bool, axisY),
    arg(Type.Bool, axisZ)
  )
end

function GRAPHICS.START_NETWORKED_PARTICLE_FX_NON_LOOPED_ON_ENTITY(effectName, entity, offsetX, offsetY, offsetZ, rotX, rotY, rotZ, scale, axisX, axisY, axisZ)
  return native.invoke(
    Type.Bool, 1202, false,
    arg(Type.String, effectName),
    arg(Type.Entity, entity),
    arg(Type.Float, offsetX),
    arg(Type.Float, offsetY),
    arg(Type.Float, offsetZ),
    arg(Type.Float, rotX),
    arg(Type.Float, rotY),
    arg(Type.Float, rotZ),
    arg(Type.Float, scale),
    arg(Type.Bool, axisX),
    arg(Type.Bool, axisY),
    arg(Type.Bool, axisZ)
  )
end

function GRAPHICS.START_PARTICLE_FX_NON_LOOPED_ON_ENTITY_BONE(effectName, entity, offsetX, offsetY, offsetZ, rotX, rotY, rotZ, boneIndex, scale, axisX, axisY, axisZ)
  return native.invoke(
    Type.Bool, 1203, false,
    arg(Type.String, effectName),
    arg(Type.Entity, entity),
    arg(Type.Float, offsetX),
    arg(Type.Float, offsetY),
    arg(Type.Float, offsetZ),
    arg(Type.Float, rotX),
    arg(Type.Float, rotY),
    arg(Type.Float, rotZ),
    arg(Type.Int, boneIndex),
    arg(Type.Float, scale),
    arg(Type.Bool, axisX),
    arg(Type.Bool, axisY),
    arg(Type.Bool, axisZ)
  )
end

function GRAPHICS.SET_PARTICLE_FX_NON_LOOPED_COLOUR(r, g, b)
  native.invoke(
    Type.Void, 1204, false,
    arg(Type.Float, r),
    arg(Type.Float, g),
    arg(Type.Float, b)
  )
end

function GRAPHICS.SET_PARTICLE_FX_NON_LOOPED_ALPHA(alpha)
  native.invoke(
    Type.Void, 1205, false,
    arg(Type.Float, alpha)
  )
end

function GRAPHICS.SET_PARTICLE_FX_NON_LOOPED_SCALE(scale)
  native.invoke(
    Type.Void, 1206, false,
    arg(Type.Float, scale)
  )
end

function GRAPHICS.SET_PARTICLE_FX_NON_LOOPED_EMITTER_SIZE(p0, p1, scale)
  native.invoke(
    Type.Void, 1207, false,
    arg(Type.Float, p0),
    arg(Type.Float, p1),
    arg(Type.Float, scale)
  )
end

function GRAPHICS.SET_PARTICLE_FX_FORCE_VEHICLE_INTERIOR(toggle)
  native.invoke(
    Type.Void, 1208, false,
    arg(Type.Bool, toggle)
  )
end

function GRAPHICS.START_PARTICLE_FX_LOOPED_AT_COORD(effectName, x, y, z, xRot, yRot, zRot, scale, xAxis, yAxis, zAxis, p11)
  return native.invoke(
    Type.Int, 1209, false,
    arg(Type.String, effectName),
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, z),
    arg(Type.Float, xRot),
    arg(Type.Float, yRot),
    arg(Type.Float, zRot),
    arg(Type.Float, scale),
    arg(Type.Bool, xAxis),
    arg(Type.Bool, yAxis),
    arg(Type.Bool, zAxis),
    arg(Type.Bool, p11)
  )
end

function GRAPHICS.START_PARTICLE_FX_LOOPED_ON_PED_BONE(effectName, ped, xOffset, yOffset, zOffset, xRot, yRot, zRot, boneIndex, scale, xAxis, yAxis, zAxis)
  return native.invoke(
    Type.Int, 1210, false,
    arg(Type.String, effectName),
    arg(Type.Ped, ped),
    arg(Type.Float, xOffset),
    arg(Type.Float, yOffset),
    arg(Type.Float, zOffset),
    arg(Type.Float, xRot),
    arg(Type.Float, yRot),
    arg(Type.Float, zRot),
    arg(Type.Int, boneIndex),
    arg(Type.Float, scale),
    arg(Type.Bool, xAxis),
    arg(Type.Bool, yAxis),
    arg(Type.Bool, zAxis)
  )
end

function GRAPHICS.START_PARTICLE_FX_LOOPED_ON_ENTITY(effectName, entity, xOffset, yOffset, zOffset, xRot, yRot, zRot, scale, xAxis, yAxis, zAxis)
  return native.invoke(
    Type.Int, 1211, false,
    arg(Type.String, effectName),
    arg(Type.Entity, entity),
    arg(Type.Float, xOffset),
    arg(Type.Float, yOffset),
    arg(Type.Float, zOffset),
    arg(Type.Float, xRot),
    arg(Type.Float, yRot),
    arg(Type.Float, zRot),
    arg(Type.Float, scale),
    arg(Type.Bool, xAxis),
    arg(Type.Bool, yAxis),
    arg(Type.Bool, zAxis)
  )
end

function GRAPHICS.START_PARTICLE_FX_LOOPED_ON_ENTITY_BONE(effectName, entity, xOffset, yOffset, zOffset, xRot, yRot, zRot, boneIndex, scale, xAxis, yAxis, zAxis)
  return native.invoke(
    Type.Int, 1212, false,
    arg(Type.String, effectName),
    arg(Type.Entity, entity),
    arg(Type.Float, xOffset),
    arg(Type.Float, yOffset),
    arg(Type.Float, zOffset),
    arg(Type.Float, xRot),
    arg(Type.Float, yRot),
    arg(Type.Float, zRot),
    arg(Type.Int, boneIndex),
    arg(Type.Float, scale),
    arg(Type.Bool, xAxis),
    arg(Type.Bool, yAxis),
    arg(Type.Bool, zAxis)
  )
end

function GRAPHICS.START_NETWORKED_PARTICLE_FX_LOOPED_ON_ENTITY(effectName, entity, xOffset, yOffset, zOffset, xRot, yRot, zRot, scale, xAxis, yAxis, zAxis, r, g, b, a)
  return native.invoke(
    Type.Int, 1213, false,
    arg(Type.String, effectName),
    arg(Type.Entity, entity),
    arg(Type.Float, xOffset),
    arg(Type.Float, yOffset),
    arg(Type.Float, zOffset),
    arg(Type.Float, xRot),
    arg(Type.Float, yRot),
    arg(Type.Float, zRot),
    arg(Type.Float, scale),
    arg(Type.Bool, xAxis),
    arg(Type.Bool, yAxis),
    arg(Type.Bool, zAxis),
    arg(Type.Float, r),
    arg(Type.Float, g),
    arg(Type.Float, b),
    arg(Type.Float, a)
  )
end

function GRAPHICS.START_NETWORKED_PARTICLE_FX_LOOPED_ON_ENTITY_BONE(effectName, entity, xOffset, yOffset, zOffset, xRot, yRot, zRot, boneIndex, scale, xAxis, yAxis, zAxis, r, g, b, a)
  return native.invoke(
    Type.Int, 1214, false,
    arg(Type.String, effectName),
    arg(Type.Entity, entity),
    arg(Type.Float, xOffset),
    arg(Type.Float, yOffset),
    arg(Type.Float, zOffset),
    arg(Type.Float, xRot),
    arg(Type.Float, yRot),
    arg(Type.Float, zRot),
    arg(Type.Int, boneIndex),
    arg(Type.Float, scale),
    arg(Type.Bool, xAxis),
    arg(Type.Bool, yAxis),
    arg(Type.Bool, zAxis),
    arg(Type.Float, r),
    arg(Type.Float, g),
    arg(Type.Float, b),
    arg(Type.Float, a)
  )
end

function GRAPHICS.STOP_PARTICLE_FX_LOOPED(ptfxHandle, p1)
  native.invoke(
    Type.Void, 1215, false,
    arg(Type.Int, ptfxHandle),
    arg(Type.Bool, p1)
  )
end

function GRAPHICS.REMOVE_PARTICLE_FX(ptfxHandle, p1)
  native.invoke(
    Type.Void, 1216, false,
    arg(Type.Int, ptfxHandle),
    arg(Type.Bool, p1)
  )
end

function GRAPHICS.REMOVE_PARTICLE_FX_FROM_ENTITY(entity)
  native.invoke(
    Type.Void, 1217, false,
    arg(Type.Entity, entity)
  )
end

function GRAPHICS.REMOVE_PARTICLE_FX_IN_RANGE(X, Y, Z, radius)
  native.invoke(
    Type.Void, 1218, false,
    arg(Type.Float, X),
    arg(Type.Float, Y),
    arg(Type.Float, Z),
    arg(Type.Float, radius)
  )
end

function GRAPHICS.FORCE_PARTICLE_FX_IN_VEHICLE_INTERIOR(p0, p1)
  native.invoke(
    Type.Void, 1219, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1)
  )
end

function GRAPHICS.DOES_PARTICLE_FX_LOOPED_EXIST(ptfxHandle)
  return native.invoke(
    Type.Bool, 1220, false,
    arg(Type.Int, ptfxHandle)
  )
end

function GRAPHICS.SET_PARTICLE_FX_LOOPED_OFFSETS(ptfxHandle, x, y, z, rotX, rotY, rotZ)
  native.invoke(
    Type.Void, 1221, false,
    arg(Type.Int, ptfxHandle),
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, z),
    arg(Type.Float, rotX),
    arg(Type.Float, rotY),
    arg(Type.Float, rotZ)
  )
end

function GRAPHICS.SET_PARTICLE_FX_LOOPED_EVOLUTION(ptfxHandle, propertyName, amount, noNetwork)
  native.invoke(
    Type.Void, 1222, false,
    arg(Type.Int, ptfxHandle),
    arg(Type.String, propertyName),
    arg(Type.Float, amount),
    arg(Type.Bool, noNetwork)
  )
end

function GRAPHICS.SET_PARTICLE_FX_LOOPED_COLOUR(ptfxHandle, r, g, b, p4)
  native.invoke(
    Type.Void, 1223, false,
    arg(Type.Int, ptfxHandle),
    arg(Type.Float, r),
    arg(Type.Float, g),
    arg(Type.Float, b),
    arg(Type.Bool, p4)
  )
end

function GRAPHICS.SET_PARTICLE_FX_LOOPED_ALPHA(ptfxHandle, alpha)
  native.invoke(
    Type.Void, 1224, false,
    arg(Type.Int, ptfxHandle),
    arg(Type.Float, alpha)
  )
end

function GRAPHICS.SET_PARTICLE_FX_LOOPED_SCALE(ptfxHandle, scale)
  native.invoke(
    Type.Void, 1225, false,
    arg(Type.Int, ptfxHandle),
    arg(Type.Float, scale)
  )
end

function GRAPHICS.SET_PARTICLE_FX_LOOPED_FAR_CLIP_DIST(ptfxHandle, range)
  native.invoke(
    Type.Void, 1226, false,
    arg(Type.Int, ptfxHandle),
    arg(Type.Float, range)
  )
end

function GRAPHICS._SET_PARTICLE_FX_LOOPED_CAMERA_BIAS(ptfxHandle, p1)
  native.invoke(
    Type.Void, 1227, false,
    arg(Type.Int, ptfxHandle),
    arg(Type.Float, p1)
  )
end

function GRAPHICS.SET_PARTICLE_FX_CAM_INSIDE_VEHICLE(p0)
  native.invoke(
    Type.Void, 1228, false,
    arg(Type.Bool, p0)
  )
end

function GRAPHICS.SET_PARTICLE_FX_CAM_INSIDE_NONPLAYER_VEHICLE(vehicle, p1)
  native.invoke(
    Type.Void, 1229, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Bool, p1)
  )
end

function GRAPHICS.SET_PARTICLE_FX_SHOOTOUT_BOAT(p0)
  native.invoke(
    Type.Void, 1230, false,
    arg(Type.Any, p0)
  )
end

function GRAPHICS.CLEAR_PARTICLE_FX_SHOOTOUT_BOAT()
  native.invoke(
    Type.Void, 1231, false
  )
end

function GRAPHICS.SET_PARTICLE_FX_BLOOD_SCALE(p0)
  native.invoke(
    Type.Void, 1232, false,
    arg(Type.Any, p0)
  )
end

function GRAPHICS.DISABLE_IN_WATER_PTFX(toggle)
  native.invoke(
    Type.Void, 1233, false,
    arg(Type.Bool, toggle)
  )
end

function GRAPHICS.DISABLE_DOWNWASH_PTFX(toggle)
  native.invoke(
    Type.Void, 1234, false,
    arg(Type.Bool, toggle)
  )
end

function GRAPHICS.SET_PARTICLE_FX_SLIPSTREAM_LODRANGE_SCALE(scale)
  native.invoke(
    Type.Void, 1235, false,
    arg(Type.Float, scale)
  )
end

function GRAPHICS.ENABLE_CLOWN_BLOOD_VFX(toggle)
  native.invoke(
    Type.Void, 1236, false,
    arg(Type.Bool, toggle)
  )
end

function GRAPHICS.ENABLE_ALIEN_BLOOD_VFX(toggle)
  native.invoke(
    Type.Void, 1237, false,
    arg(Type.Bool, toggle)
  )
end

function GRAPHICS.SET_PARTICLE_FX_BULLET_IMPACT_SCALE(scale)
  native.invoke(
    Type.Void, 1238, false,
    arg(Type.Float, scale)
  )
end

function GRAPHICS.SET_PARTICLE_FX_BULLET_IMPACT_LODRANGE_SCALE(p0)
  native.invoke(
    Type.Void, 1239, false,
    arg(Type.Float, p0)
  )
end

function GRAPHICS.SET_PARTICLE_FX_BULLET_TRACE_NO_ANGLE_REJECT(p0)
  native.invoke(
    Type.Void, 1240, false,
    arg(Type.Bool, p0)
  )
end

function GRAPHICS.SET_PARTICLE_FX_BANG_SCRAPE_LODRANGE_SCALE(p0)
  native.invoke(
    Type.Void, 1241, false,
    arg(Type.Float, p0)
  )
end

function GRAPHICS.SET_PARTICLE_FX_FOOT_LODRANGE_SCALE(p0)
  native.invoke(
    Type.Void, 1242, false,
    arg(Type.Float, p0)
  )
end

function GRAPHICS.SET_PARTICLE_FX_FOOT_OVERRIDE_NAME(p0)
  native.invoke(
    Type.Void, 1243, false,
    arg(Type.String, p0)
  )
end

function GRAPHICS.SET_SKIDMARK_RANGE_SCALE(scale)
  native.invoke(
    Type.Void, 1244, false,
    arg(Type.Float, scale)
  )
end

function GRAPHICS.SET_PTFX_FORCE_VEHICLE_INTERIOR_FLAG(p0)
  native.invoke(
    Type.Void, 1245, false,
    arg(Type.Any, p0)
  )
end

function GRAPHICS.REGISTER_POSTFX_BULLET_IMPACT(weaponWorldPosX, weaponWorldPosY, weaponWorldPosZ, intensity)
  native.invoke(
    Type.Void, 1246, false,
    arg(Type.Float, weaponWorldPosX),
    arg(Type.Float, weaponWorldPosY),
    arg(Type.Float, weaponWorldPosZ),
    arg(Type.Float, intensity)
  )
end

function GRAPHICS.FORCE_POSTFX_BULLET_IMPACTS_AFTER_HUD(p0)
  native.invoke(
    Type.Void, 1247, false,
    arg(Type.Bool, p0)
  )
end

function GRAPHICS.USE_PARTICLE_FX_ASSET(name)
  native.invoke(
    Type.Void, 1248, false,
    arg(Type.String, name)
  )
end

function GRAPHICS.SET_PARTICLE_FX_OVERRIDE(oldAsset, newAsset)
  native.invoke(
    Type.Void, 1249, false,
    arg(Type.String, oldAsset),
    arg(Type.String, newAsset)
  )
end

function GRAPHICS.RESET_PARTICLE_FX_OVERRIDE(name)
  native.invoke(
    Type.Void, 1250, false,
    arg(Type.String, name)
  )
end

function GRAPHICS._START_VEHICLE_PARTICLE_FX_LOOPED(vehicle, effectName, frontBack, leftRight, localOnly)
  return native.invoke(
    Type.Int, 1251, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.String, effectName),
    arg(Type.Bool, frontBack),
    arg(Type.Bool, leftRight),
    arg(Type.Bool, localOnly)
  )
end

function GRAPHICS.SET_WEATHER_PTFX_USE_OVERRIDE_SETTINGS(p0)
  native.invoke(
    Type.Void, 1252, false,
    arg(Type.Bool, p0)
  )
end

function GRAPHICS.SET_WEATHER_PTFX_OVERRIDE_CURR_LEVEL(p0)
  native.invoke(
    Type.Void, 1253, false,
    arg(Type.Float, p0)
  )
end

function GRAPHICS.WASH_DECALS_IN_RANGE(x, y, z, range, p4)
  native.invoke(
    Type.Void, 1254, false,
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, z),
    arg(Type.Float, range),
    arg(Type.Float, p4)
  )
end

function GRAPHICS.WASH_DECALS_FROM_VEHICLE(vehicle, p1)
  native.invoke(
    Type.Void, 1255, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Float, p1)
  )
end

function GRAPHICS.FADE_DECALS_IN_RANGE(x, y, z, p3, p4)
  native.invoke(
    Type.Void, 1256, false,
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, z),
    arg(Type.Float, p3),
    arg(Type.Float, p4)
  )
end

function GRAPHICS.REMOVE_DECALS_IN_RANGE(x, y, z, range)
  native.invoke(
    Type.Void, 1257, false,
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, z),
    arg(Type.Float, range)
  )
end

function GRAPHICS.REMOVE_DECALS_FROM_OBJECT(obj)
  native.invoke(
    Type.Void, 1258, false,
    arg(Type.Object, obj)
  )
end

function GRAPHICS.REMOVE_DECALS_FROM_OBJECT_FACING(obj, x, y, z)
  native.invoke(
    Type.Void, 1259, false,
    arg(Type.Object, obj),
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, z)
  )
end

function GRAPHICS.REMOVE_DECALS_FROM_VEHICLE(vehicle)
  native.invoke(
    Type.Void, 1260, false,
    arg(Type.Vehicle, vehicle)
  )
end

function GRAPHICS.ADD_DECAL(decalType, posX, posY, posZ, p4, p5, p6, p7, p8, p9, width, height, rCoef, gCoef, bCoef, opacity, timeout, p17, p18, p19)
  return native.invoke(
    Type.Int, 1261, false,
    arg(Type.Int, decalType),
    arg(Type.Float, posX),
    arg(Type.Float, posY),
    arg(Type.Float, posZ),
    arg(Type.Float, p4),
    arg(Type.Float, p5),
    arg(Type.Float, p6),
    arg(Type.Float, p7),
    arg(Type.Float, p8),
    arg(Type.Float, p9),
    arg(Type.Float, width),
    arg(Type.Float, height),
    arg(Type.Float, rCoef),
    arg(Type.Float, gCoef),
    arg(Type.Float, bCoef),
    arg(Type.Float, opacity),
    arg(Type.Float, timeout),
    arg(Type.Bool, p17),
    arg(Type.Bool, p18),
    arg(Type.Bool, p19)
  )
end

function GRAPHICS.ADD_PETROL_DECAL(x, y, z, groundLvl, width, transparency)
  return native.invoke(
    Type.Int, 1262, false,
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, z),
    arg(Type.Float, groundLvl),
    arg(Type.Float, width),
    arg(Type.Float, transparency)
  )
end

function GRAPHICS.ADD_OIL_DECAL(x, y, z, groundLvl, width, transparency)
  return native.invoke(
    Type.Int, 1263, false,
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, z),
    arg(Type.Float, groundLvl),
    arg(Type.Float, width),
    arg(Type.Float, transparency)
  )
end

function GRAPHICS.START_PETROL_TRAIL_DECALS(p0)
  native.invoke(
    Type.Void, 1264, false,
    arg(Type.Float, p0)
  )
end

function GRAPHICS.ADD_PETROL_TRAIL_DECAL_INFO(x, y, z, p3)
  native.invoke(
    Type.Void, 1265, false,
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, z),
    arg(Type.Float, p3)
  )
end

function GRAPHICS.END_PETROL_TRAIL_DECALS()
  native.invoke(
    Type.Void, 1266, false
  )
end

function GRAPHICS.REMOVE_DECAL(decal)
  native.invoke(
    Type.Void, 1267, false,
    arg(Type.Int, decal)
  )
end

function GRAPHICS.IS_DECAL_ALIVE(decal)
  return native.invoke(
    Type.Bool, 1268, false,
    arg(Type.Int, decal)
  )
end

function GRAPHICS.GET_DECAL_WASH_LEVEL(decal)
  return native.invoke(
    Type.Float, 1269, false,
    arg(Type.Int, decal)
  )
end

function GRAPHICS.SET_DISABLE_PETROL_DECALS_IGNITING_THIS_FRAME()
  native.invoke(
    Type.Void, 1270, false
  )
end

function GRAPHICS.SET_DISABLE_PETROL_DECALS_RECYCLING_THIS_FRAME()
  native.invoke(
    Type.Void, 1271, false
  )
end

function GRAPHICS.SET_DISABLE_DECAL_RENDERING_THIS_FRAME()
  native.invoke(
    Type.Void, 1272, false
  )
end

function GRAPHICS.GET_IS_PETROL_DECAL_IN_RANGE(xCoord, yCoord, zCoord, radius)
  return native.invoke(
    Type.Bool, 1273, false,
    arg(Type.Float, xCoord),
    arg(Type.Float, yCoord),
    arg(Type.Float, zCoord),
    arg(Type.Float, radius)
  )
end

function GRAPHICS.PATCH_DECAL_DIFFUSE_MAP(decalType, textureDict, textureName)
  native.invoke(
    Type.Void, 1274, false,
    arg(Type.Int, decalType),
    arg(Type.String, textureDict),
    arg(Type.String, textureName)
  )
end

function GRAPHICS.UNPATCH_DECAL_DIFFUSE_MAP(decalType)
  native.invoke(
    Type.Void, 1275, false,
    arg(Type.Int, decalType)
  )
end

function GRAPHICS.MOVE_VEHICLE_DECALS(p0, p1)
  native.invoke(
    Type.Void, 1276, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1)
  )
end

function GRAPHICS.ADD_VEHICLE_CREW_EMBLEM(vehicle, ped, boneIndex, x1, x2, x3, y1, y2, y3, z1, z2, z3, scale, p13, alpha)
  return native.invoke(
    Type.Bool, 1277, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Ped, ped),
    arg(Type.Int, boneIndex),
    arg(Type.Float, x1),
    arg(Type.Float, x2),
    arg(Type.Float, x3),
    arg(Type.Float, y1),
    arg(Type.Float, y2),
    arg(Type.Float, y3),
    arg(Type.Float, z1),
    arg(Type.Float, z2),
    arg(Type.Float, z3),
    arg(Type.Float, scale),
    arg(Type.Any, p13),
    arg(Type.Int, alpha)
  )
end

function GRAPHICS.ABORT_VEHICLE_CREW_EMBLEM_REQUEST(p0)
  return native.invoke(
    Type.Bool, 1278, false,
    ref(Type.Int, p0)
  )
end

function GRAPHICS.REMOVE_VEHICLE_CREW_EMBLEM(vehicle, p1)
  native.invoke(
    Type.Void, 1279, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Int, p1)
  )
end

function GRAPHICS.GET_VEHICLE_CREW_EMBLEM_REQUEST_STATE(vehicle, p1)
  return native.invoke(
    Type.Int, 1280, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Int, p1)
  )
end

function GRAPHICS.DOES_VEHICLE_HAVE_CREW_EMBLEM(vehicle, p1)
  return native.invoke(
    Type.Bool, 1281, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Int, p1)
  )
end

function GRAPHICS.DISABLE_COMPOSITE_SHOTGUN_DECALS(toggle)
  native.invoke(
    Type.Void, 1282, false,
    arg(Type.Bool, toggle)
  )
end

function GRAPHICS.DISABLE_SCUFF_DECALS(toggle)
  native.invoke(
    Type.Void, 1283, false,
    arg(Type.Bool, toggle)
  )
end

function GRAPHICS.SET_DECAL_BULLET_IMPACT_RANGE_SCALE(p0)
  native.invoke(
    Type.Void, 1284, false,
    arg(Type.Float, p0)
  )
end

function GRAPHICS.OVERRIDE_INTERIOR_SMOKE_NAME(name)
  native.invoke(
    Type.Void, 1285, false,
    arg(Type.String, name)
  )
end

function GRAPHICS.OVERRIDE_INTERIOR_SMOKE_LEVEL(level)
  native.invoke(
    Type.Void, 1286, false,
    arg(Type.Float, level)
  )
end

function GRAPHICS.OVERRIDE_INTERIOR_SMOKE_END()
  native.invoke(
    Type.Void, 1287, false
  )
end

function GRAPHICS.REGISTER_NOIR_LENS_EFFECT()
  native.invoke(
    Type.Void, 1288, false
  )
end

function GRAPHICS.DISABLE_VEHICLE_DISTANTLIGHTS(toggle)
  native.invoke(
    Type.Void, 1289, false,
    arg(Type.Bool, toggle)
  )
end

function GRAPHICS.RENDER_SHADOWED_LIGHTS_WITH_NO_SHADOWS(p0)
  native.invoke(
    Type.Void, 1290, false,
    arg(Type.Bool, p0)
  )
end

function GRAPHICS.REQUEST_EARLY_LIGHT_CHECK()
  native.invoke(
    Type.Void, 1291, false
  )
end

function GRAPHICS.USE_SNOW_FOOT_VFX_WHEN_UNSHELTERED(toggle)
  native.invoke(
    Type.Void, 1292, false,
    arg(Type.Bool, toggle)
  )
end

function GRAPHICS._FORCE_ALLOW_SNOW_FOOT_VFX_ON_ICE(toggle)
  native.invoke(
    Type.Void, 1293, false,
    arg(Type.Bool, toggle)
  )
end

function GRAPHICS.USE_SNOW_WHEEL_VFX_WHEN_UNSHELTERED(toggle)
  native.invoke(
    Type.Void, 1294, false,
    arg(Type.Bool, toggle)
  )
end

function GRAPHICS.DISABLE_REGION_VFX(p0)
  native.invoke(
    Type.Void, 1295, false,
    arg(Type.Any, p0)
  )
end

function GRAPHICS._FORCE_GROUND_SNOW_PASS(toggle)
  native.invoke(
    Type.Void, 1296, false,
    arg(Type.Bool, toggle)
  )
end

function GRAPHICS.PRESET_INTERIOR_AMBIENT_CACHE(timecycleModifierName)
  native.invoke(
    Type.Void, 1297, false,
    arg(Type.String, timecycleModifierName)
  )
end

function GRAPHICS.SET_TIMECYCLE_MODIFIER(modifierName)
  native.invoke(
    Type.Void, 1298, false,
    arg(Type.String, modifierName)
  )
end

function GRAPHICS.SET_TIMECYCLE_MODIFIER_STRENGTH(strength)
  native.invoke(
    Type.Void, 1299, false,
    arg(Type.Float, strength)
  )
end

function GRAPHICS.SET_TRANSITION_TIMECYCLE_MODIFIER(modifierName, transition)
  native.invoke(
    Type.Void, 1300, false,
    arg(Type.String, modifierName),
    arg(Type.Float, transition)
  )
end

function GRAPHICS.SET_TRANSITION_OUT_OF_TIMECYCLE_MODIFIER(strength)
  native.invoke(
    Type.Void, 1301, false,
    arg(Type.Float, strength)
  )
end

function GRAPHICS.CLEAR_TIMECYCLE_MODIFIER()
  native.invoke(
    Type.Void, 1302, false
  )
end

function GRAPHICS.GET_TIMECYCLE_MODIFIER_INDEX()
  return native.invoke(
    Type.Int, 1303, false
  )
end

function GRAPHICS.GET_TIMECYCLE_TRANSITION_MODIFIER_INDEX()
  return native.invoke(
    Type.Int, 1304, false
  )
end

function GRAPHICS.GET_IS_TIMECYCLE_TRANSITIONING_OUT()
  return native.invoke(
    Type.Bool, 1305, false
  )
end

function GRAPHICS.PUSH_TIMECYCLE_MODIFIER()
  native.invoke(
    Type.Void, 1306, false
  )
end

function GRAPHICS.POP_TIMECYCLE_MODIFIER()
  native.invoke(
    Type.Void, 1307, false
  )
end

function GRAPHICS.SET_CURRENT_PLAYER_TCMODIFIER(modifierName)
  native.invoke(
    Type.Void, 1308, false,
    arg(Type.String, modifierName)
  )
end

function GRAPHICS.SET_PLAYER_TCMODIFIER_TRANSITION(value)
  native.invoke(
    Type.Void, 1309, false,
    arg(Type.Float, value)
  )
end

function GRAPHICS.SET_NEXT_PLAYER_TCMODIFIER(modifierName)
  native.invoke(
    Type.Void, 1310, false,
    arg(Type.String, modifierName)
  )
end

function GRAPHICS.ADD_TCMODIFIER_OVERRIDE(modifierName1, modifierName2)
  native.invoke(
    Type.Void, 1311, false,
    arg(Type.String, modifierName1),
    arg(Type.String, modifierName2)
  )
end

function GRAPHICS.CLEAR_ALL_TCMODIFIER_OVERRIDES(p0)
  native.invoke(
    Type.Void, 1312, false,
    arg(Type.String, p0)
  )
end

function GRAPHICS.SET_EXTRA_TCMODIFIER(modifierName)
  native.invoke(
    Type.Void, 1313, false,
    arg(Type.String, modifierName)
  )
end

function GRAPHICS.CLEAR_EXTRA_TCMODIFIER()
  native.invoke(
    Type.Void, 1314, false
  )
end

function GRAPHICS.GET_EXTRA_TCMODIFIER()
  return native.invoke(
    Type.Int, 1315, false
  )
end

function GRAPHICS.ENABLE_MOON_CYCLE_OVERRIDE(strength)
  native.invoke(
    Type.Void, 1316, false,
    arg(Type.Float, strength)
  )
end

function GRAPHICS.DISABLE_MOON_CYCLE_OVERRIDE()
  native.invoke(
    Type.Void, 1317, false
  )
end

function GRAPHICS.REQUEST_SCALEFORM_MOVIE(scaleformName)
  return native.invoke(
    Type.Int, 1318, false,
    arg(Type.String, scaleformName)
  )
end

function GRAPHICS.REQUEST_SCALEFORM_MOVIE_WITH_IGNORE_SUPER_WIDESCREEN(scaleformName)
  return native.invoke(
    Type.Int, 1319, false,
    arg(Type.String, scaleformName)
  )
end

function GRAPHICS.REQUEST_SCALEFORM_MOVIE_INSTANCE(scaleformName)
  return native.invoke(
    Type.Int, 1320, false,
    arg(Type.String, scaleformName)
  )
end

function GRAPHICS.REQUEST_SCALEFORM_MOVIE_SKIP_RENDER_WHILE_PAUSED(scaleformName)
  return native.invoke(
    Type.Int, 1321, false,
    arg(Type.String, scaleformName)
  )
end

function GRAPHICS.HAS_SCALEFORM_MOVIE_LOADED(scaleformHandle)
  return native.invoke(
    Type.Bool, 1322, false,
    arg(Type.Int, scaleformHandle)
  )
end

function GRAPHICS.IS_ACTIVE_SCALEFORM_MOVIE_DELETING(val)
  return native.invoke(
    Type.Bool, 1323, false,
    arg(Type.Int, val)
  )
end

function GRAPHICS.IS_SCALEFORM_MOVIE_DELETING(val)
  return native.invoke(
    Type.Bool, 1324, false,
    arg(Type.Int, val)
  )
end

function GRAPHICS.HAS_SCALEFORM_MOVIE_FILENAME_LOADED(scaleformName)
  return native.invoke(
    Type.Bool, 1325, false,
    arg(Type.String, scaleformName)
  )
end

function GRAPHICS.HAS_SCALEFORM_CONTAINER_MOVIE_LOADED_INTO_PARENT(scaleformHandle)
  return native.invoke(
    Type.Bool, 1326, false,
    arg(Type.Int, scaleformHandle)
  )
end

function GRAPHICS.SET_SCALEFORM_MOVIE_AS_NO_LONGER_NEEDED(scaleformHandle)
  native.invoke(
    Type.Void, 1327, false,
    ref(Type.Int, scaleformHandle)
  )
end

function GRAPHICS.SET_SCALEFORM_MOVIE_TO_USE_SYSTEM_TIME(scaleform, toggle)
  native.invoke(
    Type.Void, 1328, false,
    arg(Type.Int, scaleform),
    arg(Type.Bool, toggle)
  )
end

function GRAPHICS.SET_SCALEFORM_MOVIE_TO_USE_LARGE_RT(scaleformHandle, toggle)
  native.invoke(
    Type.Void, 1329, false,
    arg(Type.Int, scaleformHandle),
    arg(Type.Bool, toggle)
  )
end

function GRAPHICS.SET_SCALEFORM_MOVIE_TO_USE_SUPER_LARGE_RT(scaleformHandle, toggle)
  native.invoke(
    Type.Void, 1330, false,
    arg(Type.Int, scaleformHandle),
    arg(Type.Bool, toggle)
  )
end

function GRAPHICS.DRAW_SCALEFORM_MOVIE(scaleformHandle, x, y, width, height, red, green, blue, alpha, p9)
  native.invoke(
    Type.Void, 1331, false,
    arg(Type.Int, scaleformHandle),
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, width),
    arg(Type.Float, height),
    arg(Type.Int, red),
    arg(Type.Int, green),
    arg(Type.Int, blue),
    arg(Type.Int, alpha),
    arg(Type.Int, p9)
  )
end

function GRAPHICS.DRAW_SCALEFORM_MOVIE_FULLSCREEN(scaleform, red, green, blue, alpha, p5)
  native.invoke(
    Type.Void, 1332, false,
    arg(Type.Int, scaleform),
    arg(Type.Int, red),
    arg(Type.Int, green),
    arg(Type.Int, blue),
    arg(Type.Int, alpha),
    arg(Type.Int, p5)
  )
end

function GRAPHICS.DRAW_SCALEFORM_MOVIE_FULLSCREEN_MASKED(scaleform1, scaleform2, red, green, blue, alpha)
  native.invoke(
    Type.Void, 1333, false,
    arg(Type.Int, scaleform1),
    arg(Type.Int, scaleform2),
    arg(Type.Int, red),
    arg(Type.Int, green),
    arg(Type.Int, blue),
    arg(Type.Int, alpha)
  )
end

function GRAPHICS.DRAW_SCALEFORM_MOVIE_3D(scaleform, posX, posY, posZ, rotX, rotY, rotZ, p7, p8, p9, scaleX, scaleY, scaleZ, rotationOrder)
  native.invoke(
    Type.Void, 1334, false,
    arg(Type.Int, scaleform),
    arg(Type.Float, posX),
    arg(Type.Float, posY),
    arg(Type.Float, posZ),
    arg(Type.Float, rotX),
    arg(Type.Float, rotY),
    arg(Type.Float, rotZ),
    arg(Type.Float, p7),
    arg(Type.Float, p8),
    arg(Type.Float, p9),
    arg(Type.Float, scaleX),
    arg(Type.Float, scaleY),
    arg(Type.Float, scaleZ),
    arg(Type.Int, rotationOrder)
  )
end

function GRAPHICS.DRAW_SCALEFORM_MOVIE_3D_SOLID(scaleform, posX, posY, posZ, rotX, rotY, rotZ, p7, p8, p9, scaleX, scaleY, scaleZ, rotationOrder)
  native.invoke(
    Type.Void, 1335, false,
    arg(Type.Int, scaleform),
    arg(Type.Float, posX),
    arg(Type.Float, posY),
    arg(Type.Float, posZ),
    arg(Type.Float, rotX),
    arg(Type.Float, rotY),
    arg(Type.Float, rotZ),
    arg(Type.Float, p7),
    arg(Type.Float, p8),
    arg(Type.Float, p9),
    arg(Type.Float, scaleX),
    arg(Type.Float, scaleY),
    arg(Type.Float, scaleZ),
    arg(Type.Int, rotationOrder)
  )
end

function GRAPHICS.CALL_SCALEFORM_MOVIE_METHOD(scaleform, method)
  native.invoke(
    Type.Void, 1336, false,
    arg(Type.Int, scaleform),
    arg(Type.String, method)
  )
end

function GRAPHICS.CALL_SCALEFORM_MOVIE_METHOD_WITH_NUMBER(scaleform, methodName, param1, param2, param3, param4, param5)
  native.invoke(
    Type.Void, 1337, false,
    arg(Type.Int, scaleform),
    arg(Type.String, methodName),
    arg(Type.Float, param1),
    arg(Type.Float, param2),
    arg(Type.Float, param3),
    arg(Type.Float, param4),
    arg(Type.Float, param5)
  )
end

function GRAPHICS.CALL_SCALEFORM_MOVIE_METHOD_WITH_STRING(scaleform, methodName, param1, param2, param3, param4, param5)
  native.invoke(
    Type.Void, 1338, false,
    arg(Type.Int, scaleform),
    arg(Type.String, methodName),
    arg(Type.String, param1),
    arg(Type.String, param2),
    arg(Type.String, param3),
    arg(Type.String, param4),
    arg(Type.String, param5)
  )
end

function GRAPHICS.CALL_SCALEFORM_MOVIE_METHOD_WITH_NUMBER_AND_STRING(scaleform, methodName, floatParam1, floatParam2, floatParam3, floatParam4, floatParam5, stringParam1, stringParam2, stringParam3, stringParam4, stringParam5)
  native.invoke(
    Type.Void, 1339, false,
    arg(Type.Int, scaleform),
    arg(Type.String, methodName),
    arg(Type.Float, floatParam1),
    arg(Type.Float, floatParam2),
    arg(Type.Float, floatParam3),
    arg(Type.Float, floatParam4),
    arg(Type.Float, floatParam5),
    arg(Type.String, stringParam1),
    arg(Type.String, stringParam2),
    arg(Type.String, stringParam3),
    arg(Type.String, stringParam4),
    arg(Type.String, stringParam5)
  )
end

function GRAPHICS.BEGIN_SCALEFORM_SCRIPT_HUD_MOVIE_METHOD(hudComponent, methodName)
  return native.invoke(
    Type.Bool, 1340, false,
    arg(Type.Int, hudComponent),
    arg(Type.String, methodName)
  )
end

function GRAPHICS.BEGIN_SCALEFORM_MOVIE_METHOD(scaleform, methodName)
  return native.invoke(
    Type.Bool, 1341, false,
    arg(Type.Int, scaleform),
    arg(Type.String, methodName)
  )
end

function GRAPHICS.BEGIN_SCALEFORM_MOVIE_METHOD_ON_FRONTEND(methodName)
  return native.invoke(
    Type.Bool, 1342, false,
    arg(Type.String, methodName)
  )
end

function GRAPHICS.BEGIN_SCALEFORM_MOVIE_METHOD_ON_FRONTEND_HEADER(methodName)
  return native.invoke(
    Type.Bool, 1343, false,
    arg(Type.String, methodName)
  )
end

function GRAPHICS.END_SCALEFORM_MOVIE_METHOD()
  native.invoke(
    Type.Void, 1344, false
  )
end

function GRAPHICS.END_SCALEFORM_MOVIE_METHOD_RETURN_VALUE()
  return native.invoke(
    Type.Int, 1345, false
  )
end

function GRAPHICS.IS_SCALEFORM_MOVIE_METHOD_RETURN_VALUE_READY(methodReturn)
  return native.invoke(
    Type.Bool, 1346, false,
    arg(Type.Int, methodReturn)
  )
end

function GRAPHICS.GET_SCALEFORM_MOVIE_METHOD_RETURN_VALUE_INT(methodReturn)
  return native.invoke(
    Type.Int, 1347, false,
    arg(Type.Int, methodReturn)
  )
end

function GRAPHICS.GET_SCALEFORM_MOVIE_METHOD_RETURN_VALUE_BOOL(methodReturn)
  return native.invoke(
    Type.Bool, 1348, false,
    arg(Type.Int, methodReturn)
  )
end

function GRAPHICS.GET_SCALEFORM_MOVIE_METHOD_RETURN_VALUE_STRING(methodReturn)
  return native.invoke(
    Type.String, 1349, false,
    arg(Type.Int, methodReturn)
  )
end

function GRAPHICS.SCALEFORM_MOVIE_METHOD_ADD_PARAM_INT(value)
  native.invoke(
    Type.Void, 1350, false,
    arg(Type.Int, value)
  )
end

function GRAPHICS.SCALEFORM_MOVIE_METHOD_ADD_PARAM_FLOAT(value)
  native.invoke(
    Type.Void, 1351, false,
    arg(Type.Float, value)
  )
end

function GRAPHICS.SCALEFORM_MOVIE_METHOD_ADD_PARAM_BOOL(value)
  native.invoke(
    Type.Void, 1352, false,
    arg(Type.Bool, value)
  )
end

function GRAPHICS.BEGIN_TEXT_COMMAND_SCALEFORM_STRING(componentType)
  native.invoke(
    Type.Void, 1353, false,
    arg(Type.String, componentType)
  )
end

function GRAPHICS.END_TEXT_COMMAND_SCALEFORM_STRING()
  native.invoke(
    Type.Void, 1354, false
  )
end

function GRAPHICS.END_TEXT_COMMAND_UNPARSED_SCALEFORM_STRING()
  native.invoke(
    Type.Void, 1355, false
  )
end

function GRAPHICS.SCALEFORM_MOVIE_METHOD_ADD_PARAM_LITERAL_STRING(string)
  native.invoke(
    Type.Void, 1356, false,
    arg(Type.String, string)
  )
end

function GRAPHICS.SCALEFORM_MOVIE_METHOD_ADD_PARAM_TEXTURE_NAME_STRING(string)
  native.invoke(
    Type.Void, 1357, false,
    arg(Type.String, string)
  )
end

function GRAPHICS.SCALEFORM_MOVIE_METHOD_ADD_PARAM_PLAYER_NAME_STRING(string)
  native.invoke(
    Type.Void, 1358, false,
    arg(Type.String, string)
  )
end

function GRAPHICS.DOES_LATEST_BRIEF_STRING_EXIST(p0)
  return native.invoke(
    Type.Bool, 1359, false,
    arg(Type.Int, p0)
  )
end

function GRAPHICS.SCALEFORM_MOVIE_METHOD_ADD_PARAM_LATEST_BRIEF_STRING(value)
  native.invoke(
    Type.Void, 1360, false,
    arg(Type.Int, value)
  )
end

function GRAPHICS.REQUEST_SCALEFORM_SCRIPT_HUD_MOVIE(hudComponent)
  native.invoke(
    Type.Void, 1361, false,
    arg(Type.Int, hudComponent)
  )
end

function GRAPHICS.HAS_SCALEFORM_SCRIPT_HUD_MOVIE_LOADED(hudComponent)
  return native.invoke(
    Type.Bool, 1362, false,
    arg(Type.Int, hudComponent)
  )
end

function GRAPHICS.REMOVE_SCALEFORM_SCRIPT_HUD_MOVIE(hudComponent)
  native.invoke(
    Type.Void, 1363, false,
    arg(Type.Int, hudComponent)
  )
end

function GRAPHICS.PASS_KEYBOARD_INPUT_TO_SCALEFORM(scaleformHandle)
  return native.invoke(
    Type.Bool, 1364, false,
    arg(Type.Int, scaleformHandle)
  )
end

function GRAPHICS.SET_TV_CHANNEL(channel)
  native.invoke(
    Type.Void, 1365, false,
    arg(Type.Int, channel)
  )
end

function GRAPHICS.GET_TV_CHANNEL()
  return native.invoke(
    Type.Int, 1366, false
  )
end

function GRAPHICS.SET_TV_VOLUME(volume)
  native.invoke(
    Type.Void, 1367, false,
    arg(Type.Float, volume)
  )
end

function GRAPHICS.GET_TV_VOLUME()
  return native.invoke(
    Type.Float, 1368, false
  )
end

function GRAPHICS.DRAW_TV_CHANNEL(xPos, yPos, xScale, yScale, rotation, red, green, blue, alpha)
  native.invoke(
    Type.Void, 1369, false,
    arg(Type.Float, xPos),
    arg(Type.Float, yPos),
    arg(Type.Float, xScale),
    arg(Type.Float, yScale),
    arg(Type.Float, rotation),
    arg(Type.Int, red),
    arg(Type.Int, green),
    arg(Type.Int, blue),
    arg(Type.Int, alpha)
  )
end

function GRAPHICS.SET_TV_CHANNEL_PLAYLIST(tvChannel, playlistName, restart)
  native.invoke(
    Type.Void, 1370, false,
    arg(Type.Int, tvChannel),
    arg(Type.String, playlistName),
    arg(Type.Bool, restart)
  )
end

function GRAPHICS.SET_TV_CHANNEL_PLAYLIST_AT_HOUR(tvChannel, playlistName, hour)
  native.invoke(
    Type.Void, 1371, false,
    arg(Type.Int, tvChannel),
    arg(Type.String, playlistName),
    arg(Type.Int, hour)
  )
end

function GRAPHICS._SET_TV_CHANNEL_PLAYLIST_DIRTY(tvChannel, p1)
  native.invoke(
    Type.Void, 1372, false,
    arg(Type.Int, tvChannel),
    arg(Type.Bool, p1)
  )
end

function GRAPHICS.CLEAR_TV_CHANNEL_PLAYLIST(tvChannel)
  native.invoke(
    Type.Void, 1373, false,
    arg(Type.Int, tvChannel)
  )
end

function GRAPHICS.IS_PLAYLIST_ON_CHANNEL(tvChannel, p1)
  return native.invoke(
    Type.Bool, 1374, false,
    arg(Type.Int, tvChannel),
    arg(Type.Any, p1)
  )
end

function GRAPHICS.IS_TVSHOW_CURRENTLY_PLAYING(videoCliphash)
  return native.invoke(
    Type.Bool, 1375, false,
    arg(Type.Hash, videoCliphash)
  )
end

function GRAPHICS.ENABLE_MOVIE_KEYFRAME_WAIT(toggle)
  native.invoke(
    Type.Void, 1376, false,
    arg(Type.Bool, toggle)
  )
end

function GRAPHICS.SET_TV_PLAYER_WATCHING_THIS_FRAME(p0)
  native.invoke(
    Type.Void, 1377, false,
    arg(Type.Any, p0)
  )
end

function GRAPHICS.GET_CURRENT_TV_CLIP_NAMEHASH()
  return native.invoke(
    Type.Hash, 1378, false
  )
end

function GRAPHICS.ENABLE_MOVIE_SUBTITLES(toggle)
  native.invoke(
    Type.Void, 1379, false,
    arg(Type.Bool, toggle)
  )
end

function GRAPHICS.UI3DSCENE_IS_AVAILABLE()
  return native.invoke(
    Type.Bool, 1380, false
  )
end

function GRAPHICS.UI3DSCENE_PUSH_PRESET(presetName)
  return native.invoke(
    Type.Bool, 1381, false,
    arg(Type.String, presetName)
  )
end

function GRAPHICS.UI3DSCENE_ASSIGN_PED_TO_SLOT(presetName, ped, slot, posX, posY, posZ)
  return native.invoke(
    Type.Bool, 1382, false,
    arg(Type.String, presetName),
    arg(Type.Ped, ped),
    arg(Type.Int, slot),
    arg(Type.Float, posX),
    arg(Type.Float, posY),
    arg(Type.Float, posZ)
  )
end

function GRAPHICS.UI3DSCENE_CLEAR_PATCHED_DATA()
  native.invoke(
    Type.Void, 1383, false
  )
end

function GRAPHICS.UI3DSCENE_MAKE_PUSHED_PRESET_PERSISTENT(toggle)
  native.invoke(
    Type.Void, 1384, false,
    arg(Type.Bool, toggle)
  )
end

function GRAPHICS.TERRAINGRID_ACTIVATE(toggle)
  native.invoke(
    Type.Void, 1385, false,
    arg(Type.Bool, toggle)
  )
end

function GRAPHICS.TERRAINGRID_SET_PARAMS(x, y, z, forwardX, forwardY, forwardZ, sizeX, sizeY, sizeZ, gridScale, glowIntensity, normalHeight, heightDiff)
  native.invoke(
    Type.Void, 1386, false,
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, z),
    arg(Type.Float, forwardX),
    arg(Type.Float, forwardY),
    arg(Type.Float, forwardZ),
    arg(Type.Float, sizeX),
    arg(Type.Float, sizeY),
    arg(Type.Float, sizeZ),
    arg(Type.Float, gridScale),
    arg(Type.Float, glowIntensity),
    arg(Type.Float, normalHeight),
    arg(Type.Float, heightDiff)
  )
end

function GRAPHICS.TERRAINGRID_SET_COLOURS(lowR, lowG, lowB, lowAlpha, r, g, b, alpha, highR, highG, highB, highAlpha)
  native.invoke(
    Type.Void, 1387, false,
    arg(Type.Int, lowR),
    arg(Type.Int, lowG),
    arg(Type.Int, lowB),
    arg(Type.Int, lowAlpha),
    arg(Type.Int, r),
    arg(Type.Int, g),
    arg(Type.Int, b),
    arg(Type.Int, alpha),
    arg(Type.Int, highR),
    arg(Type.Int, highG),
    arg(Type.Int, highB),
    arg(Type.Int, highAlpha)
  )
end

function GRAPHICS.ANIMPOSTFX_PLAY(effectName, duration, looped)
  native.invoke(
    Type.Void, 1388, false,
    arg(Type.String, effectName),
    arg(Type.Int, duration),
    arg(Type.Bool, looped)
  )
end

function GRAPHICS.ANIMPOSTFX_STOP(effectName)
  native.invoke(
    Type.Void, 1389, false,
    arg(Type.String, effectName)
  )
end

function GRAPHICS.ANIMPOSTFX_GET_CURRENT_TIME(effectName)
  return native.invoke(
    Type.Float, 1390, false,
    arg(Type.String, effectName)
  )
end

function GRAPHICS.ANIMPOSTFX_IS_RUNNING(effectName)
  return native.invoke(
    Type.Bool, 1391, false,
    arg(Type.String, effectName)
  )
end

function GRAPHICS.ANIMPOSTFX_STOP_ALL()
  native.invoke(
    Type.Void, 1392, false
  )
end

function GRAPHICS.ANIMPOSTFX_STOP_AND_FLUSH_REQUESTS(effectName)
  native.invoke(
    Type.Void, 1393, false,
    arg(Type.String, effectName)
  )
end


HUD = {}

function HUD.BEGIN_TEXT_COMMAND_BUSYSPINNER_ON(string)
  native.invoke(
    Type.Void, 1394, false,
    arg(Type.String, string)
  )
end

function HUD.END_TEXT_COMMAND_BUSYSPINNER_ON(busySpinnerType)
  native.invoke(
    Type.Void, 1395, false,
    arg(Type.Int, busySpinnerType)
  )
end

function HUD.BUSYSPINNER_OFF()
  native.invoke(
    Type.Void, 1396, false
  )
end

function HUD.PRELOAD_BUSYSPINNER()
  native.invoke(
    Type.Void, 1397, false
  )
end

function HUD.BUSYSPINNER_IS_ON()
  return native.invoke(
    Type.Bool, 1398, false
  )
end

function HUD.BUSYSPINNER_IS_DISPLAYING()
  return native.invoke(
    Type.Bool, 1399, false
  )
end

function HUD.DISABLE_PAUSEMENU_SPINNER(p0)
  native.invoke(
    Type.Void, 1400, false,
    arg(Type.Bool, p0)
  )
end

function HUD.SET_MOUSE_CURSOR_THIS_FRAME()
  native.invoke(
    Type.Void, 1401, false
  )
end

function HUD.SET_MOUSE_CURSOR_STYLE(spriteId)
  native.invoke(
    Type.Void, 1402, false,
    arg(Type.Int, spriteId)
  )
end

function HUD.SET_MOUSE_CURSOR_VISIBLE(toggle)
  native.invoke(
    Type.Void, 1403, false,
    arg(Type.Bool, toggle)
  )
end

function HUD.IS_MOUSE_ROLLED_OVER_INSTRUCTIONAL_BUTTONS()
  return native.invoke(
    Type.Bool, 1404, false
  )
end

function HUD.GET_MOUSE_EVENT(scaleformHandle, p1, p2, p3)
  return native.invoke(
    Type.Bool, 1405, false,
    arg(Type.Int, scaleformHandle),
    ref(Type.Any, p1),
    ref(Type.Any, p2),
    ref(Type.Any, p3)
  )
end

function HUD.THEFEED_ONLY_SHOW_TOOLTIPS(toggle)
  native.invoke(
    Type.Void, 1406, false,
    arg(Type.Bool, toggle)
  )
end

function HUD.THEFEED_SET_SCRIPTED_MENU_HEIGHT(pos)
  native.invoke(
    Type.Void, 1407, false,
    arg(Type.Float, pos)
  )
end

function HUD.THEFEED_HIDE()
  native.invoke(
    Type.Void, 1408, false
  )
end

function HUD.THEFEED_HIDE_THIS_FRAME()
  native.invoke(
    Type.Void, 1409, false
  )
end

function HUD.THEFEED_SHOW()
  native.invoke(
    Type.Void, 1410, false
  )
end

function HUD.THEFEED_FLUSH_QUEUE()
  native.invoke(
    Type.Void, 1411, false
  )
end

function HUD.THEFEED_REMOVE_ITEM(notificationId)
  native.invoke(
    Type.Void, 1412, false,
    arg(Type.Int, notificationId)
  )
end

function HUD.THEFEED_FORCE_RENDER_ON()
  native.invoke(
    Type.Void, 1413, false
  )
end

function HUD.THEFEED_FORCE_RENDER_OFF()
  native.invoke(
    Type.Void, 1414, false
  )
end

function HUD.THEFEED_PAUSE()
  native.invoke(
    Type.Void, 1415, false
  )
end

function HUD.THEFEED_RESUME()
  native.invoke(
    Type.Void, 1416, false
  )
end

function HUD.THEFEED_IS_PAUSED()
  return native.invoke(
    Type.Bool, 1417, false
  )
end

function HUD.THEFEED_REPORT_LOGO_ON()
  native.invoke(
    Type.Void, 1418, false
  )
end

function HUD.THEFEED_REPORT_LOGO_OFF()
  native.invoke(
    Type.Void, 1419, false
  )
end

function HUD.THEFEED_GET_LAST_SHOWN_PHONE_ACTIVATABLE_FEED_ID()
  return native.invoke(
    Type.Int, 1420, false
  )
end

function HUD.THEFEED_AUTO_POST_GAMETIPS_ON()
  native.invoke(
    Type.Void, 1421, false
  )
end

function HUD.THEFEED_AUTO_POST_GAMETIPS_OFF()
  native.invoke(
    Type.Void, 1422, false
  )
end

function HUD.THEFEED_SET_BACKGROUND_COLOR_FOR_NEXT_POST(hudColorIndex)
  native.invoke(
    Type.Void, 1423, false,
    arg(Type.Int, hudColorIndex)
  )
end

function HUD.THEFEED_SET_RGBA_PARAMETER_FOR_NEXT_MESSAGE(red, green, blue, alpha)
  native.invoke(
    Type.Void, 1424, false,
    arg(Type.Int, red),
    arg(Type.Int, green),
    arg(Type.Int, blue),
    arg(Type.Int, alpha)
  )
end

function HUD.THEFEED_SET_FLASH_DURATION_PARAMETER_FOR_NEXT_MESSAGE(count)
  native.invoke(
    Type.Void, 1425, false,
    arg(Type.Int, count)
  )
end

function HUD.THEFEED_SET_VIBRATE_PARAMETER_FOR_NEXT_MESSAGE(toggle)
  native.invoke(
    Type.Void, 1426, false,
    arg(Type.Bool, toggle)
  )
end

function HUD.THEFEED_RESET_ALL_PARAMETERS()
  native.invoke(
    Type.Void, 1427, false
  )
end

function HUD.THEFEED_FREEZE_NEXT_POST()
  native.invoke(
    Type.Void, 1428, false
  )
end

function HUD.THEFEED_CLEAR_FROZEN_POST()
  native.invoke(
    Type.Void, 1429, false
  )
end

function HUD.THEFEED_SET_SNAP_FEED_ITEM_POSITIONS(p0)
  native.invoke(
    Type.Void, 1430, false,
    arg(Type.Bool, p0)
  )
end

function HUD.THEFEED_UPDATE_ITEM_TEXTURE(txdString1, txnString1, txdString2, txnString2)
  native.invoke(
    Type.Void, 1431, false,
    arg(Type.String, txdString1),
    arg(Type.String, txnString1),
    arg(Type.String, txdString2),
    arg(Type.String, txnString2)
  )
end

function HUD.BEGIN_TEXT_COMMAND_THEFEED_POST(text)
  native.invoke(
    Type.Void, 1432, false,
    arg(Type.String, text)
  )
end

function HUD.END_TEXT_COMMAND_THEFEED_POST_STATS(statTitle, iconEnum, stepVal, barValue, isImportant, pictureTextureDict, pictureTextureName)
  return native.invoke(
    Type.Int, 1433, false,
    arg(Type.String, statTitle),
    arg(Type.Int, iconEnum),
    arg(Type.Bool, stepVal),
    arg(Type.Int, barValue),
    arg(Type.Bool, isImportant),
    arg(Type.String, pictureTextureDict),
    arg(Type.String, pictureTextureName)
  )
end

function HUD.END_TEXT_COMMAND_THEFEED_POST_MESSAGETEXT(txdName, textureName, flash, iconType, sender, subject)
  return native.invoke(
    Type.Int, 1434, false,
    arg(Type.String, txdName),
    arg(Type.String, textureName),
    arg(Type.Bool, flash),
    arg(Type.Int, iconType),
    arg(Type.String, sender),
    arg(Type.String, subject)
  )
end

function HUD.END_TEXT_COMMAND_THEFEED_POST_MESSAGETEXT_SUBTITLE_LABEL(txdName, textureName, flash, iconType, sender, subject)
  return native.invoke(
    Type.Int, 1435, false,
    arg(Type.String, txdName),
    arg(Type.String, textureName),
    arg(Type.Bool, flash),
    arg(Type.Int, iconType),
    arg(Type.String, sender),
    arg(Type.String, subject)
  )
end

function HUD.END_TEXT_COMMAND_THEFEED_POST_MESSAGETEXT_TU(txdName, textureName, flash, iconType, sender, subject, duration)
  return native.invoke(
    Type.Int, 1436, false,
    arg(Type.String, txdName),
    arg(Type.String, textureName),
    arg(Type.Bool, flash),
    arg(Type.Int, iconType),
    arg(Type.String, sender),
    arg(Type.String, subject),
    arg(Type.Float, duration)
  )
end

function HUD.END_TEXT_COMMAND_THEFEED_POST_MESSAGETEXT_WITH_CREW_TAG(txdName, textureName, flash, iconType, sender, subject, duration, clanTag)
  return native.invoke(
    Type.Int, 1437, false,
    arg(Type.String, txdName),
    arg(Type.String, textureName),
    arg(Type.Bool, flash),
    arg(Type.Int, iconType),
    arg(Type.String, sender),
    arg(Type.String, subject),
    arg(Type.Float, duration),
    arg(Type.String, clanTag)
  )
end

function HUD.END_TEXT_COMMAND_THEFEED_POST_MESSAGETEXT_WITH_CREW_TAG_AND_ADDITIONAL_ICON(txdName, textureName, flash, iconType1, sender, subject, duration, clanTag, iconType2, p9)
  return native.invoke(
    Type.Int, 1438, false,
    arg(Type.String, txdName),
    arg(Type.String, textureName),
    arg(Type.Bool, flash),
    arg(Type.Int, iconType1),
    arg(Type.String, sender),
    arg(Type.String, subject),
    arg(Type.Float, duration),
    arg(Type.String, clanTag),
    arg(Type.Int, iconType2),
    arg(Type.Int, p9)
  )
end

function HUD.END_TEXT_COMMAND_THEFEED_POST_TICKER(blink, p1)
  return native.invoke(
    Type.Int, 1439, false,
    arg(Type.Bool, blink),
    arg(Type.Bool, p1)
  )
end

function HUD.END_TEXT_COMMAND_THEFEED_POST_TICKER_FORCED(blink, p1)
  return native.invoke(
    Type.Int, 1440, false,
    arg(Type.Bool, blink),
    arg(Type.Bool, p1)
  )
end

function HUD.END_TEXT_COMMAND_THEFEED_POST_TICKER_WITH_TOKENS(blink, p1)
  return native.invoke(
    Type.Int, 1441, false,
    arg(Type.Bool, blink),
    arg(Type.Bool, p1)
  )
end

function HUD.END_TEXT_COMMAND_THEFEED_POST_AWARD(textureDict, textureName, rpBonus, colorOverlay, titleLabel)
  return native.invoke(
    Type.Int, 1442, false,
    arg(Type.String, textureDict),
    arg(Type.String, textureName),
    arg(Type.Int, rpBonus),
    arg(Type.Int, colorOverlay),
    arg(Type.String, titleLabel)
  )
end

function HUD.END_TEXT_COMMAND_THEFEED_POST_CREWTAG(p0, p1, p2, p3, isLeader, unk0, clanDesc, R, G, B)
  return native.invoke(
    Type.Int, 1443, false,
    arg(Type.Bool, p0),
    arg(Type.Bool, p1),
    ref(Type.Int, p2),
    arg(Type.Int, p3),
    arg(Type.Bool, isLeader),
    arg(Type.Bool, unk0),
    arg(Type.Int, clanDesc),
    arg(Type.Int, R),
    arg(Type.Int, G),
    arg(Type.Int, B)
  )
end

function HUD.END_TEXT_COMMAND_THEFEED_POST_CREWTAG_WITH_GAME_NAME(p0, p1, p2, p3, isLeader, unk0, clanDesc, playerName, R, G, B)
  return native.invoke(
    Type.Int, 1444, false,
    arg(Type.Bool, p0),
    arg(Type.Bool, p1),
    ref(Type.Int, p2),
    arg(Type.Int, p3),
    arg(Type.Bool, isLeader),
    arg(Type.Bool, unk0),
    arg(Type.Int, clanDesc),
    arg(Type.String, playerName),
    arg(Type.Int, R),
    arg(Type.Int, G),
    arg(Type.Int, B)
  )
end

function HUD.END_TEXT_COMMAND_THEFEED_POST_UNLOCK(gxtLabel1, p1, gxtLabel2)
  return native.invoke(
    Type.Int, 1445, false,
    arg(Type.String, gxtLabel1),
    arg(Type.Int, p1),
    arg(Type.String, gxtLabel2)
  )
end

function HUD.END_TEXT_COMMAND_THEFEED_POST_UNLOCK_TU(gxtLabel1, p1, gxtLabel2, p3)
  return native.invoke(
    Type.Int, 1446, false,
    arg(Type.String, gxtLabel1),
    arg(Type.Int, p1),
    arg(Type.String, gxtLabel2),
    arg(Type.Int, p3)
  )
end

function HUD.END_TEXT_COMMAND_THEFEED_POST_UNLOCK_TU_WITH_COLOR(p0, p1, p2, p3, p4, p5)
  return native.invoke(
    Type.Int, 1447, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1),
    arg(Type.Any, p2),
    arg(Type.Any, p3),
    arg(Type.Any, p4),
    arg(Type.Any, p5)
  )
end

function HUD.END_TEXT_COMMAND_THEFEED_POST_MPTICKER(blink, p1)
  return native.invoke(
    Type.Int, 1448, false,
    arg(Type.Bool, blink),
    arg(Type.Bool, p1)
  )
end

function HUD.END_TEXT_COMMAND_THEFEED_POST_CREW_RANKUP_WITH_LITERAL_FLAG(p0, p1, p2, p3, p4)
  return native.invoke(
    Type.Int, 1449, false,
    arg(Type.String, p0),
    arg(Type.String, p1),
    arg(Type.String, p2),
    arg(Type.Bool, p3),
    arg(Type.Bool, p4)
  )
end

function HUD.END_TEXT_COMMAND_THEFEED_POST_VERSUS_TU(txdName1, textureName1, count1, txdName2, textureName2, count2, hudColor1, hudColor2)
  return native.invoke(
    Type.Int, 1450, false,
    arg(Type.String, txdName1),
    arg(Type.String, textureName1),
    arg(Type.Int, count1),
    arg(Type.String, txdName2),
    arg(Type.String, textureName2),
    arg(Type.Int, count2),
    arg(Type.Int, hudColor1),
    arg(Type.Int, hudColor2)
  )
end

function HUD.END_TEXT_COMMAND_THEFEED_POST_REPLAY(type, image, text)
  return native.invoke(
    Type.Int, 1451, false,
    arg(Type.Int, type),
    arg(Type.Int, image),
    arg(Type.String, text)
  )
end

function HUD.END_TEXT_COMMAND_THEFEED_POST_REPLAY_INPUT(type, button, text)
  return native.invoke(
    Type.Int, 1452, false,
    arg(Type.Int, type),
    arg(Type.String, button),
    arg(Type.String, text)
  )
end

function HUD.BEGIN_TEXT_COMMAND_PRINT(GxtEntry)
  native.invoke(
    Type.Void, 1453, false,
    arg(Type.String, GxtEntry)
  )
end

function HUD.END_TEXT_COMMAND_PRINT(duration, drawImmediately)
  native.invoke(
    Type.Void, 1454, false,
    arg(Type.Int, duration),
    arg(Type.Bool, drawImmediately)
  )
end

function HUD.BEGIN_TEXT_COMMAND_IS_MESSAGE_DISPLAYED(text)
  native.invoke(
    Type.Void, 1455, false,
    arg(Type.String, text)
  )
end

function HUD.END_TEXT_COMMAND_IS_MESSAGE_DISPLAYED()
  return native.invoke(
    Type.Bool, 1456, false
  )
end

function HUD.BEGIN_TEXT_COMMAND_DISPLAY_TEXT(text)
  native.invoke(
    Type.Void, 1457, false,
    arg(Type.String, text)
  )
end

function HUD.END_TEXT_COMMAND_DISPLAY_TEXT(x, y, p2)
  native.invoke(
    Type.Void, 1458, false,
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Int, p2)
  )
end

function HUD.BEGIN_TEXT_COMMAND_GET_SCREEN_WIDTH_OF_DISPLAY_TEXT(text)
  native.invoke(
    Type.Void, 1459, false,
    arg(Type.String, text)
  )
end

function HUD.END_TEXT_COMMAND_GET_SCREEN_WIDTH_OF_DISPLAY_TEXT(p0)
  return native.invoke(
    Type.Float, 1460, false,
    arg(Type.Bool, p0)
  )
end

function HUD.BEGIN_TEXT_COMMAND_GET_NUMBER_OF_LINES_FOR_STRING(entry)
  native.invoke(
    Type.Void, 1461, false,
    arg(Type.String, entry)
  )
end

function HUD.END_TEXT_COMMAND_GET_NUMBER_OF_LINES_FOR_STRING(x, y)
  return native.invoke(
    Type.Int, 1462, false,
    arg(Type.Float, x),
    arg(Type.Float, y)
  )
end

function HUD.BEGIN_TEXT_COMMAND_DISPLAY_HELP(inputType)
  native.invoke(
    Type.Void, 1463, false,
    arg(Type.String, inputType)
  )
end

function HUD.END_TEXT_COMMAND_DISPLAY_HELP(p0, loop, beep, shape)
  native.invoke(
    Type.Void, 1464, false,
    arg(Type.Int, p0),
    arg(Type.Bool, loop),
    arg(Type.Bool, beep),
    arg(Type.Int, shape)
  )
end

function HUD.BEGIN_TEXT_COMMAND_IS_THIS_HELP_MESSAGE_BEING_DISPLAYED(labelName)
  native.invoke(
    Type.Void, 1465, false,
    arg(Type.String, labelName)
  )
end

function HUD.END_TEXT_COMMAND_IS_THIS_HELP_MESSAGE_BEING_DISPLAYED(p0)
  return native.invoke(
    Type.Bool, 1466, false,
    arg(Type.Int, p0)
  )
end

function HUD.BEGIN_TEXT_COMMAND_SET_BLIP_NAME(textLabel)
  native.invoke(
    Type.Void, 1467, false,
    arg(Type.String, textLabel)
  )
end

function HUD.END_TEXT_COMMAND_SET_BLIP_NAME(blip)
  native.invoke(
    Type.Void, 1468, false,
    arg(Type.Blip, blip)
  )
end

function HUD.BEGIN_TEXT_COMMAND_ADD_DIRECTLY_TO_PREVIOUS_BRIEFS(p0)
  native.invoke(
    Type.Void, 1469, false,
    arg(Type.String, p0)
  )
end

function HUD.END_TEXT_COMMAND_ADD_DIRECTLY_TO_PREVIOUS_BRIEFS(p0)
  native.invoke(
    Type.Void, 1470, false,
    arg(Type.Bool, p0)
  )
end

function HUD.BEGIN_TEXT_COMMAND_CLEAR_PRINT(text)
  native.invoke(
    Type.Void, 1471, false,
    arg(Type.String, text)
  )
end

function HUD.END_TEXT_COMMAND_CLEAR_PRINT()
  native.invoke(
    Type.Void, 1472, false
  )
end

function HUD.BEGIN_TEXT_COMMAND_OVERRIDE_BUTTON_TEXT(gxtEntry)
  native.invoke(
    Type.Void, 1473, false,
    arg(Type.String, gxtEntry)
  )
end

function HUD.END_TEXT_COMMAND_OVERRIDE_BUTTON_TEXT(p0)
  native.invoke(
    Type.Void, 1474, false,
    arg(Type.Int, p0)
  )
end

function HUD.ADD_TEXT_COMPONENT_INTEGER(value)
  native.invoke(
    Type.Void, 1475, false,
    arg(Type.Int, value)
  )
end

function HUD.ADD_TEXT_COMPONENT_FLOAT(value, decimalPlaces)
  native.invoke(
    Type.Void, 1476, false,
    arg(Type.Float, value),
    arg(Type.Int, decimalPlaces)
  )
end

function HUD.ADD_TEXT_COMPONENT_SUBSTRING_TEXT_LABEL(labelName)
  native.invoke(
    Type.Void, 1477, false,
    arg(Type.String, labelName)
  )
end

function HUD.ADD_TEXT_COMPONENT_SUBSTRING_TEXT_LABEL_HASH_KEY(gxtEntryHash)
  native.invoke(
    Type.Void, 1478, false,
    arg(Type.Hash, gxtEntryHash)
  )
end

function HUD.ADD_TEXT_COMPONENT_SUBSTRING_BLIP_NAME(blip)
  native.invoke(
    Type.Void, 1479, false,
    arg(Type.Blip, blip)
  )
end

function HUD.ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME(text)
  native.invoke(
    Type.Void, 1480, false,
    arg(Type.String, text)
  )
end

function HUD.ADD_TEXT_COMPONENT_SUBSTRING_TIME(timestamp, flags)
  native.invoke(
    Type.Void, 1481, false,
    arg(Type.Int, timestamp),
    arg(Type.Int, flags)
  )
end

function HUD.ADD_TEXT_COMPONENT_FORMATTED_INTEGER(value, commaSeparated)
  native.invoke(
    Type.Void, 1482, false,
    arg(Type.Int, value),
    arg(Type.Bool, commaSeparated)
  )
end

function HUD.ADD_TEXT_COMPONENT_SUBSTRING_PHONE_NUMBER(p0, p1)
  native.invoke(
    Type.Void, 1483, false,
    arg(Type.String, p0),
    arg(Type.Int, p1)
  )
end

function HUD.ADD_TEXT_COMPONENT_SUBSTRING_WEBSITE(website)
  native.invoke(
    Type.Void, 1484, false,
    arg(Type.String, website)
  )
end

function HUD.ADD_TEXT_COMPONENT_SUBSTRING_KEYBOARD_DISPLAY(string)
  native.invoke(
    Type.Void, 1485, false,
    arg(Type.String, string)
  )
end

function HUD.SET_COLOUR_OF_NEXT_TEXT_COMPONENT(hudColor)
  native.invoke(
    Type.Void, 1486, false,
    arg(Type.Int, hudColor)
  )
end

function HUD.GET_CHARACTER_FROM_AUDIO_CONVERSATION_FILENAME(text, position, length)
  return native.invoke(
    Type.String, 1487, false,
    arg(Type.String, text),
    arg(Type.Int, position),
    arg(Type.Int, length)
  )
end

function HUD.GET_CHARACTER_FROM_AUDIO_CONVERSATION_FILENAME_WITH_BYTE_LIMIT(text, position, length, maxLength)
  return native.invoke(
    Type.String, 1488, false,
    arg(Type.String, text),
    arg(Type.Int, position),
    arg(Type.Int, length),
    arg(Type.Int, maxLength)
  )
end

function HUD.GET_CHARACTER_FROM_AUDIO_CONVERSATION_FILENAME_BYTES(text, startPosition, endPosition)
  return native.invoke(
    Type.String, 1489, false,
    arg(Type.String, text),
    arg(Type.Int, startPosition),
    arg(Type.Int, endPosition)
  )
end

function HUD.GET_FILENAME_FOR_AUDIO_CONVERSATION(labelName)
  return native.invoke(
    Type.String, 1490, false,
    arg(Type.String, labelName)
  )
end

function HUD.CLEAR_PRINTS()
  native.invoke(
    Type.Void, 1491, false
  )
end

function HUD.CLEAR_BRIEF()
  native.invoke(
    Type.Void, 1492, false
  )
end

function HUD.CLEAR_ALL_HELP_MESSAGES()
  native.invoke(
    Type.Void, 1493, false
  )
end

function HUD.CLEAR_THIS_PRINT(p0)
  native.invoke(
    Type.Void, 1494, false,
    arg(Type.String, p0)
  )
end

function HUD.CLEAR_SMALL_PRINTS()
  native.invoke(
    Type.Void, 1495, false
  )
end

function HUD.DOES_TEXT_BLOCK_EXIST(gxt)
  return native.invoke(
    Type.Bool, 1496, false,
    arg(Type.String, gxt)
  )
end

function HUD.REQUEST_ADDITIONAL_TEXT(gxt, slot)
  native.invoke(
    Type.Void, 1497, false,
    arg(Type.String, gxt),
    arg(Type.Int, slot)
  )
end

function HUD.REQUEST_ADDITIONAL_TEXT_FOR_DLC(gxt, slot)
  native.invoke(
    Type.Void, 1498, false,
    arg(Type.String, gxt),
    arg(Type.Int, slot)
  )
end

function HUD.HAS_ADDITIONAL_TEXT_LOADED(slot)
  return native.invoke(
    Type.Bool, 1499, false,
    arg(Type.Int, slot)
  )
end

function HUD.CLEAR_ADDITIONAL_TEXT(p0, p1)
  native.invoke(
    Type.Void, 1500, false,
    arg(Type.Int, p0),
    arg(Type.Bool, p1)
  )
end

function HUD.IS_STREAMING_ADDITIONAL_TEXT(p0)
  return native.invoke(
    Type.Bool, 1501, false,
    arg(Type.Int, p0)
  )
end

function HUD.HAS_THIS_ADDITIONAL_TEXT_LOADED(gxt, slot)
  return native.invoke(
    Type.Bool, 1502, false,
    arg(Type.String, gxt),
    arg(Type.Int, slot)
  )
end

function HUD.IS_MESSAGE_BEING_DISPLAYED()
  return native.invoke(
    Type.Bool, 1503, false
  )
end

function HUD.DOES_TEXT_LABEL_EXIST(gxt)
  return native.invoke(
    Type.Bool, 1504, false,
    arg(Type.String, gxt)
  )
end

function HUD.GET_FIRST_N_CHARACTERS_OF_LITERAL_STRING(string, length)
  return native.invoke(
    Type.String, 1505, false,
    arg(Type.String, string),
    arg(Type.Int, length)
  )
end

function HUD.GET_LENGTH_OF_STRING_WITH_THIS_TEXT_LABEL(gxt)
  return native.invoke(
    Type.Int, 1506, false,
    arg(Type.String, gxt)
  )
end

function HUD.GET_LENGTH_OF_LITERAL_STRING(string)
  return native.invoke(
    Type.Int, 1507, false,
    arg(Type.String, string)
  )
end

function HUD.GET_LENGTH_OF_LITERAL_STRING_IN_BYTES(string)
  return native.invoke(
    Type.Int, 1508, false,
    arg(Type.String, string)
  )
end

function HUD.GET_STREET_NAME_FROM_HASH_KEY(hash)
  return native.invoke(
    Type.String, 1509, false,
    arg(Type.Hash, hash)
  )
end

function HUD.IS_HUD_PREFERENCE_SWITCHED_ON()
  return native.invoke(
    Type.Bool, 1510, false
  )
end

function HUD.IS_RADAR_PREFERENCE_SWITCHED_ON()
  return native.invoke(
    Type.Bool, 1511, false
  )
end

function HUD.IS_SUBTITLE_PREFERENCE_SWITCHED_ON()
  return native.invoke(
    Type.Bool, 1512, false
  )
end

function HUD.DISPLAY_HUD(toggle)
  native.invoke(
    Type.Void, 1513, false,
    arg(Type.Bool, toggle)
  )
end

function HUD.DISPLAY_HUD_WHEN_NOT_IN_STATE_OF_PLAY_THIS_FRAME()
  native.invoke(
    Type.Void, 1514, false
  )
end

function HUD.DISPLAY_HUD_WHEN_PAUSED_THIS_FRAME()
  native.invoke(
    Type.Void, 1515, false
  )
end

function HUD.DISPLAY_RADAR(toggle)
  native.invoke(
    Type.Void, 1516, false,
    arg(Type.Bool, toggle)
  )
end

function HUD.SET_FAKE_SPECTATOR_MODE(toggle)
  native.invoke(
    Type.Void, 1517, false,
    arg(Type.Bool, toggle)
  )
end

function HUD.GET_FAKE_SPECTATOR_MODE()
  return native.invoke(
    Type.Bool, 1518, false
  )
end

function HUD.IS_HUD_HIDDEN()
  return native.invoke(
    Type.Bool, 1519, false
  )
end

function HUD.IS_RADAR_HIDDEN()
  return native.invoke(
    Type.Bool, 1520, false
  )
end

function HUD.IS_MINIMAP_RENDERING()
  return native.invoke(
    Type.Bool, 1521, false
  )
end

function HUD.USE_VEHICLE_TARGETING_RETICULE(p0)
  native.invoke(
    Type.Void, 1522, false,
    arg(Type.Any, p0)
  )
end

function HUD._USE_VEHICLE_TARGETING_RETICULE_ON_VEHICLES(enable)
  native.invoke(
    Type.Void, 1523, false,
    arg(Type.Bool, enable)
  )
end

function HUD.ADD_VALID_VEHICLE_HIT_HASH(p0)
  native.invoke(
    Type.Void, 1524, false,
    arg(Type.Any, p0)
  )
end

function HUD.CLEAR_VALID_VEHICLE_HIT_HASHES()
  native.invoke(
    Type.Void, 1525, false
  )
end

function HUD.SET_BLIP_ROUTE(blip, enabled)
  native.invoke(
    Type.Void, 1526, false,
    arg(Type.Blip, blip),
    arg(Type.Bool, enabled)
  )
end

function HUD.CLEAR_ALL_BLIP_ROUTES()
  native.invoke(
    Type.Void, 1527, false
  )
end

function HUD.SET_BLIP_ROUTE_COLOUR(blip, colour)
  native.invoke(
    Type.Void, 1528, false,
    arg(Type.Blip, blip),
    arg(Type.Int, colour)
  )
end

function HUD.SET_FORCE_SHOW_GPS(toggle)
  native.invoke(
    Type.Void, 1529, false,
    arg(Type.Bool, toggle)
  )
end

function HUD.SET_USE_SET_DESTINATION_IN_PAUSE_MAP(toggle)
  native.invoke(
    Type.Void, 1530, false,
    arg(Type.Bool, toggle)
  )
end

function HUD.SET_BLOCK_WANTED_FLASH(disabled)
  native.invoke(
    Type.Void, 1531, false,
    arg(Type.Bool, disabled)
  )
end

function HUD.ADD_NEXT_MESSAGE_TO_PREVIOUS_BRIEFS(p0)
  native.invoke(
    Type.Void, 1532, false,
    arg(Type.Bool, p0)
  )
end

function HUD.FORCE_NEXT_MESSAGE_TO_PREVIOUS_BRIEFS_LIST(p0)
  native.invoke(
    Type.Void, 1533, false,
    arg(Type.Int, p0)
  )
end

function HUD.SET_RADAR_ZOOM_PRECISE(zoom)
  native.invoke(
    Type.Void, 1534, false,
    arg(Type.Float, zoom)
  )
end

function HUD.SET_RADAR_ZOOM(zoomLevel)
  native.invoke(
    Type.Void, 1535, false,
    arg(Type.Int, zoomLevel)
  )
end

function HUD.SET_RADAR_ZOOM_TO_BLIP(blip, zoom)
  native.invoke(
    Type.Void, 1536, false,
    arg(Type.Blip, blip),
    arg(Type.Float, zoom)
  )
end

function HUD.SET_RADAR_ZOOM_TO_DISTANCE(zoom)
  native.invoke(
    Type.Void, 1537, false,
    arg(Type.Float, zoom)
  )
end

function HUD.UPDATE_RADAR_ZOOM_TO_BLIP()
  native.invoke(
    Type.Void, 1538, false
  )
end

function HUD.GET_HUD_COLOUR(hudColorIndex, r, g, b, a)
  native.invoke(
    Type.Void, 1539, false,
    arg(Type.Int, hudColorIndex),
    ref(Type.Int, r),
    ref(Type.Int, g),
    ref(Type.Int, b),
    ref(Type.Int, a)
  )
end

function HUD.SET_SCRIPT_VARIABLE_HUD_COLOUR(r, g, b, a)
  native.invoke(
    Type.Void, 1540, false,
    arg(Type.Int, r),
    arg(Type.Int, g),
    arg(Type.Int, b),
    arg(Type.Int, a)
  )
end

function HUD.SET_SECOND_SCRIPT_VARIABLE_HUD_COLOUR(r, g, b, a)
  native.invoke(
    Type.Void, 1541, false,
    arg(Type.Int, r),
    arg(Type.Int, g),
    arg(Type.Int, b),
    arg(Type.Int, a)
  )
end

function HUD.REPLACE_HUD_COLOUR(hudColorIndex, hudColorIndex2)
  native.invoke(
    Type.Void, 1542, false,
    arg(Type.Int, hudColorIndex),
    arg(Type.Int, hudColorIndex2)
  )
end

function HUD.REPLACE_HUD_COLOUR_WITH_RGBA(hudColorIndex, r, g, b, a)
  native.invoke(
    Type.Void, 1543, false,
    arg(Type.Int, hudColorIndex),
    arg(Type.Int, r),
    arg(Type.Int, g),
    arg(Type.Int, b),
    arg(Type.Int, a)
  )
end

function HUD.SET_ABILITY_BAR_VISIBILITY(visible)
  native.invoke(
    Type.Void, 1544, false,
    arg(Type.Bool, visible)
  )
end

function HUD.SET_ALLOW_ABILITY_BAR(toggle)
  native.invoke(
    Type.Void, 1545, false,
    arg(Type.Bool, toggle)
  )
end

function HUD.FLASH_ABILITY_BAR(millisecondsToFlash)
  native.invoke(
    Type.Void, 1546, false,
    arg(Type.Int, millisecondsToFlash)
  )
end

function HUD.SET_ABILITY_BAR_VALUE(p0, p1)
  native.invoke(
    Type.Void, 1547, false,
    arg(Type.Float, p0),
    arg(Type.Float, p1)
  )
end

function HUD.FLASH_WANTED_DISPLAY(p0)
  native.invoke(
    Type.Void, 1548, false,
    arg(Type.Bool, p0)
  )
end

function HUD.FORCE_OFF_WANTED_STAR_FLASH(toggle)
  native.invoke(
    Type.Void, 1549, false,
    arg(Type.Bool, toggle)
  )
end

function HUD.SET_CUSTOM_MP_HUD_COLOR(hudColorId)
  native.invoke(
    Type.Void, 1550, false,
    arg(Type.Int, hudColorId)
  )
end

function HUD.GET_RENDERED_CHARACTER_HEIGHT(size, font)
  return native.invoke(
    Type.Float, 1551, false,
    arg(Type.Float, size),
    arg(Type.Int, font)
  )
end

function HUD.SET_TEXT_SCALE(scale, size)
  native.invoke(
    Type.Void, 1552, false,
    arg(Type.Float, scale),
    arg(Type.Float, size)
  )
end

function HUD.SET_TEXT_COLOUR(red, green, blue, alpha)
  native.invoke(
    Type.Void, 1553, false,
    arg(Type.Int, red),
    arg(Type.Int, green),
    arg(Type.Int, blue),
    arg(Type.Int, alpha)
  )
end

function HUD.SET_TEXT_CENTRE(align)
  native.invoke(
    Type.Void, 1554, false,
    arg(Type.Bool, align)
  )
end

function HUD.SET_TEXT_RIGHT_JUSTIFY(toggle)
  native.invoke(
    Type.Void, 1555, false,
    arg(Type.Bool, toggle)
  )
end

function HUD.SET_TEXT_JUSTIFICATION(justifyType)
  native.invoke(
    Type.Void, 1556, false,
    arg(Type.Int, justifyType)
  )
end

function HUD.SET_TEXT_LINE_HEIGHT_MULT(lineHeightMult)
  native.invoke(
    Type.Void, 1557, false,
    arg(Type.Float, lineHeightMult)
  )
end

function HUD.SET_TEXT_WRAP(start, end_)
  native.invoke(
    Type.Void, 1558, false,
    arg(Type.Float, start),
    arg(Type.Float, end_)
  )
end

function HUD.SET_TEXT_LEADING(p0)
  native.invoke(
    Type.Void, 1559, false,
    arg(Type.Int, p0)
  )
end

function HUD.SET_TEXT_PROPORTIONAL(p0)
  native.invoke(
    Type.Void, 1560, false,
    arg(Type.Bool, p0)
  )
end

function HUD.SET_TEXT_FONT(fontType)
  native.invoke(
    Type.Void, 1561, false,
    arg(Type.Int, fontType)
  )
end

function HUD.SET_TEXT_DROP_SHADOW()
  native.invoke(
    Type.Void, 1562, false
  )
end

function HUD.SET_TEXT_DROPSHADOW(distance, r, g, b, a)
  native.invoke(
    Type.Void, 1563, false,
    arg(Type.Int, distance),
    arg(Type.Int, r),
    arg(Type.Int, g),
    arg(Type.Int, b),
    arg(Type.Int, a)
  )
end

function HUD.SET_TEXT_OUTLINE()
  native.invoke(
    Type.Void, 1564, false
  )
end

function HUD.SET_TEXT_EDGE(p0, r, g, b, a)
  native.invoke(
    Type.Void, 1565, false,
    arg(Type.Int, p0),
    arg(Type.Int, r),
    arg(Type.Int, g),
    arg(Type.Int, b),
    arg(Type.Int, a)
  )
end

function HUD.SET_TEXT_RENDER_ID(renderId)
  native.invoke(
    Type.Void, 1566, false,
    arg(Type.Int, renderId)
  )
end

function HUD.GET_DEFAULT_SCRIPT_RENDERTARGET_RENDER_ID()
  return native.invoke(
    Type.Int, 1567, false
  )
end

function HUD.REGISTER_NAMED_RENDERTARGET(name, p1)
  return native.invoke(
    Type.Bool, 1568, false,
    arg(Type.String, name),
    arg(Type.Bool, p1)
  )
end

function HUD.IS_NAMED_RENDERTARGET_REGISTERED(name)
  return native.invoke(
    Type.Bool, 1569, false,
    arg(Type.String, name)
  )
end

function HUD.RELEASE_NAMED_RENDERTARGET(name)
  return native.invoke(
    Type.Bool, 1570, false,
    arg(Type.String, name)
  )
end

function HUD.LINK_NAMED_RENDERTARGET(modelHash)
  native.invoke(
    Type.Void, 1571, false,
    arg(Type.Hash, modelHash)
  )
end

function HUD.GET_NAMED_RENDERTARGET_RENDER_ID(name)
  return native.invoke(
    Type.Int, 1572, false,
    arg(Type.String, name)
  )
end

function HUD.IS_NAMED_RENDERTARGET_LINKED(modelHash)
  return native.invoke(
    Type.Bool, 1573, false,
    arg(Type.Hash, modelHash)
  )
end

function HUD.CLEAR_HELP(toggle)
  native.invoke(
    Type.Void, 1574, false,
    arg(Type.Bool, toggle)
  )
end

function HUD.IS_HELP_MESSAGE_ON_SCREEN()
  return native.invoke(
    Type.Bool, 1575, false
  )
end

function HUD.HAS_SCRIPT_HIDDEN_HELP_THIS_FRAME()
  return native.invoke(
    Type.Bool, 1576, false
  )
end

function HUD.IS_HELP_MESSAGE_BEING_DISPLAYED()
  return native.invoke(
    Type.Bool, 1577, false
  )
end

function HUD.IS_HELP_MESSAGE_FADING_OUT()
  return native.invoke(
    Type.Bool, 1578, false
  )
end

function HUD.SET_HELP_MESSAGE_STYLE(style, hudColor, alpha, p3, p4)
  native.invoke(
    Type.Void, 1579, false,
    arg(Type.Int, style),
    arg(Type.Int, hudColor),
    arg(Type.Int, alpha),
    arg(Type.Int, p3),
    arg(Type.Int, p4)
  )
end

function HUD.GET_STANDARD_BLIP_ENUM_ID()
  return native.invoke(
    Type.Int, 1580, false
  )
end

function HUD.GET_WAYPOINT_BLIP_ENUM_ID()
  return native.invoke(
    Type.Int, 1581, false
  )
end

function HUD.GET_NUMBER_OF_ACTIVE_BLIPS()
  return native.invoke(
    Type.Int, 1582, false
  )
end

function HUD.GET_NEXT_BLIP_INFO_ID(blipSprite)
  return native.invoke(
    Type.Blip, 1583, false,
    arg(Type.Int, blipSprite)
  )
end

function HUD.GET_FIRST_BLIP_INFO_ID(blipSprite)
  return native.invoke(
    Type.Blip, 1584, false,
    arg(Type.Int, blipSprite)
  )
end

function HUD.GET_CLOSEST_BLIP_INFO_ID(blipSprite)
  return native.invoke(
    Type.Blip, 1585, false,
    arg(Type.Int, blipSprite)
  )
end

function HUD.GET_BLIP_INFO_ID_COORD(blip)
  return native.invoke(
    Type.Vector3, 1586, false,
    arg(Type.Blip, blip)
  )
end

function HUD.GET_BLIP_INFO_ID_DISPLAY(blip)
  return native.invoke(
    Type.Int, 1587, false,
    arg(Type.Blip, blip)
  )
end

function HUD.GET_BLIP_INFO_ID_TYPE(blip)
  return native.invoke(
    Type.Int, 1588, false,
    arg(Type.Blip, blip)
  )
end

function HUD.GET_BLIP_INFO_ID_ENTITY_INDEX(blip)
  return native.invoke(
    Type.Entity, 1589, false,
    arg(Type.Blip, blip)
  )
end

function HUD.GET_BLIP_INFO_ID_PICKUP_INDEX(blip)
  return native.invoke(
    Type.Pickup, 1590, false,
    arg(Type.Blip, blip)
  )
end

function HUD.GET_BLIP_FROM_ENTITY(entity)
  return native.invoke(
    Type.Blip, 1591, false,
    arg(Type.Entity, entity)
  )
end

function HUD.ADD_BLIP_FOR_RADIUS(posX, posY, posZ, radius)
  return native.invoke(
    Type.Blip, 1592, false,
    arg(Type.Float, posX),
    arg(Type.Float, posY),
    arg(Type.Float, posZ),
    arg(Type.Float, radius)
  )
end

function HUD.ADD_BLIP_FOR_AREA(x, y, z, width, height)
  return native.invoke(
    Type.Blip, 1593, false,
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, z),
    arg(Type.Float, width),
    arg(Type.Float, height)
  )
end

function HUD.ADD_BLIP_FOR_ENTITY(entity)
  return native.invoke(
    Type.Blip, 1594, false,
    arg(Type.Entity, entity)
  )
end

function HUD.ADD_BLIP_FOR_PICKUP(pickup)
  return native.invoke(
    Type.Blip, 1595, false,
    arg(Type.Pickup, pickup)
  )
end

function HUD.ADD_BLIP_FOR_COORD(x, y, z)
  return native.invoke(
    Type.Blip, 1596, false,
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, z)
  )
end

function HUD.TRIGGER_SONAR_BLIP(posX, posY, posZ, radius, p4)
  native.invoke(
    Type.Void, 1597, false,
    arg(Type.Float, posX),
    arg(Type.Float, posY),
    arg(Type.Float, posZ),
    arg(Type.Float, radius),
    arg(Type.Int, p4)
  )
end

function HUD.ALLOW_SONAR_BLIPS(toggle)
  native.invoke(
    Type.Void, 1598, false,
    arg(Type.Bool, toggle)
  )
end

function HUD.SET_BLIP_COORDS(blip, posX, posY, posZ)
  native.invoke(
    Type.Void, 1599, false,
    arg(Type.Blip, blip),
    arg(Type.Float, posX),
    arg(Type.Float, posY),
    arg(Type.Float, posZ)
  )
end

function HUD.GET_BLIP_COORDS(blip)
  return native.invoke(
    Type.Vector3, 1600, false,
    arg(Type.Blip, blip)
  )
end

function HUD.SET_BLIP_SPRITE(blip, spriteId)
  native.invoke(
    Type.Void, 1601, false,
    arg(Type.Blip, blip),
    arg(Type.Int, spriteId)
  )
end

function HUD.GET_BLIP_SPRITE(blip)
  return native.invoke(
    Type.Int, 1602, false,
    arg(Type.Blip, blip)
  )
end

function HUD.SET_COP_BLIP_SPRITE(p0, p1)
  native.invoke(
    Type.Void, 1603, false,
    arg(Type.Int, p0),
    arg(Type.Float, p1)
  )
end

function HUD.SET_COP_BLIP_SPRITE_AS_STANDARD()
  native.invoke(
    Type.Void, 1604, false
  )
end

function HUD.SET_BLIP_NAME_FROM_TEXT_FILE(blip, gxtEntry)
  native.invoke(
    Type.Void, 1605, false,
    arg(Type.Blip, blip),
    arg(Type.String, gxtEntry)
  )
end

function HUD.SET_BLIP_NAME_TO_PLAYER_NAME(blip, player)
  native.invoke(
    Type.Void, 1606, false,
    arg(Type.Blip, blip),
    arg(Type.Player, player)
  )
end

function HUD.SET_BLIP_ALPHA(blip, alpha)
  native.invoke(
    Type.Void, 1607, false,
    arg(Type.Blip, blip),
    arg(Type.Int, alpha)
  )
end

function HUD.GET_BLIP_ALPHA(blip)
  return native.invoke(
    Type.Int, 1608, false,
    arg(Type.Blip, blip)
  )
end

function HUD.SET_BLIP_FADE(blip, opacity, duration)
  native.invoke(
    Type.Void, 1609, false,
    arg(Type.Blip, blip),
    arg(Type.Int, opacity),
    arg(Type.Int, duration)
  )
end

function HUD.GET_BLIP_FADE_DIRECTION(blip)
  return native.invoke(
    Type.Int, 1610, false,
    arg(Type.Blip, blip)
  )
end

function HUD.SET_BLIP_ROTATION(blip, rotation)
  native.invoke(
    Type.Void, 1611, false,
    arg(Type.Blip, blip),
    arg(Type.Int, rotation)
  )
end

function HUD.SET_BLIP_ROTATION_WITH_FLOAT(blip, heading)
  native.invoke(
    Type.Void, 1612, false,
    arg(Type.Blip, blip),
    arg(Type.Float, heading)
  )
end

function HUD.GET_BLIP_ROTATION(blip)
  return native.invoke(
    Type.Int, 1613, false,
    arg(Type.Blip, blip)
  )
end

function HUD.SET_BLIP_FLASH_TIMER(blip, duration)
  native.invoke(
    Type.Void, 1614, false,
    arg(Type.Blip, blip),
    arg(Type.Int, duration)
  )
end

function HUD.SET_BLIP_FLASH_INTERVAL(blip, p1)
  native.invoke(
    Type.Void, 1615, false,
    arg(Type.Blip, blip),
    arg(Type.Any, p1)
  )
end

function HUD.SET_BLIP_COLOUR(blip, color)
  native.invoke(
    Type.Void, 1616, false,
    arg(Type.Blip, blip),
    arg(Type.Int, color)
  )
end

function HUD.SET_BLIP_SECONDARY_COLOUR(blip, r, g, b)
  native.invoke(
    Type.Void, 1617, false,
    arg(Type.Blip, blip),
    arg(Type.Int, r),
    arg(Type.Int, g),
    arg(Type.Int, b)
  )
end

function HUD.GET_BLIP_COLOUR(blip)
  return native.invoke(
    Type.Int, 1618, false,
    arg(Type.Blip, blip)
  )
end

function HUD.GET_BLIP_HUD_COLOUR(blip)
  return native.invoke(
    Type.Int, 1619, false,
    arg(Type.Blip, blip)
  )
end

function HUD.IS_BLIP_SHORT_RANGE(blip)
  return native.invoke(
    Type.Bool, 1620, false,
    arg(Type.Blip, blip)
  )
end

function HUD.IS_BLIP_ON_MINIMAP(blip)
  return native.invoke(
    Type.Bool, 1621, false,
    arg(Type.Blip, blip)
  )
end

function HUD.DOES_BLIP_HAVE_GPS_ROUTE(blip)
  return native.invoke(
    Type.Bool, 1622, false,
    arg(Type.Blip, blip)
  )
end

function HUD.SET_BLIP_HIDDEN_ON_LEGEND(blip, toggle)
  native.invoke(
    Type.Void, 1623, false,
    arg(Type.Blip, blip),
    arg(Type.Bool, toggle)
  )
end

function HUD.SET_BLIP_HIGH_DETAIL(blip, toggle)
  native.invoke(
    Type.Void, 1624, false,
    arg(Type.Blip, blip),
    arg(Type.Bool, toggle)
  )
end

function HUD.SET_BLIP_AS_MISSION_CREATOR_BLIP(blip, toggle)
  native.invoke(
    Type.Void, 1625, false,
    arg(Type.Blip, blip),
    arg(Type.Bool, toggle)
  )
end

function HUD.IS_MISSION_CREATOR_BLIP(blip)
  return native.invoke(
    Type.Bool, 1626, false,
    arg(Type.Blip, blip)
  )
end

function HUD.GET_NEW_SELECTED_MISSION_CREATOR_BLIP()
  return native.invoke(
    Type.Blip, 1627, false
  )
end

function HUD.IS_HOVERING_OVER_MISSION_CREATOR_BLIP()
  return native.invoke(
    Type.Bool, 1628, false
  )
end

function HUD.SHOW_START_MISSION_INSTRUCTIONAL_BUTTON(toggle)
  native.invoke(
    Type.Void, 1629, false,
    arg(Type.Bool, toggle)
  )
end

function HUD.SHOW_CONTACT_INSTRUCTIONAL_BUTTON(toggle)
  native.invoke(
    Type.Void, 1630, false,
    arg(Type.Bool, toggle)
  )
end

function HUD.RELOAD_MAP_MENU()
  native.invoke(
    Type.Void, 1631, false
  )
end

function HUD.SET_BLIP_MARKER_LONG_DISTANCE(p0, p1)
  native.invoke(
    Type.Void, 1632, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1)
  )
end

function HUD.SET_BLIP_FLASHES(blip, toggle)
  native.invoke(
    Type.Void, 1633, false,
    arg(Type.Blip, blip),
    arg(Type.Bool, toggle)
  )
end

function HUD.SET_BLIP_FLASHES_ALTERNATE(blip, toggle)
  native.invoke(
    Type.Void, 1634, false,
    arg(Type.Blip, blip),
    arg(Type.Bool, toggle)
  )
end

function HUD.IS_BLIP_FLASHING(blip)
  return native.invoke(
    Type.Bool, 1635, false,
    arg(Type.Blip, blip)
  )
end

function HUD.SET_BLIP_AS_SHORT_RANGE(blip, toggle)
  native.invoke(
    Type.Void, 1636, false,
    arg(Type.Blip, blip),
    arg(Type.Bool, toggle)
  )
end

function HUD.SET_BLIP_SCALE(blip, scale)
  native.invoke(
    Type.Void, 1637, false,
    arg(Type.Blip, blip),
    arg(Type.Float, scale)
  )
end

function HUD.SET_BLIP_SCALE_2D(blip, xScale, yScale)
  native.invoke(
    Type.Void, 1638, false,
    arg(Type.Blip, blip),
    arg(Type.Float, xScale),
    arg(Type.Float, yScale)
  )
end

function HUD.SET_BLIP_PRIORITY(blip, priority)
  native.invoke(
    Type.Void, 1639, false,
    arg(Type.Blip, blip),
    arg(Type.Int, priority)
  )
end

function HUD.SET_BLIP_DISPLAY(blip, displayId)
  native.invoke(
    Type.Void, 1640, false,
    arg(Type.Blip, blip),
    arg(Type.Int, displayId)
  )
end

function HUD.SET_BLIP_CATEGORY(blip, index)
  native.invoke(
    Type.Void, 1641, false,
    arg(Type.Blip, blip),
    arg(Type.Int, index)
  )
end

function HUD.REMOVE_BLIP(blip)
  native.invoke(
    Type.Void, 1642, false,
    ref(Type.Blip, blip)
  )
end

function HUD.SET_BLIP_AS_FRIENDLY(blip, toggle)
  native.invoke(
    Type.Void, 1643, false,
    arg(Type.Blip, blip),
    arg(Type.Bool, toggle)
  )
end

function HUD.PULSE_BLIP(blip)
  native.invoke(
    Type.Void, 1644, false,
    arg(Type.Blip, blip)
  )
end

function HUD.SHOW_NUMBER_ON_BLIP(blip, number)
  native.invoke(
    Type.Void, 1645, false,
    arg(Type.Blip, blip),
    arg(Type.Int, number)
  )
end

function HUD.HIDE_NUMBER_ON_BLIP(blip)
  native.invoke(
    Type.Void, 1646, false,
    arg(Type.Blip, blip)
  )
end

function HUD.SHOW_HEIGHT_ON_BLIP(blip, toggle)
  native.invoke(
    Type.Void, 1647, false,
    arg(Type.Blip, blip),
    arg(Type.Bool, toggle)
  )
end

function HUD.SHOW_TICK_ON_BLIP(blip, toggle)
  native.invoke(
    Type.Void, 1648, false,
    arg(Type.Blip, blip),
    arg(Type.Bool, toggle)
  )
end

function HUD.SHOW_GOLD_TICK_ON_BLIP(blip, toggle)
  native.invoke(
    Type.Void, 1649, false,
    arg(Type.Blip, blip),
    arg(Type.Bool, toggle)
  )
end

function HUD.SHOW_FOR_SALE_ICON_ON_BLIP(blip, toggle)
  native.invoke(
    Type.Void, 1650, false,
    arg(Type.Blip, blip),
    arg(Type.Bool, toggle)
  )
end

function HUD.SHOW_HEADING_INDICATOR_ON_BLIP(blip, toggle)
  native.invoke(
    Type.Void, 1651, false,
    arg(Type.Blip, blip),
    arg(Type.Bool, toggle)
  )
end

function HUD.SHOW_OUTLINE_INDICATOR_ON_BLIP(blip, toggle)
  native.invoke(
    Type.Void, 1652, false,
    arg(Type.Blip, blip),
    arg(Type.Bool, toggle)
  )
end

function HUD.SHOW_FRIEND_INDICATOR_ON_BLIP(blip, toggle)
  native.invoke(
    Type.Void, 1653, false,
    arg(Type.Blip, blip),
    arg(Type.Bool, toggle)
  )
end

function HUD.SHOW_CREW_INDICATOR_ON_BLIP(blip, toggle)
  native.invoke(
    Type.Void, 1654, false,
    arg(Type.Blip, blip),
    arg(Type.Bool, toggle)
  )
end

function HUD.SET_BLIP_EXTENDED_HEIGHT_THRESHOLD(blip, toggle)
  native.invoke(
    Type.Void, 1655, false,
    arg(Type.Blip, blip),
    arg(Type.Bool, toggle)
  )
end

function HUD.SET_BLIP_SHORT_HEIGHT_THRESHOLD(p0, p1)
  native.invoke(
    Type.Void, 1656, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1)
  )
end

function HUD.SET_BLIP_USE_HEIGHT_INDICATOR_ON_EDGE(blip, p1)
  native.invoke(
    Type.Void, 1657, false,
    arg(Type.Blip, blip),
    arg(Type.Any, p1)
  )
end

function HUD.SET_BLIP_AS_MINIMAL_ON_EDGE(blip, toggle)
  native.invoke(
    Type.Void, 1658, false,
    arg(Type.Blip, blip),
    arg(Type.Bool, toggle)
  )
end

function HUD.SET_RADIUS_BLIP_EDGE(blip, toggle)
  native.invoke(
    Type.Void, 1659, false,
    arg(Type.Blip, blip),
    arg(Type.Bool, toggle)
  )
end

function HUD.DOES_BLIP_EXIST(blip)
  return native.invoke(
    Type.Bool, 1660, false,
    arg(Type.Blip, blip)
  )
end

function HUD.SET_WAYPOINT_OFF()
  native.invoke(
    Type.Void, 1661, false
  )
end

function HUD.DELETE_WAYPOINTS_FROM_THIS_PLAYER()
  native.invoke(
    Type.Void, 1662, false
  )
end

function HUD.REFRESH_WAYPOINT()
  native.invoke(
    Type.Void, 1663, false
  )
end

function HUD.IS_WAYPOINT_ACTIVE()
  return native.invoke(
    Type.Bool, 1664, false
  )
end

function HUD.SET_NEW_WAYPOINT(x, y)
  native.invoke(
    Type.Void, 1665, false,
    arg(Type.Float, x),
    arg(Type.Float, y)
  )
end

function HUD.SET_BLIP_BRIGHT(blip, toggle)
  native.invoke(
    Type.Void, 1666, false,
    arg(Type.Blip, blip),
    arg(Type.Bool, toggle)
  )
end

function HUD.SET_BLIP_SHOW_CONE(blip, toggle, hudColorIndex)
  native.invoke(
    Type.Void, 1667, false,
    arg(Type.Blip, blip),
    arg(Type.Bool, toggle),
    arg(Type.Int, hudColorIndex)
  )
end

function HUD.REMOVE_COP_BLIP_FROM_PED(ped)
  native.invoke(
    Type.Void, 1668, false,
    arg(Type.Ped, ped)
  )
end

function HUD.SETUP_FAKE_CONE_DATA(blip, p1, p2, p3, p4, p5, p6, p7, p8)
  native.invoke(
    Type.Void, 1669, false,
    arg(Type.Blip, blip),
    arg(Type.Float, p1),
    arg(Type.Float, p2),
    arg(Type.Float, p3),
    arg(Type.Float, p4),
    arg(Type.Float, p5),
    arg(Type.Float, p6),
    arg(Type.Any, p7),
    arg(Type.Int, p8)
  )
end

function HUD.REMOVE_FAKE_CONE_DATA(blip)
  native.invoke(
    Type.Void, 1670, false,
    arg(Type.Blip, blip)
  )
end

function HUD.CLEAR_FAKE_CONE_ARRAY()
  native.invoke(
    Type.Void, 1671, false
  )
end

function HUD._SET_BLIP_GPS_ROUTE_DISPLAY_DISTANCE(blip, blipChangeParam46, blipChangeParam47)
  native.invoke(
    Type.Void, 1672, false,
    arg(Type.Blip, blip),
    arg(Type.Int, blipChangeParam46),
    arg(Type.Bool, blipChangeParam47)
  )
end

function HUD.SET_MINIMAP_COMPONENT(componentId, toggle, overrideColor)
  return native.invoke(
    Type.Bool, 1673, false,
    arg(Type.Int, componentId),
    arg(Type.Bool, toggle),
    arg(Type.Int, overrideColor)
  )
end

function HUD.SET_MINIMAP_SONAR_SWEEP(toggle)
  native.invoke(
    Type.Void, 1674, false,
    arg(Type.Bool, toggle)
  )
end

function HUD.SHOW_ACCOUNT_PICKER()
  native.invoke(
    Type.Void, 1675, false
  )
end

function HUD.GET_MAIN_PLAYER_BLIP_ID()
  return native.invoke(
    Type.Blip, 1676, false
  )
end

function HUD.SET_PM_WARNINGSCREEN_ACTIVE(p0)
  native.invoke(
    Type.Void, 1677, false,
    arg(Type.Bool, p0)
  )
end

function HUD.HIDE_LOADING_ON_FADE_THIS_FRAME()
  native.invoke(
    Type.Void, 1678, false
  )
end

function HUD.SET_RADAR_AS_INTERIOR_THIS_FRAME(interior, x, y, z, zoom)
  native.invoke(
    Type.Void, 1679, false,
    arg(Type.Hash, interior),
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Int, z),
    arg(Type.Int, zoom)
  )
end

function HUD.SET_INSIDE_VERY_SMALL_INTERIOR(toggle)
  native.invoke(
    Type.Void, 1680, false,
    arg(Type.Bool, toggle)
  )
end

function HUD.SET_INSIDE_VERY_LARGE_INTERIOR(toggle)
  native.invoke(
    Type.Void, 1681, false,
    arg(Type.Bool, toggle)
  )
end

function HUD.SET_RADAR_AS_EXTERIOR_THIS_FRAME()
  native.invoke(
    Type.Void, 1682, false
  )
end

function HUD.SET_FAKE_PAUSEMAP_PLAYER_POSITION_THIS_FRAME(x, y)
  native.invoke(
    Type.Void, 1683, false,
    arg(Type.Float, x),
    arg(Type.Float, y)
  )
end

function HUD.SET_FAKE_GPS_PLAYER_POSITION_THIS_FRAME(x, y, p2)
  native.invoke(
    Type.Void, 1684, false,
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Any, p2)
  )
end

function HUD.IS_PAUSEMAP_IN_INTERIOR_MODE()
  return native.invoke(
    Type.Bool, 1685, false
  )
end

function HUD.HIDE_MINIMAP_EXTERIOR_MAP_THIS_FRAME()
  native.invoke(
    Type.Void, 1686, false
  )
end

function HUD.HIDE_MINIMAP_INTERIOR_MAP_THIS_FRAME()
  native.invoke(
    Type.Void, 1687, false
  )
end

function HUD.SET_USE_ISLAND_MAP(toggle)
  native.invoke(
    Type.Void, 1688, false,
    arg(Type.Bool, toggle)
  )
end

function HUD._SET_PAUSE_EXTERIOR_RENDERING_WHILE_IN_INTERIOR()
  native.invoke(
    Type.Void, 1689, false
  )
end

function HUD.DONT_TILT_MINIMAP_THIS_FRAME()
  native.invoke(
    Type.Void, 1690, false
  )
end

function HUD.DONT_ZOOM_MINIMAP_WHEN_RUNNING_THIS_FRAME()
  native.invoke(
    Type.Void, 1691, false
  )
end

function HUD.DONT_ZOOM_MINIMAP_WHEN_SNIPING_THIS_FRAME()
  native.invoke(
    Type.Void, 1692, false
  )
end

function HUD.SET_WIDESCREEN_FORMAT(p0)
  native.invoke(
    Type.Void, 1693, false,
    arg(Type.Any, p0)
  )
end

function HUD.DISPLAY_AREA_NAME(toggle)
  native.invoke(
    Type.Void, 1694, false,
    arg(Type.Bool, toggle)
  )
end

function HUD.DISPLAY_CASH(toggle)
  native.invoke(
    Type.Void, 1695, false,
    arg(Type.Bool, toggle)
  )
end

function HUD.USE_FAKE_MP_CASH(toggle)
  native.invoke(
    Type.Void, 1696, false,
    arg(Type.Bool, toggle)
  )
end

function HUD.CHANGE_FAKE_MP_CASH(cash, bank)
  native.invoke(
    Type.Void, 1697, false,
    arg(Type.Int, cash),
    arg(Type.Int, bank)
  )
end

function HUD.DISPLAY_AMMO_THIS_FRAME(display)
  native.invoke(
    Type.Void, 1698, false,
    arg(Type.Bool, display)
  )
end

function HUD.DISPLAY_SNIPER_SCOPE_THIS_FRAME()
  native.invoke(
    Type.Void, 1699, false
  )
end

function HUD.HIDE_HUD_AND_RADAR_THIS_FRAME()
  native.invoke(
    Type.Void, 1700, false
  )
end

function HUD.ALLOW_DISPLAY_OF_MULTIPLAYER_CASH_TEXT(allow)
  native.invoke(
    Type.Void, 1701, false,
    arg(Type.Bool, allow)
  )
end

function HUD.SET_MULTIPLAYER_WALLET_CASH()
  native.invoke(
    Type.Void, 1702, false
  )
end

function HUD.REMOVE_MULTIPLAYER_WALLET_CASH()
  native.invoke(
    Type.Void, 1703, false
  )
end

function HUD.SET_MULTIPLAYER_BANK_CASH()
  native.invoke(
    Type.Void, 1704, false
  )
end

function HUD.REMOVE_MULTIPLAYER_BANK_CASH()
  native.invoke(
    Type.Void, 1705, false
  )
end

function HUD.SET_MULTIPLAYER_HUD_CASH(p0, p1)
  native.invoke(
    Type.Void, 1706, false,
    arg(Type.Int, p0),
    arg(Type.Bool, p1)
  )
end

function HUD.REMOVE_MULTIPLAYER_HUD_CASH()
  native.invoke(
    Type.Void, 1707, false
  )
end

function HUD.HIDE_HELP_TEXT_THIS_FRAME()
  native.invoke(
    Type.Void, 1708, false
  )
end

function HUD.IS_IME_IN_PROGRESS()
  return native.invoke(
    Type.Bool, 1709, false
  )
end

function HUD.DISPLAY_HELP_TEXT_THIS_FRAME(message, p1)
  native.invoke(
    Type.Void, 1710, false,
    arg(Type.String, message),
    arg(Type.Bool, p1)
  )
end

function HUD.HUD_FORCE_WEAPON_WHEEL(show)
  native.invoke(
    Type.Void, 1711, false,
    arg(Type.Bool, show)
  )
end

function HUD.HUD_FORCE_SPECIAL_VEHICLE_WEAPON_WHEEL()
  native.invoke(
    Type.Void, 1712, false
  )
end

function HUD.HUD_SUPPRESS_WEAPON_WHEEL_RESULTS_THIS_FRAME()
  native.invoke(
    Type.Void, 1713, false
  )
end

function HUD.HUD_GET_WEAPON_WHEEL_CURRENTLY_HIGHLIGHTED()
  return native.invoke(
    Type.Hash, 1714, false
  )
end

function HUD.HUD_SET_WEAPON_WHEEL_TOP_SLOT(weaponHash)
  native.invoke(
    Type.Void, 1715, false,
    arg(Type.Hash, weaponHash)
  )
end

function HUD.HUD_GET_WEAPON_WHEEL_TOP_SLOT(weaponTypeIndex)
  return native.invoke(
    Type.Hash, 1716, false,
    arg(Type.Int, weaponTypeIndex)
  )
end

function HUD.HUD_SHOWING_CHARACTER_SWITCH_SELECTION(toggle)
  native.invoke(
    Type.Void, 1717, false,
    arg(Type.Bool, toggle)
  )
end

function HUD.SET_GPS_FLAGS(p0, p1)
  native.invoke(
    Type.Void, 1718, false,
    arg(Type.Int, p0),
    arg(Type.Float, p1)
  )
end

function HUD.CLEAR_GPS_FLAGS()
  native.invoke(
    Type.Void, 1719, false
  )
end

function HUD.SET_RACE_TRACK_RENDER(toggle)
  native.invoke(
    Type.Void, 1720, false,
    arg(Type.Bool, toggle)
  )
end

function HUD.CLEAR_GPS_RACE_TRACK()
  native.invoke(
    Type.Void, 1721, false
  )
end

function HUD.START_GPS_CUSTOM_ROUTE(hudColor, displayOnFoot, followPlayer)
  native.invoke(
    Type.Void, 1722, false,
    arg(Type.Int, hudColor),
    arg(Type.Bool, displayOnFoot),
    arg(Type.Bool, followPlayer)
  )
end

function HUD.ADD_POINT_TO_GPS_CUSTOM_ROUTE(x, y, z)
  native.invoke(
    Type.Void, 1723, false,
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, z)
  )
end

function HUD.SET_GPS_CUSTOM_ROUTE_RENDER(toggle, radarThickness, mapThickness)
  native.invoke(
    Type.Void, 1724, false,
    arg(Type.Bool, toggle),
    arg(Type.Int, radarThickness),
    arg(Type.Int, mapThickness)
  )
end

function HUD.CLEAR_GPS_CUSTOM_ROUTE()
  native.invoke(
    Type.Void, 1725, false
  )
end

function HUD.START_GPS_MULTI_ROUTE(hudColor, routeFromPlayer, displayOnFoot)
  native.invoke(
    Type.Void, 1726, false,
    arg(Type.Int, hudColor),
    arg(Type.Bool, routeFromPlayer),
    arg(Type.Bool, displayOnFoot)
  )
end

function HUD.ADD_POINT_TO_GPS_MULTI_ROUTE(x, y, z)
  native.invoke(
    Type.Void, 1727, false,
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, z)
  )
end

function HUD.SET_GPS_MULTI_ROUTE_RENDER(toggle)
  native.invoke(
    Type.Void, 1728, false,
    arg(Type.Bool, toggle)
  )
end

function HUD.CLEAR_GPS_MULTI_ROUTE()
  native.invoke(
    Type.Void, 1729, false
  )
end

function HUD.CLEAR_GPS_PLAYER_WAYPOINT()
  native.invoke(
    Type.Void, 1730, false
  )
end

function HUD.SET_GPS_FLASHES(toggle)
  native.invoke(
    Type.Void, 1731, false,
    arg(Type.Bool, toggle)
  )
end

function HUD.SET_PLAYER_ICON_COLOUR(color)
  native.invoke(
    Type.Void, 1732, false,
    arg(Type.Int, color)
  )
end

function HUD.FLASH_MINIMAP_DISPLAY()
  native.invoke(
    Type.Void, 1733, false
  )
end

function HUD.FLASH_MINIMAP_DISPLAY_WITH_COLOR(hudColorIndex)
  native.invoke(
    Type.Void, 1734, false,
    arg(Type.Int, hudColorIndex)
  )
end

function HUD.TOGGLE_STEALTH_RADAR(toggle)
  native.invoke(
    Type.Void, 1735, false,
    arg(Type.Bool, toggle)
  )
end

function HUD.SET_MINIMAP_IN_SPECTATOR_MODE(toggle, ped)
  native.invoke(
    Type.Void, 1736, false,
    arg(Type.Bool, toggle),
    arg(Type.Ped, ped)
  )
end

function HUD.SET_MISSION_NAME(p0, name)
  native.invoke(
    Type.Void, 1737, false,
    arg(Type.Bool, p0),
    arg(Type.String, name)
  )
end

function HUD.SET_MISSION_NAME_FOR_UGC_MISSION(p0, name)
  native.invoke(
    Type.Void, 1738, false,
    arg(Type.Bool, p0),
    arg(Type.String, name)
  )
end

function HUD.SET_DESCRIPTION_FOR_UGC_MISSION_EIGHT_STRINGS(p0, p1, p2, p3, p4, p5, p6, p7, p8)
  native.invoke(
    Type.Void, 1739, false,
    arg(Type.Bool, p0),
    arg(Type.String, p1),
    arg(Type.String, p2),
    arg(Type.String, p3),
    arg(Type.String, p4),
    arg(Type.String, p5),
    arg(Type.String, p6),
    arg(Type.String, p7),
    arg(Type.String, p8)
  )
end

function HUD.SET_MINIMAP_BLOCK_WAYPOINT(toggle)
  native.invoke(
    Type.Void, 1740, false,
    arg(Type.Bool, toggle)
  )
end

function HUD.SET_MINIMAP_IN_PROLOGUE(toggle)
  native.invoke(
    Type.Void, 1741, false,
    arg(Type.Bool, toggle)
  )
end

function HUD.SET_MINIMAP_HIDE_FOW(toggle)
  native.invoke(
    Type.Void, 1742, false,
    arg(Type.Bool, toggle)
  )
end

function HUD.GET_MINIMAP_FOW_DISCOVERY_RATIO()
  return native.invoke(
    Type.Float, 1743, false
  )
end

function HUD.GET_MINIMAP_FOW_COORDINATE_IS_REVEALED(x, y, z)
  return native.invoke(
    Type.Bool, 1744, false,
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, z)
  )
end

function HUD.SET_MINIMAP_FOW_DO_NOT_UPDATE(p0)
  native.invoke(
    Type.Void, 1745, false,
    arg(Type.Bool, p0)
  )
end

function HUD.SET_MINIMAP_FOW_REVEAL_COORDINATE(x, y, z)
  native.invoke(
    Type.Void, 1746, false,
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, z)
  )
end

function HUD.SET_MINIMAP_GOLF_COURSE(hole)
  native.invoke(
    Type.Void, 1747, false,
    arg(Type.Int, hole)
  )
end

function HUD.SET_MINIMAP_GOLF_COURSE_OFF()
  native.invoke(
    Type.Void, 1748, false
  )
end

function HUD.LOCK_MINIMAP_ANGLE(angle)
  native.invoke(
    Type.Void, 1749, false,
    arg(Type.Int, angle)
  )
end

function HUD.UNLOCK_MINIMAP_ANGLE()
  native.invoke(
    Type.Void, 1750, false
  )
end

function HUD.LOCK_MINIMAP_POSITION(x, y)
  native.invoke(
    Type.Void, 1751, false,
    arg(Type.Float, x),
    arg(Type.Float, y)
  )
end

function HUD.UNLOCK_MINIMAP_POSITION()
  native.invoke(
    Type.Void, 1752, false
  )
end

function HUD.SET_FAKE_MINIMAP_MAX_ALTIMETER_HEIGHT(altitude, p1, p2)
  native.invoke(
    Type.Void, 1753, false,
    arg(Type.Float, altitude),
    arg(Type.Bool, p1),
    arg(Type.Any, p2)
  )
end

function HUD.SET_HEALTH_HUD_DISPLAY_VALUES(health, capacity, wasAdded)
  native.invoke(
    Type.Void, 1754, false,
    arg(Type.Int, health),
    arg(Type.Int, capacity),
    arg(Type.Bool, wasAdded)
  )
end

function HUD.SET_MAX_HEALTH_HUD_DISPLAY(maximumValue)
  native.invoke(
    Type.Void, 1755, false,
    arg(Type.Int, maximumValue)
  )
end

function HUD.SET_MAX_ARMOUR_HUD_DISPLAY(maximumValue)
  native.invoke(
    Type.Void, 1756, false,
    arg(Type.Int, maximumValue)
  )
end

function HUD.SET_BIGMAP_ACTIVE(toggleBigMap, showFullMap)
  native.invoke(
    Type.Void, 1757, false,
    arg(Type.Bool, toggleBigMap),
    arg(Type.Bool, showFullMap)
  )
end

function HUD.IS_HUD_COMPONENT_ACTIVE(id)
  return native.invoke(
    Type.Bool, 1758, false,
    arg(Type.Int, id)
  )
end

function HUD.IS_SCRIPTED_HUD_COMPONENT_ACTIVE(id)
  return native.invoke(
    Type.Bool, 1759, false,
    arg(Type.Int, id)
  )
end

function HUD.HIDE_SCRIPTED_HUD_COMPONENT_THIS_FRAME(id)
  native.invoke(
    Type.Void, 1760, false,
    arg(Type.Int, id)
  )
end

function HUD.SHOW_SCRIPTED_HUD_COMPONENT_THIS_FRAME(id)
  native.invoke(
    Type.Void, 1761, false,
    arg(Type.Int, id)
  )
end

function HUD.IS_SCRIPTED_HUD_COMPONENT_HIDDEN_THIS_FRAME(id)
  return native.invoke(
    Type.Bool, 1762, false,
    arg(Type.Int, id)
  )
end

function HUD.HIDE_HUD_COMPONENT_THIS_FRAME(id)
  native.invoke(
    Type.Void, 1763, false,
    arg(Type.Int, id)
  )
end

function HUD.SHOW_HUD_COMPONENT_THIS_FRAME(id)
  native.invoke(
    Type.Void, 1764, false,
    arg(Type.Int, id)
  )
end

function HUD.HIDE_STREET_AND_CAR_NAMES_THIS_FRAME()
  native.invoke(
    Type.Void, 1765, false
  )
end

function HUD.RESET_RETICULE_VALUES()
  native.invoke(
    Type.Void, 1766, false
  )
end

function HUD.RESET_HUD_COMPONENT_VALUES(id)
  native.invoke(
    Type.Void, 1767, false,
    arg(Type.Int, id)
  )
end

function HUD.SET_HUD_COMPONENT_POSITION(id, x, y)
  native.invoke(
    Type.Void, 1768, false,
    arg(Type.Int, id),
    arg(Type.Float, x),
    arg(Type.Float, y)
  )
end

function HUD.GET_HUD_COMPONENT_POSITION(id)
  return native.invoke(
    Type.Vector3, 1769, false,
    arg(Type.Int, id)
  )
end

function HUD.CLEAR_REMINDER_MESSAGE()
  native.invoke(
    Type.Void, 1770, false
  )
end

function HUD.GET_HUD_SCREEN_POSITION_FROM_WORLD_POSITION(worldX, worldY, worldZ, screenX, screenY)
  return native.invoke(
    Type.Int, 1771, false,
    arg(Type.Float, worldX),
    arg(Type.Float, worldY),
    arg(Type.Float, worldZ),
    ref(Type.Float, screenX),
    ref(Type.Float, screenY)
  )
end

function HUD.OPEN_REPORTUGC_MENU()
  native.invoke(
    Type.Void, 1772, false
  )
end

function HUD.FORCE_CLOSE_REPORTUGC_MENU()
  native.invoke(
    Type.Void, 1773, false
  )
end

function HUD.IS_REPORTUGC_MENU_OPEN()
  return native.invoke(
    Type.Bool, 1774, false
  )
end

function HUD.IS_FLOATING_HELP_TEXT_ON_SCREEN(hudIndex)
  return native.invoke(
    Type.Bool, 1775, false,
    arg(Type.Int, hudIndex)
  )
end

function HUD.SET_FLOATING_HELP_TEXT_SCREEN_POSITION(hudIndex, x, y)
  native.invoke(
    Type.Void, 1776, false,
    arg(Type.Int, hudIndex),
    arg(Type.Float, x),
    arg(Type.Float, y)
  )
end

function HUD.SET_FLOATING_HELP_TEXT_WORLD_POSITION(hudIndex, x, y, z)
  native.invoke(
    Type.Void, 1777, false,
    arg(Type.Int, hudIndex),
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, z)
  )
end

function HUD.SET_FLOATING_HELP_TEXT_TO_ENTITY(hudIndex, entity, offsetX, offsetY)
  native.invoke(
    Type.Void, 1778, false,
    arg(Type.Int, hudIndex),
    arg(Type.Entity, entity),
    arg(Type.Float, offsetX),
    arg(Type.Float, offsetY)
  )
end

function HUD.SET_FLOATING_HELP_TEXT_STYLE(hudIndex, p1, p2, p3, p4, p5)
  native.invoke(
    Type.Void, 1779, false,
    arg(Type.Int, hudIndex),
    arg(Type.Int, p1),
    arg(Type.Int, p2),
    arg(Type.Int, p3),
    arg(Type.Int, p4),
    arg(Type.Int, p5)
  )
end

function HUD.CLEAR_FLOATING_HELP(hudIndex, p1)
  native.invoke(
    Type.Void, 1780, false,
    arg(Type.Int, hudIndex),
    arg(Type.Bool, p1)
  )
end

function HUD.CREATE_MP_GAMER_TAG_WITH_CREW_COLOR(player, username, pointedClanTag, isRockstarClan, clanTag, clanFlag, r, g, b)
  native.invoke(
    Type.Void, 1781, false,
    arg(Type.Player, player),
    arg(Type.String, username),
    arg(Type.Bool, pointedClanTag),
    arg(Type.Bool, isRockstarClan),
    arg(Type.String, clanTag),
    arg(Type.Int, clanFlag),
    arg(Type.Int, r),
    arg(Type.Int, g),
    arg(Type.Int, b)
  )
end

function HUD.IS_MP_GAMER_TAG_MOVIE_ACTIVE()
  return native.invoke(
    Type.Bool, 1782, false
  )
end

function HUD.CREATE_FAKE_MP_GAMER_TAG(ped, username, pointedClanTag, isRockstarClan, clanTag, clanFlag)
  return native.invoke(
    Type.Int, 1783, false,
    arg(Type.Ped, ped),
    arg(Type.String, username),
    arg(Type.Bool, pointedClanTag),
    arg(Type.Bool, isRockstarClan),
    arg(Type.String, clanTag),
    arg(Type.Int, clanFlag)
  )
end

function HUD.REMOVE_MP_GAMER_TAG(gamerTagId)
  native.invoke(
    Type.Void, 1784, false,
    arg(Type.Int, gamerTagId)
  )
end

function HUD.IS_MP_GAMER_TAG_ACTIVE(gamerTagId)
  return native.invoke(
    Type.Bool, 1785, false,
    arg(Type.Int, gamerTagId)
  )
end

function HUD.IS_MP_GAMER_TAG_FREE(gamerTagId)
  return native.invoke(
    Type.Bool, 1786, false,
    arg(Type.Int, gamerTagId)
  )
end

function HUD.SET_MP_GAMER_TAG_VISIBILITY(gamerTagId, component, toggle, p3)
  native.invoke(
    Type.Void, 1787, false,
    arg(Type.Int, gamerTagId),
    arg(Type.Int, component),
    arg(Type.Bool, toggle),
    arg(Type.Any, p3)
  )
end

function HUD.SET_ALL_MP_GAMER_TAGS_VISIBILITY(gamerTagId, toggle)
  native.invoke(
    Type.Void, 1788, false,
    arg(Type.Int, gamerTagId),
    arg(Type.Bool, toggle)
  )
end

function HUD.SET_MP_GAMER_TAGS_SHOULD_USE_VEHICLE_HEALTH(gamerTagId, toggle)
  native.invoke(
    Type.Void, 1789, false,
    arg(Type.Int, gamerTagId),
    arg(Type.Bool, toggle)
  )
end

function HUD.SET_MP_GAMER_TAGS_SHOULD_USE_POINTS_HEALTH(gamerTagId, toggle)
  native.invoke(
    Type.Void, 1790, false,
    arg(Type.Int, gamerTagId),
    arg(Type.Bool, toggle)
  )
end

function HUD.SET_MP_GAMER_TAGS_POINT_HEALTH(gamerTagId, value, maximumValue)
  native.invoke(
    Type.Void, 1791, false,
    arg(Type.Int, gamerTagId),
    arg(Type.Int, value),
    arg(Type.Int, maximumValue)
  )
end

function HUD.SET_MP_GAMER_TAG_COLOUR(gamerTagId, component, hudColorIndex)
  native.invoke(
    Type.Void, 1792, false,
    arg(Type.Int, gamerTagId),
    arg(Type.Int, component),
    arg(Type.Int, hudColorIndex)
  )
end

function HUD.SET_MP_GAMER_TAG_HEALTH_BAR_COLOUR(gamerTagId, hudColorIndex)
  native.invoke(
    Type.Void, 1793, false,
    arg(Type.Int, gamerTagId),
    arg(Type.Int, hudColorIndex)
  )
end

function HUD.SET_MP_GAMER_TAG_ALPHA(gamerTagId, component, alpha)
  native.invoke(
    Type.Void, 1794, false,
    arg(Type.Int, gamerTagId),
    arg(Type.Int, component),
    arg(Type.Int, alpha)
  )
end

function HUD.SET_MP_GAMER_TAG_WANTED_LEVEL(gamerTagId, wantedlvl)
  native.invoke(
    Type.Void, 1795, false,
    arg(Type.Int, gamerTagId),
    arg(Type.Int, wantedlvl)
  )
end

function HUD.SET_MP_GAMER_TAG_NUM_PACKAGES(gamerTagId, p1)
  native.invoke(
    Type.Void, 1796, false,
    arg(Type.Int, gamerTagId),
    arg(Type.Int, p1)
  )
end

function HUD.SET_MP_GAMER_TAG_NAME(gamerTagId, string)
  native.invoke(
    Type.Void, 1797, false,
    arg(Type.Int, gamerTagId),
    arg(Type.String, string)
  )
end

function HUD.IS_UPDATING_MP_GAMER_TAG_NAME_AND_CREW_DETAILS(gamerTagId)
  return native.invoke(
    Type.Bool, 1798, false,
    arg(Type.Int, gamerTagId)
  )
end

function HUD.SET_MP_GAMER_TAG_BIG_TEXT(gamerTagId, string)
  native.invoke(
    Type.Void, 1799, false,
    arg(Type.Int, gamerTagId),
    arg(Type.String, string)
  )
end

function HUD.GET_CURRENT_WEBPAGE_ID()
  return native.invoke(
    Type.Int, 1800, false
  )
end

function HUD.GET_CURRENT_WEBSITE_ID()
  return native.invoke(
    Type.Int, 1801, false
  )
end

function HUD.GET_GLOBAL_ACTIONSCRIPT_FLAG(flagIndex)
  return native.invoke(
    Type.Int, 1802, false,
    arg(Type.Int, flagIndex)
  )
end

function HUD.RESET_GLOBAL_ACTIONSCRIPT_FLAG(flagIndex)
  native.invoke(
    Type.Void, 1803, false,
    arg(Type.Int, flagIndex)
  )
end

function HUD.IS_WARNING_MESSAGE_READY_FOR_CONTROL()
  return native.invoke(
    Type.Bool, 1804, false
  )
end

function HUD.SET_WARNING_MESSAGE(titleMsg, flags, promptMsg, p3, p4, p5, p6, showBackground, errorCode)
  native.invoke(
    Type.Void, 1805, false,
    arg(Type.String, titleMsg),
    arg(Type.Int, flags),
    arg(Type.String, promptMsg),
    arg(Type.Bool, p3),
    arg(Type.Int, p4),
    arg(Type.String, p5),
    arg(Type.String, p6),
    arg(Type.Bool, showBackground),
    arg(Type.Int, errorCode)
  )
end

function HUD.SET_WARNING_MESSAGE_WITH_HEADER(entryHeader, entryLine1, instructionalKey, entryLine2, p4, p5, showBackground, p7, p8, p9)
  native.invoke(
    Type.Void, 1806, false,
    arg(Type.String, entryHeader),
    arg(Type.String, entryLine1),
    arg(Type.Int, instructionalKey),
    arg(Type.String, entryLine2),
    arg(Type.Bool, p4),
    arg(Type.Any, p5),
    ref(Type.Any, showBackground),
    ref(Type.Any, p7),
    arg(Type.Bool, p8),
    arg(Type.Any, p9)
  )
end

function HUD.SET_WARNING_MESSAGE_WITH_HEADER_AND_SUBSTRING_FLAGS(entryHeader, entryLine1, instructionalKey, entryLine2, p4, p5, additionalIntInfo, additionalTextInfoLine1, additionalTextInfoLine2, showBackground, errorCode)
  native.invoke(
    Type.Void, 1807, false,
    arg(Type.String, entryHeader),
    arg(Type.String, entryLine1),
    arg(Type.Int, instructionalKey),
    arg(Type.String, entryLine2),
    arg(Type.Bool, p4),
    arg(Type.Any, p5),
    arg(Type.Any, additionalIntInfo),
    arg(Type.String, additionalTextInfoLine1),
    arg(Type.String, additionalTextInfoLine2),
    arg(Type.Bool, showBackground),
    arg(Type.Int, errorCode)
  )
end

function HUD.SET_WARNING_MESSAGE_WITH_HEADER_EXTENDED(entryHeader, entryLine1, flags, entryLine2, p4, p5, p6, p7, showBg, p9, p10)
  native.invoke(
    Type.Void, 1808, false,
    arg(Type.String, entryHeader),
    arg(Type.String, entryLine1),
    arg(Type.Int, flags),
    arg(Type.String, entryLine2),
    arg(Type.Bool, p4),
    arg(Type.Any, p5),
    ref(Type.Any, p6),
    ref(Type.Any, p7),
    arg(Type.Bool, showBg),
    arg(Type.Any, p9),
    arg(Type.Any, p10)
  )
end

function HUD.SET_WARNING_MESSAGE_WITH_HEADER_AND_SUBSTRING_FLAGS_EXTENDED(labelTitle, labelMessage, p2, p3, labelMessage2, p5, p6, p7, p8, p9, background, errorCode)
  native.invoke(
    Type.Void, 1809, false,
    arg(Type.String, labelTitle),
    arg(Type.String, labelMessage),
    arg(Type.Int, p2),
    arg(Type.Int, p3),
    arg(Type.String, labelMessage2),
    arg(Type.Bool, p5),
    arg(Type.Int, p6),
    arg(Type.Int, p7),
    arg(Type.String, p8),
    arg(Type.String, p9),
    arg(Type.Bool, background),
    arg(Type.Int, errorCode)
  )
end

function HUD.GET_WARNING_SCREEN_MESSAGE_HASH()
  return native.invoke(
    Type.Hash, 1810, false
  )
end

function HUD.SET_WARNING_MESSAGE_OPTION_ITEMS(index, name, cash, rp, lvl, colour)
  return native.invoke(
    Type.Bool, 1811, false,
    arg(Type.Int, index),
    arg(Type.String, name),
    arg(Type.Int, cash),
    arg(Type.Int, rp),
    arg(Type.Int, lvl),
    arg(Type.Int, colour)
  )
end

function HUD.SET_WARNING_MESSAGE_OPTION_HIGHLIGHT(p0)
  return native.invoke(
    Type.Bool, 1812, false,
    arg(Type.Any, p0)
  )
end

function HUD.REMOVE_WARNING_MESSAGE_OPTION_ITEMS()
  native.invoke(
    Type.Void, 1813, false
  )
end

function HUD.IS_WARNING_MESSAGE_ACTIVE()
  return native.invoke(
    Type.Bool, 1814, false
  )
end

function HUD.CLEAR_DYNAMIC_PAUSE_MENU_ERROR_MESSAGE()
  native.invoke(
    Type.Void, 1815, false
  )
end

function HUD.CUSTOM_MINIMAP_SET_ACTIVE(toggle)
  native.invoke(
    Type.Void, 1816, false,
    arg(Type.Bool, toggle)
  )
end

function HUD.CUSTOM_MINIMAP_SET_BLIP_OBJECT(spriteId)
  native.invoke(
    Type.Void, 1817, false,
    arg(Type.Int, spriteId)
  )
end

function HUD.CUSTOM_MINIMAP_CREATE_BLIP(x, y, z)
  return native.invoke(
    Type.Int, 1818, false,
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, z)
  )
end

function HUD.CUSTOM_MINIMAP_CLEAR_BLIPS()
  native.invoke(
    Type.Void, 1819, false
  )
end

function HUD.FORCE_SONAR_BLIPS_THIS_FRAME()
  return native.invoke(
    Type.Bool, 1820, false
  )
end

function HUD.GET_NORTH_BLID_INDEX()
  return native.invoke(
    Type.Blip, 1821, false
  )
end

function HUD.DISPLAY_PLAYER_NAME_TAGS_ON_BLIPS(toggle)
  native.invoke(
    Type.Void, 1822, false,
    arg(Type.Bool, toggle)
  )
end

function HUD.DRAW_FRONTEND_BACKGROUND_THIS_FRAME()
  native.invoke(
    Type.Void, 1823, false
  )
end

function HUD.DRAW_HUD_OVER_FADE_THIS_FRAME()
  native.invoke(
    Type.Void, 1824, false
  )
end

function HUD.ACTIVATE_FRONTEND_MENU(menuhash, togglePause, component)
  native.invoke(
    Type.Void, 1825, false,
    arg(Type.Hash, menuhash),
    arg(Type.Bool, togglePause),
    arg(Type.Int, component)
  )
end

function HUD.RESTART_FRONTEND_MENU(menuHash, p1)
  native.invoke(
    Type.Void, 1826, false,
    arg(Type.Hash, menuHash),
    arg(Type.Int, p1)
  )
end

function HUD.GET_CURRENT_FRONTEND_MENU_VERSION()
  return native.invoke(
    Type.Hash, 1827, false
  )
end

function HUD.SET_PAUSE_MENU_ACTIVE(toggle)
  native.invoke(
    Type.Void, 1828, false,
    arg(Type.Bool, toggle)
  )
end

function HUD.DISABLE_FRONTEND_THIS_FRAME()
  native.invoke(
    Type.Void, 1829, false
  )
end

function HUD.SUPPRESS_FRONTEND_RENDERING_THIS_FRAME()
  native.invoke(
    Type.Void, 1830, false
  )
end

function HUD.ALLOW_PAUSE_WHEN_NOT_IN_STATE_OF_PLAY_THIS_FRAME()
  native.invoke(
    Type.Void, 1831, false
  )
end

function HUD.SET_FRONTEND_ACTIVE(active)
  native.invoke(
    Type.Void, 1832, false,
    arg(Type.Bool, active)
  )
end

function HUD.IS_PAUSE_MENU_ACTIVE()
  return native.invoke(
    Type.Bool, 1833, false
  )
end

function HUD.IS_STORE_PENDING_NETWORK_SHUTDOWN_TO_OPEN()
  return native.invoke(
    Type.Bool, 1834, false
  )
end

function HUD.GET_PAUSE_MENU_STATE()
  return native.invoke(
    Type.Int, 1835, false
  )
end

function HUD.GET_PAUSE_MENU_POSITION()
  return native.invoke(
    Type.Vector3, 1836, false
  )
end

function HUD.IS_PAUSE_MENU_RESTARTING()
  return native.invoke(
    Type.Bool, 1837, false
  )
end

function HUD.FORCE_SCRIPTED_GFX_WHEN_FRONTEND_ACTIVE(p0)
  native.invoke(
    Type.Void, 1838, false,
    arg(Type.String, p0)
  )
end

function HUD.PAUSE_MENUCEPTION_GO_DEEPER(page)
  native.invoke(
    Type.Void, 1839, false,
    arg(Type.Int, page)
  )
end

function HUD.PAUSE_MENUCEPTION_THE_KICK()
  native.invoke(
    Type.Void, 1840, false
  )
end

function HUD.PAUSE_TOGGLE_FULLSCREEN_MAP(p0)
  native.invoke(
    Type.Void, 1841, false,
    arg(Type.Any, p0)
  )
end

function HUD.PAUSE_MENU_ACTIVATE_CONTEXT(contextHash)
  native.invoke(
    Type.Void, 1842, false,
    arg(Type.Hash, contextHash)
  )
end

function HUD.PAUSE_MENU_DEACTIVATE_CONTEXT(contextHash)
  native.invoke(
    Type.Void, 1843, false,
    arg(Type.Hash, contextHash)
  )
end

function HUD.PAUSE_MENU_IS_CONTEXT_ACTIVE(contextHash)
  return native.invoke(
    Type.Bool, 1844, false,
    arg(Type.Hash, contextHash)
  )
end

function HUD.PAUSE_MENU_IS_CONTEXT_MENU_ACTIVE()
  return native.invoke(
    Type.Bool, 1845, false
  )
end

function HUD.PAUSE_MENU_GET_HAIR_COLOUR_INDEX()
  return native.invoke(
    Type.Int, 1846, false
  )
end

function HUD.PAUSE_MENU_GET_MOUSE_HOVER_INDEX()
  return native.invoke(
    Type.Int, 1847, false
  )
end

function HUD.PAUSE_MENU_GET_MOUSE_HOVER_UNIQUE_ID()
  return native.invoke(
    Type.Int, 1848, false
  )
end

function HUD.PAUSE_MENU_GET_MOUSE_CLICK_EVENT(p0, p1, p2)
  return native.invoke(
    Type.Bool, 1849, false,
    ref(Type.Any, p0),
    ref(Type.Any, p1),
    ref(Type.Any, p2)
  )
end

function HUD.PAUSE_MENU_REDRAW_INSTRUCTIONAL_BUTTONS(p0)
  native.invoke(
    Type.Void, 1850, false,
    arg(Type.Int, p0)
  )
end

function HUD.PAUSE_MENU_SET_BUSY_SPINNER(p0, position, spinnerIndex)
  native.invoke(
    Type.Void, 1851, false,
    arg(Type.Bool, p0),
    arg(Type.Int, position),
    arg(Type.Int, spinnerIndex)
  )
end

function HUD.PAUSE_MENU_SET_WARN_ON_TAB_CHANGE(p0)
  native.invoke(
    Type.Void, 1852, false,
    arg(Type.Bool, p0)
  )
end

function HUD.IS_FRONTEND_READY_FOR_CONTROL()
  return native.invoke(
    Type.Bool, 1853, false
  )
end

function HUD.TAKE_CONTROL_OF_FRONTEND()
  native.invoke(
    Type.Void, 1854, false
  )
end

function HUD.RELEASE_CONTROL_OF_FRONTEND()
  native.invoke(
    Type.Void, 1855, false
  )
end

function HUD.CODE_WANTS_SCRIPT_TO_TAKE_CONTROL()
  return native.invoke(
    Type.Bool, 1856, false
  )
end

function HUD.GET_SCREEN_CODE_WANTS_SCRIPT_TO_CONTROL()
  return native.invoke(
    Type.Int, 1857, false
  )
end

function HUD.IS_NAVIGATING_MENU_CONTENT()
  return native.invoke(
    Type.Bool, 1858, false
  )
end

function HUD.HAS_MENU_TRIGGER_EVENT_OCCURRED()
  return native.invoke(
    Type.Bool, 1859, false
  )
end

function HUD.HAS_MENU_LAYOUT_CHANGED_EVENT_OCCURRED()
  return native.invoke(
    Type.Bool, 1860, false
  )
end

function HUD.SET_SAVEGAME_LIST_UNIQUE_ID(p0)
  native.invoke(
    Type.Void, 1861, false,
    arg(Type.Any, p0)
  )
end

function HUD.GET_MENU_TRIGGER_EVENT_DETAILS(lastItemMenuId, selectedItemUniqueId)
  native.invoke(
    Type.Void, 1862, false,
    ref(Type.Int, lastItemMenuId),
    ref(Type.Int, selectedItemUniqueId)
  )
end

function HUD.GET_MENU_LAYOUT_CHANGED_EVENT_DETAILS(lastItemMenuId, selectedItemMenuId, selectedItemUniqueId)
  native.invoke(
    Type.Void, 1863, false,
    ref(Type.Int, lastItemMenuId),
    ref(Type.Int, selectedItemMenuId),
    ref(Type.Int, selectedItemUniqueId)
  )
end

function HUD.GET_PM_PLAYER_CREW_COLOR(r, g, b)
  return native.invoke(
    Type.Bool, 1864, false,
    ref(Type.Int, r),
    ref(Type.Int, g),
    ref(Type.Int, b)
  )
end

function HUD.GET_MENU_PED_INT_STAT(p0, p1)
  return native.invoke(
    Type.Bool, 1865, false,
    arg(Type.Any, p0),
    ref(Type.Any, p1)
  )
end

function HUD.GET_CHARACTER_MENU_PED_INT_STAT(p0, p1, p2)
  return native.invoke(
    Type.Bool, 1866, false,
    arg(Type.Any, p0),
    ref(Type.Any, p1),
    arg(Type.Any, p2)
  )
end

function HUD.GET_MENU_PED_MASKED_INT_STAT(statHash, outValue, mask, p3)
  return native.invoke(
    Type.Bool, 1867, false,
    arg(Type.Hash, statHash),
    ref(Type.Int, outValue),
    arg(Type.Int, mask),
    arg(Type.Bool, p3)
  )
end

function HUD.GET_CHARACTER_MENU_PED_MASKED_INT_STAT(statHash, outValue, p2, mask, p4)
  return native.invoke(
    Type.Bool, 1868, false,
    arg(Type.Hash, statHash),
    ref(Type.Any, outValue),
    arg(Type.Int, p2),
    arg(Type.Int, mask),
    arg(Type.Bool, p4)
  )
end

function HUD.GET_MENU_PED_FLOAT_STAT(statHash, outValue)
  return native.invoke(
    Type.Bool, 1869, false,
    arg(Type.Hash, statHash),
    ref(Type.Float, outValue)
  )
end

function HUD.GET_CHARACTER_MENU_PED_FLOAT_STAT(statHash, outValue, p2)
  return native.invoke(
    Type.Bool, 1870, false,
    arg(Type.Float, statHash),
    ref(Type.Float, outValue),
    arg(Type.Bool, p2)
  )
end

function HUD.GET_MENU_PED_BOOL_STAT(statHash, outValue)
  return native.invoke(
    Type.Bool, 1871, false,
    arg(Type.Hash, statHash),
    ref(Type.Bool, outValue)
  )
end

function HUD.CLEAR_PED_IN_PAUSE_MENU()
  native.invoke(
    Type.Void, 1872, false
  )
end

function HUD.GIVE_PED_TO_PAUSE_MENU(ped, p1)
  native.invoke(
    Type.Void, 1873, false,
    arg(Type.Ped, ped),
    arg(Type.Int, p1)
  )
end

function HUD.SET_PAUSE_MENU_PED_LIGHTING(state)
  native.invoke(
    Type.Void, 1874, false,
    arg(Type.Bool, state)
  )
end

function HUD.SET_PAUSE_MENU_PED_SLEEP_STATE(state)
  native.invoke(
    Type.Void, 1875, false,
    arg(Type.Bool, state)
  )
end

function HUD.OPEN_ONLINE_POLICIES_MENU()
  native.invoke(
    Type.Void, 1876, false
  )
end

function HUD.ARE_ONLINE_POLICIES_UP_TO_DATE()
  return native.invoke(
    Type.Bool, 1877, false
  )
end

function HUD.IS_ONLINE_POLICIES_MENU_ACTIVE()
  return native.invoke(
    Type.Bool, 1878, false
  )
end

function HUD.OPEN_SOCIAL_CLUB_MENU(menu)
  native.invoke(
    Type.Void, 1879, false,
    arg(Type.Hash, menu)
  )
end

function HUD.CLOSE_SOCIAL_CLUB_MENU()
  native.invoke(
    Type.Void, 1880, false
  )
end

function HUD.SET_SOCIAL_CLUB_TOUR(name)
  native.invoke(
    Type.Void, 1881, false,
    arg(Type.String, name)
  )
end

function HUD.IS_SOCIAL_CLUB_ACTIVE()
  return native.invoke(
    Type.Bool, 1882, false
  )
end

function HUD.SET_TEXT_INPUT_BOX_ENABLED(p0)
  native.invoke(
    Type.Void, 1883, false,
    arg(Type.Bool, p0)
  )
end

function HUD.FORCE_CLOSE_TEXT_INPUT_BOX()
  native.invoke(
    Type.Void, 1884, false
  )
end

function HUD.SET_ALLOW_COMMA_ON_TEXT_INPUT(p0)
  native.invoke(
    Type.Void, 1885, false,
    arg(Type.Any, p0)
  )
end

function HUD.OVERRIDE_MP_TEXT_CHAT_TEAM_STRING(gxtEntryHash)
  native.invoke(
    Type.Void, 1886, false,
    arg(Type.Hash, gxtEntryHash)
  )
end

function HUD.IS_MP_TEXT_CHAT_TYPING()
  return native.invoke(
    Type.Bool, 1887, false
  )
end

function HUD.CLOSE_MP_TEXT_CHAT()
  native.invoke(
    Type.Void, 1888, false
  )
end

function HUD.MP_TEXT_CHAT_IS_TEAM_JOB(p0)
  native.invoke(
    Type.Void, 1889, false,
    arg(Type.Any, p0)
  )
end

function HUD.OVERRIDE_MP_TEXT_CHAT_COLOR(p0, hudColor)
  native.invoke(
    Type.Void, 1890, false,
    arg(Type.Int, p0),
    arg(Type.Int, hudColor)
  )
end

function HUD.MP_TEXT_CHAT_DISABLE(toggle)
  native.invoke(
    Type.Void, 1891, false,
    arg(Type.Bool, toggle)
  )
end

function HUD.FLAG_PLAYER_CONTEXT_IN_TOURNAMENT(toggle)
  native.invoke(
    Type.Void, 1892, false,
    arg(Type.Bool, toggle)
  )
end

function HUD.SET_PED_HAS_AI_BLIP(ped, hasCone)
  native.invoke(
    Type.Void, 1893, false,
    arg(Type.Ped, ped),
    arg(Type.Bool, hasCone)
  )
end

function HUD.SET_PED_HAS_AI_BLIP_WITH_COLOUR(ped, hasCone, color)
  native.invoke(
    Type.Void, 1894, false,
    arg(Type.Ped, ped),
    arg(Type.Bool, hasCone),
    arg(Type.Int, color)
  )
end

function HUD.DOES_PED_HAVE_AI_BLIP(ped)
  return native.invoke(
    Type.Bool, 1895, false,
    arg(Type.Ped, ped)
  )
end

function HUD.SET_PED_AI_BLIP_GANG_ID(ped, gangId)
  native.invoke(
    Type.Void, 1896, false,
    arg(Type.Ped, ped),
    arg(Type.Int, gangId)
  )
end

function HUD.SET_PED_AI_BLIP_HAS_CONE(ped, toggle)
  native.invoke(
    Type.Void, 1897, false,
    arg(Type.Ped, ped),
    arg(Type.Bool, toggle)
  )
end

function HUD.SET_PED_AI_BLIP_FORCED_ON(ped, toggle)
  native.invoke(
    Type.Void, 1898, false,
    arg(Type.Ped, ped),
    arg(Type.Bool, toggle)
  )
end

function HUD.SET_PED_AI_BLIP_NOTICE_RANGE(ped, range)
  native.invoke(
    Type.Void, 1899, false,
    arg(Type.Ped, ped),
    arg(Type.Float, range)
  )
end

function HUD.SET_PED_AI_BLIP_SPRITE(ped, spriteId)
  native.invoke(
    Type.Void, 1900, false,
    arg(Type.Ped, ped),
    arg(Type.Int, spriteId)
  )
end

function HUD.GET_AI_PED_PED_BLIP_INDEX(ped)
  return native.invoke(
    Type.Blip, 1901, false,
    arg(Type.Ped, ped)
  )
end

function HUD.GET_AI_PED_VEHICLE_BLIP_INDEX(ped)
  return native.invoke(
    Type.Blip, 1902, false,
    arg(Type.Ped, ped)
  )
end

function HUD.HAS_DIRECTOR_MODE_BEEN_LAUNCHED_BY_CODE()
  return native.invoke(
    Type.Bool, 1903, false
  )
end

function HUD.SET_DIRECTOR_MODE_LAUNCHED_BY_SCRIPT()
  native.invoke(
    Type.Void, 1904, false
  )
end

function HUD.SET_PLAYER_IS_IN_DIRECTOR_MODE(toggle)
  native.invoke(
    Type.Void, 1905, false,
    arg(Type.Bool, toggle)
  )
end

function HUD.SET_DIRECTOR_MODE_AVAILABLE(toggle)
  native.invoke(
    Type.Void, 1906, false,
    arg(Type.Bool, toggle)
  )
end

function HUD.HIDE_HUDMARKERS_THIS_FRAME()
  native.invoke(
    Type.Void, 1907, false
  )
end


INTERIOR = {}

function INTERIOR.GET_INTERIOR_HEADING(interior)
  return native.invoke(
    Type.Float, 1908, false,
    arg(Type.Interior, interior)
  )
end

function INTERIOR.GET_INTERIOR_LOCATION_AND_NAMEHASH(interior, position, nameHash)
  native.invoke(
    Type.Void, 1909, true,
    arg(Type.Interior, interior),
    ref(Type.Vector3, position),
    ref(Type.Hash, nameHash)
  )
end

function INTERIOR.GET_INTERIOR_GROUP_ID(interior)
  return native.invoke(
    Type.Int, 1910, false,
    arg(Type.Interior, interior)
  )
end

function INTERIOR.GET_OFFSET_FROM_INTERIOR_IN_WORLD_COORDS(interior, x, y, z)
  return native.invoke(
    Type.Vector3, 1911, false,
    arg(Type.Interior, interior),
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, z)
  )
end

function INTERIOR.IS_INTERIOR_SCENE()
  return native.invoke(
    Type.Bool, 1912, false
  )
end

function INTERIOR.IS_VALID_INTERIOR(interior)
  return native.invoke(
    Type.Bool, 1913, false,
    arg(Type.Interior, interior)
  )
end

function INTERIOR.CLEAR_ROOM_FOR_ENTITY(entity)
  native.invoke(
    Type.Void, 1914, false,
    arg(Type.Entity, entity)
  )
end

function INTERIOR.FORCE_ROOM_FOR_ENTITY(entity, interior, roomHashKey)
  native.invoke(
    Type.Void, 1915, false,
    arg(Type.Entity, entity),
    arg(Type.Interior, interior),
    arg(Type.Hash, roomHashKey)
  )
end

function INTERIOR.GET_ROOM_KEY_FROM_ENTITY(entity)
  return native.invoke(
    Type.Hash, 1916, false,
    arg(Type.Entity, entity)
  )
end

function INTERIOR.GET_KEY_FOR_ENTITY_IN_ROOM(entity)
  return native.invoke(
    Type.Hash, 1917, false,
    arg(Type.Entity, entity)
  )
end

function INTERIOR.GET_INTERIOR_FROM_ENTITY(entity)
  return native.invoke(
    Type.Interior, 1918, false,
    arg(Type.Entity, entity)
  )
end

function INTERIOR.RETAIN_ENTITY_IN_INTERIOR(entity, interior)
  native.invoke(
    Type.Void, 1919, false,
    arg(Type.Entity, entity),
    arg(Type.Interior, interior)
  )
end

function INTERIOR.CLEAR_INTERIOR_STATE_OF_ENTITY(entity)
  native.invoke(
    Type.Void, 1920, false,
    arg(Type.Entity, entity)
  )
end

function INTERIOR.FORCE_ACTIVATING_TRACKING_ON_ENTITY(p0, p1)
  native.invoke(
    Type.Void, 1921, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1)
  )
end

function INTERIOR.FORCE_ROOM_FOR_GAME_VIEWPORT(interiorID, roomHashKey)
  native.invoke(
    Type.Void, 1922, false,
    arg(Type.Int, interiorID),
    arg(Type.Hash, roomHashKey)
  )
end

function INTERIOR.SET_ROOM_FOR_GAME_VIEWPORT_BY_NAME(roomName)
  native.invoke(
    Type.Void, 1923, false,
    arg(Type.String, roomName)
  )
end

function INTERIOR.SET_ROOM_FOR_GAME_VIEWPORT_BY_KEY(roomHashKey)
  native.invoke(
    Type.Void, 1924, false,
    arg(Type.Hash, roomHashKey)
  )
end

function INTERIOR.GET_ROOM_KEY_FOR_GAME_VIEWPORT()
  return native.invoke(
    Type.Hash, 1925, false
  )
end

function INTERIOR.CLEAR_ROOM_FOR_GAME_VIEWPORT()
  native.invoke(
    Type.Void, 1926, false
  )
end

function INTERIOR.GET_INTERIOR_FROM_PRIMARY_VIEW()
  return native.invoke(
    Type.Interior, 1927, false
  )
end

function INTERIOR.GET_INTERIOR_AT_COORDS(x, y, z)
  return native.invoke(
    Type.Interior, 1928, false,
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, z)
  )
end

function INTERIOR.ADD_PICKUP_TO_INTERIOR_ROOM_BY_NAME(pickup, roomName)
  native.invoke(
    Type.Void, 1929, false,
    arg(Type.Pickup, pickup),
    arg(Type.String, roomName)
  )
end

function INTERIOR.PIN_INTERIOR_IN_MEMORY(interior)
  native.invoke(
    Type.Void, 1930, false,
    arg(Type.Interior, interior)
  )
end

function INTERIOR.UNPIN_INTERIOR(interior)
  native.invoke(
    Type.Void, 1931, false,
    arg(Type.Interior, interior)
  )
end

function INTERIOR.IS_INTERIOR_READY(interior)
  return native.invoke(
    Type.Bool, 1932, false,
    arg(Type.Interior, interior)
  )
end

function INTERIOR.SET_INTERIOR_IN_USE(interior)
  return native.invoke(
    Type.Bool, 1933, false,
    arg(Type.Interior, interior)
  )
end

function INTERIOR.GET_INTERIOR_AT_COORDS_WITH_TYPE(x, y, z, interiorType)
  return native.invoke(
    Type.Interior, 1934, false,
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, z),
    arg(Type.String, interiorType)
  )
end

function INTERIOR.GET_INTERIOR_AT_COORDS_WITH_TYPEHASH(x, y, z, typeHash)
  return native.invoke(
    Type.Interior, 1935, false,
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, z),
    arg(Type.Hash, typeHash)
  )
end

function INTERIOR.ACTIVATE_INTERIOR_GROUPS_USING_CAMERA()
  native.invoke(
    Type.Void, 1936, false
  )
end

function INTERIOR.IS_COLLISION_MARKED_OUTSIDE(x, y, z)
  return native.invoke(
    Type.Bool, 1937, false,
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, z)
  )
end

function INTERIOR.GET_INTERIOR_FROM_COLLISION(x, y, z)
  return native.invoke(
    Type.Interior, 1938, false,
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, z)
  )
end

function INTERIOR.ENABLE_STADIUM_PROBES_THIS_FRAME(toggle)
  native.invoke(
    Type.Void, 1939, false,
    arg(Type.Bool, toggle)
  )
end

function INTERIOR.ACTIVATE_INTERIOR_ENTITY_SET(interior, entitySetName)
  native.invoke(
    Type.Void, 1940, false,
    arg(Type.Interior, interior),
    arg(Type.String, entitySetName)
  )
end

function INTERIOR.DEACTIVATE_INTERIOR_ENTITY_SET(interior, entitySetName)
  native.invoke(
    Type.Void, 1941, false,
    arg(Type.Interior, interior),
    arg(Type.String, entitySetName)
  )
end

function INTERIOR.IS_INTERIOR_ENTITY_SET_ACTIVE(interior, entitySetName)
  return native.invoke(
    Type.Bool, 1942, false,
    arg(Type.Interior, interior),
    arg(Type.String, entitySetName)
  )
end

function INTERIOR.SET_INTERIOR_ENTITY_SET_TINT_INDEX(interior, entitySetName, color)
  native.invoke(
    Type.Void, 1943, false,
    arg(Type.Interior, interior),
    arg(Type.String, entitySetName),
    arg(Type.Int, color)
  )
end

function INTERIOR.REFRESH_INTERIOR(interior)
  native.invoke(
    Type.Void, 1944, false,
    arg(Type.Interior, interior)
  )
end

function INTERIOR.ENABLE_EXTERIOR_CULL_MODEL_THIS_FRAME(mapObjectHash)
  native.invoke(
    Type.Void, 1945, false,
    arg(Type.Hash, mapObjectHash)
  )
end

function INTERIOR.ENABLE_SHADOW_CULL_MODEL_THIS_FRAME(mapObjectHash)
  native.invoke(
    Type.Void, 1946, false,
    arg(Type.Hash, mapObjectHash)
  )
end

function INTERIOR.DISABLE_INTERIOR(interior, toggle)
  native.invoke(
    Type.Void, 1947, false,
    arg(Type.Interior, interior),
    arg(Type.Bool, toggle)
  )
end

function INTERIOR.IS_INTERIOR_DISABLED(interior)
  return native.invoke(
    Type.Bool, 1948, false,
    arg(Type.Interior, interior)
  )
end

function INTERIOR.CAP_INTERIOR(interior, toggle)
  native.invoke(
    Type.Void, 1949, false,
    arg(Type.Interior, interior),
    arg(Type.Bool, toggle)
  )
end

function INTERIOR.IS_INTERIOR_CAPPED(interior)
  return native.invoke(
    Type.Bool, 1950, false,
    arg(Type.Interior, interior)
  )
end

function INTERIOR.DISABLE_METRO_SYSTEM(toggle)
  native.invoke(
    Type.Void, 1951, false,
    arg(Type.Bool, toggle)
  )
end

function INTERIOR.SET_IS_EXTERIOR_ONLY(entity, toggle)
  native.invoke(
    Type.Void, 1952, false,
    arg(Type.Entity, entity),
    arg(Type.Bool, toggle)
  )
end


ITEMSET = {}

function ITEMSET.CREATE_ITEMSET(p0)
  return native.invoke(
    Type.Scrhandle, 1953, false,
    arg(Type.Bool, p0)
  )
end

function ITEMSET.DESTROY_ITEMSET(itemset)
  native.invoke(
    Type.Void, 1954, false,
    arg(Type.Scrhandle, itemset)
  )
end

function ITEMSET.IS_ITEMSET_VALID(itemset)
  return native.invoke(
    Type.Bool, 1955, false,
    arg(Type.Scrhandle, itemset)
  )
end

function ITEMSET.ADD_TO_ITEMSET(item, itemset)
  return native.invoke(
    Type.Bool, 1956, false,
    arg(Type.Scrhandle, item),
    arg(Type.Scrhandle, itemset)
  )
end

function ITEMSET.REMOVE_FROM_ITEMSET(item, itemset)
  native.invoke(
    Type.Void, 1957, false,
    arg(Type.Scrhandle, item),
    arg(Type.Scrhandle, itemset)
  )
end

function ITEMSET.GET_ITEMSET_SIZE(itemset)
  return native.invoke(
    Type.Int, 1958, false,
    arg(Type.Scrhandle, itemset)
  )
end

function ITEMSET.GET_INDEXED_ITEM_IN_ITEMSET(index, itemset)
  return native.invoke(
    Type.Scrhandle, 1959, false,
    arg(Type.Int, index),
    arg(Type.Scrhandle, itemset)
  )
end

function ITEMSET.IS_IN_ITEMSET(item, itemset)
  return native.invoke(
    Type.Bool, 1960, false,
    arg(Type.Scrhandle, item),
    arg(Type.Scrhandle, itemset)
  )
end

function ITEMSET.CLEAN_ITEMSET(itemset)
  native.invoke(
    Type.Void, 1961, false,
    arg(Type.Scrhandle, itemset)
  )
end


LOADINGSCREEN = {}

function LOADINGSCREEN.LOBBY_AUTO_MULTIPLAYER_MENU()
  return native.invoke(
    Type.Bool, 1962, false
  )
end

function LOADINGSCREEN.LOBBY_AUTO_MULTIPLAYER_FREEMODE()
  return native.invoke(
    Type.Bool, 1963, false
  )
end

function LOADINGSCREEN.LOBBY_SET_AUTO_MULTIPLAYER(toggle)
  native.invoke(
    Type.Void, 1964, false,
    arg(Type.Bool, toggle)
  )
end

function LOADINGSCREEN.LOBBY_AUTO_MULTIPLAYER_EVENT()
  return native.invoke(
    Type.Bool, 1965, false
  )
end

function LOADINGSCREEN.LOBBY_SET_AUTO_MULTIPLAYER_EVENT(toggle)
  native.invoke(
    Type.Void, 1966, false,
    arg(Type.Bool, toggle)
  )
end

function LOADINGSCREEN.LOBBY_AUTO_MULTIPLAYER_RANDOM_JOB()
  return native.invoke(
    Type.Bool, 1967, false
  )
end

function LOADINGSCREEN.LOBBY_SET_AUTO_MP_RANDOM_JOB(toggle)
  native.invoke(
    Type.Void, 1968, false,
    arg(Type.Bool, toggle)
  )
end

function LOADINGSCREEN.SHUTDOWN_SESSION_CLEARS_AUTO_MULTIPLAYER(toggle)
  native.invoke(
    Type.Void, 1969, false,
    arg(Type.Bool, toggle)
  )
end


LOCALIZATION = {}

function LOCALIZATION.LOCALIZATION_GET_SYSTEM_LANGUAGE()
  return native.invoke(
    Type.Int, 1970, false
  )
end

function LOCALIZATION.GET_CURRENT_LANGUAGE()
  return native.invoke(
    Type.Int, 1971, false
  )
end

function LOCALIZATION.LOCALIZATION_GET_SYSTEM_DATE_TYPE()
  return native.invoke(
    Type.Int, 1972, false
  )
end


MISC = {}

function MISC.GET_ALLOCATED_STACK_SIZE()
  return native.invoke(
    Type.Int, 1973, false
  )
end

function MISC.GET_NUMBER_OF_FREE_STACKS_OF_THIS_SIZE(stackSize)
  return native.invoke(
    Type.Int, 1974, false,
    arg(Type.Int, stackSize)
  )
end

function MISC.SET_RANDOM_SEED(seed)
  native.invoke(
    Type.Void, 1975, false,
    arg(Type.Int, seed)
  )
end

function MISC.SET_TIME_SCALE(timeScale)
  native.invoke(
    Type.Void, 1976, false,
    arg(Type.Float, timeScale)
  )
end

function MISC.SET_MISSION_FLAG(toggle)
  native.invoke(
    Type.Void, 1977, false,
    arg(Type.Bool, toggle)
  )
end

function MISC.GET_MISSION_FLAG()
  return native.invoke(
    Type.Bool, 1978, false
  )
end

function MISC.SET_RANDOM_EVENT_FLAG(toggle)
  native.invoke(
    Type.Void, 1979, false,
    arg(Type.Bool, toggle)
  )
end

function MISC.GET_RANDOM_EVENT_FLAG()
  return native.invoke(
    Type.Bool, 1980, false
  )
end

function MISC.GET_CONTENT_TO_LOAD()
  return native.invoke(
    Type.String, 1981, false
  )
end

function MISC.ACTIVITY_FEED_CREATE(p0, p1)
  native.invoke(
    Type.Void, 1982, false,
    arg(Type.String, p0),
    arg(Type.String, p1)
  )
end

function MISC.ACTIVITY_FEED_ADD_SUBSTRING_TO_CAPTION(p0)
  native.invoke(
    Type.Void, 1983, false,
    arg(Type.String, p0)
  )
end

function MISC.ACTIVITY_FEED_ADD_LITERAL_SUBSTRING_TO_CAPTION(p0)
  native.invoke(
    Type.Void, 1984, false,
    arg(Type.String, p0)
  )
end

function MISC.ACTIVITY_FEED_ADD_INT_TO_CAPTION(p0)
  native.invoke(
    Type.Void, 1985, false,
    arg(Type.Any, p0)
  )
end

function MISC.ACTIVITY_FEED_LARGE_IMAGE_URL(p0)
  native.invoke(
    Type.Void, 1986, false,
    arg(Type.String, p0)
  )
end

function MISC.ACTIVITY_FEED_ACTION_START_WITH_COMMAND_LINE(p0, p1)
  native.invoke(
    Type.Void, 1987, false,
    arg(Type.String, p0),
    arg(Type.String, p1)
  )
end

function MISC.ACTIVITY_FEED_ACTION_START_WITH_COMMAND_LINE_ADD(p0)
  native.invoke(
    Type.Void, 1988, false,
    arg(Type.String, p0)
  )
end

function MISC.ACTIVITY_FEED_POST()
  native.invoke(
    Type.Void, 1989, false
  )
end

function MISC.ACTIVITY_FEED_ONLINE_PLAYED_WITH_POST(p0)
  native.invoke(
    Type.Void, 1990, false,
    arg(Type.String, p0)
  )
end

function MISC.HAS_RESUMED_FROM_SUSPEND()
  return native.invoke(
    Type.Bool, 1991, false
  )
end

function MISC.SET_SCRIPT_HIGH_PRIO(toggle)
  native.invoke(
    Type.Void, 1992, false,
    arg(Type.Bool, toggle)
  )
end

function MISC.SET_THIS_IS_A_TRIGGER_SCRIPT(toggle)
  native.invoke(
    Type.Void, 1993, false,
    arg(Type.Bool, toggle)
  )
end

function MISC.INFORM_CODE_OF_CONTENT_ID_OF_CURRENT_UGC_MISSION(p0)
  native.invoke(
    Type.Void, 1994, false,
    arg(Type.String, p0)
  )
end

function MISC.GET_BASE_ELEMENT_LOCATION_FROM_METADATA_BLOCK(p0, p1, p2, p3)
  return native.invoke(
    Type.Bool, 1995, false,
    ref(Type.Any, p0),
    ref(Type.Any, p1),
    arg(Type.Any, p2),
    arg(Type.Bool, p3)
  )
end

function MISC.GET_PREV_WEATHER_TYPE_HASH_NAME()
  return native.invoke(
    Type.Hash, 1996, false
  )
end

function MISC.GET_NEXT_WEATHER_TYPE_HASH_NAME()
  return native.invoke(
    Type.Hash, 1997, false
  )
end

function MISC.IS_PREV_WEATHER_TYPE(weatherType)
  return native.invoke(
    Type.Bool, 1998, false,
    arg(Type.String, weatherType)
  )
end

function MISC.IS_NEXT_WEATHER_TYPE(weatherType)
  return native.invoke(
    Type.Bool, 1999, false,
    arg(Type.String, weatherType)
  )
end

function MISC.SET_WEATHER_TYPE_PERSIST(weatherType)
  native.invoke(
    Type.Void, 2000, false,
    arg(Type.String, weatherType)
  )
end

function MISC.SET_WEATHER_TYPE_NOW_PERSIST(weatherType)
  native.invoke(
    Type.Void, 2001, false,
    arg(Type.String, weatherType)
  )
end

function MISC.SET_WEATHER_TYPE_NOW(weatherType)
  native.invoke(
    Type.Void, 2002, false,
    arg(Type.String, weatherType)
  )
end

function MISC.SET_WEATHER_TYPE_OVERTIME_PERSIST(weatherType, time)
  native.invoke(
    Type.Void, 2003, false,
    arg(Type.String, weatherType),
    arg(Type.Float, time)
  )
end

function MISC.SET_RANDOM_WEATHER_TYPE()
  native.invoke(
    Type.Void, 2004, false
  )
end

function MISC.CLEAR_WEATHER_TYPE_PERSIST()
  native.invoke(
    Type.Void, 2005, false
  )
end

function MISC.CLEAR_WEATHER_TYPE_NOW_PERSIST_NETWORK(milliseconds)
  native.invoke(
    Type.Void, 2006, false,
    arg(Type.Int, milliseconds)
  )
end

function MISC.GET_CURR_WEATHER_STATE(weatherType1, weatherType2, percentWeather2)
  native.invoke(
    Type.Void, 2007, false,
    ref(Type.Hash, weatherType1),
    ref(Type.Hash, weatherType2),
    ref(Type.Float, percentWeather2)
  )
end

function MISC.SET_CURR_WEATHER_STATE(weatherType1, weatherType2, percentWeather2)
  native.invoke(
    Type.Void, 2008, false,
    arg(Type.Hash, weatherType1),
    arg(Type.Hash, weatherType2),
    arg(Type.Float, percentWeather2)
  )
end

function MISC.SET_OVERRIDE_WEATHER(weatherType)
  native.invoke(
    Type.Void, 2009, false,
    arg(Type.String, weatherType)
  )
end

function MISC.SET_OVERRIDE_WEATHEREX(weatherType, p1)
  native.invoke(
    Type.Void, 2010, false,
    arg(Type.String, weatherType),
    arg(Type.Bool, p1)
  )
end

function MISC.CLEAR_OVERRIDE_WEATHER()
  native.invoke(
    Type.Void, 2011, false
  )
end

function MISC.WATER_OVERRIDE_SET_SHOREWAVEAMPLITUDE(amplitude)
  native.invoke(
    Type.Void, 2012, false,
    arg(Type.Float, amplitude)
  )
end

function MISC.WATER_OVERRIDE_SET_SHOREWAVEMINAMPLITUDE(minAmplitude)
  native.invoke(
    Type.Void, 2013, false,
    arg(Type.Float, minAmplitude)
  )
end

function MISC.WATER_OVERRIDE_SET_SHOREWAVEMAXAMPLITUDE(maxAmplitude)
  native.invoke(
    Type.Void, 2014, false,
    arg(Type.Float, maxAmplitude)
  )
end

function MISC.WATER_OVERRIDE_SET_OCEANNOISEMINAMPLITUDE(minAmplitude)
  native.invoke(
    Type.Void, 2015, false,
    arg(Type.Float, minAmplitude)
  )
end

function MISC.WATER_OVERRIDE_SET_OCEANWAVEAMPLITUDE(amplitude)
  native.invoke(
    Type.Void, 2016, false,
    arg(Type.Float, amplitude)
  )
end

function MISC.WATER_OVERRIDE_SET_OCEANWAVEMINAMPLITUDE(minAmplitude)
  native.invoke(
    Type.Void, 2017, false,
    arg(Type.Float, minAmplitude)
  )
end

function MISC.WATER_OVERRIDE_SET_OCEANWAVEMAXAMPLITUDE(maxAmplitude)
  native.invoke(
    Type.Void, 2018, false,
    arg(Type.Float, maxAmplitude)
  )
end

function MISC.WATER_OVERRIDE_SET_RIPPLEBUMPINESS(bumpiness)
  native.invoke(
    Type.Void, 2019, false,
    arg(Type.Float, bumpiness)
  )
end

function MISC.WATER_OVERRIDE_SET_RIPPLEMINBUMPINESS(minBumpiness)
  native.invoke(
    Type.Void, 2020, false,
    arg(Type.Float, minBumpiness)
  )
end

function MISC.WATER_OVERRIDE_SET_RIPPLEMAXBUMPINESS(maxBumpiness)
  native.invoke(
    Type.Void, 2021, false,
    arg(Type.Float, maxBumpiness)
  )
end

function MISC.WATER_OVERRIDE_SET_RIPPLEDISTURB(disturb)
  native.invoke(
    Type.Void, 2022, false,
    arg(Type.Float, disturb)
  )
end

function MISC.WATER_OVERRIDE_SET_STRENGTH(strength)
  native.invoke(
    Type.Void, 2023, false,
    arg(Type.Float, strength)
  )
end

function MISC.WATER_OVERRIDE_FADE_IN(p0)
  native.invoke(
    Type.Void, 2024, false,
    arg(Type.Float, p0)
  )
end

function MISC.WATER_OVERRIDE_FADE_OUT(p0)
  native.invoke(
    Type.Void, 2025, false,
    arg(Type.Float, p0)
  )
end

function MISC.SET_WIND(speed)
  native.invoke(
    Type.Void, 2026, false,
    arg(Type.Float, speed)
  )
end

function MISC.SET_WIND_SPEED(speed)
  native.invoke(
    Type.Void, 2027, false,
    arg(Type.Float, speed)
  )
end

function MISC.GET_WIND_SPEED()
  return native.invoke(
    Type.Float, 2028, false
  )
end

function MISC.SET_WIND_DIRECTION(direction)
  native.invoke(
    Type.Void, 2029, false,
    arg(Type.Float, direction)
  )
end

function MISC.GET_WIND_DIRECTION()
  return native.invoke(
    Type.Vector3, 2030, false
  )
end

function MISC.SET_RAIN(intensity)
  native.invoke(
    Type.Void, 2031, false,
    arg(Type.Float, intensity)
  )
end

function MISC.GET_RAIN_LEVEL()
  return native.invoke(
    Type.Float, 2032, false
  )
end

function MISC.SET_SNOW(level)
  native.invoke(
    Type.Void, 2033, false,
    arg(Type.Float, level)
  )
end

function MISC.GET_SNOW_LEVEL()
  return native.invoke(
    Type.Float, 2034, false
  )
end

function MISC.FORCE_LIGHTNING_FLASH()
  native.invoke(
    Type.Void, 2035, false
  )
end

function MISC.SET_CLOUD_SETTINGS_OVERRIDE(p0)
  native.invoke(
    Type.Void, 2036, false,
    arg(Type.String, p0)
  )
end

function MISC.PRELOAD_CLOUD_HAT(name)
  native.invoke(
    Type.Void, 2037, false,
    arg(Type.String, name)
  )
end

function MISC.LOAD_CLOUD_HAT(name, transitionTime)
  native.invoke(
    Type.Void, 2038, false,
    arg(Type.String, name),
    arg(Type.Float, transitionTime)
  )
end

function MISC.UNLOAD_CLOUD_HAT(name, p1)
  native.invoke(
    Type.Void, 2039, false,
    arg(Type.String, name),
    arg(Type.Float, p1)
  )
end

function MISC.UNLOAD_ALL_CLOUD_HATS()
  native.invoke(
    Type.Void, 2040, false
  )
end

function MISC.SET_CLOUDS_ALPHA(opacity)
  native.invoke(
    Type.Void, 2041, false,
    arg(Type.Float, opacity)
  )
end

function MISC.GET_CLOUDS_ALPHA()
  return native.invoke(
    Type.Float, 2042, false
  )
end

function MISC.GET_GAME_TIMER()
  return native.invoke(
    Type.Int, 2043, false
  )
end

function MISC.GET_FRAME_TIME()
  return native.invoke(
    Type.Float, 2044, false
  )
end

function MISC.GET_SYSTEM_TIME_STEP()
  return native.invoke(
    Type.Float, 2045, false
  )
end

function MISC.GET_FRAME_COUNT()
  return native.invoke(
    Type.Int, 2046, false
  )
end

function MISC.GET_RANDOM_FLOAT_IN_RANGE(startRange, endRange)
  return native.invoke(
    Type.Float, 2047, false,
    arg(Type.Float, startRange),
    arg(Type.Float, endRange)
  )
end

function MISC.GET_RANDOM_INT_IN_RANGE(startRange, endRange)
  return native.invoke(
    Type.Int, 2048, false,
    arg(Type.Int, startRange),
    arg(Type.Int, endRange)
  )
end

function MISC.GET_RANDOM_MWC_INT_IN_RANGE(startRange, endRange)
  return native.invoke(
    Type.Int, 2049, false,
    arg(Type.Int, startRange),
    arg(Type.Int, endRange)
  )
end

function MISC.GET_GROUND_Z_FOR_3D_COORD(x, y, z, groundZ, ignoreWater, p5)
  return native.invoke(
    Type.Bool, 2050, false,
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, z),
    ref(Type.Float, groundZ),
    arg(Type.Bool, ignoreWater),
    arg(Type.Bool, p5)
  )
end

function MISC.GET_GROUND_Z_AND_NORMAL_FOR_3D_COORD(x, y, z, groundZ, normal)
  return native.invoke(
    Type.Bool, 2051, true,
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, z),
    ref(Type.Float, groundZ),
    ref(Type.Vector3, normal)
  )
end

function MISC.GET_GROUND_Z_EXCLUDING_OBJECTS_FOR_3D_COORD(x, y, z, groundZ, p4, p5)
  return native.invoke(
    Type.Bool, 2052, false,
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, z),
    ref(Type.Float, groundZ),
    arg(Type.Bool, p4),
    arg(Type.Bool, p5)
  )
end

function MISC.ASIN(p0)
  return native.invoke(
    Type.Float, 2053, false,
    arg(Type.Float, p0)
  )
end

function MISC.ACOS(p0)
  return native.invoke(
    Type.Float, 2054, false,
    arg(Type.Float, p0)
  )
end

function MISC.TAN(p0)
  return native.invoke(
    Type.Float, 2055, false,
    arg(Type.Float, p0)
  )
end

function MISC.ATAN(p0)
  return native.invoke(
    Type.Float, 2056, false,
    arg(Type.Float, p0)
  )
end

function MISC.ATAN2(p0, p1)
  return native.invoke(
    Type.Float, 2057, false,
    arg(Type.Float, p0),
    arg(Type.Float, p1)
  )
end

function MISC.GET_DISTANCE_BETWEEN_COORDS(x1, y1, z1, x2, y2, z2, useZ)
  return native.invoke(
    Type.Float, 2058, false,
    arg(Type.Float, x1),
    arg(Type.Float, y1),
    arg(Type.Float, z1),
    arg(Type.Float, x2),
    arg(Type.Float, y2),
    arg(Type.Float, z2),
    arg(Type.Bool, useZ)
  )
end

function MISC.GET_ANGLE_BETWEEN_2D_VECTORS(x1, y1, x2, y2)
  return native.invoke(
    Type.Float, 2059, false,
    arg(Type.Float, x1),
    arg(Type.Float, y1),
    arg(Type.Float, x2),
    arg(Type.Float, y2)
  )
end

function MISC.GET_HEADING_FROM_VECTOR_2D(dx, dy)
  return native.invoke(
    Type.Float, 2060, false,
    arg(Type.Float, dx),
    arg(Type.Float, dy)
  )
end

function MISC.GET_RATIO_OF_CLOSEST_POINT_ON_LINE(x1, y1, z1, x2, y2, z2, x3, y3, z3, clamp)
  return native.invoke(
    Type.Float, 2061, false,
    arg(Type.Float, x1),
    arg(Type.Float, y1),
    arg(Type.Float, z1),
    arg(Type.Float, x2),
    arg(Type.Float, y2),
    arg(Type.Float, z2),
    arg(Type.Float, x3),
    arg(Type.Float, y3),
    arg(Type.Float, z3),
    arg(Type.Bool, clamp)
  )
end

function MISC.GET_CLOSEST_POINT_ON_LINE(x1, y1, z1, x2, y2, z2, x3, y3, z3, clamp)
  return native.invoke(
    Type.Vector3, 2062, false,
    arg(Type.Float, x1),
    arg(Type.Float, y1),
    arg(Type.Float, z1),
    arg(Type.Float, x2),
    arg(Type.Float, y2),
    arg(Type.Float, z2),
    arg(Type.Float, x3),
    arg(Type.Float, y3),
    arg(Type.Float, z3),
    arg(Type.Bool, clamp)
  )
end

function MISC.GET_LINE_PLANE_INTERSECTION(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12)
  return native.invoke(
    Type.Bool, 2063, false,
    arg(Type.Float, p0),
    arg(Type.Float, p1),
    arg(Type.Float, p2),
    arg(Type.Float, p3),
    arg(Type.Float, p4),
    arg(Type.Float, p5),
    arg(Type.Float, p6),
    arg(Type.Float, p7),
    arg(Type.Float, p8),
    arg(Type.Float, p9),
    arg(Type.Float, p10),
    arg(Type.Float, p11),
    ref(Type.Float, p12)
  )
end

function MISC.GET_POINT_AREA_OVERLAP(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13)
  return native.invoke(
    Type.Bool, 2064, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1),
    arg(Type.Any, p2),
    arg(Type.Any, p3),
    arg(Type.Any, p4),
    arg(Type.Any, p5),
    arg(Type.Any, p6),
    arg(Type.Any, p7),
    arg(Type.Any, p8),
    arg(Type.Any, p9),
    arg(Type.Any, p10),
    arg(Type.Any, p11),
    arg(Type.Any, p12),
    arg(Type.Any, p13)
  )
end

function MISC.SET_BIT(address, offset)
  native.invoke(
    Type.Void, 2065, false,
    ref(Type.Int, address),
    arg(Type.Int, offset)
  )
end

function MISC.CLEAR_BIT(address, offset)
  native.invoke(
    Type.Void, 2066, false,
    ref(Type.Int, address),
    arg(Type.Int, offset)
  )
end

function MISC.GET_HASH_KEY(string)
  return native.invoke(
    Type.Hash, 2067, false,
    arg(Type.String, string)
  )
end

function MISC.SLERP_NEAR_QUATERNION(t, x, y, z, w, x1, y1, z1, w1, outX, outY, outZ, outW)
  native.invoke(
    Type.Void, 2068, false,
    arg(Type.Float, t),
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, z),
    arg(Type.Float, w),
    arg(Type.Float, x1),
    arg(Type.Float, y1),
    arg(Type.Float, z1),
    arg(Type.Float, w1),
    ref(Type.Float, outX),
    ref(Type.Float, outY),
    ref(Type.Float, outZ),
    ref(Type.Float, outW)
  )
end

function MISC.IS_AREA_OCCUPIED(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12)
  return native.invoke(
    Type.Bool, 2069, false,
    arg(Type.Float, p0),
    arg(Type.Float, p1),
    arg(Type.Float, p2),
    arg(Type.Float, p3),
    arg(Type.Float, p4),
    arg(Type.Float, p5),
    arg(Type.Bool, p6),
    arg(Type.Bool, p7),
    arg(Type.Bool, p8),
    arg(Type.Bool, p9),
    arg(Type.Bool, p10),
    arg(Type.Any, p11),
    arg(Type.Bool, p12)
  )
end

function MISC.IS_AREA_OCCUPIED_SLOW(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12)
  return native.invoke(
    Type.Bool, 2070, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1),
    arg(Type.Any, p2),
    arg(Type.Any, p3),
    arg(Type.Any, p4),
    arg(Type.Any, p5),
    arg(Type.Any, p6),
    arg(Type.Any, p7),
    arg(Type.Any, p8),
    arg(Type.Any, p9),
    arg(Type.Any, p10),
    arg(Type.Any, p11),
    arg(Type.Any, p12)
  )
end

function MISC.IS_POSITION_OCCUPIED(x, y, z, range, p4, checkVehicles, checkPeds, p7, p8, ignoreEntity, p10)
  return native.invoke(
    Type.Bool, 2071, false,
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, z),
    arg(Type.Float, range),
    arg(Type.Bool, p4),
    arg(Type.Bool, checkVehicles),
    arg(Type.Bool, checkPeds),
    arg(Type.Bool, p7),
    arg(Type.Bool, p8),
    arg(Type.Entity, ignoreEntity),
    arg(Type.Bool, p10)
  )
end

function MISC.IS_POINT_OBSCURED_BY_A_MISSION_ENTITY(p0, p1, p2, p3, p4, p5, p6)
  return native.invoke(
    Type.Bool, 2072, false,
    arg(Type.Float, p0),
    arg(Type.Float, p1),
    arg(Type.Float, p2),
    arg(Type.Float, p3),
    arg(Type.Float, p4),
    arg(Type.Float, p5),
    arg(Type.Any, p6)
  )
end

function MISC.CLEAR_AREA(X, Y, Z, radius, p4, ignoreCopCars, ignoreObjects, p7)
  native.invoke(
    Type.Void, 2073, false,
    arg(Type.Float, X),
    arg(Type.Float, Y),
    arg(Type.Float, Z),
    arg(Type.Float, radius),
    arg(Type.Bool, p4),
    arg(Type.Bool, ignoreCopCars),
    arg(Type.Bool, ignoreObjects),
    arg(Type.Bool, p7)
  )
end

function MISC.CLEAR_AREA_LEAVE_VEHICLE_HEALTH(x, y, z, radius, p4, p5, p6, p7)
  native.invoke(
    Type.Void, 2074, false,
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, z),
    arg(Type.Float, radius),
    arg(Type.Bool, p4),
    arg(Type.Bool, p5),
    arg(Type.Bool, p6),
    arg(Type.Bool, p7)
  )
end

function MISC.CLEAR_AREA_OF_VEHICLES(x, y, z, radius, p4, p5, p6, p7, p8, p9, p10)
  native.invoke(
    Type.Void, 2075, false,
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, z),
    arg(Type.Float, radius),
    arg(Type.Bool, p4),
    arg(Type.Bool, p5),
    arg(Type.Bool, p6),
    arg(Type.Bool, p7),
    arg(Type.Bool, p8),
    arg(Type.Bool, p9),
    arg(Type.Any, p10)
  )
end

function MISC.CLEAR_ANGLED_AREA_OF_VEHICLES(x1, y1, z1, x2, y2, z2, width, p7, p8, p9, p10, p11, p12, p13)
  native.invoke(
    Type.Void, 2076, false,
    arg(Type.Float, x1),
    arg(Type.Float, y1),
    arg(Type.Float, z1),
    arg(Type.Float, x2),
    arg(Type.Float, y2),
    arg(Type.Float, z2),
    arg(Type.Float, width),
    arg(Type.Bool, p7),
    arg(Type.Bool, p8),
    arg(Type.Bool, p9),
    arg(Type.Bool, p10),
    arg(Type.Bool, p11),
    arg(Type.Any, p12),
    arg(Type.Any, p13)
  )
end

function MISC.CLEAR_AREA_OF_OBJECTS(x, y, z, radius, flags)
  native.invoke(
    Type.Void, 2077, false,
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, z),
    arg(Type.Float, radius),
    arg(Type.Int, flags)
  )
end

function MISC.CLEAR_AREA_OF_PEDS(x, y, z, radius, flags)
  native.invoke(
    Type.Void, 2078, false,
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, z),
    arg(Type.Float, radius),
    arg(Type.Int, flags)
  )
end

function MISC.CLEAR_AREA_OF_COPS(x, y, z, radius, flags)
  native.invoke(
    Type.Void, 2079, false,
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, z),
    arg(Type.Float, radius),
    arg(Type.Int, flags)
  )
end

function MISC.CLEAR_AREA_OF_PROJECTILES(x, y, z, radius, flags)
  native.invoke(
    Type.Void, 2080, false,
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, z),
    arg(Type.Float, radius),
    arg(Type.Int, flags)
  )
end

function MISC.CLEAR_SCENARIO_SPAWN_HISTORY()
  native.invoke(
    Type.Void, 2081, false
  )
end

function MISC.SET_SAVE_MENU_ACTIVE(ignoreVehicle)
  native.invoke(
    Type.Void, 2082, false,
    arg(Type.Bool, ignoreVehicle)
  )
end

function MISC.GET_STATUS_OF_MANUAL_SAVE()
  return native.invoke(
    Type.Int, 2083, false
  )
end

function MISC.SET_CREDITS_ACTIVE(toggle)
  native.invoke(
    Type.Void, 2084, false,
    arg(Type.Bool, toggle)
  )
end

function MISC.SET_CREDITS_FADE_OUT_WITH_SCREEN(toggle)
  native.invoke(
    Type.Void, 2085, false,
    arg(Type.Bool, toggle)
  )
end

function MISC.HAVE_CREDITS_REACHED_END()
  return native.invoke(
    Type.Bool, 2086, false
  )
end

function MISC.ARE_CREDITS_RUNNING()
  return native.invoke(
    Type.Bool, 2087, false
  )
end

function MISC.TERMINATE_ALL_SCRIPTS_WITH_THIS_NAME(scriptName)
  native.invoke(
    Type.Void, 2088, false,
    arg(Type.String, scriptName)
  )
end

function MISC.NETWORK_SET_SCRIPT_IS_SAFE_FOR_NETWORK_GAME()
  native.invoke(
    Type.Void, 2089, false
  )
end

function MISC.ADD_HOSPITAL_RESTART(x, y, z, p3, p4)
  return native.invoke(
    Type.Int, 2090, false,
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, z),
    arg(Type.Float, p3),
    arg(Type.Any, p4)
  )
end

function MISC.DISABLE_HOSPITAL_RESTART(hospitalIndex, toggle)
  native.invoke(
    Type.Void, 2091, false,
    arg(Type.Int, hospitalIndex),
    arg(Type.Bool, toggle)
  )
end

function MISC.ADD_POLICE_RESTART(p0, p1, p2, p3, p4)
  return native.invoke(
    Type.Int, 2092, false,
    arg(Type.Float, p0),
    arg(Type.Float, p1),
    arg(Type.Float, p2),
    arg(Type.Float, p3),
    arg(Type.Any, p4)
  )
end

function MISC.DISABLE_POLICE_RESTART(policeIndex, toggle)
  native.invoke(
    Type.Void, 2093, false,
    arg(Type.Int, policeIndex),
    arg(Type.Bool, toggle)
  )
end

function MISC.SET_RESTART_COORD_OVERRIDE(x, y, z, heading)
  native.invoke(
    Type.Void, 2094, false,
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, z),
    arg(Type.Float, heading)
  )
end

function MISC.CLEAR_RESTART_COORD_OVERRIDE()
  native.invoke(
    Type.Void, 2095, false
  )
end

function MISC.PAUSE_DEATH_ARREST_RESTART(toggle)
  native.invoke(
    Type.Void, 2096, false,
    arg(Type.Bool, toggle)
  )
end

function MISC.IGNORE_NEXT_RESTART(toggle)
  native.invoke(
    Type.Void, 2097, false,
    arg(Type.Bool, toggle)
  )
end

function MISC.SET_FADE_OUT_AFTER_DEATH(toggle)
  native.invoke(
    Type.Void, 2098, false,
    arg(Type.Bool, toggle)
  )
end

function MISC.SET_FADE_OUT_AFTER_ARREST(toggle)
  native.invoke(
    Type.Void, 2099, false,
    arg(Type.Bool, toggle)
  )
end

function MISC.SET_FADE_IN_AFTER_DEATH_ARREST(toggle)
  native.invoke(
    Type.Void, 2100, false,
    arg(Type.Bool, toggle)
  )
end

function MISC.SET_FADE_IN_AFTER_LOAD(toggle)
  native.invoke(
    Type.Void, 2101, false,
    arg(Type.Bool, toggle)
  )
end

function MISC.REGISTER_SAVE_HOUSE(x, y, z, p3, p4, p5, p6)
  return native.invoke(
    Type.Int, 2102, false,
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, z),
    arg(Type.Float, p3),
    arg(Type.String, p4),
    arg(Type.Any, p5),
    arg(Type.Any, p6)
  )
end

function MISC.SET_SAVE_HOUSE(savehouseHandle, p1, p2)
  native.invoke(
    Type.Void, 2103, false,
    arg(Type.Int, savehouseHandle),
    arg(Type.Bool, p1),
    arg(Type.Bool, p2)
  )
end

function MISC.OVERRIDE_SAVE_HOUSE(p0, p1, p2, p3, p4, p5, p6, p7)
  return native.invoke(
    Type.Bool, 2104, false,
    arg(Type.Bool, p0),
    arg(Type.Float, p1),
    arg(Type.Float, p2),
    arg(Type.Float, p3),
    arg(Type.Float, p4),
    arg(Type.Bool, p5),
    arg(Type.Float, p6),
    arg(Type.Float, p7)
  )
end

function MISC.GET_SAVE_HOUSE_DETAILS_AFTER_SUCCESSFUL_LOAD(p0, p1, fadeInAfterLoad, p3)
  return native.invoke(
    Type.Bool, 2105, true,
    ref(Type.Vector3, p0),
    ref(Type.Float, p1),
    ref(Type.Bool, fadeInAfterLoad),
    ref(Type.Bool, p3)
  )
end

function MISC.DO_AUTO_SAVE()
  native.invoke(
    Type.Void, 2106, false
  )
end

function MISC.GET_IS_AUTO_SAVE_OFF()
  return native.invoke(
    Type.Bool, 2107, false
  )
end

function MISC.IS_AUTO_SAVE_IN_PROGRESS()
  return native.invoke(
    Type.Bool, 2108, false
  )
end

function MISC.HAS_CODE_REQUESTED_AUTOSAVE()
  return native.invoke(
    Type.Bool, 2109, false
  )
end

function MISC.CLEAR_CODE_REQUESTED_AUTOSAVE()
  native.invoke(
    Type.Void, 2110, false
  )
end

function MISC.BEGIN_REPLAY_STATS(p0, p1)
  native.invoke(
    Type.Void, 2111, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1)
  )
end

function MISC.ADD_REPLAY_STAT_VALUE(value)
  native.invoke(
    Type.Void, 2112, false,
    arg(Type.Any, value)
  )
end

function MISC.END_REPLAY_STATS()
  native.invoke(
    Type.Void, 2113, false
  )
end

function MISC.HAVE_REPLAY_STATS_BEEN_STORED()
  return native.invoke(
    Type.Bool, 2114, false
  )
end

function MISC.GET_REPLAY_STAT_MISSION_ID()
  return native.invoke(
    Type.Int, 2115, false
  )
end

function MISC.GET_REPLAY_STAT_MISSION_TYPE()
  return native.invoke(
    Type.Int, 2116, false
  )
end

function MISC.GET_REPLAY_STAT_COUNT()
  return native.invoke(
    Type.Int, 2117, false
  )
end

function MISC.GET_REPLAY_STAT_AT_INDEX(index)
  return native.invoke(
    Type.Int, 2118, false,
    arg(Type.Int, index)
  )
end

function MISC.CLEAR_REPLAY_STATS()
  native.invoke(
    Type.Void, 2119, false
  )
end

function MISC.QUEUE_MISSION_REPEAT_LOAD()
  return native.invoke(
    Type.Bool, 2120, false
  )
end

function MISC.QUEUE_MISSION_REPEAT_SAVE()
  return native.invoke(
    Type.Bool, 2121, false
  )
end

function MISC.QUEUE_MISSION_REPEAT_SAVE_FOR_BENCHMARK_TEST()
  return native.invoke(
    Type.Bool, 2122, false
  )
end

function MISC.GET_STATUS_OF_MISSION_REPEAT_SAVE()
  return native.invoke(
    Type.Int, 2123, false
  )
end

function MISC.IS_MEMORY_CARD_IN_USE()
  return native.invoke(
    Type.Bool, 2124, false
  )
end

function MISC.SHOOT_SINGLE_BULLET_BETWEEN_COORDS(x1, y1, z1, x2, y2, z2, damage, p7, weaponHash, ownerPed, isAudible, isInvisible, speed)
  native.invoke(
    Type.Void, 2125, false,
    arg(Type.Float, x1),
    arg(Type.Float, y1),
    arg(Type.Float, z1),
    arg(Type.Float, x2),
    arg(Type.Float, y2),
    arg(Type.Float, z2),
    arg(Type.Int, damage),
    arg(Type.Bool, p7),
    arg(Type.Hash, weaponHash),
    arg(Type.Ped, ownerPed),
    arg(Type.Bool, isAudible),
    arg(Type.Bool, isInvisible),
    arg(Type.Float, speed)
  )
end

function MISC.SHOOT_SINGLE_BULLET_BETWEEN_COORDS_IGNORE_ENTITY(x1, y1, z1, x2, y2, z2, damage, p7, weaponHash, ownerPed, isAudible, isInvisible, speed, entity, p14)
  native.invoke(
    Type.Void, 2126, false,
    arg(Type.Float, x1),
    arg(Type.Float, y1),
    arg(Type.Float, z1),
    arg(Type.Float, x2),
    arg(Type.Float, y2),
    arg(Type.Float, z2),
    arg(Type.Int, damage),
    arg(Type.Bool, p7),
    arg(Type.Hash, weaponHash),
    arg(Type.Ped, ownerPed),
    arg(Type.Bool, isAudible),
    arg(Type.Bool, isInvisible),
    arg(Type.Float, speed),
    arg(Type.Entity, entity),
    arg(Type.Any, p14)
  )
end

function MISC.SHOOT_SINGLE_BULLET_BETWEEN_COORDS_IGNORE_ENTITY_NEW(x1, y1, z1, x2, y2, z2, damage, p7, weaponHash, ownerPed, isAudible, isInvisible, speed, entity, p14, p15, targetEntity, p17, p18, p19, p20)
  native.invoke(
    Type.Void, 2127, false,
    arg(Type.Float, x1),
    arg(Type.Float, y1),
    arg(Type.Float, z1),
    arg(Type.Float, x2),
    arg(Type.Float, y2),
    arg(Type.Float, z2),
    arg(Type.Int, damage),
    arg(Type.Bool, p7),
    arg(Type.Hash, weaponHash),
    arg(Type.Ped, ownerPed),
    arg(Type.Bool, isAudible),
    arg(Type.Bool, isInvisible),
    arg(Type.Float, speed),
    arg(Type.Entity, entity),
    arg(Type.Bool, p14),
    arg(Type.Bool, p15),
    arg(Type.Entity, targetEntity),
    arg(Type.Bool, p17),
    arg(Type.Any, p18),
    arg(Type.Any, p19),
    arg(Type.Any, p20)
  )
end

function MISC.GET_MODEL_DIMENSIONS(modelHash, minimum, maximum)
  native.invoke(
    Type.Void, 2128, true,
    arg(Type.Hash, modelHash),
    ref(Type.Vector3, minimum),
    ref(Type.Vector3, maximum)
  )
end

function MISC.SET_FAKE_WANTED_LEVEL(fakeWantedLevel)
  native.invoke(
    Type.Void, 2129, false,
    arg(Type.Int, fakeWantedLevel)
  )
end

function MISC.GET_FAKE_WANTED_LEVEL()
  return native.invoke(
    Type.Int, 2130, false
  )
end

function MISC.USING_MISSION_CREATOR(toggle)
  native.invoke(
    Type.Void, 2131, false,
    arg(Type.Bool, toggle)
  )
end

function MISC.ALLOW_MISSION_CREATOR_WARP(toggle)
  native.invoke(
    Type.Void, 2132, false,
    arg(Type.Bool, toggle)
  )
end

function MISC.SET_MINIGAME_IN_PROGRESS(toggle)
  native.invoke(
    Type.Void, 2133, false,
    arg(Type.Bool, toggle)
  )
end

function MISC.IS_MINIGAME_IN_PROGRESS()
  return native.invoke(
    Type.Bool, 2134, false
  )
end

function MISC.IS_THIS_A_MINIGAME_SCRIPT()
  return native.invoke(
    Type.Bool, 2135, false
  )
end

function MISC.IS_SNIPER_INVERTED()
  return native.invoke(
    Type.Bool, 2136, false
  )
end

function MISC.SHOULD_USE_METRIC_MEASUREMENTS()
  return native.invoke(
    Type.Bool, 2137, false
  )
end

function MISC.GET_PROFILE_SETTING(profileSetting)
  return native.invoke(
    Type.Int, 2138, false,
    arg(Type.Int, profileSetting)
  )
end

function MISC.ARE_STRINGS_EQUAL(string1, string2)
  return native.invoke(
    Type.Bool, 2139, false,
    arg(Type.String, string1),
    arg(Type.String, string2)
  )
end

function MISC.COMPARE_STRINGS(str1, str2, matchCase, maxLength)
  return native.invoke(
    Type.Int, 2140, false,
    arg(Type.String, str1),
    arg(Type.String, str2),
    arg(Type.Bool, matchCase),
    arg(Type.Int, maxLength)
  )
end

function MISC.ABSI(value)
  return native.invoke(
    Type.Int, 2141, false,
    arg(Type.Int, value)
  )
end

function MISC.ABSF(value)
  return native.invoke(
    Type.Float, 2142, false,
    arg(Type.Float, value)
  )
end

function MISC.IS_SNIPER_BULLET_IN_AREA(x1, y1, z1, x2, y2, z2)
  return native.invoke(
    Type.Bool, 2143, false,
    arg(Type.Float, x1),
    arg(Type.Float, y1),
    arg(Type.Float, z1),
    arg(Type.Float, x2),
    arg(Type.Float, y2),
    arg(Type.Float, z2)
  )
end

function MISC.IS_PROJECTILE_IN_AREA(x1, y1, z1, x2, y2, z2, ownedByPlayer)
  return native.invoke(
    Type.Bool, 2144, false,
    arg(Type.Float, x1),
    arg(Type.Float, y1),
    arg(Type.Float, z1),
    arg(Type.Float, x2),
    arg(Type.Float, y2),
    arg(Type.Float, z2),
    arg(Type.Bool, ownedByPlayer)
  )
end

function MISC.IS_PROJECTILE_TYPE_IN_AREA(x1, y1, z1, x2, y2, z2, type, ownedByPlayer)
  return native.invoke(
    Type.Bool, 2145, false,
    arg(Type.Float, x1),
    arg(Type.Float, y1),
    arg(Type.Float, z1),
    arg(Type.Float, x2),
    arg(Type.Float, y2),
    arg(Type.Float, z2),
    arg(Type.Int, type),
    arg(Type.Bool, ownedByPlayer)
  )
end

function MISC.IS_PROJECTILE_TYPE_IN_ANGLED_AREA(x1, y1, z1, x2, y2, z2, width, p7, ownedByPlayer)
  return native.invoke(
    Type.Bool, 2146, false,
    arg(Type.Float, x1),
    arg(Type.Float, y1),
    arg(Type.Float, z1),
    arg(Type.Float, x2),
    arg(Type.Float, y2),
    arg(Type.Float, z2),
    arg(Type.Float, width),
    arg(Type.Any, p7),
    arg(Type.Bool, ownedByPlayer)
  )
end

function MISC.IS_PROJECTILE_TYPE_WITHIN_DISTANCE(x, y, z, projectileHash, radius, ownedByPlayer)
  return native.invoke(
    Type.Bool, 2147, false,
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, z),
    arg(Type.Hash, projectileHash),
    arg(Type.Float, radius),
    arg(Type.Bool, ownedByPlayer)
  )
end

function MISC.GET_COORDS_OF_PROJECTILE_TYPE_IN_AREA(x1, y1, z1, x2, y2, z2, projectileHash, projectilePos, ownedByPlayer)
  return native.invoke(
    Type.Bool, 2148, true,
    arg(Type.Float, x1),
    arg(Type.Float, y1),
    arg(Type.Float, z1),
    arg(Type.Float, x2),
    arg(Type.Float, y2),
    arg(Type.Float, z2),
    arg(Type.Hash, projectileHash),
    ref(Type.Vector3, projectilePos),
    arg(Type.Bool, ownedByPlayer)
  )
end

function MISC.GET_COORDS_OF_PROJECTILE_TYPE_IN_ANGLED_AREA(vecAngledAreaPoint1X, vecAngledAreaPoint1Y, vecAngledAreaPoint1Z, vecAngledAreaPoint2X, vecAngledAreaPoint2Y, vecAngledAreaPoint2Z, distanceOfOppositeFace, weaponType, positionOut, bIsPlayer)
  return native.invoke(
    Type.Bool, 2149, true,
    arg(Type.Float, vecAngledAreaPoint1X),
    arg(Type.Float, vecAngledAreaPoint1Y),
    arg(Type.Float, vecAngledAreaPoint1Z),
    arg(Type.Float, vecAngledAreaPoint2X),
    arg(Type.Float, vecAngledAreaPoint2Y),
    arg(Type.Float, vecAngledAreaPoint2Z),
    arg(Type.Float, distanceOfOppositeFace),
    arg(Type.Hash, weaponType),
    ref(Type.Vector3, positionOut),
    arg(Type.Bool, bIsPlayer)
  )
end

function MISC.GET_COORDS_OF_PROJECTILE_TYPE_WITHIN_DISTANCE(ped, weaponHash, distance, outCoords, p4)
  return native.invoke(
    Type.Bool, 2150, true,
    arg(Type.Ped, ped),
    arg(Type.Hash, weaponHash),
    arg(Type.Float, distance),
    ref(Type.Vector3, outCoords),
    arg(Type.Bool, p4)
  )
end

function MISC.GET_PROJECTILE_OF_PROJECTILE_TYPE_WITHIN_DISTANCE(ped, weaponHash, distance, outCoords, outProjectile, p5)
  return native.invoke(
    Type.Bool, 2151, true,
    arg(Type.Ped, ped),
    arg(Type.Hash, weaponHash),
    arg(Type.Float, distance),
    ref(Type.Vector3, outCoords),
    ref(Type.Object, outProjectile),
    arg(Type.Bool, p5)
  )
end

function MISC.IS_BULLET_IN_ANGLED_AREA(x1, y1, z1, x2, y2, z2, width, ownedByPlayer)
  return native.invoke(
    Type.Bool, 2152, false,
    arg(Type.Float, x1),
    arg(Type.Float, y1),
    arg(Type.Float, z1),
    arg(Type.Float, x2),
    arg(Type.Float, y2),
    arg(Type.Float, z2),
    arg(Type.Float, width),
    arg(Type.Bool, ownedByPlayer)
  )
end

function MISC.IS_BULLET_IN_AREA(x, y, z, radius, ownedByPlayer)
  return native.invoke(
    Type.Bool, 2153, false,
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, z),
    arg(Type.Float, radius),
    arg(Type.Bool, ownedByPlayer)
  )
end

function MISC.IS_BULLET_IN_BOX(x1, y1, z1, x2, y2, z2, ownedByPlayer)
  return native.invoke(
    Type.Bool, 2154, false,
    arg(Type.Float, x1),
    arg(Type.Float, y1),
    arg(Type.Float, z1),
    arg(Type.Float, x2),
    arg(Type.Float, y2),
    arg(Type.Float, z2),
    arg(Type.Bool, ownedByPlayer)
  )
end

function MISC.HAS_BULLET_IMPACTED_IN_AREA(x, y, z, p3, p4, p5)
  return native.invoke(
    Type.Bool, 2155, false,
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, z),
    arg(Type.Float, p3),
    arg(Type.Bool, p4),
    arg(Type.Bool, p5)
  )
end

function MISC.HAS_BULLET_IMPACTED_IN_BOX(p0, p1, p2, p3, p4, p5, p6, p7)
  return native.invoke(
    Type.Bool, 2156, false,
    arg(Type.Float, p0),
    arg(Type.Float, p1),
    arg(Type.Float, p2),
    arg(Type.Float, p3),
    arg(Type.Float, p4),
    arg(Type.Float, p5),
    arg(Type.Bool, p6),
    arg(Type.Bool, p7)
  )
end

function MISC.IS_ORBIS_VERSION()
  return native.invoke(
    Type.Bool, 2157, false
  )
end

function MISC.IS_DURANGO_VERSION()
  return native.invoke(
    Type.Bool, 2158, false
  )
end

function MISC.IS_XBOX360_VERSION()
  return native.invoke(
    Type.Bool, 2159, false
  )
end

function MISC.IS_PS3_VERSION()
  return native.invoke(
    Type.Bool, 2160, false
  )
end

function MISC.IS_PC_VERSION()
  return native.invoke(
    Type.Bool, 2161, false
  )
end

function MISC.IS_STEAM_VERSION()
  return native.invoke(
    Type.Bool, 2162, false
  )
end

function MISC.IS_AUSSIE_VERSION()
  return native.invoke(
    Type.Bool, 2163, false
  )
end

function MISC.IS_JAPANESE_VERSION()
  return native.invoke(
    Type.Bool, 2164, false
  )
end

function MISC.IS_XBOX_PLATFORM()
  return native.invoke(
    Type.Bool, 2165, false
  )
end

function MISC.IS_SCARLETT_VERSION()
  return native.invoke(
    Type.Bool, 2166, false
  )
end

function MISC.IS_SCE_PLATFORM()
  return native.invoke(
    Type.Bool, 2167, false
  )
end

function MISC.IS_PROSPERO_VERSION()
  return native.invoke(
    Type.Bool, 2168, false
  )
end

function MISC.IS_STRING_NULL(string)
  return native.invoke(
    Type.Bool, 2169, false,
    arg(Type.String, string)
  )
end

function MISC.IS_STRING_NULL_OR_EMPTY(string)
  return native.invoke(
    Type.Bool, 2170, false,
    arg(Type.String, string)
  )
end

function MISC.STRING_TO_INT(string, outInteger)
  return native.invoke(
    Type.Bool, 2171, false,
    arg(Type.String, string),
    ref(Type.Int, outInteger)
  )
end

function MISC.SET_BITS_IN_RANGE(var, rangeStart, rangeEnd, p3)
  native.invoke(
    Type.Void, 2172, false,
    ref(Type.Int, var),
    arg(Type.Int, rangeStart),
    arg(Type.Int, rangeEnd),
    arg(Type.Int, p3)
  )
end

function MISC.GET_BITS_IN_RANGE(var, rangeStart, rangeEnd)
  return native.invoke(
    Type.Int, 2173, false,
    arg(Type.Int, var),
    arg(Type.Int, rangeStart),
    arg(Type.Int, rangeEnd)
  )
end

function MISC.ADD_STUNT_JUMP(x1, y1, z1, x2, y2, z2, x3, y3, z3, x4, y4, z4, camX, camY, camZ, p15, p16, p17)
  return native.invoke(
    Type.Int, 2174, false,
    arg(Type.Float, x1),
    arg(Type.Float, y1),
    arg(Type.Float, z1),
    arg(Type.Float, x2),
    arg(Type.Float, y2),
    arg(Type.Float, z2),
    arg(Type.Float, x3),
    arg(Type.Float, y3),
    arg(Type.Float, z3),
    arg(Type.Float, x4),
    arg(Type.Float, y4),
    arg(Type.Float, z4),
    arg(Type.Float, camX),
    arg(Type.Float, camY),
    arg(Type.Float, camZ),
    arg(Type.Int, p15),
    arg(Type.Int, p16),
    arg(Type.Int, p17)
  )
end

function MISC.ADD_STUNT_JUMP_ANGLED(x1, y1, z1, x2, y2, z2, radius1, x3, y3, z3, x4, y4, z4, radius2, camX, camY, camZ, p17, p18, p19)
  return native.invoke(
    Type.Int, 2175, false,
    arg(Type.Float, x1),
    arg(Type.Float, y1),
    arg(Type.Float, z1),
    arg(Type.Float, x2),
    arg(Type.Float, y2),
    arg(Type.Float, z2),
    arg(Type.Float, radius1),
    arg(Type.Float, x3),
    arg(Type.Float, y3),
    arg(Type.Float, z3),
    arg(Type.Float, x4),
    arg(Type.Float, y4),
    arg(Type.Float, z4),
    arg(Type.Float, radius2),
    arg(Type.Float, camX),
    arg(Type.Float, camY),
    arg(Type.Float, camZ),
    arg(Type.Int, p17),
    arg(Type.Int, p18),
    arg(Type.Int, p19)
  )
end

function MISC.TOGGLE_SHOW_OPTIONAL_STUNT_JUMP_CAMERA(toggle)
  native.invoke(
    Type.Void, 2176, false,
    arg(Type.Bool, toggle)
  )
end

function MISC.DELETE_STUNT_JUMP(p0)
  native.invoke(
    Type.Void, 2177, false,
    arg(Type.Int, p0)
  )
end

function MISC.ENABLE_STUNT_JUMP_SET(p0)
  native.invoke(
    Type.Void, 2178, false,
    arg(Type.Int, p0)
  )
end

function MISC.DISABLE_STUNT_JUMP_SET(p0)
  native.invoke(
    Type.Void, 2179, false,
    arg(Type.Int, p0)
  )
end

function MISC.SET_STUNT_JUMPS_CAN_TRIGGER(toggle)
  native.invoke(
    Type.Void, 2180, false,
    arg(Type.Bool, toggle)
  )
end

function MISC.IS_STUNT_JUMP_IN_PROGRESS()
  return native.invoke(
    Type.Bool, 2181, false
  )
end

function MISC.IS_STUNT_JUMP_MESSAGE_SHOWING()
  return native.invoke(
    Type.Bool, 2182, false
  )
end

function MISC.GET_NUM_SUCCESSFUL_STUNT_JUMPS()
  return native.invoke(
    Type.Int, 2183, false
  )
end

function MISC.GET_TOTAL_SUCCESSFUL_STUNT_JUMPS()
  return native.invoke(
    Type.Int, 2184, false
  )
end

function MISC.CANCEL_STUNT_JUMP()
  native.invoke(
    Type.Void, 2185, false
  )
end

function MISC.SET_GAME_PAUSED(toggle)
  native.invoke(
    Type.Void, 2186, false,
    arg(Type.Bool, toggle)
  )
end

function MISC.SET_THIS_SCRIPT_CAN_BE_PAUSED(toggle)
  native.invoke(
    Type.Void, 2187, false,
    arg(Type.Bool, toggle)
  )
end

function MISC.SET_THIS_SCRIPT_CAN_REMOVE_BLIPS_CREATED_BY_ANY_SCRIPT(toggle)
  native.invoke(
    Type.Void, 2188, false,
    arg(Type.Bool, toggle)
  )
end

function MISC.HAS_CHEAT_WITH_HASH_BEEN_ACTIVATED(hash, amount)
  return native.invoke(
    Type.Bool, 2189, false,
    arg(Type.Hash, hash),
    arg(Type.Int, amount)
  )
end

function MISC.HAS_PC_CHEAT_WITH_HASH_BEEN_ACTIVATED(hash)
  return native.invoke(
    Type.Bool, 2190, false,
    arg(Type.Hash, hash)
  )
end

function MISC.OVERRIDE_FREEZE_FLAGS(p0)
  native.invoke(
    Type.Void, 2191, false,
    arg(Type.Bool, p0)
  )
end

function MISC.SET_INSTANCE_PRIORITY_MODE(p0)
  native.invoke(
    Type.Void, 2192, false,
    arg(Type.Int, p0)
  )
end

function MISC.SET_INSTANCE_PRIORITY_HINT(flag)
  native.invoke(
    Type.Void, 2193, false,
    arg(Type.Int, flag)
  )
end

function MISC.IS_FRONTEND_FADING()
  return native.invoke(
    Type.Bool, 2194, false
  )
end

function MISC.POPULATE_NOW()
  native.invoke(
    Type.Void, 2195, false
  )
end

function MISC.GET_INDEX_OF_CURRENT_LEVEL()
  return native.invoke(
    Type.Int, 2196, false
  )
end

function MISC.SET_GRAVITY_LEVEL(level)
  native.invoke(
    Type.Void, 2197, false,
    arg(Type.Int, level)
  )
end

function MISC.START_SAVE_DATA(p0, p1, p2)
  native.invoke(
    Type.Void, 2198, false,
    ref(Type.Any, p0),
    arg(Type.Any, p1),
    arg(Type.Bool, p2)
  )
end

function MISC.STOP_SAVE_DATA()
  native.invoke(
    Type.Void, 2199, false
  )
end

function MISC.GET_SIZE_OF_SAVE_DATA(p0)
  return native.invoke(
    Type.Int, 2200, false,
    arg(Type.Bool, p0)
  )
end

function MISC.REGISTER_INT_TO_SAVE(p0, name)
  native.invoke(
    Type.Void, 2201, false,
    ref(Type.Any, p0),
    arg(Type.String, name)
  )
end

function MISC.REGISTER_INT64_TO_SAVE(p0, name)
  native.invoke(
    Type.Void, 2202, false,
    ref(Type.Any, p0),
    arg(Type.String, name)
  )
end

function MISC.REGISTER_ENUM_TO_SAVE(p0, name)
  native.invoke(
    Type.Void, 2203, false,
    ref(Type.Any, p0),
    arg(Type.String, name)
  )
end

function MISC.REGISTER_FLOAT_TO_SAVE(p0, name)
  native.invoke(
    Type.Void, 2204, false,
    ref(Type.Any, p0),
    arg(Type.String, name)
  )
end

function MISC.REGISTER_BOOL_TO_SAVE(p0, name)
  native.invoke(
    Type.Void, 2205, false,
    ref(Type.Any, p0),
    arg(Type.String, name)
  )
end

function MISC.REGISTER_TEXT_LABEL_TO_SAVE(p0, name)
  native.invoke(
    Type.Void, 2206, false,
    ref(Type.Any, p0),
    arg(Type.String, name)
  )
end

function MISC.REGISTER_TEXT_LABEL_15_TO_SAVE(p0, name)
  native.invoke(
    Type.Void, 2207, false,
    ref(Type.Any, p0),
    arg(Type.String, name)
  )
end

function MISC.REGISTER_TEXT_LABEL_23_TO_SAVE(p0, name)
  native.invoke(
    Type.Void, 2208, false,
    ref(Type.Any, p0),
    arg(Type.String, name)
  )
end

function MISC.REGISTER_TEXT_LABEL_31_TO_SAVE(p0, name)
  native.invoke(
    Type.Void, 2209, false,
    ref(Type.Any, p0),
    arg(Type.String, name)
  )
end

function MISC.REGISTER_TEXT_LABEL_63_TO_SAVE(p0, name)
  native.invoke(
    Type.Void, 2210, false,
    ref(Type.Any, p0),
    arg(Type.String, name)
  )
end

function MISC.START_SAVE_STRUCT_WITH_SIZE(p0, size, structName)
  native.invoke(
    Type.Void, 2211, false,
    ref(Type.Any, p0),
    arg(Type.Int, size),
    arg(Type.String, structName)
  )
end

function MISC.STOP_SAVE_STRUCT()
  native.invoke(
    Type.Void, 2212, false
  )
end

function MISC.START_SAVE_ARRAY_WITH_SIZE(p0, size, arrayName)
  native.invoke(
    Type.Void, 2213, false,
    ref(Type.Any, p0),
    arg(Type.Int, size),
    arg(Type.String, arrayName)
  )
end

function MISC.STOP_SAVE_ARRAY()
  native.invoke(
    Type.Void, 2214, false
  )
end

function MISC.COPY_SCRIPT_STRUCT(dst, src, size)
  native.invoke(
    Type.Void, 2215, false,
    ref(Type.Any, dst),
    ref(Type.Any, src),
    arg(Type.Int, size)
  )
end

function MISC.ENABLE_DISPATCH_SERVICE(dispatchService, toggle)
  native.invoke(
    Type.Void, 2216, false,
    arg(Type.Int, dispatchService),
    arg(Type.Bool, toggle)
  )
end

function MISC.BLOCK_DISPATCH_SERVICE_RESOURCE_CREATION(dispatchService, toggle)
  native.invoke(
    Type.Void, 2217, false,
    arg(Type.Int, dispatchService),
    arg(Type.Bool, toggle)
  )
end

function MISC.GET_NUMBER_RESOURCES_ALLOCATED_TO_WANTED_LEVEL(dispatchService)
  return native.invoke(
    Type.Int, 2218, false,
    arg(Type.Int, dispatchService)
  )
end

function MISC.CREATE_INCIDENT(dispatchService, x, y, z, numUnits, radius, outIncidentID, p7, p8)
  return native.invoke(
    Type.Bool, 2219, false,
    arg(Type.Int, dispatchService),
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, z),
    arg(Type.Int, numUnits),
    arg(Type.Float, radius),
    ref(Type.Int, outIncidentID),
    arg(Type.Any, p7),
    arg(Type.Any, p8)
  )
end

function MISC.CREATE_INCIDENT_WITH_ENTITY(dispatchService, ped, numUnits, radius, outIncidentID, p5, p6)
  return native.invoke(
    Type.Bool, 2220, false,
    arg(Type.Int, dispatchService),
    arg(Type.Ped, ped),
    arg(Type.Int, numUnits),
    arg(Type.Float, radius),
    ref(Type.Int, outIncidentID),
    arg(Type.Any, p5),
    arg(Type.Any, p6)
  )
end

function MISC.DELETE_INCIDENT(incidentId)
  native.invoke(
    Type.Void, 2221, false,
    arg(Type.Int, incidentId)
  )
end

function MISC.IS_INCIDENT_VALID(incidentId)
  return native.invoke(
    Type.Bool, 2222, false,
    arg(Type.Int, incidentId)
  )
end

function MISC.SET_INCIDENT_REQUESTED_UNITS(incidentId, dispatchService, numUnits)
  native.invoke(
    Type.Void, 2223, false,
    arg(Type.Int, incidentId),
    arg(Type.Int, dispatchService),
    arg(Type.Int, numUnits)
  )
end

function MISC.SET_IDEAL_SPAWN_DISTANCE_FOR_INCIDENT(incidentId, p1)
  native.invoke(
    Type.Void, 2224, false,
    arg(Type.Int, incidentId),
    arg(Type.Float, p1)
  )
end

function MISC.FIND_SPAWN_POINT_IN_DIRECTION(posX, posY, posZ, fwdVecX, fwdVecY, fwdVecZ, distance, spawnPoint)
  return native.invoke(
    Type.Bool, 2225, true,
    arg(Type.Float, posX),
    arg(Type.Float, posY),
    arg(Type.Float, posZ),
    arg(Type.Float, fwdVecX),
    arg(Type.Float, fwdVecY),
    arg(Type.Float, fwdVecZ),
    arg(Type.Float, distance),
    ref(Type.Vector3, spawnPoint)
  )
end

function MISC.ADD_POP_MULTIPLIER_AREA(x1, y1, z1, x2, y2, z2, p6, p7, p8, p9)
  return native.invoke(
    Type.Int, 2226, false,
    arg(Type.Float, x1),
    arg(Type.Float, y1),
    arg(Type.Float, z1),
    arg(Type.Float, x2),
    arg(Type.Float, y2),
    arg(Type.Float, z2),
    arg(Type.Float, p6),
    arg(Type.Float, p7),
    arg(Type.Bool, p8),
    arg(Type.Bool, p9)
  )
end

function MISC.DOES_POP_MULTIPLIER_AREA_EXIST(id)
  return native.invoke(
    Type.Bool, 2227, false,
    arg(Type.Int, id)
  )
end

function MISC.REMOVE_POP_MULTIPLIER_AREA(id, p1)
  native.invoke(
    Type.Void, 2228, false,
    arg(Type.Int, id),
    arg(Type.Bool, p1)
  )
end

function MISC.IS_POP_MULTIPLIER_AREA_NETWORKED(id)
  return native.invoke(
    Type.Bool, 2229, false,
    arg(Type.Int, id)
  )
end

function MISC.ADD_POP_MULTIPLIER_SPHERE(x, y, z, radius, pedMultiplier, vehicleMultiplier, p6, p7)
  return native.invoke(
    Type.Int, 2230, false,
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, z),
    arg(Type.Float, radius),
    arg(Type.Float, pedMultiplier),
    arg(Type.Float, vehicleMultiplier),
    arg(Type.Bool, p6),
    arg(Type.Bool, p7)
  )
end

function MISC.DOES_POP_MULTIPLIER_SPHERE_EXIST(id)
  return native.invoke(
    Type.Bool, 2231, false,
    arg(Type.Int, id)
  )
end

function MISC.REMOVE_POP_MULTIPLIER_SPHERE(id, p1)
  native.invoke(
    Type.Void, 2232, false,
    arg(Type.Int, id),
    arg(Type.Bool, p1)
  )
end

function MISC.ENABLE_TENNIS_MODE(ped, toggle, p2)
  native.invoke(
    Type.Void, 2233, false,
    arg(Type.Ped, ped),
    arg(Type.Bool, toggle),
    arg(Type.Bool, p2)
  )
end

function MISC.IS_TENNIS_MODE(ped)
  return native.invoke(
    Type.Bool, 2234, false,
    arg(Type.Ped, ped)
  )
end

function MISC.PLAY_TENNIS_SWING_ANIM(ped, animDict, animName, p3, p4, p5)
  native.invoke(
    Type.Void, 2235, false,
    arg(Type.Ped, ped),
    arg(Type.String, animDict),
    arg(Type.String, animName),
    arg(Type.Float, p3),
    arg(Type.Float, p4),
    arg(Type.Bool, p5)
  )
end

function MISC.GET_TENNIS_SWING_ANIM_COMPLETE(ped)
  return native.invoke(
    Type.Bool, 2236, false,
    arg(Type.Ped, ped)
  )
end

function MISC.GET_TENNIS_SWING_ANIM_CAN_BE_INTERRUPTED(ped)
  return native.invoke(
    Type.Bool, 2237, false,
    arg(Type.Ped, ped)
  )
end

function MISC.GET_TENNIS_SWING_ANIM_SWUNG(ped)
  return native.invoke(
    Type.Bool, 2238, false,
    arg(Type.Ped, ped)
  )
end

function MISC.PLAY_TENNIS_DIVE_ANIM(ped, p1, p2, p3, p4, p5)
  native.invoke(
    Type.Void, 2239, false,
    arg(Type.Ped, ped),
    arg(Type.Int, p1),
    arg(Type.Float, p2),
    arg(Type.Float, p3),
    arg(Type.Float, p4),
    arg(Type.Bool, p5)
  )
end

function MISC.SET_TENNIS_MOVE_NETWORK_SIGNAL_FLOAT(ped, p1, p2)
  native.invoke(
    Type.Void, 2240, false,
    arg(Type.Ped, ped),
    arg(Type.String, p1),
    arg(Type.Float, p2)
  )
end

function MISC.RESET_DISPATCH_SPAWN_LOCATION()
  native.invoke(
    Type.Void, 2241, false
  )
end

function MISC.SET_DISPATCH_SPAWN_LOCATION(x, y, z)
  native.invoke(
    Type.Void, 2242, false,
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, z)
  )
end

function MISC.RESET_DISPATCH_IDEAL_SPAWN_DISTANCE()
  native.invoke(
    Type.Void, 2243, false
  )
end

function MISC.SET_DISPATCH_IDEAL_SPAWN_DISTANCE(distance)
  native.invoke(
    Type.Void, 2244, false,
    arg(Type.Float, distance)
  )
end

function MISC.RESET_DISPATCH_TIME_BETWEEN_SPAWN_ATTEMPTS(p0)
  native.invoke(
    Type.Void, 2245, false,
    arg(Type.Any, p0)
  )
end

function MISC.SET_DISPATCH_TIME_BETWEEN_SPAWN_ATTEMPTS(p0, p1)
  native.invoke(
    Type.Void, 2246, false,
    arg(Type.Any, p0),
    arg(Type.Float, p1)
  )
end

function MISC.SET_DISPATCH_TIME_BETWEEN_SPAWN_ATTEMPTS_MULTIPLIER(p0, p1)
  native.invoke(
    Type.Void, 2247, false,
    arg(Type.Any, p0),
    arg(Type.Float, p1)
  )
end

function MISC.ADD_DISPATCH_SPAWN_ANGLED_BLOCKING_AREA(x1, y1, z1, x2, y2, z2, width)
  return native.invoke(
    Type.Int, 2248, false,
    arg(Type.Float, x1),
    arg(Type.Float, y1),
    arg(Type.Float, z1),
    arg(Type.Float, x2),
    arg(Type.Float, y2),
    arg(Type.Float, z2),
    arg(Type.Float, width)
  )
end

function MISC.ADD_DISPATCH_SPAWN_SPHERE_BLOCKING_AREA(x1, y1, x2, y2)
  return native.invoke(
    Type.Int, 2249, false,
    arg(Type.Float, x1),
    arg(Type.Float, y1),
    arg(Type.Float, x2),
    arg(Type.Float, y2)
  )
end

function MISC.REMOVE_DISPATCH_SPAWN_BLOCKING_AREA(p0)
  native.invoke(
    Type.Void, 2250, false,
    arg(Type.Int, p0)
  )
end

function MISC.RESET_DISPATCH_SPAWN_BLOCKING_AREAS()
  native.invoke(
    Type.Void, 2251, false
  )
end

function MISC.RESET_WANTED_RESPONSE_NUM_PEDS_TO_SPAWN()
  native.invoke(
    Type.Void, 2252, false
  )
end

function MISC.SET_WANTED_RESPONSE_NUM_PEDS_TO_SPAWN(p0, p1)
  native.invoke(
    Type.Void, 2253, false,
    arg(Type.Int, p0),
    arg(Type.Int, p1)
  )
end

function MISC.ADD_TACTICAL_NAV_MESH_POINT(x, y, z)
  native.invoke(
    Type.Void, 2254, false,
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, z)
  )
end

function MISC.CLEAR_TACTICAL_NAV_MESH_POINTS()
  native.invoke(
    Type.Void, 2255, false
  )
end

function MISC.SET_RIOT_MODE_ENABLED(toggle)
  native.invoke(
    Type.Void, 2256, false,
    arg(Type.Bool, toggle)
  )
end

function MISC.DISPLAY_ONSCREEN_KEYBOARD_WITH_LONGER_INITIAL_STRING(p0, windowTitle, p2, defaultText, defaultConcat1, defaultConcat2, defaultConcat3, defaultConcat4, defaultConcat5, defaultConcat6, defaultConcat7, maxInputLength)
  native.invoke(
    Type.Void, 2257, false,
    arg(Type.Int, p0),
    arg(Type.String, windowTitle),
    ref(Type.Any, p2),
    arg(Type.String, defaultText),
    arg(Type.String, defaultConcat1),
    arg(Type.String, defaultConcat2),
    arg(Type.String, defaultConcat3),
    arg(Type.String, defaultConcat4),
    arg(Type.String, defaultConcat5),
    arg(Type.String, defaultConcat6),
    arg(Type.String, defaultConcat7),
    arg(Type.Int, maxInputLength)
  )
end

function MISC.DISPLAY_ONSCREEN_KEYBOARD(p0, windowTitle, p2, defaultText, defaultConcat1, defaultConcat2, defaultConcat3, maxInputLength)
  native.invoke(
    Type.Void, 2258, false,
    arg(Type.Int, p0),
    arg(Type.String, windowTitle),
    arg(Type.String, p2),
    arg(Type.String, defaultText),
    arg(Type.String, defaultConcat1),
    arg(Type.String, defaultConcat2),
    arg(Type.String, defaultConcat3),
    arg(Type.Int, maxInputLength)
  )
end

function MISC.UPDATE_ONSCREEN_KEYBOARD()
  return native.invoke(
    Type.Int, 2259, false
  )
end

function MISC.GET_ONSCREEN_KEYBOARD_RESULT()
  return native.invoke(
    Type.String, 2260, false
  )
end

function MISC.CANCEL_ONSCREEN_KEYBOARD()
  native.invoke(
    Type.Void, 2261, false
  )
end

function MISC.NEXT_ONSCREEN_KEYBOARD_RESULT_WILL_DISPLAY_USING_THESE_FONTS(p0)
  native.invoke(
    Type.Void, 2262, false,
    arg(Type.Int, p0)
  )
end

function MISC.ACTION_MANAGER_ENABLE_ACTION(hash, enable)
  native.invoke(
    Type.Void, 2263, false,
    arg(Type.Hash, hash),
    arg(Type.Bool, enable)
  )
end

function MISC.GET_REAL_WORLD_TIME()
  return native.invoke(
    Type.Int, 2264, false
  )
end

function MISC.SUPRESS_RANDOM_EVENT_THIS_FRAME(eventType, suppress)
  native.invoke(
    Type.Void, 2265, false,
    arg(Type.Int, eventType),
    arg(Type.Bool, suppress)
  )
end

function MISC.SET_EXPLOSIVE_AMMO_THIS_FRAME(player)
  native.invoke(
    Type.Void, 2266, false,
    arg(Type.Player, player)
  )
end

function MISC.SET_FIRE_AMMO_THIS_FRAME(player)
  native.invoke(
    Type.Void, 2267, false,
    arg(Type.Player, player)
  )
end

function MISC.SET_EXPLOSIVE_MELEE_THIS_FRAME(player)
  native.invoke(
    Type.Void, 2268, false,
    arg(Type.Player, player)
  )
end

function MISC.SET_SUPER_JUMP_THIS_FRAME(player)
  native.invoke(
    Type.Void, 2269, false,
    arg(Type.Player, player)
  )
end

function MISC.SET_BEAST_JUMP_THIS_FRAME(player)
  native.invoke(
    Type.Void, 2270, false,
    arg(Type.Player, player)
  )
end

function MISC.SET_FORCED_JUMP_THIS_FRAME(player)
  native.invoke(
    Type.Void, 2271, false,
    arg(Type.Player, player)
  )
end

function MISC.HAS_GAME_INSTALLED_THIS_SESSION()
  return native.invoke(
    Type.Bool, 2272, false
  )
end

function MISC.SET_TICKER_JOHNMARSTON_IS_DONE()
  native.invoke(
    Type.Void, 2273, false
  )
end

function MISC.ARE_PROFILE_SETTINGS_VALID()
  return native.invoke(
    Type.Bool, 2274, false
  )
end

function MISC.PREVENT_ARREST_STATE_THIS_FRAME()
  native.invoke(
    Type.Void, 2275, false
  )
end

function MISC.FORCE_GAME_STATE_PLAYING()
  native.invoke(
    Type.Void, 2276, false
  )
end

function MISC.SCRIPT_RACE_INIT(p0, p1, p2, p3)
  native.invoke(
    Type.Void, 2277, false,
    arg(Type.Int, p0),
    arg(Type.Int, p1),
    arg(Type.Any, p2),
    arg(Type.Any, p3)
  )
end

function MISC.SCRIPT_RACE_SHUTDOWN()
  native.invoke(
    Type.Void, 2278, false
  )
end

function MISC.SCRIPT_RACE_PLAYER_HIT_CHECKPOINT(player, p1, p2, p3)
  native.invoke(
    Type.Void, 2279, false,
    arg(Type.Player, player),
    arg(Type.Any, p1),
    arg(Type.Any, p2),
    arg(Type.Any, p3)
  )
end

function MISC.SCRIPT_RACE_GET_PLAYER_SPLIT_TIME(player, p1, p2)
  return native.invoke(
    Type.Bool, 2280, false,
    arg(Type.Player, player),
    ref(Type.Int, p1),
    ref(Type.Int, p2)
  )
end

function MISC.START_END_USER_BENCHMARK()
  native.invoke(
    Type.Void, 2281, false
  )
end

function MISC.STOP_END_USER_BENCHMARK()
  native.invoke(
    Type.Void, 2282, false
  )
end

function MISC.RESET_END_USER_BENCHMARK()
  native.invoke(
    Type.Void, 2283, false
  )
end

function MISC.SAVE_END_USER_BENCHMARK()
  native.invoke(
    Type.Void, 2284, false
  )
end

function MISC.UI_STARTED_END_USER_BENCHMARK()
  return native.invoke(
    Type.Bool, 2285, false
  )
end

function MISC.LANDING_SCREEN_STARTED_END_USER_BENCHMARK()
  return native.invoke(
    Type.Bool, 2286, false
  )
end

function MISC.IS_COMMANDLINE_END_USER_BENCHMARK()
  return native.invoke(
    Type.Bool, 2287, false
  )
end

function MISC.GET_BENCHMARK_ITERATIONS()
  return native.invoke(
    Type.Int, 2288, false
  )
end

function MISC.GET_BENCHMARK_PASS()
  return native.invoke(
    Type.Int, 2289, false
  )
end

function MISC.RESTART_GAME()
  native.invoke(
    Type.Void, 2290, false
  )
end

function MISC.QUIT_GAME()
  native.invoke(
    Type.Void, 2291, false
  )
end

function MISC.HAS_ASYNC_INSTALL_FINISHED()
  return native.invoke(
    Type.Bool, 2292, false
  )
end

function MISC.CLEANUP_ASYNC_INSTALL()
  native.invoke(
    Type.Void, 2293, false
  )
end

function MISC.PLM_IS_IN_CONSTRAINED_MODE()
  return native.invoke(
    Type.Bool, 2294, false
  )
end

function MISC.PLM_GET_CONSTRAINED_DURATION_MS()
  return native.invoke(
    Type.Int, 2295, false
  )
end

function MISC.SET_PLAYER_IS_IN_ANIMAL_FORM(toggle)
  native.invoke(
    Type.Void, 2296, false,
    arg(Type.Bool, toggle)
  )
end

function MISC.GET_IS_PLAYER_IN_ANIMAL_FORM()
  return native.invoke(
    Type.Bool, 2297, false
  )
end

function MISC.SET_PLAYER_IS_REPEATING_A_MISSION(toggle)
  native.invoke(
    Type.Void, 2298, false,
    arg(Type.Bool, toggle)
  )
end

function MISC.DISABLE_SCREEN_DIMMING_THIS_FRAME()
  native.invoke(
    Type.Void, 2299, false
  )
end

function MISC.GET_CITY_DENSITY()
  return native.invoke(
    Type.Float, 2300, false
  )
end

function MISC.USE_ACTIVE_CAMERA_FOR_TIMESLICING_CENTRE()
  native.invoke(
    Type.Void, 2301, false
  )
end

function MISC.SET_CONTENT_ID_INDEX(contentId, index)
  native.invoke(
    Type.Void, 2302, false,
    arg(Type.Hash, contentId),
    arg(Type.Int, index)
  )
end

function MISC.GET_CONTENT_ID_INDEX(contentId)
  return native.invoke(
    Type.Int, 2303, false,
    arg(Type.Hash, contentId)
  )
end

function MISC._SET_CONTENT_PROP_TYPE(model, type)
  native.invoke(
    Type.Void, 2304, false,
    arg(Type.Hash, model),
    arg(Type.Int, type)
  )
end

function MISC._GET_CONTENT_PROP_TYPE(model)
  return native.invoke(
    Type.Int, 2305, false,
    arg(Type.Hash, model)
  )
end


MOBILE = {}

function MOBILE.CREATE_MOBILE_PHONE(phoneType)
  native.invoke(
    Type.Void, 2306, false,
    arg(Type.Int, phoneType)
  )
end

function MOBILE.DESTROY_MOBILE_PHONE()
  native.invoke(
    Type.Void, 2307, false
  )
end

function MOBILE.SET_MOBILE_PHONE_SCALE(scale)
  native.invoke(
    Type.Void, 2308, false,
    arg(Type.Float, scale)
  )
end

function MOBILE.SET_MOBILE_PHONE_ROTATION(rotX, rotY, rotZ, p3)
  native.invoke(
    Type.Void, 2309, false,
    arg(Type.Float, rotX),
    arg(Type.Float, rotY),
    arg(Type.Float, rotZ),
    arg(Type.Any, p3)
  )
end

function MOBILE.GET_MOBILE_PHONE_ROTATION(rotation, p1)
  native.invoke(
    Type.Void, 2310, true,
    ref(Type.Vector3, rotation),
    arg(Type.Vehicle, p1)
  )
end

function MOBILE.SET_MOBILE_PHONE_POSITION(posX, posY, posZ)
  native.invoke(
    Type.Void, 2311, false,
    arg(Type.Float, posX),
    arg(Type.Float, posY),
    arg(Type.Float, posZ)
  )
end

function MOBILE.GET_MOBILE_PHONE_POSITION(position)
  native.invoke(
    Type.Void, 2312, true,
    ref(Type.Vector3, position)
  )
end

function MOBILE.SCRIPT_IS_MOVING_MOBILE_PHONE_OFFSCREEN(toggle)
  native.invoke(
    Type.Void, 2313, false,
    arg(Type.Bool, toggle)
  )
end

function MOBILE.CAN_PHONE_BE_SEEN_ON_SCREEN()
  return native.invoke(
    Type.Bool, 2314, false
  )
end

function MOBILE.SET_MOBILE_PHONE_DOF_STATE(toggle)
  native.invoke(
    Type.Void, 2315, false,
    arg(Type.Bool, toggle)
  )
end

function MOBILE.CELL_SET_INPUT(direction)
  native.invoke(
    Type.Void, 2316, false,
    arg(Type.Int, direction)
  )
end

function MOBILE.CELL_HORIZONTAL_MODE_TOGGLE(toggle)
  native.invoke(
    Type.Void, 2317, false,
    arg(Type.Bool, toggle)
  )
end

function MOBILE.CELL_CAM_ACTIVATE(p0, p1)
  native.invoke(
    Type.Void, 2318, false,
    arg(Type.Bool, p0),
    arg(Type.Bool, p1)
  )
end

function MOBILE.CELL_CAM_ACTIVATE_SELFIE_MODE(toggle)
  native.invoke(
    Type.Void, 2319, false,
    arg(Type.Bool, toggle)
  )
end

function MOBILE.CELL_CAM_ACTIVATE_SHALLOW_DOF_MODE(toggle)
  native.invoke(
    Type.Void, 2320, false,
    arg(Type.Bool, toggle)
  )
end

function MOBILE.CELL_CAM_SET_SELFIE_MODE_SIDE_OFFSET_SCALING(p0)
  native.invoke(
    Type.Void, 2321, false,
    arg(Type.Float, p0)
  )
end

function MOBILE.CELL_CAM_SET_SELFIE_MODE_HORZ_PAN_OFFSET(horizontalPan)
  native.invoke(
    Type.Void, 2322, false,
    arg(Type.Float, horizontalPan)
  )
end

function MOBILE.CELL_CAM_SET_SELFIE_MODE_VERT_PAN_OFFSET(vertPan)
  native.invoke(
    Type.Void, 2323, false,
    arg(Type.Float, vertPan)
  )
end

function MOBILE.CELL_CAM_SET_SELFIE_MODE_ROLL_OFFSET(roll)
  native.invoke(
    Type.Void, 2324, false,
    arg(Type.Float, roll)
  )
end

function MOBILE.CELL_CAM_SET_SELFIE_MODE_DISTANCE_SCALING(distanceScaling)
  native.invoke(
    Type.Void, 2325, false,
    arg(Type.Float, distanceScaling)
  )
end

function MOBILE.CELL_CAM_SET_SELFIE_MODE_HEAD_YAW_OFFSET(yaw)
  native.invoke(
    Type.Void, 2326, false,
    arg(Type.Float, yaw)
  )
end

function MOBILE.CELL_CAM_SET_SELFIE_MODE_HEAD_ROLL_OFFSET(roll)
  native.invoke(
    Type.Void, 2327, false,
    arg(Type.Float, roll)
  )
end

function MOBILE.CELL_CAM_SET_SELFIE_MODE_HEAD_PITCH_OFFSET(pitch)
  native.invoke(
    Type.Void, 2328, false,
    arg(Type.Float, pitch)
  )
end

function MOBILE.CELL_CAM_IS_CHAR_VISIBLE_NO_FACE_CHECK(entity)
  return native.invoke(
    Type.Bool, 2329, false,
    arg(Type.Entity, entity)
  )
end

function MOBILE.GET_MOBILE_PHONE_RENDER_ID(renderId)
  native.invoke(
    Type.Void, 2330, false,
    ref(Type.Int, renderId)
  )
end


MONEY = {}

function MONEY.NETWORK_INITIALIZE_CASH(wallet, bank)
  native.invoke(
    Type.Void, 2331, false,
    arg(Type.Int, wallet),
    arg(Type.Int, bank)
  )
end

function MONEY.NETWORK_DELETE_CHARACTER(characterSlot, p1, p2)
  native.invoke(
    Type.Void, 2332, false,
    arg(Type.Int, characterSlot),
    arg(Type.Bool, p1),
    arg(Type.Bool, p2)
  )
end

function MONEY.NETWORK_MANUAL_DELETE_CHARACTER(characterSlot)
  native.invoke(
    Type.Void, 2333, false,
    arg(Type.Int, characterSlot)
  )
end

function MONEY.NETWORK_GET_PLAYER_IS_HIGH_EARNER()
  return native.invoke(
    Type.Bool, 2334, false
  )
end

function MONEY.NETWORK_CLEAR_CHARACTER_WALLET(characterSlot)
  native.invoke(
    Type.Void, 2335, false,
    arg(Type.Int, characterSlot)
  )
end

function MONEY.NETWORK_GIVE_PLAYER_JOBSHARE_CASH(amount, gamerHandle)
  native.invoke(
    Type.Void, 2336, false,
    arg(Type.Int, amount),
    ref(Type.Any, gamerHandle)
  )
end

function MONEY.NETWORK_RECEIVE_PLAYER_JOBSHARE_CASH(value, gamerHandle)
  native.invoke(
    Type.Void, 2337, false,
    arg(Type.Int, value),
    ref(Type.Any, gamerHandle)
  )
end

function MONEY.NETWORK_CAN_SHARE_JOB_CASH()
  return native.invoke(
    Type.Bool, 2338, false
  )
end

function MONEY.NETWORK_REFUND_CASH(index, context, reason, p3)
  native.invoke(
    Type.Void, 2339, false,
    arg(Type.Int, index),
    arg(Type.String, context),
    arg(Type.String, reason),
    arg(Type.Bool, p3)
  )
end

function MONEY.NETWORK_DEDUCT_CASH(amount, p1, p2, p3, p4, p5)
  native.invoke(
    Type.Void, 2340, false,
    arg(Type.Int, amount),
    arg(Type.String, p1),
    arg(Type.String, p2),
    arg(Type.Bool, p3),
    arg(Type.Bool, p4),
    arg(Type.Bool, p5)
  )
end

function MONEY.NETWORK_MONEY_CAN_BET(amount, p1, p2)
  return native.invoke(
    Type.Bool, 2341, false,
    arg(Type.Int, amount),
    arg(Type.Bool, p1),
    arg(Type.Bool, p2)
  )
end

function MONEY.NETWORK_CAN_BET(amount)
  return native.invoke(
    Type.Bool, 2342, false,
    arg(Type.Int, amount)
  )
end

function MONEY.NETWORK_CASINO_CAN_BET(hash)
  return native.invoke(
    Type.Bool, 2343, false,
    arg(Type.Hash, hash)
  )
end

function MONEY.NETWORK_CASINO_CAN_BET_PVC()
  return native.invoke(
    Type.Bool, 2344, false
  )
end

function MONEY.NETWORK_CASINO_CAN_BET_AMOUNT(p0)
  return native.invoke(
    Type.Bool, 2345, false,
    arg(Type.Any, p0)
  )
end

function MONEY.NETWORK_CASINO_CAN_BUY_CHIPS_PVC()
  return native.invoke(
    Type.Bool, 2346, false
  )
end

function MONEY.NETWORK_CASINO_BUY_CHIPS(p0, p1)
  return native.invoke(
    Type.Bool, 2347, false,
    arg(Type.Int, p0),
    arg(Type.Int, p1)
  )
end

function MONEY.NETWORK_CASINO_SELL_CHIPS(p0, p1)
  return native.invoke(
    Type.Bool, 2348, false,
    arg(Type.Int, p0),
    arg(Type.Int, p1)
  )
end

function MONEY.NETWORK_DEFER_CASH_TRANSACTIONS_UNTIL_SHOP_SAVE()
  native.invoke(
    Type.Void, 2349, false
  )
end

function MONEY.CAN_PAY_AMOUNT_TO_BOSS(p0, p1, amount, p3)
  return native.invoke(
    Type.Bool, 2350, false,
    arg(Type.Int, p0),
    arg(Type.Int, p1),
    arg(Type.Int, amount),
    ref(Type.Int, p3)
  )
end

function MONEY.NETWORK_EARN_FROM_PICKUP(amount)
  native.invoke(
    Type.Void, 2351, false,
    arg(Type.Int, amount)
  )
end

function MONEY.NETWORK_EARN_FROM_CASHING_OUT(amount)
  native.invoke(
    Type.Void, 2352, false,
    arg(Type.Int, amount)
  )
end

function MONEY.NETWORK_EARN_FROM_GANGATTACK_PICKUP(amount)
  native.invoke(
    Type.Void, 2353, false,
    arg(Type.Int, amount)
  )
end

function MONEY.NETWORK_EARN_ASSASSINATE_TARGET_KILLED(amount)
  native.invoke(
    Type.Void, 2354, false,
    arg(Type.Int, amount)
  )
end

function MONEY.NETWORK_EARN_FROM_ROB_ARMORED_CARS(amount)
  native.invoke(
    Type.Void, 2355, false,
    arg(Type.Int, amount)
  )
end

function MONEY.NETWORK_EARN_FROM_CRATE_DROP(amount)
  native.invoke(
    Type.Void, 2356, false,
    arg(Type.Int, amount)
  )
end

function MONEY.NETWORK_EARN_FROM_BETTING(amount, p1)
  native.invoke(
    Type.Void, 2357, false,
    arg(Type.Int, amount),
    arg(Type.String, p1)
  )
end

function MONEY.NETWORK_EARN_FROM_JOB(amount, p1)
  native.invoke(
    Type.Void, 2358, false,
    arg(Type.Int, amount),
    arg(Type.String, p1)
  )
end

function MONEY.NETWORK_EARN_FROM_JOBX2(amount, p1)
  native.invoke(
    Type.Void, 2359, false,
    arg(Type.Int, amount),
    arg(Type.String, p1)
  )
end

function MONEY.NETWORK_EARN_FROM_PREMIUM_JOB(amount, p1)
  native.invoke(
    Type.Void, 2360, false,
    arg(Type.Int, amount),
    arg(Type.String, p1)
  )
end

function MONEY.NETWORK_EARN_FROM_BEND_JOB(amount, heistHash)
  native.invoke(
    Type.Void, 2361, false,
    arg(Type.Int, amount),
    arg(Type.String, heistHash)
  )
end

function MONEY.NETWORK_EARN_FROM_CHALLENGE_WIN(p0, p1, p2)
  native.invoke(
    Type.Void, 2362, false,
    arg(Type.Any, p0),
    ref(Type.Any, p1),
    arg(Type.Bool, p2)
  )
end

function MONEY.NETWORK_EARN_FROM_BOUNTY(amount, gamerHandle, p2, p3)
  native.invoke(
    Type.Void, 2363, false,
    arg(Type.Int, amount),
    ref(Type.Any, gamerHandle),
    ref(Type.Any, p2),
    arg(Type.Any, p3)
  )
end

function MONEY.NETWORK_EARN_FROM_IMPORT_EXPORT(amount, modelHash)
  native.invoke(
    Type.Void, 2364, false,
    arg(Type.Int, amount),
    arg(Type.Hash, modelHash)
  )
end

function MONEY.NETWORK_EARN_FROM_HOLDUPS(amount)
  native.invoke(
    Type.Void, 2365, false,
    arg(Type.Int, amount)
  )
end

function MONEY.NETWORK_EARN_FROM_PROPERTY(amount, propertyName)
  native.invoke(
    Type.Void, 2366, false,
    arg(Type.Int, amount),
    arg(Type.Hash, propertyName)
  )
end

function MONEY.NETWORK_EARN_FROM_AI_TARGET_KILL(p0, p1)
  native.invoke(
    Type.Void, 2367, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1)
  )
end

function MONEY.NETWORK_EARN_FROM_NOT_BADSPORT(amount)
  native.invoke(
    Type.Void, 2368, false,
    arg(Type.Int, amount)
  )
end

function MONEY.NETWORK_EARN_FROM_VEHICLE(p0, p1, p2, p3, p4, p5, p6, p7)
  native.invoke(
    Type.Void, 2369, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1),
    arg(Type.Any, p2),
    arg(Type.Any, p3),
    arg(Type.Any, p4),
    arg(Type.Any, p5),
    arg(Type.Any, p6),
    arg(Type.Any, p7)
  )
end

function MONEY.NETWORK_EARN_FROM_PERSONAL_VEHICLE(p0, p1, p2, p3, p4, p5, p6, p7, p8)
  native.invoke(
    Type.Void, 2370, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1),
    arg(Type.Any, p2),
    arg(Type.Any, p3),
    arg(Type.Any, p4),
    arg(Type.Any, p5),
    arg(Type.Any, p6),
    arg(Type.Any, p7),
    arg(Type.Any, p8)
  )
end

function MONEY.NETWORK_EARN_FROM_DAILY_OBJECTIVES(amount, type, characterSlot)
  native.invoke(
    Type.Void, 2371, false,
    arg(Type.Int, amount),
    arg(Type.String, type),
    arg(Type.Int, characterSlot)
  )
end

function MONEY.NETWORK_EARN_FROM_AMBIENT_JOB(p0, p1, p2)
  native.invoke(
    Type.Void, 2372, false,
    arg(Type.Int, p0),
    arg(Type.String, p1),
    ref(Type.Any, p2)
  )
end

function MONEY.NETWORK_EARN_FROM_JOB_BONUS(p0, p1, p2)
  native.invoke(
    Type.Void, 2373, false,
    arg(Type.Any, p0),
    ref(Type.Any, p1),
    ref(Type.Any, p2)
  )
end

function MONEY.NETWORK_EARN_FROM_CRIMINAL_MASTERMIND(p0, p1, p2)
  native.invoke(
    Type.Void, 2374, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1),
    arg(Type.Any, p2)
  )
end

function MONEY.NETWORK_EARN_HEIST_AWARD(p0, p1, p2)
  native.invoke(
    Type.Void, 2375, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1),
    arg(Type.Any, p2)
  )
end

function MONEY.NETWORK_EARN_FIRST_TIME_BONUS(p0, p1, p2)
  native.invoke(
    Type.Void, 2376, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1),
    arg(Type.Any, p2)
  )
end

function MONEY.NETWORK_EARN_GOON(p0, p1, p2)
  native.invoke(
    Type.Void, 2377, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1),
    arg(Type.Any, p2)
  )
end

function MONEY.NETWORK_EARN_BOSS(p0, p1, p2)
  native.invoke(
    Type.Void, 2378, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1),
    arg(Type.Any, p2)
  )
end

function MONEY.NETWORK_EARN_AGENCY(p0, p1, p2, p3)
  native.invoke(
    Type.Void, 2379, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1),
    arg(Type.Any, p2),
    arg(Type.Any, p3)
  )
end

function MONEY.NETWORK_EARN_FROM_WAREHOUSE(amount, id)
  native.invoke(
    Type.Void, 2380, false,
    arg(Type.Int, amount),
    arg(Type.Int, id)
  )
end

function MONEY.NETWORK_EARN_FROM_CONTRABAND(amount, p1)
  native.invoke(
    Type.Void, 2381, false,
    arg(Type.Int, amount),
    arg(Type.Any, p1)
  )
end

function MONEY.NETWORK_EARN_FROM_DESTROYING_CONTRABAND(p0, p1, p2)
  native.invoke(
    Type.Void, 2382, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1),
    arg(Type.Any, p2)
  )
end

function MONEY.NETWORK_EARN_FROM_SMUGGLER_WORK(p0, p1, p2, p3, p4, p5)
  native.invoke(
    Type.Void, 2383, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1),
    arg(Type.Any, p2),
    arg(Type.Any, p3),
    arg(Type.Any, p4),
    arg(Type.Any, p5)
  )
end

function MONEY.NETWORK_EARN_FROM_HANGAR_TRADE(p0, p1)
  native.invoke(
    Type.Void, 2384, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1)
  )
end

function MONEY.NETWORK_EARN_PURCHASE_CLUB_HOUSE(p0, p1)
  native.invoke(
    Type.Void, 2385, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1)
  )
end

function MONEY.NETWORK_EARN_FROM_BUSINESS_PRODUCT(amount, p1, p2, p3)
  native.invoke(
    Type.Void, 2386, false,
    arg(Type.Int, amount),
    arg(Type.Any, p1),
    arg(Type.Any, p2),
    arg(Type.Any, p3)
  )
end

function MONEY.NETWORK_EARN_FROM_VEHICLE_EXPORT(amount, p1, p2)
  native.invoke(
    Type.Void, 2387, false,
    arg(Type.Int, amount),
    arg(Type.Any, p1),
    arg(Type.Any, p2)
  )
end

function MONEY.NETWORK_EARN_SMUGGLER_AGENCY(amount, p1, p2, p3)
  native.invoke(
    Type.Void, 2388, false,
    arg(Type.Int, amount),
    arg(Type.Any, p1),
    arg(Type.Any, p2),
    arg(Type.Any, p3)
  )
end

function MONEY.NETWORK_EARN_BOUNTY_HUNTER_REWARD(p0)
  native.invoke(
    Type.Void, 2389, false,
    arg(Type.Any, p0)
  )
end

function MONEY.NETWORK_EARN_FROM_BUSINESS_BATTLE(p0)
  native.invoke(
    Type.Void, 2390, false,
    arg(Type.Any, p0)
  )
end

function MONEY.NETWORK_EARN_FROM_CLUB_MANAGEMENT_PARTICIPATION(p0, p1)
  native.invoke(
    Type.Void, 2391, false,
    arg(Type.Any, p0),
    arg(Type.Int, p1)
  )
end

function MONEY.NETWORK_EARN_FROM_FMBB_PHONECALL_MISSION(p0)
  native.invoke(
    Type.Void, 2392, false,
    arg(Type.Any, p0)
  )
end

function MONEY.NETWORK_EARN_FROM_BUSINESS_HUB_SELL(p0, p1, p2)
  native.invoke(
    Type.Void, 2393, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1),
    arg(Type.Any, p2)
  )
end

function MONEY.NETWORK_EARN_FROM_FMBB_BOSS_WORK(p0)
  native.invoke(
    Type.Void, 2394, false,
    arg(Type.Any, p0)
  )
end

function MONEY.NETWORK_EARN_FMBB_WAGE_BONUS(p0)
  native.invoke(
    Type.Void, 2395, false,
    arg(Type.Any, p0)
  )
end

function MONEY.NETWORK_CAN_SPEND_MONEY(p0, p1, p2, p3, p4, p5)
  return native.invoke(
    Type.Bool, 2396, false,
    arg(Type.Any, p0),
    arg(Type.Bool, p1),
    arg(Type.Bool, p2),
    arg(Type.Bool, p3),
    arg(Type.Any, p4),
    arg(Type.Any, p5)
  )
end

function MONEY.NETWORK_CAN_SPEND_MONEY2(p0, p1, p2, p3, p4, p5, p6)
  return native.invoke(
    Type.Bool, 2397, false,
    arg(Type.Any, p0),
    arg(Type.Bool, p1),
    arg(Type.Bool, p2),
    arg(Type.Bool, p3),
    ref(Type.Any, p4),
    arg(Type.Any, p5),
    arg(Type.Any, p6)
  )
end

function MONEY.NETWORK_BUY_ITEM(amount, item, p2, p3, p4, item_name, p6, p7, p8, p9)
  native.invoke(
    Type.Void, 2398, false,
    arg(Type.Int, amount),
    arg(Type.Hash, item),
    arg(Type.Any, p2),
    arg(Type.Any, p3),
    arg(Type.Bool, p4),
    arg(Type.String, item_name),
    arg(Type.Any, p6),
    arg(Type.Any, p7),
    arg(Type.Any, p8),
    arg(Type.Bool, p9)
  )
end

function MONEY.NETWORK_SPENT_TAXI(amount, p1, p2, p3, p4)
  native.invoke(
    Type.Void, 2399, false,
    arg(Type.Int, amount),
    arg(Type.Bool, p1),
    arg(Type.Bool, p2),
    arg(Type.Any, p3),
    arg(Type.Any, p4)
  )
end

function MONEY.NETWORK_PAY_EMPLOYEE_WAGE(p0, p1, p2)
  native.invoke(
    Type.Void, 2400, false,
    arg(Type.Any, p0),
    arg(Type.Bool, p1),
    arg(Type.Bool, p2)
  )
end

function MONEY.NETWORK_PAY_MATCH_ENTRY_FEE(amount, matchId, p2, p3)
  native.invoke(
    Type.Void, 2401, false,
    arg(Type.Int, amount),
    arg(Type.String, matchId),
    arg(Type.Bool, p2),
    arg(Type.Bool, p3)
  )
end

function MONEY.NETWORK_SPENT_BETTING(amount, p1, matchId, p3, p4)
  native.invoke(
    Type.Void, 2402, false,
    arg(Type.Int, amount),
    arg(Type.Int, p1),
    arg(Type.String, matchId),
    arg(Type.Bool, p3),
    arg(Type.Bool, p4)
  )
end

function MONEY.NETWORK_SPENT_WAGER(p0, p1, amount)
  native.invoke(
    Type.Void, 2403, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1),
    arg(Type.Int, amount)
  )
end

function MONEY.NETWORK_SPENT_IN_STRIPCLUB(p0, p1, p2, p3)
  native.invoke(
    Type.Void, 2404, false,
    arg(Type.Any, p0),
    arg(Type.Bool, p1),
    arg(Type.Any, p2),
    arg(Type.Bool, p3)
  )
end

function MONEY.NETWORK_BUY_HEALTHCARE(cost, p1, p2)
  native.invoke(
    Type.Void, 2405, false,
    arg(Type.Int, cost),
    arg(Type.Bool, p1),
    arg(Type.Bool, p2)
  )
end

function MONEY.NETWORK_BUY_AIRSTRIKE(cost, p1, p2, p3)
  native.invoke(
    Type.Void, 2406, false,
    arg(Type.Int, cost),
    arg(Type.Bool, p1),
    arg(Type.Bool, p2),
    arg(Type.Any, p3)
  )
end

function MONEY.NETWORK_BUY_BACKUP_GANG(p0, p1, p2, p3, npcProvider)
  native.invoke(
    Type.Void, 2407, false,
    arg(Type.Int, p0),
    arg(Type.Int, p1),
    arg(Type.Bool, p2),
    arg(Type.Bool, p3),
    arg(Type.Int, npcProvider)
  )
end

function MONEY.NETWORK_BUY_HELI_STRIKE(cost, p1, p2, p3)
  native.invoke(
    Type.Void, 2408, false,
    arg(Type.Int, cost),
    arg(Type.Bool, p1),
    arg(Type.Bool, p2),
    arg(Type.Any, p3)
  )
end

function MONEY.NETWORK_SPENT_AMMO_DROP(p0, p1, p2, p3)
  native.invoke(
    Type.Void, 2409, false,
    arg(Type.Any, p0),
    arg(Type.Bool, p1),
    arg(Type.Bool, p2),
    arg(Type.Any, p3)
  )
end

function MONEY.NETWORK_BUY_BOUNTY(amount, victim, p2, p3, p4)
  native.invoke(
    Type.Void, 2410, false,
    arg(Type.Int, amount),
    arg(Type.Player, victim),
    arg(Type.Bool, p2),
    arg(Type.Bool, p3),
    arg(Type.Any, p4)
  )
end

function MONEY.NETWORK_BUY_PROPERTY(cost, propertyName, p2, p3)
  native.invoke(
    Type.Void, 2411, false,
    arg(Type.Int, cost),
    arg(Type.Hash, propertyName),
    arg(Type.Bool, p2),
    arg(Type.Bool, p3)
  )
end

function MONEY.NETWORK_BUY_SMOKES(p0, p1, p2)
  native.invoke(
    Type.Void, 2412, false,
    arg(Type.Int, p0),
    arg(Type.Bool, p1),
    arg(Type.Bool, p2)
  )
end

function MONEY.NETWORK_SPENT_HELI_PICKUP(p0, p1, p2, p3)
  native.invoke(
    Type.Void, 2413, false,
    arg(Type.Any, p0),
    arg(Type.Bool, p1),
    arg(Type.Bool, p2),
    arg(Type.Any, p3)
  )
end

function MONEY.NETWORK_SPENT_BOAT_PICKUP(p0, p1, p2, p3)
  native.invoke(
    Type.Void, 2414, false,
    arg(Type.Any, p0),
    arg(Type.Bool, p1),
    arg(Type.Bool, p2),
    arg(Type.Any, p3)
  )
end

function MONEY.NETWORK_SPENT_BULL_SHARK(p0, p1, p2, p3)
  native.invoke(
    Type.Void, 2415, false,
    arg(Type.Any, p0),
    arg(Type.Bool, p1),
    arg(Type.Bool, p2),
    arg(Type.Any, p3)
  )
end

function MONEY.NETWORK_SPENT_CASH_DROP(amount, p1, p2)
  native.invoke(
    Type.Void, 2416, false,
    arg(Type.Int, amount),
    arg(Type.Bool, p1),
    arg(Type.Bool, p2)
  )
end

function MONEY.NETWORK_SPENT_HIRE_MUGGER(p0, p1, p2, p3)
  native.invoke(
    Type.Void, 2417, false,
    arg(Type.Any, p0),
    arg(Type.Bool, p1),
    arg(Type.Bool, p2),
    arg(Type.Any, p3)
  )
end

function MONEY.NETWORK_SPENT_ROBBED_BY_MUGGER(amount, p1, p2, p3)
  native.invoke(
    Type.Void, 2418, false,
    arg(Type.Int, amount),
    arg(Type.Bool, p1),
    arg(Type.Bool, p2),
    arg(Type.Any, p3)
  )
end

function MONEY.NETWORK_SPENT_HIRE_MERCENARY(p0, p1, p2, p3)
  native.invoke(
    Type.Void, 2419, false,
    arg(Type.Any, p0),
    arg(Type.Bool, p1),
    arg(Type.Bool, p2),
    arg(Type.Any, p3)
  )
end

function MONEY.NETWORK_SPENT_BUY_WANTEDLEVEL(p0, p1, p2, p3, p4)
  native.invoke(
    Type.Void, 2420, false,
    arg(Type.Any, p0),
    ref(Type.Any, p1),
    arg(Type.Bool, p2),
    arg(Type.Bool, p3),
    arg(Type.Any, p4)
  )
end

function MONEY.NETWORK_SPENT_BUY_OFFTHERADAR(p0, p1, p2, p3)
  native.invoke(
    Type.Void, 2421, false,
    arg(Type.Any, p0),
    arg(Type.Bool, p1),
    arg(Type.Bool, p2),
    arg(Type.Any, p3)
  )
end

function MONEY.NETWORK_SPENT_BUY_REVEAL_PLAYERS(p0, p1, p2, p3)
  native.invoke(
    Type.Void, 2422, false,
    arg(Type.Any, p0),
    arg(Type.Bool, p1),
    arg(Type.Bool, p2),
    arg(Type.Any, p3)
  )
end

function MONEY.NETWORK_SPENT_CARWASH(p0, p1, p2, p3, p4)
  native.invoke(
    Type.Void, 2423, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1),
    arg(Type.Any, p2),
    arg(Type.Bool, p3),
    arg(Type.Bool, p4)
  )
end

function MONEY.NETWORK_SPENT_CINEMA(p0, p1, p2, p3)
  native.invoke(
    Type.Void, 2424, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1),
    arg(Type.Bool, p2),
    arg(Type.Bool, p3)
  )
end

function MONEY.NETWORK_SPENT_TELESCOPE(p0, p1, p2)
  native.invoke(
    Type.Void, 2425, false,
    arg(Type.Any, p0),
    arg(Type.Bool, p1),
    arg(Type.Bool, p2)
  )
end

function MONEY.NETWORK_SPENT_HOLDUPS(p0, p1, p2)
  native.invoke(
    Type.Void, 2426, false,
    arg(Type.Any, p0),
    arg(Type.Bool, p1),
    arg(Type.Bool, p2)
  )
end

function MONEY.NETWORK_SPENT_BUY_PASSIVE_MODE(p0, p1, p2, p3)
  native.invoke(
    Type.Void, 2427, false,
    arg(Type.Any, p0),
    arg(Type.Bool, p1),
    arg(Type.Bool, p2),
    arg(Type.Any, p3)
  )
end

function MONEY.NETWORK_SPENT_BANK_INTEREST(p0, p1, p2)
  native.invoke(
    Type.Void, 2428, false,
    arg(Type.Int, p0),
    arg(Type.Bool, p1),
    arg(Type.Bool, p2)
  )
end

function MONEY.NETWORK_SPENT_PROSTITUTES(p0, p1, p2)
  native.invoke(
    Type.Void, 2429, false,
    arg(Type.Any, p0),
    arg(Type.Bool, p1),
    arg(Type.Bool, p2)
  )
end

function MONEY.NETWORK_SPENT_ARREST_BAIL(p0, p1, p2)
  native.invoke(
    Type.Void, 2430, false,
    arg(Type.Any, p0),
    arg(Type.Bool, p1),
    arg(Type.Bool, p2)
  )
end

function MONEY.NETWORK_SPENT_PAY_VEHICLE_INSURANCE_PREMIUM(amount, vehicleModel, gamerHandle, notBankrupt, hasTheMoney)
  native.invoke(
    Type.Void, 2431, false,
    arg(Type.Int, amount),
    arg(Type.Hash, vehicleModel),
    ref(Type.Any, gamerHandle),
    arg(Type.Bool, notBankrupt),
    arg(Type.Bool, hasTheMoney)
  )
end

function MONEY.NETWORK_SPENT_CALL_PLAYER(p0, p1, p2, p3)
  native.invoke(
    Type.Void, 2432, false,
    arg(Type.Any, p0),
    ref(Type.Any, p1),
    arg(Type.Bool, p2),
    arg(Type.Bool, p3)
  )
end

function MONEY.NETWORK_SPENT_BOUNTY(p0, p1, p2)
  native.invoke(
    Type.Void, 2433, false,
    arg(Type.Any, p0),
    arg(Type.Bool, p1),
    arg(Type.Bool, p2)
  )
end

function MONEY.NETWORK_SPENT_FROM_ROCKSTAR(p0, p1, p2)
  native.invoke(
    Type.Void, 2434, false,
    arg(Type.Int, p0),
    arg(Type.Bool, p1),
    arg(Type.Bool, p2)
  )
end

function MONEY.NETWORK_SPEND_EARNED_FROM_BANK_AND_WALLETS(amount)
  return native.invoke(
    Type.Int, 2435, false,
    arg(Type.Int, amount)
  )
end

function MONEY.PROCESS_CASH_GIFT(p0, p1, p2)
  return native.invoke(
    Type.String, 2436, false,
    ref(Type.Int, p0),
    ref(Type.Int, p1),
    arg(Type.String, p2)
  )
end

function MONEY.NETWORK_SPENT_MOVE_SUBMARINE(p0, p1, p2)
  native.invoke(
    Type.Void, 2437, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1),
    arg(Type.Any, p2)
  )
end

function MONEY.NETWORK_SPENT_PLAYER_HEALTHCARE(p0, p1, p2, p3)
  native.invoke(
    Type.Void, 2438, false,
    arg(Type.Int, p0),
    arg(Type.Int, p1),
    arg(Type.Bool, p2),
    arg(Type.Bool, p3)
  )
end

function MONEY.NETWORK_SPENT_NO_COPS(p0, p1, p2, p3)
  native.invoke(
    Type.Void, 2439, false,
    arg(Type.Any, p0),
    arg(Type.Bool, p1),
    arg(Type.Bool, p2),
    arg(Type.Any, p3)
  )
end

function MONEY.NETWORK_SPENT_CARGO_SOURCING(p0, p1, p2, p3, p4, p5)
  native.invoke(
    Type.Void, 2440, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1),
    arg(Type.Any, p2),
    arg(Type.Any, p3),
    arg(Type.Any, p4),
    arg(Type.Any, p5)
  )
end

function MONEY.NETWORK_SPENT_REQUEST_JOB(p0, p1, p2, p3)
  native.invoke(
    Type.Void, 2441, false,
    arg(Type.Any, p0),
    arg(Type.Bool, p1),
    arg(Type.Bool, p2),
    arg(Type.Any, p3)
  )
end

function MONEY.NETWORK_SPENT_REQUEST_HEIST(p0, p1, p2, p3)
  native.invoke(
    Type.Void, 2442, false,
    arg(Type.Any, p0),
    arg(Type.Bool, p1),
    arg(Type.Bool, p2),
    arg(Type.Any, p3)
  )
end

function MONEY.NETWORK_BUY_FAIRGROUND_RIDE(amount, p1, p2, p3, p4)
  native.invoke(
    Type.Void, 2443, false,
    arg(Type.Int, amount),
    arg(Type.Any, p1),
    arg(Type.Bool, p2),
    arg(Type.Bool, p3),
    arg(Type.Any, p4)
  )
end

function MONEY.NETWORK_ECONOMY_HAS_FIXED_CRAZY_NUMBERS()
  return native.invoke(
    Type.Bool, 2444, false
  )
end

function MONEY.NETWORK_SPENT_JOB_SKIP(amount, matchId, p2, p3)
  native.invoke(
    Type.Void, 2445, false,
    arg(Type.Int, amount),
    arg(Type.String, matchId),
    arg(Type.Bool, p2),
    arg(Type.Bool, p3)
  )
end

function MONEY.NETWORK_SPENT_BOSS_GOON(amount, p1, p2)
  return native.invoke(
    Type.Bool, 2446, false,
    arg(Type.Int, amount),
    arg(Type.Bool, p1),
    arg(Type.Bool, p2)
  )
end

function MONEY.NETWORK_SPEND_GOON(p0, p1, amount)
  native.invoke(
    Type.Void, 2447, false,
    arg(Type.Int, p0),
    arg(Type.Int, p1),
    arg(Type.Int, amount)
  )
end

function MONEY.NETWORK_SPEND_BOSS(p0, p1, p2)
  native.invoke(
    Type.Void, 2448, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1),
    arg(Type.Any, p2)
  )
end

function MONEY.NETWORK_SPENT_MOVE_YACHT(amount, p1, p2)
  native.invoke(
    Type.Void, 2449, false,
    arg(Type.Int, amount),
    arg(Type.Bool, p1),
    arg(Type.Bool, p2)
  )
end

function MONEY.NETWORK_SPENT_RENAME_ORGANIZATION(p0, p1, p2, p3)
  native.invoke(
    Type.Void, 2450, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1),
    arg(Type.Any, p2),
    arg(Type.Any, p3)
  )
end

function MONEY.NETWORK_BUY_CONTRABAND_MISSION(p0, p1, p2, p3, p4)
  native.invoke(
    Type.Void, 2451, false,
    arg(Type.Int, p0),
    arg(Type.Int, p1),
    arg(Type.Hash, p2),
    arg(Type.Bool, p3),
    arg(Type.Bool, p4)
  )
end

function MONEY.NETWORK_SPENT_PA_SERVICE_HELI(p0, p1, p2, p3)
  native.invoke(
    Type.Void, 2452, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1),
    arg(Type.Any, p2),
    arg(Type.Any, p3)
  )
end

function MONEY.NETWORK_SPENT_PA_SERVICE_VEHICLE(p0, p1, p2, p3)
  native.invoke(
    Type.Void, 2453, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1),
    arg(Type.Any, p2),
    arg(Type.Any, p3)
  )
end

function MONEY.NETWORK_SPENT_PA_SERVICE_SNACK(p0, p1, p2, p3)
  native.invoke(
    Type.Void, 2454, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1),
    arg(Type.Any, p2),
    arg(Type.Any, p3)
  )
end

function MONEY.NETWORK_SPENT_PA_SERVICE_DANCER(p0, p1, p2, p3)
  native.invoke(
    Type.Void, 2455, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1),
    arg(Type.Any, p2),
    arg(Type.Any, p3)
  )
end

function MONEY.NETWORK_SPENT_PA_SERVICE_IMPOUND(p0, p1, p2)
  native.invoke(
    Type.Void, 2456, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1),
    arg(Type.Any, p2)
  )
end

function MONEY.NETWORK_SPENT_PA_HELI_PICKUP(p0, p1, p2, p3)
  native.invoke(
    Type.Void, 2457, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1),
    arg(Type.Any, p2),
    arg(Type.Any, p3)
  )
end

function MONEY.NETWORK_SPENT_PURCHASE_OFFICE_PROPERTY(p0, p1, p2, p3, p4)
  native.invoke(
    Type.Void, 2458, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1),
    arg(Type.Any, p2),
    arg(Type.Any, p3),
    arg(Type.Any, p4)
  )
end

function MONEY.NETWORK_SPENT_UPGRADE_OFFICE_PROPERTY(p0, p1, p2, p3, p4)
  native.invoke(
    Type.Void, 2459, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1),
    arg(Type.Any, p2),
    arg(Type.Any, p3),
    arg(Type.Any, p4)
  )
end

function MONEY.NETWORK_SPENT_PURCHASE_WAREHOUSE_PROPERTY(p0, p1, p2, p3)
  native.invoke(
    Type.Void, 2460, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1),
    arg(Type.Any, p2),
    arg(Type.Any, p3)
  )
end

function MONEY.NETWORK_SPENT_UPGRADE_WAREHOUSE_PROPERTY(p0, p1, p2, p3)
  native.invoke(
    Type.Void, 2461, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1),
    arg(Type.Any, p2),
    arg(Type.Any, p3)
  )
end

function MONEY.NETWORK_SPENT_PURCHASE_IMPEXP_WAREHOUSE_PROPERTY(amount, data, p2, p3)
  native.invoke(
    Type.Void, 2462, false,
    arg(Type.Int, amount),
    ref(Type.Any, data),
    arg(Type.Bool, p2),
    arg(Type.Bool, p3)
  )
end

function MONEY.NETWORK_SPENT_UPGRADE_IMPEXP_WAREHOUSE_PROPERTY(p0, p1, p2, p3)
  native.invoke(
    Type.Void, 2463, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1),
    arg(Type.Any, p2),
    arg(Type.Any, p3)
  )
end

function MONEY.NETWORK_SPENT_TRADE_IMPEXP_WAREHOUSE_PROPERTY(p0, p1, p2, p3)
  native.invoke(
    Type.Void, 2464, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1),
    arg(Type.Any, p2),
    arg(Type.Any, p3)
  )
end

function MONEY.NETWORK_SPENT_ORDER_WAREHOUSE_VEHICLE(p0, p1, p2, p3)
  native.invoke(
    Type.Void, 2465, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1),
    arg(Type.Any, p2),
    arg(Type.Any, p3)
  )
end

function MONEY.NETWORK_SPENT_ORDER_BODYGUARD_VEHICLE(p0, p1, p2, p3)
  native.invoke(
    Type.Void, 2466, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1),
    arg(Type.Any, p2),
    arg(Type.Any, p3)
  )
end

function MONEY.NETWORK_SPENT_JUKEBOX(p0, p1, p2, p3)
  native.invoke(
    Type.Void, 2467, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1),
    arg(Type.Any, p2),
    arg(Type.Any, p3)
  )
end

function MONEY.NETWORK_SPENT_PURCHASE_CLUB_HOUSE(p0, p1, p2, p3)
  native.invoke(
    Type.Void, 2468, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1),
    arg(Type.Any, p2),
    arg(Type.Any, p3)
  )
end

function MONEY.NETWORK_SPENT_UPGRADE_CLUB_HOUSE(p0, p1, p2, p3)
  native.invoke(
    Type.Void, 2469, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1),
    arg(Type.Any, p2),
    arg(Type.Any, p3)
  )
end

function MONEY.NETWORK_SPENT_PURCHASE_BUSINESS_PROPERTY(p0, p1, p2, p3)
  native.invoke(
    Type.Void, 2470, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1),
    arg(Type.Any, p2),
    arg(Type.Any, p3)
  )
end

function MONEY.NETWORK_SPENT_UPGRADE_BUSINESS_PROPERTY(p0, p1, p2, p3)
  native.invoke(
    Type.Void, 2471, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1),
    arg(Type.Any, p2),
    arg(Type.Any, p3)
  )
end

function MONEY.NETWORK_SPENT_TRADE_BUSINESS_PROPERTY(p0, p1, p2, p3)
  native.invoke(
    Type.Void, 2472, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1),
    arg(Type.Any, p2),
    arg(Type.Any, p3)
  )
end

function MONEY.NETWORK_SPENT_MC_ABILITY(p0, p1, p2, p3, p4)
  native.invoke(
    Type.Void, 2473, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1),
    arg(Type.Any, p2),
    arg(Type.Any, p3),
    arg(Type.Any, p4)
  )
end

function MONEY.NETWORK_SPENT_PAY_BUSINESS_SUPPLIES(p0, p1, p2, p3)
  native.invoke(
    Type.Void, 2474, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1),
    arg(Type.Any, p2),
    arg(Type.Any, p3)
  )
end

function MONEY.NETWORK_SPENT_CHANGE_APPEARANCE(p0, p1, p2)
  native.invoke(
    Type.Void, 2475, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1),
    arg(Type.Any, p2)
  )
end

function MONEY.NETWORK_SPENT_VEHICLE_EXPORT_MODS(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9)
  native.invoke(
    Type.Void, 2476, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1),
    arg(Type.Any, p2),
    arg(Type.Any, p3),
    arg(Type.Any, p4),
    arg(Type.Any, p5),
    arg(Type.Any, p6),
    arg(Type.Any, p7),
    arg(Type.Any, p8),
    arg(Type.Any, p9)
  )
end

function MONEY.NETWORK_SPENT_PURCHASE_OFFICE_GARAGE(p0, p1, p2, p3)
  native.invoke(
    Type.Void, 2477, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1),
    arg(Type.Any, p2),
    arg(Type.Any, p3)
  )
end

function MONEY.NETWORK_SPENT_UPGRADE_OFFICE_GARAGE(p0, p1, p2, p3)
  native.invoke(
    Type.Void, 2478, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1),
    arg(Type.Any, p2),
    arg(Type.Any, p3)
  )
end

function MONEY.NETWORK_SPENT_IMPORT_EXPORT_REPAIR(p0, p1, p2)
  native.invoke(
    Type.Void, 2479, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1),
    arg(Type.Any, p2)
  )
end

function MONEY.NETWORK_SPENT_PURCHASE_HANGAR(p0, p1, p2, p3)
  native.invoke(
    Type.Void, 2480, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1),
    arg(Type.Any, p2),
    arg(Type.Any, p3)
  )
end

function MONEY.NETWORK_SPENT_UPGRADE_HANGAR(p0, p1, p2, p3)
  native.invoke(
    Type.Void, 2481, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1),
    arg(Type.Any, p2),
    arg(Type.Any, p3)
  )
end

function MONEY.NETWORK_SPENT_HANGAR_UTILITY_CHARGES(amount, p1, p2)
  native.invoke(
    Type.Void, 2482, false,
    arg(Type.Int, amount),
    arg(Type.Bool, p1),
    arg(Type.Bool, p2)
  )
end

function MONEY.NETWORK_SPENT_HANGAR_STAFF_CHARGES(amount, p1, p2)
  native.invoke(
    Type.Void, 2483, false,
    arg(Type.Int, amount),
    arg(Type.Bool, p1),
    arg(Type.Bool, p2)
  )
end

function MONEY.NETWORK_SPENT_BUY_TRUCK(p0, p1, p2, p3)
  native.invoke(
    Type.Void, 2484, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1),
    arg(Type.Any, p2),
    arg(Type.Any, p3)
  )
end

function MONEY.NETWORK_SPENT_UPGRADE_TRUCK(p0, p1, p2, p3)
  native.invoke(
    Type.Void, 2485, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1),
    arg(Type.Any, p2),
    arg(Type.Any, p3)
  )
end

function MONEY.NETWORK_SPENT_BUY_BUNKER(p0, p1, p2, p3)
  native.invoke(
    Type.Void, 2486, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1),
    arg(Type.Any, p2),
    arg(Type.Any, p3)
  )
end

function MONEY.NETWORK_SPENT_UPRADE_BUNKER(p0, p1, p2, p3)
  native.invoke(
    Type.Void, 2487, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1),
    arg(Type.Any, p2),
    arg(Type.Any, p3)
  )
end

function MONEY.NETWORK_EARN_FROM_SELL_BUNKER(amount, bunkerHash)
  native.invoke(
    Type.Void, 2488, false,
    arg(Type.Int, amount),
    arg(Type.Hash, bunkerHash)
  )
end

function MONEY.NETWORK_SPENT_BALLISTIC_EQUIPMENT(amount, p1, p2)
  native.invoke(
    Type.Void, 2489, false,
    arg(Type.Int, amount),
    arg(Type.Bool, p1),
    arg(Type.Bool, p2)
  )
end

function MONEY.NETWORK_EARN_RDR_BONUS(amount, p1)
  native.invoke(
    Type.Void, 2490, false,
    arg(Type.Int, amount),
    arg(Type.Any, p1)
  )
end

function MONEY.NETWORK_EARN_WAGE_PAYMENT(amount, p1)
  native.invoke(
    Type.Void, 2491, false,
    arg(Type.Int, amount),
    arg(Type.Any, p1)
  )
end

function MONEY.NETWORK_EARN_WAGE_PAYMENT_BONUS(amount)
  native.invoke(
    Type.Void, 2492, false,
    arg(Type.Int, amount)
  )
end

function MONEY.NETWORK_SPENT_BUY_BASE(p0, p1, p2, p3)
  native.invoke(
    Type.Void, 2493, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1),
    arg(Type.Any, p2),
    arg(Type.Any, p3)
  )
end

function MONEY.NETWORK_SPENT_UPGRADE_BASE(p0, p1, p2, p3)
  native.invoke(
    Type.Void, 2494, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1),
    arg(Type.Any, p2),
    arg(Type.Any, p3)
  )
end

function MONEY.NETWORK_SPENT_BUY_TILTROTOR(p0, p1, p2, p3)
  native.invoke(
    Type.Void, 2495, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1),
    arg(Type.Any, p2),
    arg(Type.Any, p3)
  )
end

function MONEY.NETWORK_SPENT_UPGRADE_TILTROTOR(p0, p1, p2, p3)
  native.invoke(
    Type.Void, 2496, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1),
    arg(Type.Any, p2),
    arg(Type.Any, p3)
  )
end

function MONEY.NETWORK_SPENT_EMPLOY_ASSASSINS(p0, p1, p2, p3)
  native.invoke(
    Type.Void, 2497, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1),
    arg(Type.Any, p2),
    arg(Type.Any, p3)
  )
end

function MONEY.NETWORK_SPEND_GANGOPS_CANNON(p0, p1, p2, p3)
  native.invoke(
    Type.Void, 2498, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1),
    arg(Type.Any, p2),
    arg(Type.Any, p3)
  )
end

function MONEY.NETWORK_SPEND_GANGOPS_SKIP_MISSION(p0, p1, p2, p3)
  native.invoke(
    Type.Void, 2499, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1),
    arg(Type.Any, p2),
    arg(Type.Any, p3)
  )
end

function MONEY.NETWORK_SPEND_CASINO_HEIST_SKIP_MISSION(p0, p1, p2, p3)
  native.invoke(
    Type.Void, 2500, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1),
    arg(Type.Any, p2),
    arg(Type.Any, p3)
  )
end

function MONEY.NETWORK_EARN_SELL_BASE(amount, baseNameHash)
  native.invoke(
    Type.Void, 2501, false,
    arg(Type.Int, amount),
    arg(Type.Hash, baseNameHash)
  )
end

function MONEY.NETWORK_EARN_TARGET_REFUND(amount, p1)
  native.invoke(
    Type.Void, 2502, false,
    arg(Type.Int, amount),
    arg(Type.Int, p1)
  )
end

function MONEY.NETWORK_EARN_GANGOPS_WAGES(amount, p1)
  native.invoke(
    Type.Void, 2503, false,
    arg(Type.Int, amount),
    arg(Type.Int, p1)
  )
end

function MONEY.NETWORK_EARN_GANGOPS_WAGES_BONUS(amount, p1)
  native.invoke(
    Type.Void, 2504, false,
    arg(Type.Int, amount),
    arg(Type.Int, p1)
  )
end

function MONEY.NETWORK_EARN_DAR_CHALLENGE(amount, p1)
  native.invoke(
    Type.Void, 2505, false,
    arg(Type.Int, amount),
    arg(Type.Any, p1)
  )
end

function MONEY.NETWORK_EARN_DOOMSDAY_FINALE_BONUS(amount, vehicleHash)
  native.invoke(
    Type.Void, 2506, false,
    arg(Type.Int, amount),
    arg(Type.Hash, vehicleHash)
  )
end

function MONEY.NETWORK_EARN_GANGOPS_AWARD(amount, p1, p2)
  native.invoke(
    Type.Void, 2507, false,
    arg(Type.Int, amount),
    arg(Type.String, p1),
    arg(Type.Any, p2)
  )
end

function MONEY.NETWORK_EARN_GANGOPS_ELITE(amount, p1, actIndex)
  native.invoke(
    Type.Void, 2508, false,
    arg(Type.Int, amount),
    arg(Type.String, p1),
    arg(Type.Int, actIndex)
  )
end

function MONEY.NETWORK_SERVICE_EARN_GANGOPS_RIVAL_DELIVERY(earnedMoney)
  native.invoke(
    Type.Void, 2509, false,
    arg(Type.Int, earnedMoney)
  )
end

function MONEY.NETWORK_SPEND_GANGOPS_START_STRAND(type, amount, p2, p3)
  native.invoke(
    Type.Void, 2510, false,
    arg(Type.Int, type),
    arg(Type.Int, amount),
    arg(Type.Bool, p2),
    arg(Type.Bool, p3)
  )
end

function MONEY.NETWORK_SPEND_GANGOPS_TRIP_SKIP(amount, p1, p2)
  native.invoke(
    Type.Void, 2511, false,
    arg(Type.Int, amount),
    arg(Type.Bool, p1),
    arg(Type.Bool, p2)
  )
end

function MONEY.NETWORK_EARN_GANGOPS_PREP_PARTICIPATION(amount)
  native.invoke(
    Type.Void, 2512, false,
    arg(Type.Int, amount)
  )
end

function MONEY.NETWORK_EARN_GANGOPS_SETUP(amount, p1)
  native.invoke(
    Type.Void, 2513, false,
    arg(Type.Int, amount),
    arg(Type.String, p1)
  )
end

function MONEY.NETWORK_EARN_GANGOPS_FINALE(amount, p1)
  native.invoke(
    Type.Void, 2514, false,
    arg(Type.Int, amount),
    arg(Type.String, p1)
  )
end

function MONEY.NETWORK_SPEND_GANGOPS_REPAIR_COST(p0, p1, p2)
  native.invoke(
    Type.Void, 2515, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1),
    arg(Type.Any, p2)
  )
end

function MONEY.NETWORK_EARN_NIGHTCLUB(p0)
  native.invoke(
    Type.Void, 2516, false,
    arg(Type.Any, p0)
  )
end

function MONEY.NETWORK_EARN_NIGHTCLUB_DANCING(p0)
  native.invoke(
    Type.Void, 2517, false,
    arg(Type.Any, p0)
  )
end

function MONEY.NETWORK_EARN_BB_EVENT_BONUS(amount)
  native.invoke(
    Type.Void, 2518, false,
    arg(Type.Int, amount)
  )
end

function MONEY.NETWORK_SPENT_PURCHASE_HACKER_TRUCK(p0, p1, p2, p3)
  native.invoke(
    Type.Void, 2519, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1),
    arg(Type.Any, p2),
    arg(Type.Any, p3)
  )
end

function MONEY.NETWORK_SPENT_UPGRADE_HACKER_TRUCK(p0, p1, p2, p3)
  native.invoke(
    Type.Void, 2520, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1),
    arg(Type.Any, p2),
    arg(Type.Any, p3)
  )
end

function MONEY.NETWORK_EARN_HACKER_TRUCK(p0, amount, p2, p3)
  native.invoke(
    Type.Void, 2521, false,
    arg(Type.Any, p0),
    arg(Type.Int, amount),
    arg(Type.Any, p2),
    arg(Type.Any, p3)
  )
end

function MONEY.NETWORK_SPENT_PURCHASE_NIGHTCLUB_AND_WAREHOUSE(p0, p1, p2, p3)
  native.invoke(
    Type.Void, 2522, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1),
    arg(Type.Any, p2),
    arg(Type.Any, p3)
  )
end

function MONEY.NETWORK_SPENT_UPGRADE_NIGHTCLUB_AND_WAREHOUSE(p0, p1, p2, p3)
  native.invoke(
    Type.Void, 2523, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1),
    arg(Type.Any, p2),
    arg(Type.Any, p3)
  )
end

function MONEY.NETWORK_EARN_NIGHTCLUB_AND_WAREHOUSE(p0, p1, p2, p3, p4, p5, p6)
  native.invoke(
    Type.Void, 2524, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1),
    arg(Type.Any, p2),
    arg(Type.Any, p3),
    arg(Type.Any, p4),
    arg(Type.Any, p5),
    arg(Type.Any, p6)
  )
end

function MONEY.NETWORK_SPEND_NIGHTCLUB_AND_WAREHOUSE(p0, p1, p2, p3)
  native.invoke(
    Type.Void, 2525, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1),
    arg(Type.Any, p2),
    arg(Type.Any, p3)
  )
end

function MONEY.NETWORK_SPENT_RDR_HATCHET_BONUS(amount, p1, p2)
  native.invoke(
    Type.Void, 2526, false,
    arg(Type.Int, amount),
    arg(Type.Bool, p1),
    arg(Type.Bool, p2)
  )
end

function MONEY.NETWORK_SPENT_NIGHTCLUB_ENTRY_FEE(player, amount, p1, p2, p3)
  native.invoke(
    Type.Void, 2527, false,
    arg(Type.Player, player),
    arg(Type.Int, amount),
    arg(Type.Any, p1),
    arg(Type.Bool, p2),
    arg(Type.Bool, p3)
  )
end

function MONEY.NETWORK_SPEND_NIGHTCLUB_BAR_DRINK(amount, p1, p2, p3)
  native.invoke(
    Type.Void, 2528, false,
    arg(Type.Int, amount),
    arg(Type.Any, p1),
    arg(Type.Bool, p2),
    arg(Type.Bool, p3)
  )
end

function MONEY.NETWORK_SPEND_BOUNTY_HUNTER_MISSION(amount, p1, p2)
  native.invoke(
    Type.Void, 2529, false,
    arg(Type.Int, amount),
    arg(Type.Bool, p1),
    arg(Type.Bool, p2)
  )
end

function MONEY.NETWORK_SPENT_REHIRE_DJ(amount, p1, p2, p3)
  native.invoke(
    Type.Void, 2530, false,
    arg(Type.Int, amount),
    arg(Type.Any, p1),
    arg(Type.Bool, p2),
    arg(Type.Bool, p3)
  )
end

function MONEY.NETWORK_SPENT_ARENA_JOIN_SPECTATOR(amount, p1, p2, p3)
  native.invoke(
    Type.Void, 2531, false,
    arg(Type.Int, amount),
    arg(Type.Any, p1),
    arg(Type.Bool, p2),
    arg(Type.Bool, p3)
  )
end

function MONEY.NETWORK_EARN_ARENA_SKILL_LEVEL_PROGRESSION(amount, p1)
  native.invoke(
    Type.Void, 2532, false,
    arg(Type.Int, amount),
    arg(Type.Any, p1)
  )
end

function MONEY.NETWORK_EARN_ARENA_CAREER_PROGRESSION(amount, p1)
  native.invoke(
    Type.Void, 2533, false,
    arg(Type.Int, amount),
    arg(Type.Any, p1)
  )
end

function MONEY.NETWORK_SPEND_MAKE_IT_RAIN(amount, p1, p2)
  native.invoke(
    Type.Void, 2534, false,
    arg(Type.Int, amount),
    arg(Type.Bool, p1),
    arg(Type.Bool, p2)
  )
end

function MONEY.NETWORK_SPEND_BUY_ARENA(amount, p1, p2, p3)
  native.invoke(
    Type.Void, 2535, false,
    arg(Type.Int, amount),
    arg(Type.Bool, p1),
    arg(Type.Bool, p2),
    arg(Type.String, p3)
  )
end

function MONEY.NETWORK_SPEND_UPGRADE_ARENA(amount, p1, p2, p3)
  native.invoke(
    Type.Void, 2536, false,
    arg(Type.Int, amount),
    arg(Type.Bool, p1),
    arg(Type.Bool, p2),
    arg(Type.String, p3)
  )
end

function MONEY.NETWORK_SPEND_ARENA_SPECTATOR_BOX(amount, type, p2, p3)
  native.invoke(
    Type.Void, 2537, false,
    arg(Type.Int, amount),
    arg(Type.Int, type),
    arg(Type.Bool, p2),
    arg(Type.Bool, p3)
  )
end

function MONEY.NETWORK_SPEND_SPIN_THE_WHEEL_PAYMENT(amount, p1, p2)
  native.invoke(
    Type.Void, 2538, false,
    arg(Type.Int, amount),
    arg(Type.Any, p1),
    arg(Type.Bool, p2)
  )
end

function MONEY.NETWORK_EARN_SPIN_THE_WHEEL_CASH(amount)
  native.invoke(
    Type.Void, 2539, false,
    arg(Type.Int, amount)
  )
end

function MONEY.NETWORK_SPEND_ARENA_PREMIUM(amount, p1, p2)
  native.invoke(
    Type.Void, 2540, false,
    arg(Type.Int, amount),
    arg(Type.Bool, p1),
    arg(Type.Bool, p2)
  )
end

function MONEY.NETWORK_EARN_ARENA_WAR(amount, p1, p2, p3)
  native.invoke(
    Type.Void, 2541, false,
    arg(Type.Int, amount),
    arg(Type.Any, p1),
    arg(Type.Any, p2),
    arg(Type.Any, p3)
  )
end

function MONEY.NETWORK_EARN_ARENA_WAR_ASSASSINATE_TARGET(amount)
  native.invoke(
    Type.Void, 2542, false,
    arg(Type.Int, amount)
  )
end

function MONEY.NETWORK_EARN_ARENA_WAR_EVENT_CARGO(amount)
  native.invoke(
    Type.Void, 2543, false,
    arg(Type.Int, amount)
  )
end

function MONEY.NETWORK_EARN_RC_TIME_TRIAL(amount)
  native.invoke(
    Type.Void, 2544, false,
    arg(Type.Int, amount)
  )
end

function MONEY.NETWORK_EARN_DAILY_OBJECTIVE_EVENT(amount)
  native.invoke(
    Type.Void, 2545, false,
    arg(Type.Int, amount)
  )
end

function MONEY.NETWORK_SPEND_CASINO_MEMBERSHIP(amount, p1, p2, p3)
  native.invoke(
    Type.Void, 2546, false,
    arg(Type.Int, amount),
    arg(Type.Bool, p1),
    arg(Type.Bool, p2),
    arg(Type.Int, p3)
  )
end

function MONEY.NETWORK_SPEND_BUY_CASINO(amount, p1, p2, data)
  native.invoke(
    Type.Void, 2547, false,
    arg(Type.Int, amount),
    arg(Type.Bool, p1),
    arg(Type.Bool, p2),
    ref(Type.Any, data)
  )
end

function MONEY.NETWORK_SPEND_UPGRADE_CASINO(amount, p1, p2, data)
  native.invoke(
    Type.Void, 2548, false,
    arg(Type.Int, amount),
    arg(Type.Bool, p1),
    arg(Type.Bool, p2),
    ref(Type.Any, data)
  )
end

function MONEY.NETWORK_SPEND_CASINO_GENERIC(amount, p1, p2, p3, p4)
  native.invoke(
    Type.Void, 2549, false,
    arg(Type.Int, amount),
    arg(Type.Any, p1),
    arg(Type.Any, p2),
    arg(Type.Any, p3),
    arg(Type.Any, p4)
  )
end

function MONEY.NETWORK_EARN_CASINO_TIME_TRIAL_WIN(amount)
  native.invoke(
    Type.Void, 2550, false,
    arg(Type.Int, amount)
  )
end

function MONEY.NETWORK_EARN_COLLECTABLES_ACTION_FIGURES(amount)
  native.invoke(
    Type.Void, 2551, false,
    arg(Type.Int, amount)
  )
end

function MONEY.NETWORK_EARN_CASINO_COLLECTABLE_COMPLETED_COLLECTION(amount)
  native.invoke(
    Type.Void, 2552, false,
    arg(Type.Int, amount)
  )
end

function MONEY.NETWORK_EARN_SELL_PRIZE_VEHICLE(amount, p1, p2)
  native.invoke(
    Type.Void, 2553, false,
    arg(Type.Int, amount),
    arg(Type.Any, p1),
    arg(Type.Any, p2)
  )
end

function MONEY.NETWORK_EARN_CASINO_MISSION_REWARD(amount)
  native.invoke(
    Type.Void, 2554, false,
    arg(Type.Int, amount)
  )
end

function MONEY.NETWORK_EARN_CASINO_STORY_MISSION_REWARD(amount)
  native.invoke(
    Type.Void, 2555, false,
    arg(Type.Int, amount)
  )
end

function MONEY.NETWORK_EARN_CASINO_MISSION_PARTICIPATION(amount)
  native.invoke(
    Type.Void, 2556, false,
    arg(Type.Int, amount)
  )
end

function MONEY.NETWORK_EARN_CASINO_AWARD(amount, hash)
  native.invoke(
    Type.Void, 2557, false,
    arg(Type.Int, amount),
    arg(Type.Hash, hash)
  )
end

function MONEY.NETWORK_SPEND_BUY_ARCADE(p0, p1, p2, p3)
  native.invoke(
    Type.Void, 2558, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1),
    arg(Type.Any, p2),
    arg(Type.Any, p3)
  )
end

function MONEY.NETWORK_SPEND_UPGRADE_ARCADE(p0, p1, p2, p3)
  native.invoke(
    Type.Void, 2559, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1),
    arg(Type.Any, p2),
    arg(Type.Any, p3)
  )
end

function MONEY.NETWORK_SPEND_CASINO_HEIST(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10)
  native.invoke(
    Type.Void, 2560, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1),
    arg(Type.Any, p2),
    arg(Type.Any, p3),
    arg(Type.Any, p4),
    arg(Type.Any, p5),
    arg(Type.Any, p6),
    arg(Type.Any, p7),
    arg(Type.Any, p8),
    arg(Type.Any, p9),
    arg(Type.Any, p10)
  )
end

function MONEY.NETWORK_SPEND_ARCADE_MGMT(p0, p1, p2, p3, p4)
  native.invoke(
    Type.Void, 2561, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1),
    arg(Type.Any, p2),
    arg(Type.Any, p3),
    arg(Type.Any, p4)
  )
end

function MONEY.NETWORK_SPEND_PLAY_ARCADE(p0, p1, p2, p3, p4)
  native.invoke(
    Type.Void, 2562, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1),
    arg(Type.Any, p2),
    arg(Type.Any, p3),
    arg(Type.Any, p4)
  )
end

function MONEY.NETWORK_SPEND_ARCADE(p0, p1, p2, p3, p4)
  native.invoke(
    Type.Void, 2563, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1),
    arg(Type.Any, p2),
    arg(Type.Any, p3),
    arg(Type.Any, p4)
  )
end

function MONEY.NETWORK_EARN_CASINO_HEIST(p0, p1, p2, p3, p4, p5, p6)
  native.invoke(
    Type.Void, 2564, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1),
    arg(Type.Any, p2),
    arg(Type.Any, p3),
    arg(Type.Any, p4),
    arg(Type.Any, p5),
    arg(Type.Any, p6)
  )
end

function MONEY.NETWORK_EARN_UPGRADE_ARCADE(p0, p1, p2)
  native.invoke(
    Type.Void, 2565, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1),
    arg(Type.Any, p2)
  )
end

function MONEY.NETWORK_EARN_ARCADE(p0, p1, p2, p3, p4)
  native.invoke(
    Type.Void, 2566, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1),
    arg(Type.Any, p2),
    arg(Type.Any, p3),
    arg(Type.Any, p4)
  )
end

function MONEY.NETWORK_EARN_COLLECTABLES(p0, p1, p2)
  native.invoke(
    Type.Void, 2567, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1),
    arg(Type.Any, p2)
  )
end

function MONEY.NETWORK_EARN_CHALLENGE(amount, p1, p2)
  native.invoke(
    Type.Void, 2568, false,
    arg(Type.Int, amount),
    arg(Type.Any, p1),
    arg(Type.Any, p2)
  )
end

function MONEY.NETWORK_EARN_CASINO_HEIST_AWARDS(p0, p1, p2, p3, p4)
  native.invoke(
    Type.Void, 2569, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1),
    arg(Type.Any, p2),
    arg(Type.Any, p3),
    arg(Type.Any, p4)
  )
end

function MONEY.NETWORK_EARN_COLLECTABLE_ITEM(amount, p1)
  native.invoke(
    Type.Void, 2570, false,
    arg(Type.Int, amount),
    arg(Type.Any, p1)
  )
end

function MONEY.NETWORK_EARN_COLLECTABLE_COMPLETED_COLLECTION(amount, p1)
  native.invoke(
    Type.Void, 2571, false,
    arg(Type.Int, amount),
    arg(Type.Any, p1)
  )
end

function MONEY.NETWORK_EARN_YATCH_MISSION(amount, p1)
  native.invoke(
    Type.Void, 2572, false,
    arg(Type.Int, amount),
    arg(Type.Any, p1)
  )
end

function MONEY.NETWORK_EARN_DISPATCH_CALL(amount, p1)
  native.invoke(
    Type.Void, 2573, false,
    arg(Type.Int, amount),
    arg(Type.Any, p1)
  )
end

function MONEY.NETWORK_SPEND_BEACH_PARTY(p0)
  native.invoke(
    Type.Void, 2574, false,
    arg(Type.Any, p0)
  )
end

function MONEY.NETWORK_SPEND_SUBMARINE(p0, p1, p2, p3, p4, p5)
  native.invoke(
    Type.Void, 2575, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1),
    arg(Type.Any, p2),
    arg(Type.Any, p3),
    arg(Type.Any, p4),
    arg(Type.Any, p5)
  )
end

function MONEY.NETWORK_SPEND_CASINO_CLUB(amount1, p1, p2, p3, p4, p5, p6, amount2, p8)
  native.invoke(
    Type.Void, 2576, false,
    arg(Type.Int, amount1),
    arg(Type.Any, p1),
    arg(Type.Bool, p2),
    arg(Type.Any, p3),
    arg(Type.Int, p4),
    arg(Type.Int, p5),
    arg(Type.Int, p6),
    arg(Type.Int, amount2),
    arg(Type.Any, p8)
  )
end

function MONEY.NETWORK_SPEND_BUY_SUB(p0, p1, p2, p3)
  native.invoke(
    Type.Void, 2577, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1),
    arg(Type.Any, p2),
    arg(Type.Any, p3)
  )
end

function MONEY.NETWORK_SPEND_UPGRADE_SUB(p0, p1, p2, p3)
  native.invoke(
    Type.Void, 2578, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1),
    arg(Type.Any, p2),
    arg(Type.Any, p3)
  )
end

function MONEY.NETWORK_SPEND_ISLAND_HEIST(p0, p1, p2, p3)
  native.invoke(
    Type.Void, 2579, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1),
    arg(Type.Any, p2),
    arg(Type.Any, p3)
  )
end

function MONEY.NETWORK_EARN_ISLAND_HEIST(amount1, p1, p2, p3, amount2, p5)
  native.invoke(
    Type.Void, 2580, false,
    arg(Type.Int, amount1),
    arg(Type.Any, p1),
    arg(Type.Any, p2),
    arg(Type.Any, p3),
    arg(Type.Int, amount2),
    arg(Type.Int, p5)
  )
end

function MONEY.NETWORK_EARN_BEACH_PARTY_LOST_FOUND(p0, p1, p2)
  native.invoke(
    Type.Void, 2581, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1),
    arg(Type.Any, p2)
  )
end

function MONEY.NETWORK_EARN_FROM_ISLAND_HEIST_DJ_MISSION(p0, p1)
  native.invoke(
    Type.Void, 2582, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1)
  )
end

function MONEY.NETWORK_SPEND_CAR_CLUB_MEMBERSHIP(amount1, p1, p2, amount2, p4)
  native.invoke(
    Type.Void, 2583, false,
    arg(Type.Int, amount1),
    arg(Type.Any, p1),
    arg(Type.Any, p2),
    arg(Type.Int, amount2),
    arg(Type.Any, p4)
  )
end

function MONEY.NETWORK_SPEND_CAR_CLUB_BAR(p0, p1, p2, p3)
  native.invoke(
    Type.Void, 2584, false,
    arg(Type.Any, p0),
    arg(Type.Bool, p1),
    arg(Type.Bool, p2),
    arg(Type.Any, p3)
  )
end

function MONEY.NETWORK_SPEND_AUTOSHOP_MODIFY(p0, p1, p2, p3, p4)
  native.invoke(
    Type.Void, 2585, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1),
    arg(Type.Any, p2),
    arg(Type.Any, p3),
    arg(Type.Any, p4)
  )
end

function MONEY.NETWORK_SPEND_CAR_CLUB_TAKEOVER(p0, p1, p2, p3)
  native.invoke(
    Type.Void, 2586, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1),
    arg(Type.Any, p2),
    arg(Type.Any, p3)
  )
end

function MONEY.NETWORK_SPEND_BUY_AUTOSHOP(p0, p1, p2, p3)
  native.invoke(
    Type.Void, 2587, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1),
    arg(Type.Any, p2),
    arg(Type.Any, p3)
  )
end

function MONEY.NETWORK_SPEND_UPGRADE_AUTOSHOP(p0, p1, p2, p3)
  native.invoke(
    Type.Void, 2588, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1),
    arg(Type.Any, p2),
    arg(Type.Any, p3)
  )
end

function MONEY.NETWORK_EARN_AUTOSHOP_BUSINESS(p0, p1, p2)
  native.invoke(
    Type.Void, 2589, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1),
    arg(Type.Any, p2)
  )
end

function MONEY.NETWORK_EARN_AUTOSHOP_INCOME(p0, p1)
  native.invoke(
    Type.Void, 2590, false,
    arg(Type.Any, p0),
    arg(Type.Int, p1)
  )
end

function MONEY.NETWORK_EARN_CARCLUB_MEMBERSHIP(p0)
  native.invoke(
    Type.Void, 2591, false,
    arg(Type.Any, p0)
  )
end

function MONEY.NETWORK_EARN_DAILY_VEHICLE(p0, p1)
  native.invoke(
    Type.Void, 2592, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1)
  )
end

function MONEY.NETWORK_EARN_DAILY_VEHICLE_BONUS(p0)
  native.invoke(
    Type.Void, 2593, false,
    arg(Type.Any, p0)
  )
end

function MONEY.NETWORK_EARN_TUNER_AWARD(p0, p1, p2)
  native.invoke(
    Type.Void, 2594, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1),
    arg(Type.Any, p2)
  )
end

function MONEY.NETWORK_EARN_TUNER_ROBBERY(p0, p1, p2, p3, p4)
  native.invoke(
    Type.Void, 2595, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1),
    arg(Type.Any, p2),
    arg(Type.Any, p3),
    arg(Type.Any, p4)
  )
end

function MONEY.NETWORK_EARN_UPGRADE_AUTOSHOP(p0, p1)
  native.invoke(
    Type.Void, 2596, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1)
  )
end

function MONEY.NETWORK_SPEND_INTERACTION_MENU_ABILITY(p0, p1, p2, p3)
  native.invoke(
    Type.Void, 2597, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1),
    arg(Type.Any, p2),
    arg(Type.Any, p3)
  )
end

function MONEY.NETWORK_SPEND_SET_COMMON_FIELDS(p0, p1, p2, p3)
  native.invoke(
    Type.Void, 2598, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1),
    arg(Type.Any, p2),
    arg(Type.Bool, p3)
  )
end

function MONEY.NETWORK_SPEND_SET_DISCOUNT(p0)
  native.invoke(
    Type.Void, 2599, false,
    arg(Type.Bool, p0)
  )
end

function MONEY.NETWORK_SPEND_BUY_AGENCY(p0, p1, p2, p3)
  native.invoke(
    Type.Void, 2600, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1),
    arg(Type.Any, p2),
    arg(Type.Any, p3)
  )
end

function MONEY.NETWORK_SPEND_UPGRADE_AGENCY(p0, p1, p2, p3)
  native.invoke(
    Type.Void, 2601, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1),
    arg(Type.Any, p2),
    arg(Type.Any, p3)
  )
end

function MONEY.NETWORK_SPEND_AGENCY(p0, p1, p2, p3, p4)
  native.invoke(
    Type.Void, 2602, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1),
    arg(Type.Any, p2),
    arg(Type.Any, p3),
    arg(Type.Any, p4)
  )
end

function MONEY.NETWORK_SPEND_HIDDEN(p0, p1, p2, p3)
  native.invoke(
    Type.Void, 2603, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1),
    arg(Type.Any, p2),
    arg(Type.Any, p3)
  )
end

function MONEY.NETWORK_SPEND_SOURCE_BIKE(p0, p1, p2, p3)
  native.invoke(
    Type.Void, 2604, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1),
    arg(Type.Any, p2),
    arg(Type.Any, p3)
  )
end

function MONEY.NETWORK_SPEND_COMP_SUV(p0, p1, p2, p3)
  native.invoke(
    Type.Void, 2605, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1),
    arg(Type.Any, p2),
    arg(Type.Any, p3)
  )
end

function MONEY.NETWORK_SPEND_SUV_FST_TRVL(p0, p1, p2, p3)
  native.invoke(
    Type.Void, 2606, false,
    arg(Type.Int, p0),
    arg(Type.Bool, p1),
    arg(Type.Bool, p2),
    arg(Type.Any, p3)
  )
end

function MONEY.NETWORK_SPEND_SUPPLY(p0, p1, p2, p3)
  native.invoke(
    Type.Void, 2607, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1),
    arg(Type.Any, p2),
    arg(Type.Any, p3)
  )
end

function MONEY.NETWORK_SPEND_BIKE_SHOP(p0, p1, p2, p3)
  native.invoke(
    Type.Void, 2608, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1),
    arg(Type.Any, p2),
    arg(Type.Any, p3)
  )
end

function MONEY.NETWORK_SPEND_VEHICLE_REQUESTED(p0, p1, p2, p3, p4)
  native.invoke(
    Type.Void, 2609, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1),
    arg(Type.Any, p2),
    arg(Type.Any, p3),
    arg(Type.Any, p4)
  )
end

function MONEY.NETWORK_SPEND_GUNRUNNING(p0, p1, p2, p3)
  native.invoke(
    Type.Void, 2610, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1),
    arg(Type.Any, p2),
    arg(Type.Any, p3)
  )
end

function MONEY.NETWORK_EARN_AGENCY_SAFE(p0)
  native.invoke(
    Type.Void, 2611, false,
    arg(Type.Any, p0)
  )
end

function MONEY.NETWORK_EARN_AWARD_CONTRACT(p0, p1)
  native.invoke(
    Type.Void, 2612, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1)
  )
end

function MONEY.NETWORK_EARN_AGENCY_CONTRACT(p0, p1)
  native.invoke(
    Type.Void, 2613, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1)
  )
end

function MONEY.NETWORK_EARN_AWARD_PHONE(p0, p1)
  native.invoke(
    Type.Void, 2614, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1)
  )
end

function MONEY.NETWORK_EARN_AGENCY_PHONE(p0, p1, p2)
  native.invoke(
    Type.Void, 2615, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1),
    arg(Type.Any, p2)
  )
end

function MONEY.NETWORK_EARN_AWARD_FIXER_MISSION(p0, p1)
  native.invoke(
    Type.Void, 2616, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1)
  )
end

function MONEY.NETWORK_EARN_FIXER_PREP(p0, p1)
  native.invoke(
    Type.Void, 2617, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1)
  )
end

function MONEY.NETWORK_EARN_FIXER_FINALE(p0, p1)
  native.invoke(
    Type.Void, 2618, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1)
  )
end

function MONEY.NETWORK_EARN_FIXER_AGENCY_SHORT_TRIP(p0, p1)
  native.invoke(
    Type.Void, 2619, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1)
  )
end

function MONEY.NETWORK_EARN_AWARD_SHORT_TRIP(p0, p1)
  native.invoke(
    Type.Void, 2620, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1)
  )
end

function MONEY.NETWORK_EARN_FIXER_RIVAL_DELIVERY(p0, p1)
  native.invoke(
    Type.Void, 2621, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1)
  )
end

function MONEY.NETWORK_EARN_UPGRADE_AGENCY(p0, p1)
  native.invoke(
    Type.Void, 2622, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1)
  )
end

function MONEY.NETWORK_SPEND_APARTMENT_UTILITIES(amount, p1, p2, data)
  native.invoke(
    Type.Void, 2623, false,
    arg(Type.Int, amount),
    arg(Type.Bool, p1),
    arg(Type.Bool, p2),
    ref(Type.Any, data)
  )
end

function MONEY.NETWORK_SPEND_BUSINESS_PROPERTY_FEES(p0, p1, p2, p3)
  native.invoke(
    Type.Void, 2624, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1),
    arg(Type.Any, p2),
    arg(Type.Any, p3)
  )
end

function MONEY.NETWORK_EARN_SIGHTSEEING_REWARD(p0, p1, p2, p3)
  native.invoke(
    Type.Void, 2625, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1),
    arg(Type.Any, p2),
    arg(Type.Any, p3)
  )
end

function MONEY.NETWORK_EARN_BIKER_SHOP(p0, p1)
  native.invoke(
    Type.Void, 2626, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1)
  )
end

function MONEY.NETWORK_EARN_BIKER(p0)
  native.invoke(
    Type.Void, 2627, false,
    arg(Type.Any, p0)
  )
end

function MONEY.NETWORK_YOHAN_SOURCE_GOODS(p0, p1, p2, p3)
  native.invoke(
    Type.Void, 2628, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1),
    arg(Type.Any, p2),
    arg(Type.Any, p3)
  )
end

function MONEY._NETWORK_SPEND_BUY_MFGARAGE(p0, p1, p2, p3)
  native.invoke(
    Type.Void, 2629, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1),
    arg(Type.Any, p2),
    arg(Type.Any, p3)
  )
end

function MONEY._NETWORK_SPEND_UPGRADE_MFGARAGE(p0, p1, p2, p3)
  native.invoke(
    Type.Void, 2630, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1),
    arg(Type.Any, p2),
    arg(Type.Any, p3)
  )
end

function MONEY._NETWORK_SPEND_BUY_SUPPLIES(p0, p1, p2, p3)
  native.invoke(
    Type.Void, 2631, false,
    arg(Type.Int, p0),
    arg(Type.Bool, p1),
    arg(Type.Bool, p2),
    arg(Type.Int, p3)
  )
end

function MONEY._NETWORK_SPEND_BUY_ACID_LAB(p0, p1, p2, p3)
  native.invoke(
    Type.Void, 2632, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1),
    arg(Type.Any, p2),
    arg(Type.Any, p3)
  )
end

function MONEY._NETWORK_SPEND_UPGRADE_ACID_LAB_EQUIPMENT(p0, p1, p2, p3)
  native.invoke(
    Type.Void, 2633, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1),
    arg(Type.Any, p2),
    arg(Type.Any, p3)
  )
end

function MONEY._NETWORK_SPEND_UPGRADE_ACID_LAB_ARMOR(p0, p1, p2, p3)
  native.invoke(
    Type.Void, 2634, false,
    arg(Type.Int, p0),
    arg(Type.Bool, p1),
    arg(Type.Bool, p2),
    arg(Type.Int, p3)
  )
end

function MONEY._NETWORK_SPEND_UPGRADE_ACID_LAB_SCOOP(p0, p1, p2, p3)
  native.invoke(
    Type.Void, 2635, false,
    arg(Type.Int, p0),
    arg(Type.Bool, p1),
    arg(Type.Bool, p2),
    arg(Type.Int, p3)
  )
end

function MONEY._NETWORK_SPEND_UPGRADE_ACID_LAB_MINES(p0, p1, p2, p3)
  native.invoke(
    Type.Void, 2636, false,
    arg(Type.Int, p0),
    arg(Type.Bool, p1),
    arg(Type.Bool, p2),
    arg(Type.Int, p3)
  )
end

function MONEY._NETWORK_SPEND_RENAME_ACID_LAB(p0, p1, p2, p3)
  native.invoke(
    Type.Void, 2637, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1),
    arg(Type.Any, p2),
    arg(Type.Any, p3)
  )
end

function MONEY._NETWORK_SPEND_RENAME_ACID_PRODUCT(p0, p1, p2, p3)
  native.invoke(
    Type.Void, 2638, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1),
    arg(Type.Any, p2),
    arg(Type.Any, p3)
  )
end

function MONEY._NETWORK_EARN_AWARD_JUGGALO_MISSION(p0, p1)
  native.invoke(
    Type.Void, 2639, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1)
  )
end

function MONEY._NETWORK_EARN_AWARD_ACID_LAB(p0, p1)
  native.invoke(
    Type.Void, 2640, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1)
  )
end

function MONEY._NETWORK_EARN_AWARD_DAILY_STASH(p0, p1)
  native.invoke(
    Type.Void, 2641, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1)
  )
end

function MONEY._NETWORK_EARN_AWARD_DEAD_DROP(p0, p1)
  native.invoke(
    Type.Void, 2642, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1)
  )
end

function MONEY._NETWORK_EARN_AWARD_RANDOM_EVENT(p0, p1)
  native.invoke(
    Type.Void, 2643, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1)
  )
end

function MONEY._NETWORK_EARN_AWARD_TAXI(p0, p1)
  native.invoke(
    Type.Void, 2644, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1)
  )
end

function MONEY._NETWORK_EARN_STREET_DEALER(p0, p1)
  native.invoke(
    Type.Void, 2645, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1)
  )
end

function MONEY._NETWORK_EARN_SELL_ACID(p0, p1)
  native.invoke(
    Type.Void, 2646, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1)
  )
end

function MONEY._NETWORK_EARN_SETUP_PARTICIPATION_ACID_LAB(p0, p1)
  native.invoke(
    Type.Void, 2647, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1)
  )
end

function MONEY._NETWORK_EARN_SOURCE_PARTICIPATION_ACID_LAB(p0, p1)
  native.invoke(
    Type.Void, 2648, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1)
  )
end

function MONEY._NETWORK_EARN_SELL_PARTICIPATION_ACID_LAB(p0, p1)
  native.invoke(
    Type.Void, 2649, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1)
  )
end

function MONEY._NETWORK_EARN_JUGGALO_STORY_MISSION(p0, p1)
  native.invoke(
    Type.Void, 2650, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1)
  )
end

function MONEY._NETWORK_EARN_JUGGALO_STORY_MISSION_PARTICIPATION(p0, p1)
  native.invoke(
    Type.Void, 2651, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1)
  )
end

function MONEY._NETWORK_EARN_FOOLIGAN_JOB(p0, p1)
  native.invoke(
    Type.Void, 2652, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1)
  )
end

function MONEY._NETWORK_EARN_FOOLIGAN_JOB_PARTICIPATION(p0, p1)
  native.invoke(
    Type.Void, 2653, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1)
  )
end

function MONEY._NETWORK_EARN_TAXI_JOB(p0, p1)
  native.invoke(
    Type.Void, 2654, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1)
  )
end

function MONEY._NETWORK_EARN_DAILY_STASH_HOUSE_COMPLETED(p0, p1)
  native.invoke(
    Type.Void, 2655, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1)
  )
end

function MONEY._NETWORK_EARN_DAILY_STASH_HOUSE_PARTICIPATION(p0, p1)
  native.invoke(
    Type.Void, 2656, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1)
  )
end

function MONEY._NETWORK_EARN_AVENGER(amount, p1)
  native.invoke(
    Type.Void, 2657, false,
    arg(Type.Int, amount),
    arg(Type.Int, p1)
  )
end

function MONEY._NETWORK_EARN_SMUGGLER_OPS(p0, p1, p2)
  native.invoke(
    Type.Void, 2658, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1),
    arg(Type.Any, p2)
  )
end

function MONEY._NETWORK_EARN_BONUS_OBJECTIVE(amount, p1, p2)
  native.invoke(
    Type.Void, 2659, false,
    arg(Type.Int, amount),
    arg(Type.Any, p1),
    arg(Type.Any, p2)
  )
end

function MONEY._NETWORK_EARN_PROGRESS_HUB(p0, p1)
  native.invoke(
    Type.Void, 2660, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1)
  )
end

function MONEY._NETWORK_SPENT_AIR_FREIGHT(hangarCargoSourcingPrice, fromBank, fromBankAndWallet, cost, warehouseId, warehouseSlot)
  native.invoke(
    Type.Void, 2661, false,
    arg(Type.Int, hangarCargoSourcingPrice),
    arg(Type.Bool, fromBank),
    arg(Type.Bool, fromBankAndWallet),
    arg(Type.Int, cost),
    arg(Type.Int, warehouseId),
    arg(Type.Int, warehouseSlot)
  )
end

function MONEY._NETWORK_SPENT_SKIP_CARGO_SOURCE_SETUP(amount, fromBank, fromBankAndWallet, cost)
  native.invoke(
    Type.Void, 2662, false,
    arg(Type.Int, amount),
    arg(Type.Bool, fromBank),
    arg(Type.Bool, fromBankAndWallet),
    arg(Type.Int, cost)
  )
end

function MONEY._NETWORK_SPENT_STEALTH_MODULE(amount, fromBank, fromBankAndWallet, p3)
  native.invoke(
    Type.Void, 2663, false,
    arg(Type.Int, amount),
    arg(Type.Bool, fromBank),
    arg(Type.Bool, fromBankAndWallet),
    arg(Type.Hash, p3)
  )
end

function MONEY._NETWORK_SPENT_MISSILE_JAMMER(amount, fromBank, fromBankAndWallet, p3)
  native.invoke(
    Type.Void, 2664, false,
    arg(Type.Int, amount),
    arg(Type.Bool, fromBank),
    arg(Type.Bool, fromBankAndWallet),
    arg(Type.Hash, p3)
  )
end

function MONEY._NETWORK_SPENT_GENERIC(price, p1, p2, stat, spent, p5, p6, data)
  native.invoke(
    Type.Void, 2665, false,
    arg(Type.Int, price),
    arg(Type.Bool, p1),
    arg(Type.Bool, p2),
    arg(Type.Hash, stat),
    arg(Type.Hash, spent),
    arg(Type.String, p5),
    arg(Type.String, p6),
    ref(Type.Any, data)
  )
end

function MONEY._NETWORK_EARN_GENERIC(amount, earn, p2, p3, data)
  native.invoke(
    Type.Void, 2666, false,
    arg(Type.Int, amount),
    arg(Type.Hash, earn),
    arg(Type.String, p2),
    arg(Type.String, p3),
    ref(Type.Any, data)
  )
end

function MONEY._NETWORK_CLEAR_TRANSACTION_TELEMETRY_NONCE()
  native.invoke(
    Type.Void, 2667, false
  )
end

function MONEY.NETWORK_GET_VC_BANK_BALANCE()
  return native.invoke(
    Type.Int, 2668, false
  )
end

function MONEY.NETWORK_GET_VC_WALLET_BALANCE(characterSlot)
  return native.invoke(
    Type.Int, 2669, false,
    arg(Type.Int, characterSlot)
  )
end

function MONEY.NETWORK_GET_VC_BALANCE()
  return native.invoke(
    Type.Int, 2670, false
  )
end

function MONEY.NETWORK_GET_EVC_BALANCE()
  return native.invoke(
    Type.Int, 2671, false
  )
end

function MONEY.NETWORK_GET_PVC_BALANCE()
  return native.invoke(
    Type.Int, 2672, false
  )
end

function MONEY.NETWORK_GET_STRING_WALLET_BALANCE(characterSlot)
  return native.invoke(
    Type.String, 2673, false,
    arg(Type.Int, characterSlot)
  )
end

function MONEY.NETWORK_GET_STRING_BANK_BALANCE()
  return native.invoke(
    Type.String, 2674, false
  )
end

function MONEY.NETWORK_GET_STRING_BANK_WALLET_BALANCE(character)
  return native.invoke(
    Type.String, 2675, false,
    arg(Type.Int, character)
  )
end

function MONEY.NETWORK_GET_CAN_SPEND_FROM_WALLET(amount, characterSlot)
  return native.invoke(
    Type.Bool, 2676, false,
    arg(Type.Int, amount),
    arg(Type.Int, characterSlot)
  )
end

function MONEY.NETWORK_GET_CAN_SPEND_FROM_BANK(amount)
  return native.invoke(
    Type.Bool, 2677, false,
    arg(Type.Int, amount)
  )
end

function MONEY.NETWORK_GET_CAN_SPEND_FROM_BANK_AND_WALLET(amount, characterSlot)
  return native.invoke(
    Type.Bool, 2678, false,
    arg(Type.Int, amount),
    arg(Type.Int, characterSlot)
  )
end

function MONEY.NETWORK_GET_PVC_TRANSFER_BALANCE()
  return native.invoke(
    Type.Int, 2679, false
  )
end

function MONEY.NETWORK_GET_CAN_TRANSFER_CASH(amount)
  return native.invoke(
    Type.Bool, 2680, false,
    arg(Type.Int, amount)
  )
end

function MONEY.NETWORK_CAN_RECEIVE_PLAYER_CASH(p0, p1, p2, p3)
  return native.invoke(
    Type.Bool, 2681, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1),
    arg(Type.Any, p2),
    arg(Type.Any, p3)
  )
end

function MONEY.NETWORK_GET_REMAINING_TRANSFER_BALANCE()
  return native.invoke(
    Type.Int, 2682, false
  )
end

function MONEY.WITHDRAW_VC(amount)
  return native.invoke(
    Type.Int, 2683, false,
    arg(Type.Int, amount)
  )
end

function MONEY.DEPOSIT_VC(amount)
  return native.invoke(
    Type.Bool, 2684, false,
    arg(Type.Int, amount)
  )
end

function MONEY.HAS_VC_WITHDRAWAL_COMPLETED(p0)
  return native.invoke(
    Type.Bool, 2685, false,
    arg(Type.Any, p0)
  )
end

function MONEY.WAS_VC_WITHDRAWAL_SUCCESSFUL(p0)
  return native.invoke(
    Type.Bool, 2686, false,
    arg(Type.Any, p0)
  )
end


NETSHOPPING = {}

function NETSHOPPING.NET_GAMESERVER_USE_SERVER_TRANSACTIONS()
  return native.invoke(
    Type.Bool, 2687, false
  )
end

function NETSHOPPING.NET_GAMESERVER_CATALOG_ITEM_IS_VALID(name)
  return native.invoke(
    Type.Bool, 2688, false,
    arg(Type.String, name)
  )
end

function NETSHOPPING.NET_GAMESERVER_CATALOG_ITEM_KEY_IS_VALID(hash)
  return native.invoke(
    Type.Bool, 2689, false,
    arg(Type.Hash, hash)
  )
end

function NETSHOPPING.NET_GAMESERVER_GET_PRICE(itemHash, categoryHash, p2)
  return native.invoke(
    Type.Int, 2690, false,
    arg(Type.Hash, itemHash),
    arg(Type.Hash, categoryHash),
    arg(Type.Bool, p2)
  )
end

function NETSHOPPING.NET_GAMESERVER_CATALOG_IS_VALID()
  return native.invoke(
    Type.Bool, 2691, false
  )
end

function NETSHOPPING.NET_GAMESERVER_IS_CATALOG_CURRENT()
  return native.invoke(
    Type.Bool, 2692, false
  )
end

function NETSHOPPING.NET_GAMESERVER_GET_CATALOG_CLOUD_CRC()
  return native.invoke(
    Type.Hash, 2693, false
  )
end

function NETSHOPPING.NET_GAMESERVER_REFRESH_SERVER_CATALOG()
  return native.invoke(
    Type.Bool, 2694, false
  )
end

function NETSHOPPING.NET_GAMESERVER_RETRIEVE_CATALOG_REFRESH_STATUS(state)
  return native.invoke(
    Type.Bool, 2695, false,
    ref(Type.Int, state)
  )
end

function NETSHOPPING.NET_GAMESERVER_INIT_SESSION()
  return native.invoke(
    Type.Bool, 2696, false
  )
end

function NETSHOPPING.NET_GAMESERVER_RETRIEVE_INIT_SESSION_STATUS(p0)
  return native.invoke(
    Type.Bool, 2697, false,
    ref(Type.Int, p0)
  )
end

function NETSHOPPING.NET_GAMESERVER_START_SESSION(charSlot)
  return native.invoke(
    Type.Bool, 2698, false,
    arg(Type.Int, charSlot)
  )
end

function NETSHOPPING.NET_GAMESERVER_START_SESSION_PENDING()
  return native.invoke(
    Type.Bool, 2699, false
  )
end

function NETSHOPPING.NET_GAMESERVER_RETRIEVE_START_SESSION_STATUS(p0)
  return native.invoke(
    Type.Bool, 2700, false,
    ref(Type.Int, p0)
  )
end

function NETSHOPPING.NET_GAMESERVER_RETRIEVE_SESSION_ERROR_CODE(p0)
  return native.invoke(
    Type.Bool, 2701, false,
    ref(Type.Int, p0)
  )
end

function NETSHOPPING.NET_GAMESERVER_IS_SESSION_VALID(charSlot)
  return native.invoke(
    Type.Bool, 2702, false,
    arg(Type.Int, charSlot)
  )
end

function NETSHOPPING.NET_GAMESERVER_CLEAR_SESSION(p0)
  return native.invoke(
    Type.Bool, 2703, false,
    arg(Type.Int, p0)
  )
end

function NETSHOPPING.NET_GAMESERVER_SESSION_APPLY_RECEIVED_DATA(charSlot)
  return native.invoke(
    Type.Bool, 2704, false,
    arg(Type.Int, charSlot)
  )
end

function NETSHOPPING.NET_GAMESERVER_IS_SESSION_REFRESH_PENDING()
  return native.invoke(
    Type.Bool, 2705, false
  )
end

function NETSHOPPING.NET_GAMESERVER_START_SESSION_RESTART(inventory, playerbalance)
  return native.invoke(
    Type.Bool, 2706, false,
    arg(Type.Bool, inventory),
    arg(Type.Bool, playerbalance)
  )
end

function NETSHOPPING.NET_GAMESERVER_TRANSACTION_IN_PROGRESS()
  return native.invoke(
    Type.Bool, 2707, false
  )
end

function NETSHOPPING.NET_GAMESERVER_GET_SESSION_STATE_AND_STATUS(p0, p1)
  return native.invoke(
    Type.Bool, 2708, false,
    ref(Type.Int, p0),
    ref(Type.Bool, p1)
  )
end

function NETSHOPPING.NET_GAMESERVER_BASKET_START(transactionId, categoryHash, actionHash, flags)
  return native.invoke(
    Type.Bool, 2709, false,
    ref(Type.Int, transactionId),
    arg(Type.Hash, categoryHash),
    arg(Type.Hash, actionHash),
    arg(Type.Int, flags)
  )
end

function NETSHOPPING.NET_GAMESERVER_BASKET_END()
  return native.invoke(
    Type.Bool, 2710, false
  )
end

function NETSHOPPING.NET_GAMESERVER_BASKET_IS_ACTIVE()
  return native.invoke(
    Type.Bool, 2711, false
  )
end

function NETSHOPPING.NET_GAMESERVER_BASKET_ADD_ITEM(itemData, quantity)
  return native.invoke(
    Type.Bool, 2712, false,
    ref(Type.Any, itemData),
    arg(Type.Int, quantity)
  )
end

function NETSHOPPING.NET_GAMESERVER_BASKET_IS_FULL()
  return native.invoke(
    Type.Bool, 2713, false
  )
end

function NETSHOPPING.NET_GAMESERVER_BASKET_APPLY_SERVER_DATA(p0, p1)
  return native.invoke(
    Type.Bool, 2714, false,
    arg(Type.Any, p0),
    ref(Type.Any, p1)
  )
end

function NETSHOPPING.NET_GAMESERVER_CHECKOUT_START(transactionId)
  return native.invoke(
    Type.Bool, 2715, false,
    arg(Type.Int, transactionId)
  )
end

function NETSHOPPING.NET_GAMESERVER_BEGIN_SERVICE(transactionId, categoryHash, itemHash, actionTypeHash, value, flags)
  return native.invoke(
    Type.Bool, 2716, false,
    ref(Type.Int, transactionId),
    arg(Type.Hash, categoryHash),
    arg(Type.Hash, itemHash),
    arg(Type.Hash, actionTypeHash),
    arg(Type.Int, value),
    arg(Type.Int, flags)
  )
end

function NETSHOPPING.NET_GAMESERVER_END_SERVICE(transactionId)
  return native.invoke(
    Type.Bool, 2717, false,
    arg(Type.Int, transactionId)
  )
end

function NETSHOPPING.NET_GAMESERVER_DELETE_CHARACTER(slot, transfer, reason)
  return native.invoke(
    Type.Bool, 2718, false,
    arg(Type.Int, slot),
    arg(Type.Bool, transfer),
    arg(Type.Hash, reason)
  )
end

function NETSHOPPING.NET_GAMESERVER_DELETE_CHARACTER_GET_STATUS()
  return native.invoke(
    Type.Int, 2719, false
  )
end

function NETSHOPPING.NET_GAMESERVER_DELETE_SET_TELEMETRY_NONCE_SEED()
  return native.invoke(
    Type.Bool, 2720, false
  )
end

function NETSHOPPING.NET_GAMESERVER_TRANSFER_BANK_TO_WALLET(charSlot, amount)
  return native.invoke(
    Type.Bool, 2721, false,
    arg(Type.Int, charSlot),
    arg(Type.Int, amount)
  )
end

function NETSHOPPING.NET_GAMESERVER_TRANSFER_WALLET_TO_BANK(charSlot, amount)
  return native.invoke(
    Type.Bool, 2722, false,
    arg(Type.Int, charSlot),
    arg(Type.Int, amount)
  )
end

function NETSHOPPING.NET_GAMESERVER_TRANSFER_BANK_TO_WALLET_GET_STATUS()
  return native.invoke(
    Type.Int, 2723, false
  )
end

function NETSHOPPING.NET_GAMESERVER_TRANSFER_WALLET_TO_BANK_GET_STATUS()
  return native.invoke(
    Type.Int, 2724, false
  )
end

function NETSHOPPING.NET_GAMESERVER_TRANSFER_CASH_SET_TELEMETRY_NONCE_SEED()
  return native.invoke(
    Type.Bool, 2725, false
  )
end

function NETSHOPPING.NET_GAMESERVER_SET_TELEMETRY_NONCE_SEED(p0)
  return native.invoke(
    Type.Bool, 2726, false,
    arg(Type.Int, p0)
  )
end


NETWORK = {}

function NETWORK.GET_ONLINE_VERSION()
  return native.invoke(
    Type.String, 2727, false
  )
end

function NETWORK.NETWORK_IS_SIGNED_IN()
  return native.invoke(
    Type.Bool, 2728, false
  )
end

function NETWORK.NETWORK_IS_SIGNED_ONLINE()
  return native.invoke(
    Type.Bool, 2729, false
  )
end

function NETWORK.NETWORK_IS_NP_AVAILABLE()
  return native.invoke(
    Type.Bool, 2730, false
  )
end

function NETWORK.NETWORK_IS_NP_PENDING()
  return native.invoke(
    Type.Bool, 2731, false
  )
end

function NETWORK.NETWORK_GET_NP_UNAVAILABLE_REASON()
  return native.invoke(
    Type.Int, 2732, false
  )
end

function NETWORK.NETWORK_IS_CONNETED_TO_NP_PRESENCE()
  return native.invoke(
    Type.Bool, 2733, false
  )
end

function NETWORK.NETWORK_IS_LOGGED_IN_TO_PSN()
  return native.invoke(
    Type.Bool, 2734, false
  )
end

function NETWORK.NETWORK_HAS_VALID_ROS_CREDENTIALS()
  return native.invoke(
    Type.Bool, 2735, false
  )
end

function NETWORK.NETWORK_IS_REFRESHING_ROS_CREDENTIALS()
  return native.invoke(
    Type.Bool, 2736, false
  )
end

function NETWORK.NETWORK_IS_CLOUD_AVAILABLE()
  return native.invoke(
    Type.Bool, 2737, false
  )
end

function NETWORK.NETWORK_HAS_SOCIAL_CLUB_ACCOUNT()
  return native.invoke(
    Type.Bool, 2738, false
  )
end

function NETWORK.NETWORK_ARE_SOCIAL_CLUB_POLICIES_CURRENT()
  return native.invoke(
    Type.Bool, 2739, false
  )
end

function NETWORK.NETWORK_IS_HOST()
  return native.invoke(
    Type.Bool, 2740, false
  )
end

function NETWORK.NETWORK_GET_HOST_PLAYER_INDEX()
  return native.invoke(
    Type.Player, 2741, false
  )
end

function NETWORK.NETWORK_WAS_GAME_SUSPENDED()
  return native.invoke(
    Type.Bool, 2742, false
  )
end

function NETWORK.NETWORK_HAVE_ONLINE_PRIVILEGES()
  return native.invoke(
    Type.Bool, 2743, false
  )
end

function NETWORK.NETWORK_HAS_AGE_RESTRICTIONS()
  return native.invoke(
    Type.Bool, 2744, false
  )
end

function NETWORK.NETWORK_HAVE_USER_CONTENT_PRIVILEGES(p0)
  return native.invoke(
    Type.Bool, 2745, false,
    arg(Type.Int, p0)
  )
end

function NETWORK.NETWORK_HAVE_COMMUNICATION_PRIVILEGES(p0, player)
  return native.invoke(
    Type.Bool, 2746, false,
    arg(Type.Int, p0),
    arg(Type.Player, player)
  )
end

function NETWORK._NETWORK_HAVE_PLATFORM_COMMUNICATION_PRIVILEGES()
  return native.invoke(
    Type.Bool, 2747, false
  )
end

function NETWORK.NETWORK_CHECK_ONLINE_PRIVILEGES(p0, p1)
  return native.invoke(
    Type.Bool, 2748, false,
    arg(Type.Any, p0),
    arg(Type.Bool, p1)
  )
end

function NETWORK.NETWORK_CHECK_USER_CONTENT_PRIVILEGES(p0, p1, p2)
  return native.invoke(
    Type.Bool, 2749, false,
    arg(Type.Int, p0),
    arg(Type.Int, p1),
    arg(Type.Bool, p2)
  )
end

function NETWORK.NETWORK_CHECK_COMMUNICATION_PRIVILEGES(p0, p1, p2)
  return native.invoke(
    Type.Bool, 2750, false,
    arg(Type.Int, p0),
    arg(Type.Int, p1),
    arg(Type.Bool, p2)
  )
end

function NETWORK.NETWORK_CHECK_TEXT_COMMUNICATION_PRIVILEGES(p0, p1, p2)
  return native.invoke(
    Type.Bool, 2751, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1),
    arg(Type.Any, p2)
  )
end

function NETWORK.NETWORK_IS_USING_ONLINE_PROMOTION()
  return native.invoke(
    Type.Bool, 2752, false
  )
end

function NETWORK.NETWORK_SHOULD_SHOW_PROMOTION_ALERT_SCREEN()
  return native.invoke(
    Type.Bool, 2753, false
  )
end

function NETWORK.NETWORK_HAS_SOCIAL_NETWORKING_SHARING_PRIV()
  return native.invoke(
    Type.Bool, 2754, false
  )
end

function NETWORK.NETWORK_GET_AGE_GROUP()
  return native.invoke(
    Type.Int, 2755, false
  )
end

function NETWORK.NETWORK_CHECK_PRIVILEGES(p0, p1, p2)
  return native.invoke(
    Type.Bool, 2756, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1),
    arg(Type.Any, p2)
  )
end

function NETWORK.NETWORK_IS_PRIVILEGE_CHECK_IN_PROGRESS()
  return native.invoke(
    Type.Bool, 2757, false
  )
end

function NETWORK.NETWORK_SET_PRIVILEGE_CHECK_RESULT_NOT_NEEDED()
  native.invoke(
    Type.Void, 2758, false
  )
end

function NETWORK.NETWORK_RESOLVE_PRIVILEGE_USER_CONTENT()
  return native.invoke(
    Type.Bool, 2759, false
  )
end

function NETWORK.NETWORK_HAVE_PLATFORM_SUBSCRIPTION()
  return native.invoke(
    Type.Bool, 2760, false
  )
end

function NETWORK.NETWORK_IS_PLATFORM_SUBSCRIPTION_CHECK_PENDING()
  return native.invoke(
    Type.Bool, 2761, false
  )
end

function NETWORK.NETWORK_SHOW_ACCOUNT_UPGRADE_UI()
  native.invoke(
    Type.Void, 2762, false
  )
end

function NETWORK.NETWORK_IS_SHOWING_SYSTEM_UI_OR_RECENTLY_REQUESTED_UPSELL()
  return native.invoke(
    Type.Bool, 2763, false
  )
end

function NETWORK.NETWORK_NEED_TO_START_NEW_GAME_BUT_BLOCKED()
  return native.invoke(
    Type.Bool, 2764, false
  )
end

function NETWORK.NETWORK_CAN_BAIL()
  return native.invoke(
    Type.Bool, 2765, false
  )
end

function NETWORK.NETWORK_BAIL(p0, p1, p2)
  native.invoke(
    Type.Void, 2766, false,
    arg(Type.Int, p0),
    arg(Type.Int, p1),
    arg(Type.Int, p2)
  )
end

function NETWORK.NETWORK_ON_RETURN_TO_SINGLE_PLAYER()
  native.invoke(
    Type.Void, 2767, false
  )
end

function NETWORK.NETWORK_TRANSITION_START(p0, p1, p2, p3)
  return native.invoke(
    Type.Bool, 2768, false,
    arg(Type.Int, p0),
    arg(Type.Any, p1),
    arg(Type.Any, p2),
    arg(Type.Any, p3)
  )
end

function NETWORK.NETWORK_TRANSITION_ADD_STAGE(hash, p1, p2, state, p4)
  return native.invoke(
    Type.Bool, 2769, false,
    arg(Type.Hash, hash),
    arg(Type.Int, p1),
    arg(Type.Int, p2),
    arg(Type.Int, state),
    arg(Type.Int, p4)
  )
end

function NETWORK.NETWORK_TRANSITION_FINISH(p0, p1, p2)
  return native.invoke(
    Type.Bool, 2770, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1),
    arg(Type.Any, p2)
  )
end

function NETWORK.NETWORK_CAN_ACCESS_MULTIPLAYER(loadingState)
  return native.invoke(
    Type.Bool, 2771, false,
    ref(Type.Int, loadingState)
  )
end

function NETWORK.NETWORK_IS_MULTIPLAYER_DISABLED()
  return native.invoke(
    Type.Bool, 2772, false
  )
end

function NETWORK.NETWORK_CAN_ENTER_MULTIPLAYER()
  return native.invoke(
    Type.Bool, 2773, false
  )
end

function NETWORK.NETWORK_SESSION_DO_FREEROAM_QUICKMATCH(p0, p1, p2)
  return native.invoke(
    Type.Bool, 2774, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1),
    arg(Type.Any, p2)
  )
end

function NETWORK.NETWORK_SESSION_DO_FRIEND_MATCHMAKING(p0, p1, p2)
  return native.invoke(
    Type.Bool, 2775, false,
    arg(Type.Int, p0),
    arg(Type.Int, p1),
    arg(Type.Int, p2)
  )
end

function NETWORK.NETWORK_SESSION_DO_CREW_MATCHMAKING(crewId, p1, p2, maxPlayers)
  return native.invoke(
    Type.Bool, 2776, false,
    arg(Type.Int, crewId),
    arg(Type.Int, p1),
    arg(Type.Int, p2),
    arg(Type.Int, maxPlayers)
  )
end

function NETWORK.NETWORK_SESSION_DO_ACTIVITY_QUICKMATCH(p0, p1, p2, p3, p4)
  return native.invoke(
    Type.Bool, 2777, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1),
    arg(Type.Any, p2),
    arg(Type.Any, p3),
    arg(Type.Any, p4)
  )
end

function NETWORK.NETWORK_SESSION_HOST(p0, maxPlayers, p2)
  return native.invoke(
    Type.Bool, 2778, false,
    arg(Type.Int, p0),
    arg(Type.Int, maxPlayers),
    arg(Type.Bool, p2)
  )
end

function NETWORK.NETWORK_SESSION_HOST_CLOSED(p0, maxPlayers)
  return native.invoke(
    Type.Bool, 2779, false,
    arg(Type.Int, p0),
    arg(Type.Int, maxPlayers)
  )
end

function NETWORK.NETWORK_SESSION_HOST_FRIENDS_ONLY(p0, maxPlayers)
  return native.invoke(
    Type.Bool, 2780, false,
    arg(Type.Int, p0),
    arg(Type.Int, maxPlayers)
  )
end

function NETWORK.NETWORK_SESSION_IS_CLOSED_FRIENDS()
  return native.invoke(
    Type.Bool, 2781, false
  )
end

function NETWORK.NETWORK_SESSION_IS_CLOSED_CREW()
  return native.invoke(
    Type.Bool, 2782, false
  )
end

function NETWORK.NETWORK_SESSION_IS_SOLO()
  return native.invoke(
    Type.Bool, 2783, false
  )
end

function NETWORK.NETWORK_SESSION_IS_PRIVATE()
  return native.invoke(
    Type.Bool, 2784, false
  )
end

function NETWORK._NETWORK_SESSION_LEAVE_INCLUDING_REASON(leaveFlags, leaveReason)
  return native.invoke(
    Type.Bool, 2785, false,
    arg(Type.Int, leaveFlags),
    arg(Type.Int, leaveReason)
  )
end

function NETWORK.NETWORK_SESSION_END(p0, p1)
  return native.invoke(
    Type.Bool, 2786, false,
    arg(Type.Bool, p0),
    arg(Type.Bool, p1)
  )
end

function NETWORK.NETWORK_SESSION_LEAVE(p0)
  return native.invoke(
    Type.Bool, 2787, false,
    arg(Type.Any, p0)
  )
end

function NETWORK.NETWORK_SESSION_KICK_PLAYER(player)
  native.invoke(
    Type.Void, 2788, false,
    arg(Type.Player, player)
  )
end

function NETWORK.NETWORK_SESSION_GET_KICK_VOTE(player)
  return native.invoke(
    Type.Bool, 2789, false,
    arg(Type.Player, player)
  )
end

function NETWORK.NETWORK_SESSION_RESERVE_SLOTS_TRANSITION(p0, p1, p2)
  return native.invoke(
    Type.Bool, 2790, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1),
    arg(Type.Any, p2)
  )
end

function NETWORK.NETWORK_JOIN_PREVIOUSLY_FAILED_SESSION()
  return native.invoke(
    Type.Bool, 2791, false
  )
end

function NETWORK.NETWORK_JOIN_PREVIOUSLY_FAILED_TRANSITION()
  return native.invoke(
    Type.Bool, 2792, false
  )
end

function NETWORK.NETWORK_SESSION_SET_MATCHMAKING_GROUP(matchmakingGroup)
  native.invoke(
    Type.Void, 2793, false,
    arg(Type.Int, matchmakingGroup)
  )
end

function NETWORK.NETWORK_SESSION_SET_MATCHMAKING_GROUP_MAX(playerType, playerCount)
  native.invoke(
    Type.Void, 2794, false,
    arg(Type.Int, playerType),
    arg(Type.Int, playerCount)
  )
end

function NETWORK.NETWORK_SESSION_GET_MATCHMAKING_GROUP_FREE(p0)
  return native.invoke(
    Type.Int, 2795, false,
    arg(Type.Int, p0)
  )
end

function NETWORK.NETWORK_SESSION_ADD_ACTIVE_MATCHMAKING_GROUP(groupId)
  native.invoke(
    Type.Void, 2796, false,
    arg(Type.Int, groupId)
  )
end

function NETWORK.NETWORK_SESSION_SET_UNIQUE_CREW_LIMIT(p0)
  native.invoke(
    Type.Void, 2797, false,
    arg(Type.Any, p0)
  )
end

function NETWORK.NETWORK_SESSION_GET_UNIQUE_CREW_LIMIT()
  return native.invoke(
    Type.Int, 2798, false
  )
end

function NETWORK.NETWORK_SESSION_SET_UNIQUE_CREW_LIMIT_TRANSITION(p0)
  native.invoke(
    Type.Void, 2799, false,
    arg(Type.Any, p0)
  )
end

function NETWORK.NETWORK_SESSION_SET_UNIQUE_CREW_ONLY_CREWS_TRANSITION(p0)
  native.invoke(
    Type.Void, 2800, false,
    arg(Type.Bool, p0)
  )
end

function NETWORK.NETWORK_SESSION_SET_CREW_LIMIT_MAX_MEMBERS_TRANSITION(p0)
  native.invoke(
    Type.Void, 2801, false,
    arg(Type.Any, p0)
  )
end

function NETWORK.NETWORK_SESSION_SET_MATCHMAKING_PROPERTY_ID(p0)
  native.invoke(
    Type.Void, 2802, false,
    arg(Type.Bool, p0)
  )
end

function NETWORK.NETWORK_SESSION_SET_MATCHMAKING_MENTAL_STATE(p0)
  native.invoke(
    Type.Void, 2803, false,
    arg(Type.Int, p0)
  )
end

function NETWORK.NETWORK_SESSION_SET_NUM_BOSSES(num)
  native.invoke(
    Type.Void, 2804, false,
    arg(Type.Int, num)
  )
end

function NETWORK.NETWORK_SESSION_SET_SCRIPT_VALIDATE_JOIN()
  native.invoke(
    Type.Void, 2805, false
  )
end

function NETWORK.NETWORK_SESSION_VALIDATE_JOIN(p0)
  native.invoke(
    Type.Void, 2806, false,
    arg(Type.Bool, p0)
  )
end

function NETWORK.NETWORK_ADD_FOLLOWERS(p0, p1)
  native.invoke(
    Type.Void, 2807, false,
    ref(Type.Int, p0),
    arg(Type.Int, p1)
  )
end

function NETWORK.NETWORK_CLEAR_FOLLOWERS()
  native.invoke(
    Type.Void, 2808, false
  )
end

function NETWORK.NETWORK_GET_GLOBAL_MULTIPLAYER_CLOCK(hours, minutes, seconds)
  native.invoke(
    Type.Void, 2809, false,
    ref(Type.Int, hours),
    ref(Type.Int, minutes),
    ref(Type.Int, seconds)
  )
end

function NETWORK.NETWORK_SESSION_SET_GAMEMODE(p0)
  native.invoke(
    Type.Void, 2810, false,
    arg(Type.Any, p0)
  )
end

function NETWORK.NETWORK_SESSION_GET_HOST_AIM_PREFERENCE()
  return native.invoke(
    Type.Int, 2811, false
  )
end

function NETWORK.NETWORK_FIND_GAMERS_IN_CREW(crewId)
  return native.invoke(
    Type.Bool, 2812, false,
    arg(Type.Int, crewId)
  )
end

function NETWORK.NETWORK_FIND_MATCHED_GAMERS(attribute, fallbackLimit, lowerLimit, upperLimit)
  return native.invoke(
    Type.Bool, 2813, false,
    arg(Type.Int, attribute),
    arg(Type.Float, fallbackLimit),
    arg(Type.Float, lowerLimit),
    arg(Type.Float, upperLimit)
  )
end

function NETWORK.NETWORK_IS_FINDING_GAMERS()
  return native.invoke(
    Type.Bool, 2814, false
  )
end

function NETWORK.NETWORK_DID_FIND_GAMERS_SUCCEED()
  return native.invoke(
    Type.Bool, 2815, false
  )
end

function NETWORK.NETWORK_GET_NUM_FOUND_GAMERS()
  return native.invoke(
    Type.Int, 2816, false
  )
end

function NETWORK.NETWORK_GET_FOUND_GAMER(p0, p1)
  return native.invoke(
    Type.Bool, 2817, false,
    ref(Type.Any, p0),
    arg(Type.Any, p1)
  )
end

function NETWORK.NETWORK_CLEAR_FOUND_GAMERS()
  native.invoke(
    Type.Void, 2818, false
  )
end

function NETWORK.NETWORK_QUEUE_GAMER_FOR_STATUS(p0)
  return native.invoke(
    Type.Bool, 2819, false,
    ref(Type.Any, p0)
  )
end

function NETWORK.NETWORK_GET_GAMER_STATUS_FROM_QUEUE()
  return native.invoke(
    Type.Bool, 2820, false
  )
end

function NETWORK.NETWORK_IS_GETTING_GAMER_STATUS()
  return native.invoke(
    Type.Bool, 2821, false
  )
end

function NETWORK.NETWORK_DID_GET_GAMER_STATUS_SUCCEED()
  return native.invoke(
    Type.Bool, 2822, false
  )
end

function NETWORK.NETWORK_GET_GAMER_STATUS_RESULT(p0, p1)
  return native.invoke(
    Type.Bool, 2823, false,
    ref(Type.Any, p0),
    arg(Type.Any, p1)
  )
end

function NETWORK.NETWORK_CLEAR_GET_GAMER_STATUS()
  native.invoke(
    Type.Void, 2824, false
  )
end

function NETWORK.NETWORK_SESSION_JOIN_INVITE()
  native.invoke(
    Type.Void, 2825, false
  )
end

function NETWORK.NETWORK_SESSION_CANCEL_INVITE()
  native.invoke(
    Type.Void, 2826, false
  )
end

function NETWORK.NETWORK_SESSION_FORCE_CANCEL_INVITE()
  native.invoke(
    Type.Void, 2827, false
  )
end

function NETWORK.NETWORK_HAS_PENDING_INVITE()
  return native.invoke(
    Type.Bool, 2828, false
  )
end

function NETWORK.NETWORK_HAS_CONFIRMED_INVITE()
  return native.invoke(
    Type.Bool, 2829, false
  )
end

function NETWORK.NETWORK_REQUEST_INVITE_CONFIRMED_EVENT()
  return native.invoke(
    Type.Bool, 2830, false
  )
end

function NETWORK.NETWORK_SESSION_WAS_INVITED()
  return native.invoke(
    Type.Bool, 2831, false
  )
end

function NETWORK.NETWORK_SESSION_GET_INVITER(gamerHandle)
  native.invoke(
    Type.Void, 2832, false,
    ref(Type.Any, gamerHandle)
  )
end

function NETWORK.NETWORK_SESSION_IS_AWAITING_INVITE_RESPONSE()
  return native.invoke(
    Type.Bool, 2833, false
  )
end

function NETWORK.NETWORK_SESSION_IS_DISPLAYING_INVITE_CONFIRMATION()
  return native.invoke(
    Type.Bool, 2834, false
  )
end

function NETWORK.NETWORK_SUPPRESS_INVITE(toggle)
  native.invoke(
    Type.Void, 2835, false,
    arg(Type.Bool, toggle)
  )
end

function NETWORK.NETWORK_BLOCK_INVITES(toggle)
  native.invoke(
    Type.Void, 2836, false,
    arg(Type.Bool, toggle)
  )
end

function NETWORK.NETWORK_BLOCK_JOIN_QUEUE_INVITES(toggle)
  native.invoke(
    Type.Void, 2837, false,
    arg(Type.Bool, toggle)
  )
end

function NETWORK.NETWORK_SET_CAN_RECEIVE_RS_INVITES(p0)
  native.invoke(
    Type.Void, 2838, false,
    arg(Type.Bool, p0)
  )
end

function NETWORK.NETWORK_STORE_INVITE_THROUGH_RESTART()
  native.invoke(
    Type.Void, 2839, false
  )
end

function NETWORK.NETWORK_ALLOW_INVITE_PROCESS_IN_PLAYER_SWITCH(p0)
  native.invoke(
    Type.Void, 2840, false,
    arg(Type.Bool, p0)
  )
end

function NETWORK.NETWORK_SET_SCRIPT_READY_FOR_EVENTS(toggle)
  native.invoke(
    Type.Void, 2841, false,
    arg(Type.Bool, toggle)
  )
end

function NETWORK.NETWORK_IS_OFFLINE_INVITE_PENDING()
  return native.invoke(
    Type.Bool, 2842, false
  )
end

function NETWORK.NETWORK_CLEAR_OFFLINE_INVITE_PENDING()
  native.invoke(
    Type.Void, 2843, false
  )
end

function NETWORK.NETWORK_SESSION_HOST_SINGLE_PLAYER(p0)
  native.invoke(
    Type.Void, 2844, false,
    arg(Type.Int, p0)
  )
end

function NETWORK.NETWORK_SESSION_LEAVE_SINGLE_PLAYER()
  native.invoke(
    Type.Void, 2845, false
  )
end

function NETWORK.NETWORK_IS_GAME_IN_PROGRESS()
  return native.invoke(
    Type.Bool, 2846, false
  )
end

function NETWORK.NETWORK_IS_SESSION_ACTIVE()
  return native.invoke(
    Type.Bool, 2847, false
  )
end

function NETWORK.NETWORK_IS_IN_SESSION()
  return native.invoke(
    Type.Bool, 2848, false
  )
end

function NETWORK._NETWORK_IS_AMERICAS_VERSION()
  return native.invoke(
    Type.Bool, 2849, false
  )
end

function NETWORK.NETWORK_IS_SESSION_STARTED()
  return native.invoke(
    Type.Bool, 2850, false
  )
end

function NETWORK.NETWORK_IS_SESSION_BUSY()
  return native.invoke(
    Type.Bool, 2851, false
  )
end

function NETWORK.NETWORK_CAN_SESSION_END()
  return native.invoke(
    Type.Bool, 2852, false
  )
end

function NETWORK.NETWORK_GET_GAME_MODE()
  return native.invoke(
    Type.Int, 2853, false
  )
end

function NETWORK.NETWORK_SESSION_MARK_VISIBLE(toggle)
  native.invoke(
    Type.Void, 2854, false,
    arg(Type.Bool, toggle)
  )
end

function NETWORK.NETWORK_SESSION_IS_VISIBLE()
  return native.invoke(
    Type.Bool, 2855, false
  )
end

function NETWORK.NETWORK_SESSION_BLOCK_JOIN_REQUESTS(toggle)
  native.invoke(
    Type.Void, 2856, false,
    arg(Type.Bool, toggle)
  )
end

function NETWORK.NETWORK_SESSION_CHANGE_SLOTS(slots, p1)
  native.invoke(
    Type.Void, 2857, false,
    arg(Type.Int, slots),
    arg(Type.Bool, p1)
  )
end

function NETWORK.NETWORK_SESSION_GET_PRIVATE_SLOTS()
  return native.invoke(
    Type.Int, 2858, false
  )
end

function NETWORK.NETWORK_SESSION_VOICE_HOST()
  return native.invoke(
    Type.Bool, 2859, false
  )
end

function NETWORK.NETWORK_SESSION_VOICE_LEAVE()
  return native.invoke(
    Type.Bool, 2860, false
  )
end

function NETWORK.NETWORK_SESSION_VOICE_CONNECT_TO_PLAYER(gamerHandle)
  native.invoke(
    Type.Void, 2861, false,
    ref(Type.Any, gamerHandle)
  )
end

function NETWORK.NETWORK_SESSION_VOICE_RESPOND_TO_REQUEST(p0, p1)
  native.invoke(
    Type.Void, 2862, false,
    arg(Type.Bool, p0),
    arg(Type.Int, p1)
  )
end

function NETWORK.NETWORK_SESSION_VOICE_SET_TIMEOUT(timeout)
  native.invoke(
    Type.Void, 2863, false,
    arg(Type.Int, timeout)
  )
end

function NETWORK.NETWORK_SESSION_IS_IN_VOICE_SESSION()
  return native.invoke(
    Type.Bool, 2864, false
  )
end

function NETWORK.NETWORK_SESSION_IS_VOICE_SESSION_ACTIVE()
  return native.invoke(
    Type.Bool, 2865, false
  )
end

function NETWORK.NETWORK_SESSION_IS_VOICE_SESSION_BUSY()
  return native.invoke(
    Type.Bool, 2866, false
  )
end

function NETWORK.NETWORK_SEND_TEXT_MESSAGE(message, gamerHandle)
  return native.invoke(
    Type.Bool, 2867, false,
    arg(Type.String, message),
    ref(Type.Any, gamerHandle)
  )
end

function NETWORK.NETWORK_SET_ACTIVITY_SPECTATOR(toggle)
  native.invoke(
    Type.Void, 2868, false,
    arg(Type.Bool, toggle)
  )
end

function NETWORK.NETWORK_IS_ACTIVITY_SPECTATOR()
  return native.invoke(
    Type.Bool, 2869, false
  )
end

function NETWORK.NETWORK_SET_ACTIVITY_PLAYER_MAX(p0)
  native.invoke(
    Type.Void, 2870, false,
    arg(Type.Any, p0)
  )
end

function NETWORK.NETWORK_SET_ACTIVITY_SPECTATOR_MAX(maxSpectators)
  native.invoke(
    Type.Void, 2871, false,
    arg(Type.Int, maxSpectators)
  )
end

function NETWORK.NETWORK_GET_ACTIVITY_PLAYER_NUM(p0)
  return native.invoke(
    Type.Int, 2872, false,
    arg(Type.Bool, p0)
  )
end

function NETWORK.NETWORK_IS_ACTIVITY_SPECTATOR_FROM_HANDLE(gamerHandle)
  return native.invoke(
    Type.Bool, 2873, false,
    ref(Type.Any, gamerHandle)
  )
end

function NETWORK.NETWORK_HOST_TRANSITION(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9)
  return native.invoke(
    Type.Bool, 2874, false,
    arg(Type.Int, p0),
    arg(Type.Int, p1),
    arg(Type.Int, p2),
    arg(Type.Int, p3),
    arg(Type.Any, p4),
    arg(Type.Bool, p5),
    arg(Type.Bool, p6),
    arg(Type.Int, p7),
    arg(Type.Any, p8),
    arg(Type.Int, p9)
  )
end

function NETWORK.NETWORK_DO_TRANSITION_QUICKMATCH(p0, p1, p2, p3, p4, p5)
  return native.invoke(
    Type.Bool, 2875, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1),
    arg(Type.Any, p2),
    arg(Type.Any, p3),
    arg(Type.Any, p4),
    arg(Type.Any, p5)
  )
end

function NETWORK.NETWORK_DO_TRANSITION_QUICKMATCH_ASYNC(p0, p1, p2, p3, p4, p5)
  return native.invoke(
    Type.Bool, 2876, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1),
    arg(Type.Any, p2),
    arg(Type.Any, p3),
    arg(Type.Any, p4),
    arg(Type.Any, p5)
  )
end

function NETWORK.NETWORK_DO_TRANSITION_QUICKMATCH_WITH_GROUP(p0, p1, p2, p3, p4, p5, p6, p7)
  return native.invoke(
    Type.Bool, 2877, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1),
    arg(Type.Any, p2),
    arg(Type.Any, p3),
    ref(Type.Any, p4),
    arg(Type.Any, p5),
    arg(Type.Any, p6),
    arg(Type.Any, p7)
  )
end

function NETWORK.NETWORK_JOIN_GROUP_ACTIVITY()
  return native.invoke(
    Type.Bool, 2878, false
  )
end

function NETWORK.NETWORK_CLEAR_GROUP_ACTIVITY()
  native.invoke(
    Type.Void, 2879, false
  )
end

function NETWORK.NETWORK_RETAIN_ACTIVITY_GROUP()
  native.invoke(
    Type.Void, 2880, false
  )
end

function NETWORK.NETWORK_IS_TRANSITION_CLOSED_FRIENDS()
  return native.invoke(
    Type.Bool, 2881, false
  )
end

function NETWORK.NETWORK_IS_TRANSITION_CLOSED_CREW()
  return native.invoke(
    Type.Bool, 2882, false
  )
end

function NETWORK.NETWORK_IS_TRANSITION_SOLO()
  return native.invoke(
    Type.Bool, 2883, false
  )
end

function NETWORK.NETWORK_IS_TRANSITION_PRIVATE()
  return native.invoke(
    Type.Bool, 2884, false
  )
end

function NETWORK.NETWORK_GET_NUM_TRANSITION_NON_ASYNC_GAMERS()
  return native.invoke(
    Type.Int, 2885, false
  )
end

function NETWORK.NETWORK_MARK_AS_PREFERRED_ACTIVITY(p0)
  native.invoke(
    Type.Void, 2886, false,
    arg(Type.Bool, p0)
  )
end

function NETWORK.NETWORK_MARK_AS_WAITING_ASYNC(p0)
  native.invoke(
    Type.Void, 2887, false,
    arg(Type.Bool, p0)
  )
end

function NETWORK.NETWORK_SET_IN_PROGRESS_FINISH_TIME(p0)
  native.invoke(
    Type.Void, 2888, false,
    arg(Type.Any, p0)
  )
end

function NETWORK.NETWORK_SET_TRANSITION_CREATOR_HANDLE(p0)
  native.invoke(
    Type.Void, 2889, false,
    ref(Type.Any, p0)
  )
end

function NETWORK.NETWORK_CLEAR_TRANSITION_CREATOR_HANDLE()
  native.invoke(
    Type.Void, 2890, false
  )
end

function NETWORK.NETWORK_INVITE_GAMERS_TO_TRANSITION(p0, p1)
  return native.invoke(
    Type.Bool, 2891, false,
    ref(Type.Any, p0),
    arg(Type.Any, p1)
  )
end

function NETWORK.NETWORK_SET_GAMER_INVITED_TO_TRANSITION(gamerHandle)
  native.invoke(
    Type.Void, 2892, false,
    ref(Type.Any, gamerHandle)
  )
end

function NETWORK.NETWORK_LEAVE_TRANSITION()
  return native.invoke(
    Type.Bool, 2893, false
  )
end

function NETWORK.NETWORK_LAUNCH_TRANSITION()
  return native.invoke(
    Type.Bool, 2894, false
  )
end

function NETWORK.NETWORK_SET_DO_NOT_LAUNCH_FROM_JOIN_AS_MIGRATED_HOST(toggle)
  native.invoke(
    Type.Void, 2895, false,
    arg(Type.Bool, toggle)
  )
end

function NETWORK.NETWORK_CANCEL_TRANSITION_MATCHMAKING()
  native.invoke(
    Type.Void, 2896, false
  )
end

function NETWORK.NETWORK_BAIL_TRANSITION(p0, p1, p2)
  native.invoke(
    Type.Void, 2897, false,
    arg(Type.Int, p0),
    arg(Type.Int, p1),
    arg(Type.Int, p2)
  )
end

function NETWORK.NETWORK_DO_TRANSITION_TO_GAME(p0, maxPlayers)
  return native.invoke(
    Type.Bool, 2898, false,
    arg(Type.Bool, p0),
    arg(Type.Int, maxPlayers)
  )
end

function NETWORK.NETWORK_DO_TRANSITION_TO_NEW_GAME(p0, maxPlayers, p2)
  return native.invoke(
    Type.Bool, 2899, false,
    arg(Type.Bool, p0),
    arg(Type.Int, maxPlayers),
    arg(Type.Bool, p2)
  )
end

function NETWORK.NETWORK_DO_TRANSITION_TO_FREEMODE(p0, p1, p2, players, p4)
  return native.invoke(
    Type.Bool, 2900, false,
    ref(Type.Any, p0),
    arg(Type.Any, p1),
    arg(Type.Bool, p2),
    arg(Type.Int, players),
    arg(Type.Bool, p4)
  )
end

function NETWORK.NETWORK_DO_TRANSITION_TO_NEW_FREEMODE(p0, p1, players, p3, p4, p5)
  return native.invoke(
    Type.Bool, 2901, false,
    ref(Type.Any, p0),
    arg(Type.Any, p1),
    arg(Type.Int, players),
    arg(Type.Bool, p3),
    arg(Type.Bool, p4),
    arg(Type.Bool, p5)
  )
end

function NETWORK.NETWORK_IS_TRANSITION_TO_GAME()
  return native.invoke(
    Type.Bool, 2902, false
  )
end

function NETWORK.NETWORK_GET_TRANSITION_MEMBERS(data, dataCount)
  return native.invoke(
    Type.Int, 2903, false,
    ref(Type.Any, data),
    arg(Type.Int, dataCount)
  )
end

function NETWORK.NETWORK_APPLY_TRANSITION_PARAMETER(p0, p1)
  native.invoke(
    Type.Void, 2904, false,
    arg(Type.Int, p0),
    arg(Type.Int, p1)
  )
end

function NETWORK.NETWORK_APPLY_TRANSITION_PARAMETER_STRING(p0, string, p2)
  native.invoke(
    Type.Void, 2905, false,
    arg(Type.Int, p0),
    arg(Type.String, string),
    arg(Type.Bool, p2)
  )
end

function NETWORK.NETWORK_SEND_TRANSITION_GAMER_INSTRUCTION(gamerHandle, p1, p2, p3, p4)
  return native.invoke(
    Type.Bool, 2906, false,
    ref(Type.Any, gamerHandle),
    arg(Type.String, p1),
    arg(Type.Int, p2),
    arg(Type.Int, p3),
    arg(Type.Bool, p4)
  )
end

function NETWORK.NETWORK_MARK_TRANSITION_GAMER_AS_FULLY_JOINED(p0)
  return native.invoke(
    Type.Bool, 2907, false,
    ref(Type.Any, p0)
  )
end

function NETWORK.NETWORK_IS_TRANSITION_HOST()
  return native.invoke(
    Type.Bool, 2908, false
  )
end

function NETWORK.NETWORK_IS_TRANSITION_HOST_FROM_HANDLE(gamerHandle)
  return native.invoke(
    Type.Bool, 2909, false,
    ref(Type.Any, gamerHandle)
  )
end

function NETWORK.NETWORK_GET_TRANSITION_HOST(gamerHandle)
  return native.invoke(
    Type.Bool, 2910, false,
    ref(Type.Any, gamerHandle)
  )
end

function NETWORK.NETWORK_IS_IN_TRANSITION()
  return native.invoke(
    Type.Bool, 2911, false
  )
end

function NETWORK.NETWORK_IS_TRANSITION_STARTED()
  return native.invoke(
    Type.Bool, 2912, false
  )
end

function NETWORK.NETWORK_IS_TRANSITION_BUSY()
  return native.invoke(
    Type.Bool, 2913, false
  )
end

function NETWORK.NETWORK_IS_TRANSITION_MATCHMAKING()
  return native.invoke(
    Type.Bool, 2914, false
  )
end

function NETWORK.NETWORK_IS_TRANSITION_LEAVE_POSTPONED()
  return native.invoke(
    Type.Bool, 2915, false
  )
end

function NETWORK.NETWORK_TRANSITION_SET_IN_PROGRESS(p0)
  native.invoke(
    Type.Void, 2916, false,
    arg(Type.Any, p0)
  )
end

function NETWORK.NETWORK_TRANSITION_SET_CONTENT_CREATOR(p0)
  native.invoke(
    Type.Void, 2917, false,
    arg(Type.Any, p0)
  )
end

function NETWORK.NETWORK_TRANSITION_SET_ACTIVITY_ISLAND(p0)
  native.invoke(
    Type.Void, 2918, false,
    arg(Type.Any, p0)
  )
end

function NETWORK.NETWORK_OPEN_TRANSITION_MATCHMAKING()
  native.invoke(
    Type.Void, 2919, false
  )
end

function NETWORK.NETWORK_CLOSE_TRANSITION_MATCHMAKING()
  native.invoke(
    Type.Void, 2920, false
  )
end

function NETWORK.NETWORK_IS_TRANSITION_OPEN_TO_MATCHMAKING()
  return native.invoke(
    Type.Bool, 2921, false
  )
end

function NETWORK.NETWORK_SET_TRANSITION_VISIBILITY_LOCK(p0, p1)
  native.invoke(
    Type.Void, 2922, false,
    arg(Type.Bool, p0),
    arg(Type.Bool, p1)
  )
end

function NETWORK.NETWORK_IS_TRANSITION_VISIBILITY_LOCKED()
  return native.invoke(
    Type.Bool, 2923, false
  )
end

function NETWORK.NETWORK_SET_TRANSITION_ACTIVITY_ID(p0)
  native.invoke(
    Type.Void, 2924, false,
    arg(Type.Any, p0)
  )
end

function NETWORK.NETWORK_CHANGE_TRANSITION_SLOTS(p0, p1)
  native.invoke(
    Type.Void, 2925, false,
    arg(Type.Any, p0),
    arg(Type.Bool, p1)
  )
end

function NETWORK.NETWORK_TRANSITION_BLOCK_JOIN_REQUESTS(p0)
  native.invoke(
    Type.Void, 2926, false,
    arg(Type.Bool, p0)
  )
end

function NETWORK.NETWORK_HAS_PLAYER_STARTED_TRANSITION(player)
  return native.invoke(
    Type.Bool, 2927, false,
    arg(Type.Player, player)
  )
end

function NETWORK.NETWORK_ARE_TRANSITION_DETAILS_VALID(p0)
  return native.invoke(
    Type.Bool, 2928, false,
    arg(Type.Any, p0)
  )
end

function NETWORK.NETWORK_JOIN_TRANSITION(player)
  return native.invoke(
    Type.Bool, 2929, false,
    arg(Type.Player, player)
  )
end

function NETWORK.NETWORK_HAS_INVITED_GAMER_TO_TRANSITION(p0)
  return native.invoke(
    Type.Bool, 2930, false,
    ref(Type.Any, p0)
  )
end

function NETWORK.NETWORK_HAS_TRANSITION_INVITE_BEEN_ACKED(p0)
  return native.invoke(
    Type.Bool, 2931, false,
    ref(Type.Any, p0)
  )
end

function NETWORK.NETWORK_IS_ACTIVITY_SESSION()
  return native.invoke(
    Type.Bool, 2932, false
  )
end

function NETWORK.NETWORK_DISABLE_REALTIME_MULTIPLAYER()
  native.invoke(
    Type.Void, 2933, false
  )
end

function NETWORK.NETWORK_SET_PRESENCE_SESSION_INVITES_BLOCKED(toggle)
  native.invoke(
    Type.Void, 2934, false,
    arg(Type.Bool, toggle)
  )
end

function NETWORK.NETWORK_SEND_INVITE_VIA_PRESENCE(gamerHandle, p1, dataCount, p3)
  return native.invoke(
    Type.Bool, 2935, false,
    ref(Type.Any, gamerHandle),
    arg(Type.String, p1),
    arg(Type.Int, dataCount),
    arg(Type.Int, p3)
  )
end

function NETWORK.NETWORK_SEND_TRANSITION_INVITE_VIA_PRESENCE(gamerHandle, p1, dataCount, p3)
  return native.invoke(
    Type.Bool, 2936, false,
    ref(Type.Any, gamerHandle),
    arg(Type.String, p1),
    arg(Type.Int, dataCount),
    arg(Type.Int, p3)
  )
end

function NETWORK.NETWORK_SEND_IMPORTANT_TRANSITION_INVITE_VIA_PRESENCE(gamerHandle, p1, dataCount, p3)
  return native.invoke(
    Type.Bool, 2937, false,
    ref(Type.Any, gamerHandle),
    arg(Type.String, p1),
    arg(Type.Int, dataCount),
    arg(Type.Int, p3)
  )
end

function NETWORK.NETWORK_GET_PRESENCE_INVITE_INDEX_BY_ID(p0)
  return native.invoke(
    Type.Int, 2938, false,
    arg(Type.Int, p0)
  )
end

function NETWORK.NETWORK_GET_NUM_PRESENCE_INVITES()
  return native.invoke(
    Type.Int, 2939, false
  )
end

function NETWORK.NETWORK_ACCEPT_PRESENCE_INVITE(p0)
  return native.invoke(
    Type.Bool, 2940, false,
    arg(Type.Int, p0)
  )
end

function NETWORK.NETWORK_REMOVE_PRESENCE_INVITE(p0)
  return native.invoke(
    Type.Bool, 2941, false,
    arg(Type.Int, p0)
  )
end

function NETWORK.NETWORK_GET_PRESENCE_INVITE_ID(p0)
  return native.invoke(
    Type.Int, 2942, false,
    arg(Type.Int, p0)
  )
end

function NETWORK.NETWORK_GET_PRESENCE_INVITE_INVITER(p0)
  return native.invoke(
    Type.String, 2943, false,
    arg(Type.Int, p0)
  )
end

function NETWORK.NETWORK_GET_PRESENCE_INVITE_HANDLE(p0, p1)
  return native.invoke(
    Type.Bool, 2944, false,
    arg(Type.Any, p0),
    ref(Type.Any, p1)
  )
end

function NETWORK.NETWORK_GET_PRESENCE_INVITE_SESSION_ID(p0)
  return native.invoke(
    Type.Int, 2945, false,
    arg(Type.Any, p0)
  )
end

function NETWORK.NETWORK_GET_PRESENCE_INVITE_CONTENT_ID(p0)
  return native.invoke(
    Type.String, 2946, false,
    arg(Type.Int, p0)
  )
end

function NETWORK.NETWORK_GET_PRESENCE_INVITE_PLAYLIST_LENGTH(p0)
  return native.invoke(
    Type.Int, 2947, false,
    arg(Type.Int, p0)
  )
end

function NETWORK.NETWORK_GET_PRESENCE_INVITE_PLAYLIST_CURRENT(p0)
  return native.invoke(
    Type.Int, 2948, false,
    arg(Type.Int, p0)
  )
end

function NETWORK.NETWORK_GET_PRESENCE_INVITE_FROM_ADMIN(p0)
  return native.invoke(
    Type.Bool, 2949, false,
    arg(Type.Int, p0)
  )
end

function NETWORK.NETWORK_GET_PRESENCE_INVITE_IS_TOURNAMENT(p0)
  return native.invoke(
    Type.Bool, 2950, false,
    arg(Type.Any, p0)
  )
end

function NETWORK.NETWORK_HAS_FOLLOW_INVITE()
  return native.invoke(
    Type.Bool, 2951, false
  )
end

function NETWORK.NETWORK_ACTION_FOLLOW_INVITE()
  return native.invoke(
    Type.Bool, 2952, false
  )
end

function NETWORK.NETWORK_CLEAR_FOLLOW_INVITE()
  return native.invoke(
    Type.Bool, 2953, false
  )
end

function NETWORK.NETWORK_REMOVE_AND_CANCEL_ALL_INVITES()
  native.invoke(
    Type.Void, 2954, false
  )
end

function NETWORK.NETWORK_REMOVE_TRANSITION_INVITE(p0)
  native.invoke(
    Type.Void, 2955, false,
    ref(Type.Any, p0)
  )
end

function NETWORK.NETWORK_REMOVE_ALL_TRANSITION_INVITE()
  native.invoke(
    Type.Void, 2956, false
  )
end

function NETWORK.NETWORK_REMOVE_AND_CANCEL_ALL_TRANSITION_INVITES()
  native.invoke(
    Type.Void, 2957, false
  )
end

function NETWORK.NETWORK_INVITE_GAMERS(p0, p1, p2, p3)
  return native.invoke(
    Type.Bool, 2958, false,
    ref(Type.Any, p0),
    arg(Type.Any, p1),
    ref(Type.Any, p2),
    arg(Type.Any, p3)
  )
end

function NETWORK.NETWORK_HAS_INVITED_GAMER(p0)
  return native.invoke(
    Type.Bool, 2959, false,
    ref(Type.Any, p0)
  )
end

function NETWORK.NETWORK_HAS_MADE_INVITE_DECISION(gamerHandle)
  return native.invoke(
    Type.Bool, 2960, false,
    ref(Type.Any, gamerHandle)
  )
end

function NETWORK.NETWORK_GET_INVITE_REPLY_STATUS(p0)
  return native.invoke(
    Type.Int, 2961, false,
    arg(Type.Any, p0)
  )
end

function NETWORK.NETWORK_GET_CURRENTLY_SELECTED_GAMER_HANDLE_FROM_INVITE_MENU(p0)
  return native.invoke(
    Type.Bool, 2962, false,
    ref(Type.Any, p0)
  )
end

function NETWORK.NETWORK_SET_CURRENTLY_SELECTED_GAMER_HANDLE_FROM_INVITE_MENU(p0)
  return native.invoke(
    Type.Bool, 2963, false,
    ref(Type.Any, p0)
  )
end

function NETWORK.NETWORK_SET_INVITE_ON_CALL_FOR_INVITE_MENU(p0)
  native.invoke(
    Type.Void, 2964, false,
    ref(Type.Any, p0)
  )
end

function NETWORK.NETWORK_CHECK_DATA_MANAGER_SUCCEEDED_FOR_HANDLE(p0, gamerHandle)
  return native.invoke(
    Type.Bool, 2965, false,
    arg(Type.Int, p0),
    ref(Type.Any, gamerHandle)
  )
end

function NETWORK.NETWORK_CHECK_DATA_MANAGER_FOR_HANDLE(p0, gamerHandle)
  return native.invoke(
    Type.Bool, 2966, false,
    arg(Type.Any, p0),
    ref(Type.Any, gamerHandle)
  )
end

function NETWORK.NETWORK_SET_INVITE_FAILED_MESSAGE_FOR_INVITE_MENU(p0, p1)
  native.invoke(
    Type.Void, 2967, false,
    ref(Type.Any, p0),
    ref(Type.Any, p1)
  )
end

function NETWORK.FILLOUT_PM_PLAYER_LIST(gamerHandle, p1, p2)
  return native.invoke(
    Type.Bool, 2968, false,
    ref(Type.Any, gamerHandle),
    arg(Type.Any, p1),
    arg(Type.Any, p2)
  )
end

function NETWORK.FILLOUT_PM_PLAYER_LIST_WITH_NAMES(p0, p1, p2, p3)
  return native.invoke(
    Type.Bool, 2969, false,
    ref(Type.Any, p0),
    ref(Type.Any, p1),
    arg(Type.Any, p2),
    arg(Type.Any, p3)
  )
end

function NETWORK.REFRESH_PLAYER_LIST_STATS(p0)
  return native.invoke(
    Type.Bool, 2970, false,
    arg(Type.Int, p0)
  )
end

function NETWORK.NETWORK_SET_CURRENT_DATA_MANAGER_HANDLE(p0)
  return native.invoke(
    Type.Bool, 2971, false,
    ref(Type.Any, p0)
  )
end

function NETWORK.NETWORK_IS_IN_PLATFORM_PARTY()
  return native.invoke(
    Type.Bool, 2972, false
  )
end

function NETWORK.NETWORK_GET_PLATFORM_PARTY_MEMBER_COUNT()
  return native.invoke(
    Type.Int, 2973, false
  )
end

function NETWORK.NETWORK_GET_PLATFORM_PARTY_MEMBERS(data, dataSize)
  return native.invoke(
    Type.Int, 2974, false,
    ref(Type.Any, data),
    arg(Type.Int, dataSize)
  )
end

function NETWORK.NETWORK_IS_IN_PLATFORM_PARTY_CHAT()
  return native.invoke(
    Type.Bool, 2975, false
  )
end

function NETWORK.NETWORK_IS_CHATTING_IN_PLATFORM_PARTY(gamerHandle)
  return native.invoke(
    Type.Bool, 2976, false,
    ref(Type.Any, gamerHandle)
  )
end

function NETWORK.NETWORK_CAN_QUEUE_FOR_PREVIOUS_SESSION_JOIN()
  return native.invoke(
    Type.Bool, 2977, false
  )
end

function NETWORK.NETWORK_IS_QUEUING_FOR_SESSION_JOIN()
  return native.invoke(
    Type.Bool, 2978, false
  )
end

function NETWORK.NETWORK_CLEAR_QUEUED_JOIN_REQUEST()
  native.invoke(
    Type.Void, 2979, false
  )
end

function NETWORK.NETWORK_SEND_QUEUED_JOIN_REQUEST()
  native.invoke(
    Type.Void, 2980, false
  )
end

function NETWORK.NETWORK_REMOVE_ALL_QUEUED_JOIN_REQUESTS()
  native.invoke(
    Type.Void, 2981, false
  )
end

function NETWORK.NETWORK_SEED_RANDOM_NUMBER_GENERATOR(seed)
  native.invoke(
    Type.Void, 2982, false,
    arg(Type.Int, seed)
  )
end

function NETWORK.NETWORK_GET_RANDOM_INT()
  return native.invoke(
    Type.Int, 2983, false
  )
end

function NETWORK.NETWORK_GET_RANDOM_INT_RANGED(rangeStart, rangeEnd)
  return native.invoke(
    Type.Int, 2984, false,
    arg(Type.Int, rangeStart),
    arg(Type.Int, rangeEnd)
  )
end

function NETWORK._NETWORK_GET_RANDOM_FLOAT_RANGED(rangeStart, rangeEnd)
  return native.invoke(
    Type.Float, 2985, false,
    arg(Type.Float, rangeStart),
    arg(Type.Float, rangeEnd)
  )
end

function NETWORK.NETWORK_PLAYER_IS_CHEATER()
  return native.invoke(
    Type.Bool, 2986, false
  )
end

function NETWORK.NETWORK_PLAYER_GET_CHEATER_REASON()
  return native.invoke(
    Type.Int, 2987, false
  )
end

function NETWORK.NETWORK_PLAYER_IS_BADSPORT()
  return native.invoke(
    Type.Bool, 2988, false
  )
end

function NETWORK.REMOTE_CHEATER_PLAYER_DETECTED(player, a, b)
  return native.invoke(
    Type.Bool, 2989, false,
    arg(Type.Player, player),
    arg(Type.Int, a),
    arg(Type.Int, b)
  )
end

function NETWORK.BAD_SPORT_PLAYER_LEFT_DETECTED(gamerHandle, event, amountReceived)
  return native.invoke(
    Type.Bool, 2990, false,
    ref(Type.Any, gamerHandle),
    arg(Type.Int, event),
    arg(Type.Int, amountReceived)
  )
end

function NETWORK.NETWORK_ADD_INVALID_OBJECT_MODEL(modelHash)
  native.invoke(
    Type.Void, 2991, false,
    arg(Type.Hash, modelHash)
  )
end

function NETWORK.NETWORK_REMOVE_INVALID_OBJECT_MODEL(modelHash)
  native.invoke(
    Type.Void, 2992, false,
    arg(Type.Hash, modelHash)
  )
end

function NETWORK.NETWORK_CLEAR_INVALID_OBJECT_MODELS()
  native.invoke(
    Type.Void, 2993, false
  )
end

function NETWORK.NETWORK_APPLY_PED_SCAR_DATA(ped, p1)
  native.invoke(
    Type.Void, 2994, false,
    arg(Type.Ped, ped),
    arg(Type.Int, p1)
  )
end

function NETWORK.NETWORK_SET_THIS_SCRIPT_IS_NETWORK_SCRIPT(maxNumMissionParticipants, p1, instanceId)
  native.invoke(
    Type.Void, 2995, false,
    arg(Type.Int, maxNumMissionParticipants),
    arg(Type.Bool, p1),
    arg(Type.Int, instanceId)
  )
end

function NETWORK.NETWORK_TRY_TO_SET_THIS_SCRIPT_IS_NETWORK_SCRIPT(p0, p1, p2)
  return native.invoke(
    Type.Bool, 2996, false,
    arg(Type.Any, p0),
    arg(Type.Bool, p1),
    arg(Type.Any, p2)
  )
end

function NETWORK.NETWORK_GET_THIS_SCRIPT_IS_NETWORK_SCRIPT()
  return native.invoke(
    Type.Bool, 2997, false
  )
end

function NETWORK.NETWORK_GET_MAX_NUM_PARTICIPANTS()
  return native.invoke(
    Type.Int, 2998, false
  )
end

function NETWORK.NETWORK_GET_NUM_PARTICIPANTS()
  return native.invoke(
    Type.Int, 2999, false
  )
end

function NETWORK.NETWORK_GET_SCRIPT_STATUS()
  return native.invoke(
    Type.Int, 3000, false
  )
end

function NETWORK.NETWORK_REGISTER_HOST_BROADCAST_VARIABLES(vars, numVars, debugName)
  native.invoke(
    Type.Void, 3001, false,
    ref(Type.Int, vars),
    arg(Type.Int, numVars),
    arg(Type.String, debugName)
  )
end

function NETWORK.NETWORK_REGISTER_PLAYER_BROADCAST_VARIABLES(vars, numVars, debugName)
  native.invoke(
    Type.Void, 3002, false,
    ref(Type.Int, vars),
    arg(Type.Int, numVars),
    arg(Type.String, debugName)
  )
end

function NETWORK.NETWORK_REGISTER_HIGH_FREQUENCY_HOST_BROADCAST_VARIABLES(p0, p1, p2)
  native.invoke(
    Type.Void, 3003, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1),
    arg(Type.Any, p2)
  )
end

function NETWORK.NETWORK_REGISTER_HIGH_FREQUENCY_PLAYER_BROADCAST_VARIABLES(p0, p1, p2)
  native.invoke(
    Type.Void, 3004, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1),
    arg(Type.Any, p2)
  )
end

function NETWORK.NETWORK_FINISH_BROADCASTING_DATA()
  native.invoke(
    Type.Void, 3005, false
  )
end

function NETWORK.NETWORK_HAS_RECEIVED_HOST_BROADCAST_DATA()
  return native.invoke(
    Type.Bool, 3006, false
  )
end

function NETWORK.NETWORK_GET_PLAYER_INDEX(player)
  return native.invoke(
    Type.Player, 3007, false,
    arg(Type.Player, player)
  )
end

function NETWORK.NETWORK_GET_PARTICIPANT_INDEX(index)
  return native.invoke(
    Type.Int, 3008, false,
    arg(Type.Int, index)
  )
end

function NETWORK.NETWORK_GET_PLAYER_INDEX_FROM_PED(ped)
  return native.invoke(
    Type.Player, 3009, false,
    arg(Type.Ped, ped)
  )
end

function NETWORK.NETWORK_GET_NUM_CONNECTED_PLAYERS()
  return native.invoke(
    Type.Int, 3010, false
  )
end

function NETWORK.NETWORK_IS_PLAYER_CONNECTED(player)
  return native.invoke(
    Type.Bool, 3011, false,
    arg(Type.Player, player)
  )
end

function NETWORK.NETWORK_GET_TOTAL_NUM_PLAYERS()
  return native.invoke(
    Type.Int, 3012, false
  )
end

function NETWORK.NETWORK_IS_PARTICIPANT_ACTIVE(p0)
  return native.invoke(
    Type.Bool, 3013, false,
    arg(Type.Int, p0)
  )
end

function NETWORK.NETWORK_IS_PLAYER_ACTIVE(player)
  return native.invoke(
    Type.Bool, 3014, false,
    arg(Type.Player, player)
  )
end

function NETWORK.NETWORK_IS_PLAYER_A_PARTICIPANT(player)
  return native.invoke(
    Type.Bool, 3015, false,
    arg(Type.Player, player)
  )
end

function NETWORK.NETWORK_IS_HOST_OF_THIS_SCRIPT()
  return native.invoke(
    Type.Bool, 3016, false
  )
end

function NETWORK.NETWORK_GET_HOST_OF_THIS_SCRIPT()
  return native.invoke(
    Type.Player, 3017, false
  )
end

function NETWORK.NETWORK_GET_HOST_OF_SCRIPT(scriptName, instance_id, position_hash)
  return native.invoke(
    Type.Player, 3018, false,
    arg(Type.String, scriptName),
    arg(Type.Int, instance_id),
    arg(Type.Int, position_hash)
  )
end

function NETWORK.NETWORK_SET_MISSION_FINISHED()
  native.invoke(
    Type.Void, 3019, false
  )
end

function NETWORK.NETWORK_IS_SCRIPT_ACTIVE(scriptName, instance_id, p2, position_hash)
  return native.invoke(
    Type.Bool, 3020, false,
    arg(Type.String, scriptName),
    arg(Type.Int, instance_id),
    arg(Type.Bool, p2),
    arg(Type.Int, position_hash)
  )
end

function NETWORK.NETWORK_IS_SCRIPT_ACTIVE_BY_HASH(scriptHash, p1, p2, p3)
  return native.invoke(
    Type.Bool, 3021, false,
    arg(Type.Hash, scriptHash),
    arg(Type.Int, p1),
    arg(Type.Bool, p2),
    arg(Type.Int, p3)
  )
end

function NETWORK.NETWORK_IS_THREAD_A_NETWORK_SCRIPT(threadId)
  return native.invoke(
    Type.Bool, 3022, false,
    arg(Type.Int, threadId)
  )
end

function NETWORK.NETWORK_GET_NUM_SCRIPT_PARTICIPANTS(scriptName, instance_id, position_hash)
  return native.invoke(
    Type.Int, 3023, false,
    arg(Type.String, scriptName),
    arg(Type.Int, instance_id),
    arg(Type.Int, position_hash)
  )
end

function NETWORK.NETWORK_GET_INSTANCE_ID_OF_THIS_SCRIPT()
  return native.invoke(
    Type.Int, 3024, false
  )
end

function NETWORK.NETWORK_GET_POSITION_HASH_OF_THIS_SCRIPT()
  return native.invoke(
    Type.Hash, 3025, false
  )
end

function NETWORK.NETWORK_IS_PLAYER_A_PARTICIPANT_ON_SCRIPT(player, script, instance_id)
  return native.invoke(
    Type.Bool, 3026, false,
    arg(Type.Player, player),
    arg(Type.String, script),
    arg(Type.Int, instance_id)
  )
end

function NETWORK.NETWORK_PREVENT_SCRIPT_HOST_MIGRATION()
  native.invoke(
    Type.Void, 3027, false
  )
end

function NETWORK.NETWORK_REQUEST_TO_BE_HOST_OF_THIS_SCRIPT()
  native.invoke(
    Type.Void, 3028, false
  )
end

function NETWORK.PARTICIPANT_ID()
  return native.invoke(
    Type.Player, 3029, false
  )
end

function NETWORK.PARTICIPANT_ID_TO_INT()
  return native.invoke(
    Type.Int, 3030, false
  )
end

function NETWORK.NETWORK_GET_KILLER_OF_PLAYER(player, weaponHash)
  return native.invoke(
    Type.Player, 3031, false,
    arg(Type.Player, player),
    ref(Type.Hash, weaponHash)
  )
end

function NETWORK.NETWORK_GET_DESTROYER_OF_NETWORK_ID(netId, weaponHash)
  return native.invoke(
    Type.Player, 3032, false,
    arg(Type.Int, netId),
    ref(Type.Hash, weaponHash)
  )
end

function NETWORK.NETWORK_GET_DESTROYER_OF_ENTITY(entity, weaponHash)
  return native.invoke(
    Type.Player, 3033, false,
    arg(Type.Entity, entity),
    ref(Type.Hash, weaponHash)
  )
end

function NETWORK.NETWORK_GET_ASSISTED_KILL_OF_ENTITY(player, entity, p2)
  return native.invoke(
    Type.Bool, 3034, false,
    arg(Type.Player, player),
    arg(Type.Entity, entity),
    ref(Type.Int, p2)
  )
end

function NETWORK.NETWORK_GET_ASSISTED_DAMAGE_OF_ENTITY(player, entity, p2)
  return native.invoke(
    Type.Bool, 3035, false,
    arg(Type.Player, player),
    arg(Type.Entity, entity),
    ref(Type.Int, p2)
  )
end

function NETWORK.NETWORK_GET_ENTITY_KILLER_OF_PLAYER(player, weaponHash)
  return native.invoke(
    Type.Entity, 3036, false,
    arg(Type.Player, player),
    ref(Type.Hash, weaponHash)
  )
end

function NETWORK.NETWORK_SET_CURRENT_PUBLIC_CONTENT_ID(missionId)
  native.invoke(
    Type.Void, 3037, false,
    arg(Type.String, missionId)
  )
end

function NETWORK.NETWORK_SET_CURRENT_CHAT_OPTION(newChatOption)
  native.invoke(
    Type.Void, 3038, false,
    arg(Type.Int, newChatOption)
  )
end

function NETWORK.NETWORK_SET_CURRENT_SPAWN_LOCATION_OPTION(mpSettingSpawn)
  native.invoke(
    Type.Void, 3039, false,
    arg(Type.Hash, mpSettingSpawn)
  )
end

function NETWORK.NETWORK_SET_VEHICLE_DRIVEN_IN_TEST_DRIVE(toggle)
  native.invoke(
    Type.Void, 3040, false,
    arg(Type.Bool, toggle)
  )
end

function NETWORK.NETWORK_SET_VEHICLE_DRIVEN_LOCATION(location)
  native.invoke(
    Type.Void, 3041, false,
    arg(Type.Hash, location)
  )
end

function NETWORK.NETWORK_RESURRECT_LOCAL_PLAYER(x, y, z, heading, p4, changetime, p6, p7, p8)
  native.invoke(
    Type.Void, 3042, false,
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, z),
    arg(Type.Float, heading),
    arg(Type.Bool, p4),
    arg(Type.Bool, changetime),
    arg(Type.Bool, p6),
    arg(Type.Int, p7),
    arg(Type.Int, p8)
  )
end

function NETWORK.NETWORK_SET_LOCAL_PLAYER_INVINCIBLE_TIME(time)
  native.invoke(
    Type.Void, 3043, false,
    arg(Type.Int, time)
  )
end

function NETWORK.NETWORK_IS_LOCAL_PLAYER_INVINCIBLE()
  return native.invoke(
    Type.Bool, 3044, false
  )
end

function NETWORK.NETWORK_DISABLE_INVINCIBLE_FLASHING(player, toggle)
  native.invoke(
    Type.Void, 3045, false,
    arg(Type.Player, player),
    arg(Type.Bool, toggle)
  )
end

function NETWORK.NETWORK_PATCH_POST_CUTSCENE_HS4F_TUN_ENT(ped)
  native.invoke(
    Type.Void, 3046, false,
    arg(Type.Ped, ped)
  )
end

function NETWORK.NETWORK_SET_LOCAL_PLAYER_SYNC_LOOK_AT(toggle)
  native.invoke(
    Type.Void, 3047, false,
    arg(Type.Bool, toggle)
  )
end

function NETWORK.NETWORK_HAS_ENTITY_BEEN_REGISTERED_WITH_THIS_THREAD(entity)
  return native.invoke(
    Type.Bool, 3048, false,
    arg(Type.Entity, entity)
  )
end

function NETWORK.NETWORK_GET_NETWORK_ID_FROM_ENTITY(entity)
  return native.invoke(
    Type.Int, 3049, false,
    arg(Type.Entity, entity)
  )
end

function NETWORK.NETWORK_GET_ENTITY_FROM_NETWORK_ID(netId)
  return native.invoke(
    Type.Entity, 3050, false,
    arg(Type.Int, netId)
  )
end

function NETWORK.NETWORK_GET_ENTITY_IS_NETWORKED(entity)
  return native.invoke(
    Type.Bool, 3051, false,
    arg(Type.Entity, entity)
  )
end

function NETWORK.NETWORK_GET_ENTITY_IS_LOCAL(entity)
  return native.invoke(
    Type.Bool, 3052, false,
    arg(Type.Entity, entity)
  )
end

function NETWORK.NETWORK_REGISTER_ENTITY_AS_NETWORKED(entity)
  native.invoke(
    Type.Void, 3053, false,
    arg(Type.Entity, entity)
  )
end

function NETWORK.NETWORK_UNREGISTER_NETWORKED_ENTITY(entity)
  native.invoke(
    Type.Void, 3054, false,
    arg(Type.Entity, entity)
  )
end

function NETWORK.NETWORK_DOES_NETWORK_ID_EXIST(netId)
  return native.invoke(
    Type.Bool, 3055, false,
    arg(Type.Int, netId)
  )
end

function NETWORK.NETWORK_DOES_ENTITY_EXIST_WITH_NETWORK_ID(netId)
  return native.invoke(
    Type.Bool, 3056, false,
    arg(Type.Int, netId)
  )
end

function NETWORK.NETWORK_REQUEST_CONTROL_OF_NETWORK_ID(netId)
  return native.invoke(
    Type.Bool, 3057, false,
    arg(Type.Int, netId)
  )
end

function NETWORK.NETWORK_HAS_CONTROL_OF_NETWORK_ID(netId)
  return native.invoke(
    Type.Bool, 3058, false,
    arg(Type.Int, netId)
  )
end

function NETWORK.NETWORK_IS_NETWORK_ID_REMOTELY_CONTROLLED(netId)
  return native.invoke(
    Type.Bool, 3059, false,
    arg(Type.Int, netId)
  )
end

function NETWORK.NETWORK_REQUEST_CONTROL_OF_ENTITY(entity)
  return native.invoke(
    Type.Bool, 3060, false,
    arg(Type.Entity, entity)
  )
end

function NETWORK.NETWORK_REQUEST_CONTROL_OF_DOOR(doorID)
  return native.invoke(
    Type.Bool, 3061, false,
    arg(Type.Int, doorID)
  )
end

function NETWORK.NETWORK_HAS_CONTROL_OF_ENTITY(entity)
  return native.invoke(
    Type.Bool, 3062, false,
    arg(Type.Entity, entity)
  )
end

function NETWORK.NETWORK_HAS_CONTROL_OF_PICKUP(pickup)
  return native.invoke(
    Type.Bool, 3063, false,
    arg(Type.Pickup, pickup)
  )
end

function NETWORK.NETWORK_HAS_CONTROL_OF_DOOR(doorHash)
  return native.invoke(
    Type.Bool, 3064, false,
    arg(Type.Hash, doorHash)
  )
end

function NETWORK.NETWORK_IS_DOOR_NETWORKED(doorHash)
  return native.invoke(
    Type.Bool, 3065, false,
    arg(Type.Hash, doorHash)
  )
end

function NETWORK.VEH_TO_NET(vehicle)
  return native.invoke(
    Type.Int, 3066, false,
    arg(Type.Vehicle, vehicle)
  )
end

function NETWORK.PED_TO_NET(ped)
  return native.invoke(
    Type.Int, 3067, false,
    arg(Type.Ped, ped)
  )
end

function NETWORK.OBJ_TO_NET(object)
  return native.invoke(
    Type.Int, 3068, false,
    arg(Type.Object, object)
  )
end

function NETWORK.NET_TO_VEH(netHandle)
  return native.invoke(
    Type.Vehicle, 3069, false,
    arg(Type.Int, netHandle)
  )
end

function NETWORK.NET_TO_PED(netHandle)
  return native.invoke(
    Type.Ped, 3070, false,
    arg(Type.Int, netHandle)
  )
end

function NETWORK.NET_TO_OBJ(netHandle)
  return native.invoke(
    Type.Object, 3071, false,
    arg(Type.Int, netHandle)
  )
end

function NETWORK.NET_TO_ENT(netHandle)
  return native.invoke(
    Type.Entity, 3072, false,
    arg(Type.Int, netHandle)
  )
end

function NETWORK.NETWORK_GET_LOCAL_HANDLE(gamerHandle, gamerHandleSize)
  native.invoke(
    Type.Void, 3073, false,
    ref(Type.Any, gamerHandle),
    arg(Type.Int, gamerHandleSize)
  )
end

function NETWORK.NETWORK_HANDLE_FROM_USER_ID(userId, gamerHandle, gamerHandleSize)
  native.invoke(
    Type.Void, 3074, false,
    arg(Type.String, userId),
    ref(Type.Any, gamerHandle),
    arg(Type.Int, gamerHandleSize)
  )
end

function NETWORK.NETWORK_HANDLE_FROM_MEMBER_ID(memberId, gamerHandle, gamerHandleSize)
  native.invoke(
    Type.Void, 3075, false,
    arg(Type.String, memberId),
    ref(Type.Any, gamerHandle),
    arg(Type.Int, gamerHandleSize)
  )
end

function NETWORK.NETWORK_HANDLE_FROM_PLAYER(player, gamerHandle, gamerHandleSize)
  native.invoke(
    Type.Void, 3076, false,
    arg(Type.Player, player),
    ref(Type.Any, gamerHandle),
    arg(Type.Int, gamerHandleSize)
  )
end

function NETWORK.NETWORK_HASH_FROM_PLAYER_HANDLE(player)
  return native.invoke(
    Type.Hash, 3077, false,
    arg(Type.Player, player)
  )
end

function NETWORK.NETWORK_HASH_FROM_GAMER_HANDLE(gamerHandle)
  return native.invoke(
    Type.Hash, 3078, false,
    ref(Type.Any, gamerHandle)
  )
end

function NETWORK.NETWORK_HANDLE_FROM_FRIEND(friendIndex, gamerHandle, gamerHandleSize)
  native.invoke(
    Type.Void, 3079, false,
    arg(Type.Int, friendIndex),
    ref(Type.Any, gamerHandle),
    arg(Type.Int, gamerHandleSize)
  )
end

function NETWORK.NETWORK_GAMERTAG_FROM_HANDLE_START(gamerHandle)
  return native.invoke(
    Type.Bool, 3080, false,
    ref(Type.Any, gamerHandle)
  )
end

function NETWORK.NETWORK_GAMERTAG_FROM_HANDLE_PENDING()
  return native.invoke(
    Type.Bool, 3081, false
  )
end

function NETWORK.NETWORK_GAMERTAG_FROM_HANDLE_SUCCEEDED()
  return native.invoke(
    Type.Bool, 3082, false
  )
end

function NETWORK.NETWORK_GET_GAMERTAG_FROM_HANDLE(gamerHandle)
  return native.invoke(
    Type.String, 3083, false,
    ref(Type.Any, gamerHandle)
  )
end

function NETWORK.NETWORK_DISPLAYNAMES_FROM_HANDLES_START(p0, p1)
  return native.invoke(
    Type.Int, 3084, false,
    ref(Type.Any, p0),
    arg(Type.Any, p1)
  )
end

function NETWORK.NETWORK_GET_DISPLAYNAMES_FROM_HANDLES(p0, p1, p2)
  return native.invoke(
    Type.Int, 3085, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1),
    arg(Type.Any, p2)
  )
end

function NETWORK.NETWORK_ARE_HANDLES_THE_SAME(gamerHandle1, gamerHandle2)
  return native.invoke(
    Type.Bool, 3086, false,
    ref(Type.Any, gamerHandle1),
    ref(Type.Any, gamerHandle2)
  )
end

function NETWORK.NETWORK_IS_HANDLE_VALID(gamerHandle, gamerHandleSize)
  return native.invoke(
    Type.Bool, 3087, false,
    ref(Type.Any, gamerHandle),
    arg(Type.Int, gamerHandleSize)
  )
end

function NETWORK.NETWORK_GET_PLAYER_FROM_GAMER_HANDLE(gamerHandle)
  return native.invoke(
    Type.Player, 3088, false,
    ref(Type.Any, gamerHandle)
  )
end

function NETWORK.NETWORK_MEMBER_ID_FROM_GAMER_HANDLE(gamerHandle)
  return native.invoke(
    Type.String, 3089, false,
    ref(Type.Any, gamerHandle)
  )
end

function NETWORK.NETWORK_IS_GAMER_IN_MY_SESSION(gamerHandle)
  return native.invoke(
    Type.Bool, 3090, false,
    ref(Type.Any, gamerHandle)
  )
end

function NETWORK.NETWORK_SHOW_PROFILE_UI(gamerHandle)
  native.invoke(
    Type.Void, 3091, false,
    ref(Type.Any, gamerHandle)
  )
end

function NETWORK.NETWORK_PLAYER_GET_NAME(player)
  return native.invoke(
    Type.String, 3092, false,
    arg(Type.Player, player)
  )
end

function NETWORK.NETWORK_PLAYER_GET_USERID(player, userID)
  return native.invoke(
    Type.String, 3093, false,
    arg(Type.Player, player),
    ref(Type.Int, userID)
  )
end

function NETWORK.NETWORK_PLAYER_IS_ROCKSTAR_DEV(player)
  return native.invoke(
    Type.Bool, 3094, false,
    arg(Type.Player, player)
  )
end

function NETWORK.NETWORK_PLAYER_INDEX_IS_CHEATER(player)
  return native.invoke(
    Type.Bool, 3095, false,
    arg(Type.Player, player)
  )
end

function NETWORK.NETWORK_ENTITY_GET_OBJECT_ID(entity)
  return native.invoke(
    Type.Int, 3096, false,
    arg(Type.Entity, entity)
  )
end

function NETWORK.NETWORK_GET_ENTITY_FROM_OBJECT_ID(p0)
  return native.invoke(
    Type.Entity, 3097, false,
    arg(Type.Any, p0)
  )
end

function NETWORK.NETWORK_IS_INACTIVE_PROFILE(p0)
  return native.invoke(
    Type.Bool, 3098, false,
    ref(Type.Any, p0)
  )
end

function NETWORK.NETWORK_GET_MAX_FRIENDS()
  return native.invoke(
    Type.Int, 3099, false
  )
end

function NETWORK.NETWORK_GET_FRIEND_COUNT()
  return native.invoke(
    Type.Int, 3100, false
  )
end

function NETWORK.NETWORK_GET_FRIEND_NAME(friendIndex)
  return native.invoke(
    Type.String, 3101, false,
    arg(Type.Int, friendIndex)
  )
end

function NETWORK.NETWORK_GET_FRIEND_DISPLAY_NAME(friendIndex)
  return native.invoke(
    Type.String, 3102, false,
    arg(Type.Int, friendIndex)
  )
end

function NETWORK.NETWORK_IS_FRIEND_ONLINE(name)
  return native.invoke(
    Type.Bool, 3103, false,
    arg(Type.String, name)
  )
end

function NETWORK.NETWORK_IS_FRIEND_HANDLE_ONLINE(gamerHandle)
  return native.invoke(
    Type.Bool, 3104, false,
    ref(Type.Any, gamerHandle)
  )
end

function NETWORK.NETWORK_IS_FRIEND_IN_SAME_TITLE(friendName)
  return native.invoke(
    Type.Bool, 3105, false,
    arg(Type.String, friendName)
  )
end

function NETWORK.NETWORK_IS_FRIEND_IN_MULTIPLAYER(friendName)
  return native.invoke(
    Type.Bool, 3106, false,
    arg(Type.String, friendName)
  )
end

function NETWORK.NETWORK_IS_FRIEND(gamerHandle)
  return native.invoke(
    Type.Bool, 3107, false,
    ref(Type.Any, gamerHandle)
  )
end

function NETWORK.NETWORK_IS_PENDING_FRIEND(p0)
  return native.invoke(
    Type.Bool, 3108, false,
    arg(Type.Any, p0)
  )
end

function NETWORK.NETWORK_IS_ADDING_FRIEND()
  return native.invoke(
    Type.Bool, 3109, false
  )
end

function NETWORK.NETWORK_ADD_FRIEND(gamerHandle, message)
  return native.invoke(
    Type.Bool, 3110, false,
    ref(Type.Any, gamerHandle),
    arg(Type.String, message)
  )
end

function NETWORK.NETWORK_IS_FRIEND_INDEX_ONLINE(friendIndex)
  return native.invoke(
    Type.Bool, 3111, false,
    arg(Type.Int, friendIndex)
  )
end

function NETWORK.NETWORK_SET_PLAYER_IS_PASSIVE(toggle)
  native.invoke(
    Type.Void, 3112, false,
    arg(Type.Bool, toggle)
  )
end

function NETWORK.NETWORK_GET_PLAYER_OWNS_WAYPOINT(player)
  return native.invoke(
    Type.Bool, 3113, false,
    arg(Type.Player, player)
  )
end

function NETWORK.NETWORK_CAN_SET_WAYPOINT()
  return native.invoke(
    Type.Bool, 3114, false
  )
end

function NETWORK.NETWORK_IGNORE_REMOTE_WAYPOINTS()
  native.invoke(
    Type.Void, 3115, false
  )
end

function NETWORK._NETWORK_DOES_COMMUNICATION_GROUP_EXIST(communicationType)
  return native.invoke(
    Type.Bool, 3116, false,
    arg(Type.Int, communicationType)
  )
end

function NETWORK._NETWORK_GET_COMMUNICATION_GROUP_FLAGS(communicationType)
  return native.invoke(
    Type.Int, 3117, false,
    arg(Type.Int, communicationType)
  )
end

function NETWORK._NETWORK_SET_COMMUNICATION_GROUP_FLAGS(communicationType, communicationGroupFlag)
  native.invoke(
    Type.Void, 3118, false,
    arg(Type.Int, communicationType),
    arg(Type.Int, communicationGroupFlag)
  )
end

function NETWORK.NETWORK_IS_PLAYER_ON_BLOCKLIST(gamerHandle)
  return native.invoke(
    Type.Bool, 3119, false,
    ref(Type.Any, gamerHandle)
  )
end

function NETWORK.NETWORK_SET_SCRIPT_AUTOMUTED(p0)
  return native.invoke(
    Type.Bool, 3120, false,
    arg(Type.Any, p0)
  )
end

function NETWORK.NETWORK_HAS_AUTOMUTE_OVERRIDE()
  return native.invoke(
    Type.Bool, 3121, false
  )
end

function NETWORK.NETWORK_HAS_HEADSET()
  return native.invoke(
    Type.Bool, 3122, false
  )
end

function NETWORK.NETWORK_SET_LOOK_AT_TALKERS(p0)
  native.invoke(
    Type.Void, 3123, false,
    arg(Type.Bool, p0)
  )
end

function NETWORK.NETWORK_IS_PUSH_TO_TALK_ACTIVE()
  return native.invoke(
    Type.Bool, 3124, false
  )
end

function NETWORK.NETWORK_GAMER_HAS_HEADSET(gamerHandle)
  return native.invoke(
    Type.Bool, 3125, false,
    ref(Type.Any, gamerHandle)
  )
end

function NETWORK.NETWORK_IS_GAMER_TALKING(gamerHandle)
  return native.invoke(
    Type.Bool, 3126, false,
    ref(Type.Any, gamerHandle)
  )
end

function NETWORK.NETWORK_PERMISSIONS_HAS_GAMER_RECORD(gamerHandle)
  return native.invoke(
    Type.Bool, 3127, false,
    ref(Type.Any, gamerHandle)
  )
end

function NETWORK.NETWORK_CAN_COMMUNICATE_WITH_GAMER(gamerHandle)
  return native.invoke(
    Type.Bool, 3128, false,
    ref(Type.Any, gamerHandle)
  )
end

function NETWORK.NETWORK_CAN_TEXT_CHAT_WITH_GAMER(gamerHandle)
  return native.invoke(
    Type.Bool, 3129, false,
    ref(Type.Any, gamerHandle)
  )
end

function NETWORK.NETWORK_IS_GAMER_MUTED_BY_ME(gamerHandle)
  return native.invoke(
    Type.Bool, 3130, false,
    ref(Type.Any, gamerHandle)
  )
end

function NETWORK.NETWORK_AM_I_MUTED_BY_GAMER(gamerHandle)
  return native.invoke(
    Type.Bool, 3131, false,
    ref(Type.Any, gamerHandle)
  )
end

function NETWORK.NETWORK_IS_GAMER_BLOCKED_BY_ME(gamerHandle)
  return native.invoke(
    Type.Bool, 3132, false,
    ref(Type.Any, gamerHandle)
  )
end

function NETWORK.NETWORK_AM_I_BLOCKED_BY_GAMER(gamerHandle)
  return native.invoke(
    Type.Bool, 3133, false,
    ref(Type.Any, gamerHandle)
  )
end

function NETWORK.NETWORK_CAN_VIEW_GAMER_USER_CONTENT(gamerHandle)
  return native.invoke(
    Type.Bool, 3134, false,
    ref(Type.Any, gamerHandle)
  )
end

function NETWORK.NETWORK_HAS_VIEW_GAMER_USER_CONTENT_RESULT(gamerHandle)
  return native.invoke(
    Type.Bool, 3135, false,
    ref(Type.Any, gamerHandle)
  )
end

function NETWORK.NETWORK_CAN_PLAY_MULTIPLAYER_WITH_GAMER(gamerHandle)
  return native.invoke(
    Type.Bool, 3136, false,
    ref(Type.Any, gamerHandle)
  )
end

function NETWORK.NETWORK_CAN_GAMER_PLAY_MULTIPLAYER_WITH_ME(gamerHandle)
  return native.invoke(
    Type.Bool, 3137, false,
    ref(Type.Any, gamerHandle)
  )
end

function NETWORK.NETWORK_CAN_SEND_LOCAL_INVITE(gamerHandle)
  return native.invoke(
    Type.Bool, 3138, false,
    ref(Type.Any, gamerHandle)
  )
end

function NETWORK.NETWORK_CAN_RECEIVE_LOCAL_INVITE(gamerHandle)
  return native.invoke(
    Type.Bool, 3139, false,
    ref(Type.Any, gamerHandle)
  )
end

function NETWORK.NETWORK_IS_PLAYER_TALKING(player)
  return native.invoke(
    Type.Bool, 3140, false,
    arg(Type.Player, player)
  )
end

function NETWORK.NETWORK_PLAYER_HAS_HEADSET(player)
  return native.invoke(
    Type.Bool, 3141, false,
    arg(Type.Player, player)
  )
end

function NETWORK.NETWORK_IS_PLAYER_MUTED_BY_ME(player)
  return native.invoke(
    Type.Bool, 3142, false,
    arg(Type.Player, player)
  )
end

function NETWORK.NETWORK_AM_I_MUTED_BY_PLAYER(player)
  return native.invoke(
    Type.Bool, 3143, false,
    arg(Type.Player, player)
  )
end

function NETWORK.NETWORK_IS_PLAYER_BLOCKED_BY_ME(player)
  return native.invoke(
    Type.Bool, 3144, false,
    arg(Type.Player, player)
  )
end

function NETWORK.NETWORK_AM_I_BLOCKED_BY_PLAYER(player)
  return native.invoke(
    Type.Bool, 3145, false,
    arg(Type.Player, player)
  )
end

function NETWORK.NETWORK_GET_PLAYER_LOUDNESS(player)
  return native.invoke(
    Type.Float, 3146, false,
    arg(Type.Player, player)
  )
end

function NETWORK.NETWORK_SET_TALKER_PROXIMITY(value)
  native.invoke(
    Type.Void, 3147, false,
    arg(Type.Float, value)
  )
end

function NETWORK.NETWORK_GET_TALKER_PROXIMITY()
  return native.invoke(
    Type.Float, 3148, false
  )
end

function NETWORK.NETWORK_SET_VOICE_ACTIVE(toggle)
  native.invoke(
    Type.Void, 3149, false,
    arg(Type.Bool, toggle)
  )
end

function NETWORK.NETWORK_REMAIN_IN_GAME_CHAT(p0)
  native.invoke(
    Type.Void, 3150, false,
    arg(Type.Bool, p0)
  )
end

function NETWORK.NETWORK_OVERRIDE_TRANSITION_CHAT(p0)
  native.invoke(
    Type.Void, 3151, false,
    arg(Type.Bool, p0)
  )
end

function NETWORK.NETWORK_SET_TEAM_ONLY_CHAT(toggle)
  native.invoke(
    Type.Void, 3152, false,
    arg(Type.Bool, toggle)
  )
end

function NETWORK.NETWORK_SET_SCRIPT_CONTROLLING_TEAMS(p0)
  native.invoke(
    Type.Void, 3153, false,
    arg(Type.Any, p0)
  )
end

function NETWORK.NETWORK_SET_SAME_TEAM_AS_LOCAL_PLAYER(p0, p1)
  return native.invoke(
    Type.Bool, 3154, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1)
  )
end

function NETWORK.NETWORK_OVERRIDE_TEAM_RESTRICTIONS(team, toggle)
  native.invoke(
    Type.Void, 3155, false,
    arg(Type.Int, team),
    arg(Type.Bool, toggle)
  )
end

function NETWORK.NETWORK_SET_OVERRIDE_SPECTATOR_MODE(toggle)
  native.invoke(
    Type.Void, 3156, false,
    arg(Type.Bool, toggle)
  )
end

function NETWORK.NETWORK_SET_OVERRIDE_TUTORIAL_SESSION_CHAT(toggle)
  native.invoke(
    Type.Void, 3157, false,
    arg(Type.Bool, toggle)
  )
end

function NETWORK.NETWORK_SET_PROXIMITY_AFFECTS_TEAM(toggle)
  native.invoke(
    Type.Void, 3158, false,
    arg(Type.Bool, toggle)
  )
end

function NETWORK.NETWORK_SET_NO_SPECTATOR_CHAT(toggle)
  native.invoke(
    Type.Void, 3159, false,
    arg(Type.Bool, toggle)
  )
end

function NETWORK.NETWORK_SET_IGNORE_SPECTATOR_CHAT_LIMITS_SAME_TEAM(toggle)
  native.invoke(
    Type.Void, 3160, false,
    arg(Type.Bool, toggle)
  )
end

function NETWORK.NETWORK_OVERRIDE_CHAT_RESTRICTIONS(player, toggle)
  native.invoke(
    Type.Void, 3161, false,
    arg(Type.Player, player),
    arg(Type.Bool, toggle)
  )
end

function NETWORK.NETWORK_OVERRIDE_SEND_RESTRICTIONS(player, toggle)
  native.invoke(
    Type.Void, 3162, false,
    arg(Type.Player, player),
    arg(Type.Bool, toggle)
  )
end

function NETWORK.NETWORK_OVERRIDE_SEND_RESTRICTIONS_ALL(toggle)
  native.invoke(
    Type.Void, 3163, false,
    arg(Type.Bool, toggle)
  )
end

function NETWORK.NETWORK_OVERRIDE_RECEIVE_RESTRICTIONS(player, toggle)
  native.invoke(
    Type.Void, 3164, false,
    arg(Type.Player, player),
    arg(Type.Bool, toggle)
  )
end

function NETWORK.NETWORK_OVERRIDE_RECEIVE_RESTRICTIONS_ALL(toggle)
  native.invoke(
    Type.Void, 3165, false,
    arg(Type.Bool, toggle)
  )
end

function NETWORK.NETWORK_SET_VOICE_CHANNEL(channel)
  native.invoke(
    Type.Void, 3166, false,
    arg(Type.Int, channel)
  )
end

function NETWORK.NETWORK_CLEAR_VOICE_CHANNEL()
  native.invoke(
    Type.Void, 3167, false
  )
end

function NETWORK.NETWORK_APPLY_VOICE_PROXIMITY_OVERRIDE(x, y, z)
  native.invoke(
    Type.Void, 3168, false,
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, z)
  )
end

function NETWORK.NETWORK_CLEAR_VOICE_PROXIMITY_OVERRIDE()
  native.invoke(
    Type.Void, 3169, false
  )
end

function NETWORK.NETWORK_ENABLE_VOICE_BANDWIDTH_RESTRICTION(player)
  native.invoke(
    Type.Void, 3170, false,
    arg(Type.Player, player)
  )
end

function NETWORK.NETWORK_DISABLE_VOICE_BANDWIDTH_RESTRICTION(player)
  native.invoke(
    Type.Void, 3171, false,
    arg(Type.Player, player)
  )
end

function NETWORK.NETWORK_GET_MUTE_COUNT_FOR_PLAYER(p0, p1, p2)
  native.invoke(
    Type.Void, 3172, false,
    arg(Type.Player, p0),
    ref(Type.Float, p1),
    ref(Type.Float, p2)
  )
end

function NETWORK.NETWORK_SET_SPECTATOR_TO_NON_SPECTATOR_TEXT_CHAT(toggle)
  native.invoke(
    Type.Void, 3173, false,
    arg(Type.Bool, toggle)
  )
end

function NETWORK.NETWORK_TEXT_CHAT_IS_TYPING()
  return native.invoke(
    Type.Bool, 3174, false
  )
end

function NETWORK.SHUTDOWN_AND_LAUNCH_SINGLE_PLAYER_GAME()
  native.invoke(
    Type.Void, 3175, false
  )
end

function NETWORK.SHUTDOWN_AND_LOAD_MOST_RECENT_SAVE()
  return native.invoke(
    Type.Bool, 3176, false
  )
end

function NETWORK.NETWORK_SET_FRIENDLY_FIRE_OPTION(toggle)
  native.invoke(
    Type.Void, 3177, false,
    arg(Type.Bool, toggle)
  )
end

function NETWORK.NETWORK_SET_RICH_PRESENCE(p0, p1, p2, p3)
  native.invoke(
    Type.Void, 3178, false,
    arg(Type.Int, p0),
    arg(Type.Int, p1),
    arg(Type.Any, p2),
    arg(Type.Any, p3)
  )
end

function NETWORK.NETWORK_SET_RICH_PRESENCE_STRING(p0, textLabel)
  native.invoke(
    Type.Void, 3179, false,
    arg(Type.Int, p0),
    arg(Type.String, textLabel)
  )
end

function NETWORK.NETWORK_GET_TIMEOUT_TIME()
  return native.invoke(
    Type.Int, 3180, false
  )
end

function NETWORK.NETWORK_LEAVE_PED_BEHIND_BEFORE_WARP(player, x, y, z, p4, p5)
  native.invoke(
    Type.Void, 3181, false,
    arg(Type.Player, player),
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, z),
    arg(Type.Bool, p4),
    arg(Type.Bool, p5)
  )
end

function NETWORK.NETWORK_LEAVE_PED_BEHIND_BEFORE_CUTSCENE(player, p1)
  native.invoke(
    Type.Void, 3182, false,
    arg(Type.Player, player),
    arg(Type.Bool, p1)
  )
end

function NETWORK.REMOVE_ALL_STICKY_BOMBS_FROM_ENTITY(entity, ped)
  native.invoke(
    Type.Void, 3183, false,
    arg(Type.Entity, entity),
    arg(Type.Ped, ped)
  )
end

function NETWORK.NETWORK_KEEP_ENTITY_COLLISION_DISABLED_AFTER_ANIM_SCENE(p0, p1)
  native.invoke(
    Type.Void, 3184, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1)
  )
end

function NETWORK.NETWORK_IS_ANY_PLAYER_NEAR(p0, p1, p2, p3, p4, p5, p6)
  return native.invoke(
    Type.Bool, 3185, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1),
    arg(Type.Any, p2),
    arg(Type.Any, p3),
    arg(Type.Any, p4),
    arg(Type.Any, p5),
    arg(Type.Any, p6)
  )
end

function NETWORK.NETWORK_CLAN_SERVICE_IS_VALID()
  return native.invoke(
    Type.Bool, 3186, false
  )
end

function NETWORK.NETWORK_CLAN_PLAYER_IS_ACTIVE(gamerHandle)
  return native.invoke(
    Type.Bool, 3187, false,
    ref(Type.Any, gamerHandle)
  )
end

function NETWORK.NETWORK_CLAN_PLAYER_GET_DESC(clanDesc, bufferSize, gamerHandle)
  return native.invoke(
    Type.Bool, 3188, false,
    ref(Type.Any, clanDesc),
    arg(Type.Int, bufferSize),
    ref(Type.Any, gamerHandle)
  )
end

function NETWORK.NETWORK_CLAN_IS_ROCKSTAR_CLAN(clanDesc, bufferSize)
  return native.invoke(
    Type.Bool, 3189, false,
    ref(Type.Any, clanDesc),
    arg(Type.Int, bufferSize)
  )
end

function NETWORK.NETWORK_CLAN_GET_UI_FORMATTED_TAG(clanDesc, bufferSize, formattedTag)
  native.invoke(
    Type.Void, 3190, false,
    ref(Type.Any, clanDesc),
    arg(Type.Int, bufferSize),
    ref(Type.Char, formattedTag)
  )
end

function NETWORK.NETWORK_CLAN_GET_LOCAL_MEMBERSHIPS_COUNT()
  return native.invoke(
    Type.Int, 3191, false
  )
end

function NETWORK.NETWORK_CLAN_GET_MEMBERSHIP_DESC(memberDesc, p1)
  return native.invoke(
    Type.Bool, 3192, false,
    ref(Type.Any, memberDesc),
    arg(Type.Int, p1)
  )
end

function NETWORK.NETWORK_CLAN_DOWNLOAD_MEMBERSHIP(gamerHandle)
  return native.invoke(
    Type.Bool, 3193, false,
    ref(Type.Any, gamerHandle)
  )
end

function NETWORK.NETWORK_CLAN_DOWNLOAD_MEMBERSHIP_PENDING(p0)
  return native.invoke(
    Type.Bool, 3194, false,
    ref(Type.Any, p0)
  )
end

function NETWORK.NETWORK_CLAN_ANY_DOWNLOAD_MEMBERSHIP_PENDING()
  return native.invoke(
    Type.Bool, 3195, false
  )
end

function NETWORK.NETWORK_CLAN_REMOTE_MEMBERSHIPS_ARE_IN_CACHE(p0)
  return native.invoke(
    Type.Bool, 3196, false,
    ref(Type.Int, p0)
  )
end

function NETWORK.NETWORK_CLAN_GET_MEMBERSHIP_COUNT(p0)
  return native.invoke(
    Type.Int, 3197, false,
    ref(Type.Int, p0)
  )
end

function NETWORK.NETWORK_CLAN_GET_MEMBERSHIP_VALID(p0, p1)
  return native.invoke(
    Type.Bool, 3198, false,
    ref(Type.Int, p0),
    arg(Type.Any, p1)
  )
end

function NETWORK.NETWORK_CLAN_GET_MEMBERSHIP(p0, clanMembership, p2)
  return native.invoke(
    Type.Bool, 3199, false,
    ref(Type.Int, p0),
    ref(Type.Any, clanMembership),
    arg(Type.Int, p2)
  )
end

function NETWORK.NETWORK_CLAN_JOIN(clanDesc)
  return native.invoke(
    Type.Bool, 3200, false,
    arg(Type.Int, clanDesc)
  )
end

function NETWORK.NETWORK_CLAN_CREWINFO_GET_STRING_VALUE(animDict, animName)
  return native.invoke(
    Type.Bool, 3201, false,
    arg(Type.String, animDict),
    arg(Type.String, animName)
  )
end

function NETWORK.NETWORK_CLAN_CREWINFO_GET_CREWRANKTITLE(p0, p1)
  return native.invoke(
    Type.Bool, 3202, false,
    arg(Type.Int, p0),
    arg(Type.String, p1)
  )
end

function NETWORK.NETWORK_CLAN_HAS_CREWINFO_METADATA_BEEN_RECEIVED()
  return native.invoke(
    Type.Bool, 3203, false
  )
end

function NETWORK.NETWORK_CLAN_GET_EMBLEM_TXD_NAME(netHandle, txdName)
  return native.invoke(
    Type.Bool, 3204, false,
    ref(Type.Any, netHandle),
    ref(Type.Char, txdName)
  )
end

function NETWORK.NETWORK_CLAN_REQUEST_EMBLEM(p0)
  return native.invoke(
    Type.Bool, 3205, false,
    arg(Type.Any, p0)
  )
end

function NETWORK.NETWORK_CLAN_IS_EMBLEM_READY(p0, p1)
  return native.invoke(
    Type.Bool, 3206, false,
    arg(Type.Any, p0),
    ref(Type.Any, p1)
  )
end

function NETWORK.NETWORK_CLAN_RELEASE_EMBLEM(p0)
  native.invoke(
    Type.Void, 3207, false,
    arg(Type.Any, p0)
  )
end

function NETWORK.NETWORK_GET_PRIMARY_CLAN_DATA_CLEAR()
  return native.invoke(
    Type.Bool, 3208, false
  )
end

function NETWORK.NETWORK_GET_PRIMARY_CLAN_DATA_CANCEL()
  native.invoke(
    Type.Void, 3209, false
  )
end

function NETWORK.NETWORK_GET_PRIMARY_CLAN_DATA_START(p0, p1)
  return native.invoke(
    Type.Bool, 3210, false,
    ref(Type.Any, p0),
    arg(Type.Any, p1)
  )
end

function NETWORK.NETWORK_GET_PRIMARY_CLAN_DATA_PENDING()
  return native.invoke(
    Type.Bool, 3211, false
  )
end

function NETWORK.NETWORK_GET_PRIMARY_CLAN_DATA_SUCCESS()
  return native.invoke(
    Type.Bool, 3212, false
  )
end

function NETWORK.NETWORK_GET_PRIMARY_CLAN_DATA_NEW(p0, p1)
  return native.invoke(
    Type.Bool, 3213, false,
    ref(Type.Any, p0),
    ref(Type.Any, p1)
  )
end

function NETWORK.SET_NETWORK_ID_CAN_MIGRATE(netId, toggle)
  native.invoke(
    Type.Void, 3214, false,
    arg(Type.Int, netId),
    arg(Type.Bool, toggle)
  )
end

function NETWORK.SET_NETWORK_ID_EXISTS_ON_ALL_MACHINES(netId, toggle)
  native.invoke(
    Type.Void, 3215, false,
    arg(Type.Int, netId),
    arg(Type.Bool, toggle)
  )
end

function NETWORK.SET_NETWORK_ID_ALWAYS_EXISTS_FOR_PLAYER(netId, player, toggle)
  native.invoke(
    Type.Void, 3216, false,
    arg(Type.Int, netId),
    arg(Type.Player, player),
    arg(Type.Bool, toggle)
  )
end

function NETWORK.SET_NETWORK_ID_CAN_BE_REASSIGNED(netId, toggle)
  native.invoke(
    Type.Void, 3217, false,
    arg(Type.Int, netId),
    arg(Type.Bool, toggle)
  )
end

function NETWORK.NETWORK_SET_ENTITY_CAN_BLEND(entity, toggle)
  native.invoke(
    Type.Void, 3218, false,
    arg(Type.Entity, entity),
    arg(Type.Bool, toggle)
  )
end

function NETWORK.NETWORK_SET_OBJECT_CAN_BLEND_WHEN_FIXED(object, toggle)
  native.invoke(
    Type.Void, 3219, false,
    arg(Type.Object, object),
    arg(Type.Bool, toggle)
  )
end

function NETWORK.NETWORK_SET_ENTITY_ONLY_EXISTS_FOR_PARTICIPANTS(entity, toggle)
  native.invoke(
    Type.Void, 3220, false,
    arg(Type.Entity, entity),
    arg(Type.Bool, toggle)
  )
end

function NETWORK.SET_NETWORK_ID_VISIBLE_IN_CUTSCENE(netId, p1, p2)
  native.invoke(
    Type.Void, 3221, false,
    arg(Type.Int, netId),
    arg(Type.Bool, p1),
    arg(Type.Bool, p2)
  )
end

function NETWORK.SET_NETWORK_ID_VISIBLE_IN_CUTSCENE_HACK(netId, p1, p2)
  native.invoke(
    Type.Void, 3222, false,
    arg(Type.Int, netId),
    arg(Type.Bool, p1),
    arg(Type.Bool, p2)
  )
end

function NETWORK.SET_NETWORK_ID_VISIBLE_IN_CUTSCENE_REMAIN_HACK(p0, p1, p2)
  native.invoke(
    Type.Void, 3223, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1),
    arg(Type.Any, p2)
  )
end

function NETWORK.SET_NETWORK_CUTSCENE_ENTITIES(toggle)
  native.invoke(
    Type.Void, 3224, false,
    arg(Type.Bool, toggle)
  )
end

function NETWORK.ARE_CUTSCENE_ENTITIES_NETWORKED()
  return native.invoke(
    Type.Bool, 3225, false
  )
end

function NETWORK.SET_NETWORK_ID_PASS_CONTROL_IN_TUTORIAL(netId, state)
  native.invoke(
    Type.Void, 3226, false,
    arg(Type.Int, netId),
    arg(Type.Bool, state)
  )
end

function NETWORK.IS_NETWORK_ID_OWNED_BY_PARTICIPANT(netId)
  return native.invoke(
    Type.Bool, 3227, false,
    arg(Type.Int, netId)
  )
end

function NETWORK.SET_REMOTE_PLAYER_VISIBLE_IN_CUTSCENE(player, locallyVisible)
  native.invoke(
    Type.Void, 3228, false,
    arg(Type.Player, player),
    arg(Type.Bool, locallyVisible)
  )
end

function NETWORK.SET_LOCAL_PLAYER_VISIBLE_IN_CUTSCENE(p0, p1)
  native.invoke(
    Type.Void, 3229, false,
    arg(Type.Bool, p0),
    arg(Type.Bool, p1)
  )
end

function NETWORK.SET_LOCAL_PLAYER_INVISIBLE_LOCALLY(bIncludePlayersVehicle)
  native.invoke(
    Type.Void, 3230, false,
    arg(Type.Bool, bIncludePlayersVehicle)
  )
end

function NETWORK.SET_LOCAL_PLAYER_VISIBLE_LOCALLY(bIncludePlayersVehicle)
  native.invoke(
    Type.Void, 3231, false,
    arg(Type.Bool, bIncludePlayersVehicle)
  )
end

function NETWORK.SET_PLAYER_INVISIBLE_LOCALLY(player, bIncludePlayersVehicle)
  native.invoke(
    Type.Void, 3232, false,
    arg(Type.Player, player),
    arg(Type.Bool, bIncludePlayersVehicle)
  )
end

function NETWORK.SET_PLAYER_VISIBLE_LOCALLY(player, bIncludePlayersVehicle)
  native.invoke(
    Type.Void, 3233, false,
    arg(Type.Player, player),
    arg(Type.Bool, bIncludePlayersVehicle)
  )
end

function NETWORK.FADE_OUT_LOCAL_PLAYER(p0)
  native.invoke(
    Type.Void, 3234, false,
    arg(Type.Bool, p0)
  )
end

function NETWORK.NETWORK_FADE_OUT_ENTITY(entity, normal, slow)
  native.invoke(
    Type.Void, 3235, false,
    arg(Type.Entity, entity),
    arg(Type.Bool, normal),
    arg(Type.Bool, slow)
  )
end

function NETWORK.NETWORK_FADE_IN_ENTITY(entity, state, p2)
  native.invoke(
    Type.Void, 3236, false,
    arg(Type.Entity, entity),
    arg(Type.Bool, state),
    arg(Type.Any, p2)
  )
end

function NETWORK.NETWORK_IS_PLAYER_FADING(player)
  return native.invoke(
    Type.Bool, 3237, false,
    arg(Type.Player, player)
  )
end

function NETWORK.NETWORK_IS_ENTITY_FADING(entity)
  return native.invoke(
    Type.Bool, 3238, false,
    arg(Type.Entity, entity)
  )
end

function NETWORK.IS_PLAYER_IN_CUTSCENE(player)
  return native.invoke(
    Type.Bool, 3239, false,
    arg(Type.Player, player)
  )
end

function NETWORK.SET_ENTITY_VISIBLE_IN_CUTSCENE(p0, p1, p2)
  native.invoke(
    Type.Void, 3240, false,
    arg(Type.Any, p0),
    arg(Type.Bool, p1),
    arg(Type.Bool, p2)
  )
end

function NETWORK.SET_ENTITY_LOCALLY_INVISIBLE(entity)
  native.invoke(
    Type.Void, 3241, false,
    arg(Type.Entity, entity)
  )
end

function NETWORK.SET_ENTITY_LOCALLY_VISIBLE(entity)
  native.invoke(
    Type.Void, 3242, false,
    arg(Type.Entity, entity)
  )
end

function NETWORK.IS_DAMAGE_TRACKER_ACTIVE_ON_NETWORK_ID(netID)
  return native.invoke(
    Type.Bool, 3243, false,
    arg(Type.Int, netID)
  )
end

function NETWORK.ACTIVATE_DAMAGE_TRACKER_ON_NETWORK_ID(netID, toggle)
  native.invoke(
    Type.Void, 3244, false,
    arg(Type.Int, netID),
    arg(Type.Bool, toggle)
  )
end

function NETWORK.IS_DAMAGE_TRACKER_ACTIVE_ON_PLAYER(player)
  return native.invoke(
    Type.Bool, 3245, false,
    arg(Type.Player, player)
  )
end

function NETWORK.ACTIVATE_DAMAGE_TRACKER_ON_PLAYER(player, toggle)
  native.invoke(
    Type.Void, 3246, false,
    arg(Type.Player, player),
    arg(Type.Bool, toggle)
  )
end

function NETWORK.IS_SPHERE_VISIBLE_TO_ANOTHER_MACHINE(p0, p1, p2, p3)
  return native.invoke(
    Type.Bool, 3247, false,
    arg(Type.Float, p0),
    arg(Type.Float, p1),
    arg(Type.Float, p2),
    arg(Type.Float, p3)
  )
end

function NETWORK.IS_SPHERE_VISIBLE_TO_PLAYER(p0, p1, p2, p3, p4)
  return native.invoke(
    Type.Bool, 3248, false,
    arg(Type.Any, p0),
    arg(Type.Float, p1),
    arg(Type.Float, p2),
    arg(Type.Float, p3),
    arg(Type.Float, p4)
  )
end

function NETWORK.RESERVE_NETWORK_MISSION_OBJECTS(amount)
  native.invoke(
    Type.Void, 3249, false,
    arg(Type.Int, amount)
  )
end

function NETWORK.RESERVE_NETWORK_MISSION_PEDS(amount)
  native.invoke(
    Type.Void, 3250, false,
    arg(Type.Int, amount)
  )
end

function NETWORK.RESERVE_NETWORK_MISSION_VEHICLES(amount)
  native.invoke(
    Type.Void, 3251, false,
    arg(Type.Int, amount)
  )
end

function NETWORK.RESERVE_LOCAL_NETWORK_MISSION_OBJECTS(amount)
  native.invoke(
    Type.Void, 3252, false,
    arg(Type.Int, amount)
  )
end

function NETWORK.RESERVE_LOCAL_NETWORK_MISSION_PEDS(amount)
  native.invoke(
    Type.Void, 3253, false,
    arg(Type.Int, amount)
  )
end

function NETWORK.RESERVE_LOCAL_NETWORK_MISSION_VEHICLES(amount)
  native.invoke(
    Type.Void, 3254, false,
    arg(Type.Int, amount)
  )
end

function NETWORK.CAN_REGISTER_MISSION_OBJECTS(amount)
  return native.invoke(
    Type.Bool, 3255, false,
    arg(Type.Int, amount)
  )
end

function NETWORK.CAN_REGISTER_MISSION_PEDS(amount)
  return native.invoke(
    Type.Bool, 3256, false,
    arg(Type.Int, amount)
  )
end

function NETWORK.CAN_REGISTER_MISSION_VEHICLES(amount)
  return native.invoke(
    Type.Bool, 3257, false,
    arg(Type.Int, amount)
  )
end

function NETWORK.CAN_REGISTER_MISSION_PICKUPS(amount)
  return native.invoke(
    Type.Bool, 3258, false,
    arg(Type.Int, amount)
  )
end

function NETWORK.CAN_REGISTER_MISSION_DOORS(p0)
  return native.invoke(
    Type.Bool, 3259, false,
    arg(Type.Any, p0)
  )
end

function NETWORK.CAN_REGISTER_MISSION_ENTITIES(ped_amt, vehicle_amt, object_amt, pickup_amt)
  return native.invoke(
    Type.Bool, 3260, false,
    arg(Type.Int, ped_amt),
    arg(Type.Int, vehicle_amt),
    arg(Type.Int, object_amt),
    arg(Type.Int, pickup_amt)
  )
end

function NETWORK.GET_NUM_RESERVED_MISSION_OBJECTS(p0, p1)
  return native.invoke(
    Type.Int, 3261, false,
    arg(Type.Bool, p0),
    arg(Type.Any, p1)
  )
end

function NETWORK.GET_NUM_RESERVED_MISSION_PEDS(p0, p1)
  return native.invoke(
    Type.Int, 3262, false,
    arg(Type.Bool, p0),
    arg(Type.Any, p1)
  )
end

function NETWORK.GET_NUM_RESERVED_MISSION_VEHICLES(p0, p1)
  return native.invoke(
    Type.Int, 3263, false,
    arg(Type.Bool, p0),
    arg(Type.Any, p1)
  )
end

function NETWORK.GET_NUM_CREATED_MISSION_OBJECTS(p0)
  return native.invoke(
    Type.Int, 3264, false,
    arg(Type.Bool, p0)
  )
end

function NETWORK.GET_NUM_CREATED_MISSION_PEDS(p0)
  return native.invoke(
    Type.Int, 3265, false,
    arg(Type.Bool, p0)
  )
end

function NETWORK.GET_NUM_CREATED_MISSION_VEHICLES(p0)
  return native.invoke(
    Type.Int, 3266, false,
    arg(Type.Bool, p0)
  )
end

function NETWORK.GET_RESERVED_MISSION_ENTITIES_IN_AREA(x, y, z, p3, out1, out2, out3)
  native.invoke(
    Type.Void, 3267, false,
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, z),
    arg(Type.Any, p3),
    ref(Type.Any, out1),
    ref(Type.Any, out2),
    ref(Type.Any, out3)
  )
end

function NETWORK.GET_MAX_NUM_NETWORK_OBJECTS()
  return native.invoke(
    Type.Int, 3268, false
  )
end

function NETWORK.GET_MAX_NUM_NETWORK_PEDS()
  return native.invoke(
    Type.Int, 3269, false
  )
end

function NETWORK.GET_MAX_NUM_NETWORK_VEHICLES()
  return native.invoke(
    Type.Int, 3270, false
  )
end

function NETWORK.GET_MAX_NUM_NETWORK_PICKUPS()
  return native.invoke(
    Type.Int, 3271, false
  )
end

function NETWORK.NETWORK_SET_OBJECT_SCOPE_DISTANCE(object, range)
  native.invoke(
    Type.Void, 3272, false,
    arg(Type.Object, object),
    arg(Type.Float, range)
  )
end

function NETWORK.NETWORK_ALLOW_CLONING_WHILE_IN_TUTORIAL(p0, p1)
  native.invoke(
    Type.Void, 3273, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1)
  )
end

function NETWORK.NETWORK_SET_TASK_CUTSCENE_INSCOPE_MULTIPLER(p0)
  native.invoke(
    Type.Void, 3274, false,
    arg(Type.Any, p0)
  )
end

function NETWORK.GET_NETWORK_TIME()
  return native.invoke(
    Type.Int, 3275, false
  )
end

function NETWORK.GET_NETWORK_TIME_ACCURATE()
  return native.invoke(
    Type.Int, 3276, false
  )
end

function NETWORK.HAS_NETWORK_TIME_STARTED()
  return native.invoke(
    Type.Bool, 3277, false
  )
end

function NETWORK.GET_TIME_OFFSET(timeA, timeB)
  return native.invoke(
    Type.Int, 3278, false,
    arg(Type.Int, timeA),
    arg(Type.Int, timeB)
  )
end

function NETWORK.IS_TIME_LESS_THAN(timeA, timeB)
  return native.invoke(
    Type.Bool, 3279, false,
    arg(Type.Int, timeA),
    arg(Type.Int, timeB)
  )
end

function NETWORK.IS_TIME_MORE_THAN(timeA, timeB)
  return native.invoke(
    Type.Bool, 3280, false,
    arg(Type.Int, timeA),
    arg(Type.Int, timeB)
  )
end

function NETWORK.IS_TIME_EQUAL_TO(timeA, timeB)
  return native.invoke(
    Type.Bool, 3281, false,
    arg(Type.Int, timeA),
    arg(Type.Int, timeB)
  )
end

function NETWORK.GET_TIME_DIFFERENCE(timeA, timeB)
  return native.invoke(
    Type.Int, 3282, false,
    arg(Type.Int, timeA),
    arg(Type.Int, timeB)
  )
end

function NETWORK.GET_TIME_AS_STRING(time)
  return native.invoke(
    Type.String, 3283, false,
    arg(Type.Int, time)
  )
end

function NETWORK.GET_CLOUD_TIME_AS_STRING()
  return native.invoke(
    Type.String, 3284, false
  )
end

function NETWORK.GET_CLOUD_TIME_AS_INT()
  return native.invoke(
    Type.Int, 3285, false
  )
end

function NETWORK.CONVERT_POSIX_TIME(posixTime, timeStructure)
  native.invoke(
    Type.Void, 3286, false,
    arg(Type.Int, posixTime),
    ref(Type.Any, timeStructure)
  )
end

function NETWORK.NETWORK_SET_IN_SPECTATOR_MODE(toggle, playerPed)
  native.invoke(
    Type.Void, 3287, false,
    arg(Type.Bool, toggle),
    arg(Type.Ped, playerPed)
  )
end

function NETWORK.NETWORK_SET_IN_SPECTATOR_MODE_EXTENDED(toggle, playerPed, p2)
  native.invoke(
    Type.Void, 3288, false,
    arg(Type.Bool, toggle),
    arg(Type.Ped, playerPed),
    arg(Type.Bool, p2)
  )
end

function NETWORK.NETWORK_SET_IN_FREE_CAM_MODE(toggle)
  native.invoke(
    Type.Void, 3289, false,
    arg(Type.Bool, toggle)
  )
end

function NETWORK.NETWORK_SET_ANTAGONISTIC_TO_PLAYER(toggle, player)
  native.invoke(
    Type.Void, 3290, false,
    arg(Type.Bool, toggle),
    arg(Type.Player, player)
  )
end

function NETWORK.NETWORK_IS_IN_SPECTATOR_MODE()
  return native.invoke(
    Type.Bool, 3291, false
  )
end

function NETWORK.NETWORK_SET_IN_MP_CUTSCENE(p0, p1)
  native.invoke(
    Type.Void, 3292, false,
    arg(Type.Bool, p0),
    arg(Type.Bool, p1)
  )
end

function NETWORK.NETWORK_IS_IN_MP_CUTSCENE()
  return native.invoke(
    Type.Bool, 3293, false
  )
end

function NETWORK.NETWORK_IS_PLAYER_IN_MP_CUTSCENE(player)
  return native.invoke(
    Type.Bool, 3294, false,
    arg(Type.Player, player)
  )
end

function NETWORK.NETWORK_HIDE_PROJECTILE_IN_CUTSCENE()
  native.invoke(
    Type.Void, 3295, false
  )
end

function NETWORK.SET_NETWORK_VEHICLE_RESPOT_TIMER(netId, time, p2, p3)
  native.invoke(
    Type.Void, 3296, false,
    arg(Type.Int, netId),
    arg(Type.Int, time),
    arg(Type.Any, p2),
    arg(Type.Any, p3)
  )
end

function NETWORK.IS_NETWORK_VEHICLE_RUNNING_RESPOT_TIMER(networkID)
  return native.invoke(
    Type.Bool, 3297, false,
    arg(Type.Int, networkID)
  )
end

function NETWORK.SET_NETWORK_VEHICLE_AS_GHOST(vehicle, toggle)
  native.invoke(
    Type.Void, 3298, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Bool, toggle)
  )
end

function NETWORK.SET_NETWORK_VEHICLE_MAX_POSITION_DELTA_MULTIPLIER(vehicle, multiplier)
  native.invoke(
    Type.Void, 3299, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Float, multiplier)
  )
end

function NETWORK.SET_NETWORK_ENABLE_HIGH_SPEED_EDGE_FALL_DETECTION(vehicle, toggle)
  native.invoke(
    Type.Void, 3300, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Bool, toggle)
  )
end

function NETWORK.SET_LOCAL_PLAYER_AS_GHOST(toggle, p1)
  native.invoke(
    Type.Void, 3301, false,
    arg(Type.Bool, toggle),
    arg(Type.Bool, p1)
  )
end

function NETWORK.IS_ENTITY_A_GHOST(entity)
  return native.invoke(
    Type.Bool, 3302, false,
    arg(Type.Entity, entity)
  )
end

function NETWORK.SET_NON_PARTICIPANTS_OF_THIS_SCRIPT_AS_GHOSTS(p0)
  native.invoke(
    Type.Void, 3303, false,
    arg(Type.Bool, p0)
  )
end

function NETWORK.SET_REMOTE_PLAYER_AS_GHOST(player, p1)
  native.invoke(
    Type.Void, 3304, false,
    arg(Type.Player, player),
    arg(Type.Bool, p1)
  )
end

function NETWORK.SET_GHOST_ALPHA(alpha)
  native.invoke(
    Type.Void, 3305, false,
    arg(Type.Int, alpha)
  )
end

function NETWORK.RESET_GHOST_ALPHA()
  native.invoke(
    Type.Void, 3306, false
  )
end

function NETWORK.SET_ENTITY_GHOSTED_FOR_GHOST_PLAYERS(entity, toggle)
  native.invoke(
    Type.Void, 3307, false,
    arg(Type.Entity, entity),
    arg(Type.Bool, toggle)
  )
end

function NETWORK.SET_INVERT_GHOSTING(p0)
  native.invoke(
    Type.Void, 3308, false,
    arg(Type.Bool, p0)
  )
end

function NETWORK.IS_ENTITY_IN_GHOST_COLLISION(entity)
  return native.invoke(
    Type.Bool, 3309, false,
    arg(Type.Entity, entity)
  )
end

function NETWORK.USE_PLAYER_COLOUR_INSTEAD_OF_TEAM_COLOUR(toggle)
  native.invoke(
    Type.Void, 3310, false,
    arg(Type.Bool, toggle)
  )
end

function NETWORK.NETWORK_CREATE_SYNCHRONISED_SCENE(x, y, z, xRot, yRot, zRot, rotationOrder, useOcclusionPortal, looped, p9, animTime, p11)
  return native.invoke(
    Type.Int, 3311, false,
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, z),
    arg(Type.Float, xRot),
    arg(Type.Float, yRot),
    arg(Type.Float, zRot),
    arg(Type.Int, rotationOrder),
    arg(Type.Bool, useOcclusionPortal),
    arg(Type.Bool, looped),
    arg(Type.Float, p9),
    arg(Type.Float, animTime),
    arg(Type.Float, p11)
  )
end

function NETWORK.NETWORK_ADD_PED_TO_SYNCHRONISED_SCENE(ped, netScene, animDict, animnName, speed, speedMultiplier, duration, flag, playbackRate, p9)
  native.invoke(
    Type.Void, 3312, false,
    arg(Type.Ped, ped),
    arg(Type.Int, netScene),
    arg(Type.String, animDict),
    arg(Type.String, animnName),
    arg(Type.Float, speed),
    arg(Type.Float, speedMultiplier),
    arg(Type.Int, duration),
    arg(Type.Int, flag),
    arg(Type.Float, playbackRate),
    arg(Type.Any, p9)
  )
end

function NETWORK.NETWORK_ADD_PED_TO_SYNCHRONISED_SCENE_WITH_IK(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9)
  native.invoke(
    Type.Void, 3313, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1),
    arg(Type.Any, p2),
    arg(Type.Any, p3),
    arg(Type.Any, p4),
    arg(Type.Any, p5),
    arg(Type.Any, p6),
    arg(Type.Any, p7),
    arg(Type.Any, p8),
    arg(Type.Any, p9)
  )
end

function NETWORK.NETWORK_ADD_ENTITY_TO_SYNCHRONISED_SCENE(entity, netScene, animDict, animName, speed, speedMulitiplier, flag)
  native.invoke(
    Type.Void, 3314, false,
    arg(Type.Entity, entity),
    arg(Type.Int, netScene),
    arg(Type.String, animDict),
    arg(Type.String, animName),
    arg(Type.Float, speed),
    arg(Type.Float, speedMulitiplier),
    arg(Type.Int, flag)
  )
end

function NETWORK.NETWORK_ADD_MAP_ENTITY_TO_SYNCHRONISED_SCENE(netScene, modelHash, x, y, z, p5, p6, p7, p8, flags)
  native.invoke(
    Type.Void, 3315, false,
    arg(Type.Int, netScene),
    arg(Type.Hash, modelHash),
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, z),
    arg(Type.Float, p5),
    arg(Type.String, p6),
    arg(Type.Float, p7),
    arg(Type.Float, p8),
    arg(Type.Int, flags)
  )
end

function NETWORK.NETWORK_ADD_SYNCHRONISED_SCENE_CAMERA(netScene, animDict, animName)
  native.invoke(
    Type.Void, 3316, false,
    arg(Type.Int, netScene),
    arg(Type.String, animDict),
    arg(Type.String, animName)
  )
end

function NETWORK.NETWORK_ATTACH_SYNCHRONISED_SCENE_TO_ENTITY(netScene, entity, bone)
  native.invoke(
    Type.Void, 3317, false,
    arg(Type.Int, netScene),
    arg(Type.Entity, entity),
    arg(Type.Int, bone)
  )
end

function NETWORK.NETWORK_START_SYNCHRONISED_SCENE(netScene)
  native.invoke(
    Type.Void, 3318, false,
    arg(Type.Int, netScene)
  )
end

function NETWORK.NETWORK_STOP_SYNCHRONISED_SCENE(netScene)
  native.invoke(
    Type.Void, 3319, false,
    arg(Type.Int, netScene)
  )
end

function NETWORK.NETWORK_GET_LOCAL_SCENE_FROM_NETWORK_ID(netId)
  return native.invoke(
    Type.Int, 3320, false,
    arg(Type.Int, netId)
  )
end

function NETWORK.NETWORK_FORCE_LOCAL_USE_OF_SYNCED_SCENE_CAMERA(netScene)
  native.invoke(
    Type.Void, 3321, false,
    arg(Type.Int, netScene)
  )
end

function NETWORK.NETWORK_ALLOW_REMOTE_SYNCED_SCENE_LOCAL_PLAYER_REQUESTS(p0)
  native.invoke(
    Type.Void, 3322, false,
    arg(Type.Any, p0)
  )
end

function NETWORK.NETWORK_FIND_LARGEST_BUNCH_OF_PLAYERS(p0, p1)
  return native.invoke(
    Type.Bool, 3323, false,
    arg(Type.Int, p0),
    arg(Type.Any, p1)
  )
end

function NETWORK.NETWORK_START_RESPAWN_SEARCH_FOR_PLAYER(player, x, y, z, radius, p5, p6, p7, flags)
  return native.invoke(
    Type.Bool, 3324, false,
    arg(Type.Player, player),
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, z),
    arg(Type.Float, radius),
    arg(Type.Float, p5),
    arg(Type.Float, p6),
    arg(Type.Float, p7),
    arg(Type.Int, flags)
  )
end

function NETWORK.NETWORK_START_RESPAWN_SEARCH_IN_ANGLED_AREA_FOR_PLAYER(player, x1, y1, z1, x2, y2, z2, width, p8, p9, p10, flags)
  return native.invoke(
    Type.Bool, 3325, false,
    arg(Type.Player, player),
    arg(Type.Float, x1),
    arg(Type.Float, y1),
    arg(Type.Float, z1),
    arg(Type.Float, x2),
    arg(Type.Float, y2),
    arg(Type.Float, z2),
    arg(Type.Float, width),
    arg(Type.Float, p8),
    arg(Type.Float, p9),
    arg(Type.Float, p10),
    arg(Type.Int, flags)
  )
end

function NETWORK.NETWORK_QUERY_RESPAWN_RESULTS(p0)
  return native.invoke(
    Type.Int, 3326, false,
    ref(Type.Any, p0)
  )
end

function NETWORK.NETWORK_CANCEL_RESPAWN_SEARCH()
  native.invoke(
    Type.Void, 3327, false
  )
end

function NETWORK.NETWORK_GET_RESPAWN_RESULT(randomInt, coordinates, heading)
  native.invoke(
    Type.Void, 3328, true,
    arg(Type.Int, randomInt),
    ref(Type.Vector3, coordinates),
    ref(Type.Float, heading)
  )
end

function NETWORK.NETWORK_GET_RESPAWN_RESULT_FLAGS(p0)
  return native.invoke(
    Type.Int, 3329, false,
    arg(Type.Int, p0)
  )
end

function NETWORK.NETWORK_START_SOLO_TUTORIAL_SESSION()
  native.invoke(
    Type.Void, 3330, false
  )
end

function NETWORK.NETWORK_ALLOW_GANG_TO_JOIN_TUTORIAL_SESSION(teamId, instanceId)
  native.invoke(
    Type.Void, 3331, false,
    arg(Type.Int, teamId),
    arg(Type.Int, instanceId)
  )
end

function NETWORK.NETWORK_END_TUTORIAL_SESSION()
  native.invoke(
    Type.Void, 3332, false
  )
end

function NETWORK.NETWORK_IS_IN_TUTORIAL_SESSION()
  return native.invoke(
    Type.Bool, 3333, false
  )
end

function NETWORK.NETWORK_WAITING_POP_CLEAR_TUTORIAL_SESSION()
  return native.invoke(
    Type.Bool, 3334, false
  )
end

function NETWORK.NETWORK_IS_TUTORIAL_SESSION_CHANGE_PENDING()
  return native.invoke(
    Type.Bool, 3335, false
  )
end

function NETWORK.NETWORK_GET_PLAYER_TUTORIAL_SESSION_INSTANCE(player)
  return native.invoke(
    Type.Int, 3336, false,
    arg(Type.Player, player)
  )
end

function NETWORK.NETWORK_ARE_PLAYERS_IN_SAME_TUTORIAL_SESSION(player, index)
  return native.invoke(
    Type.Bool, 3337, false,
    arg(Type.Player, player),
    arg(Type.Int, index)
  )
end

function NETWORK.NETWORK_BLOCK_PROXY_MIGRATION_BETWEEN_TUTORIAL_SESSIONS(p0)
  native.invoke(
    Type.Void, 3338, false,
    arg(Type.Any, p0)
  )
end

function NETWORK.NETWORK_CONCEAL_PLAYER(player, toggle, p2)
  native.invoke(
    Type.Void, 3339, false,
    arg(Type.Player, player),
    arg(Type.Bool, toggle),
    arg(Type.Bool, p2)
  )
end

function NETWORK.NETWORK_IS_PLAYER_CONCEALED(player)
  return native.invoke(
    Type.Bool, 3340, false,
    arg(Type.Player, player)
  )
end

function NETWORK.NETWORK_CONCEAL_ENTITY(entity, toggle)
  native.invoke(
    Type.Void, 3341, false,
    arg(Type.Entity, entity),
    arg(Type.Bool, toggle)
  )
end

function NETWORK.NETWORK_IS_ENTITY_CONCEALED(entity)
  return native.invoke(
    Type.Bool, 3342, false,
    arg(Type.Entity, entity)
  )
end

function NETWORK.NETWORK_OVERRIDE_CLOCK_TIME(hours, minutes, seconds)
  native.invoke(
    Type.Void, 3343, false,
    arg(Type.Int, hours),
    arg(Type.Int, minutes),
    arg(Type.Int, seconds)
  )
end

function NETWORK.NETWORK_OVERRIDE_CLOCK_RATE(ms)
  native.invoke(
    Type.Void, 3344, false,
    arg(Type.Int, ms)
  )
end

function NETWORK.NETWORK_CLEAR_CLOCK_TIME_OVERRIDE()
  native.invoke(
    Type.Void, 3345, false
  )
end

function NETWORK.NETWORK_IS_CLOCK_TIME_OVERRIDDEN()
  return native.invoke(
    Type.Bool, 3346, false
  )
end

function NETWORK.NETWORK_ADD_ENTITY_AREA(x1, y1, z1, x2, y2, z2)
  return native.invoke(
    Type.Int, 3347, false,
    arg(Type.Float, x1),
    arg(Type.Float, y1),
    arg(Type.Float, z1),
    arg(Type.Float, x2),
    arg(Type.Float, y2),
    arg(Type.Float, z2)
  )
end

function NETWORK.NETWORK_ADD_ENTITY_ANGLED_AREA(x1, y1, z1, x2, y2, z2, width)
  return native.invoke(
    Type.Int, 3348, false,
    arg(Type.Float, x1),
    arg(Type.Float, y1),
    arg(Type.Float, z1),
    arg(Type.Float, x2),
    arg(Type.Float, y2),
    arg(Type.Float, z2),
    arg(Type.Float, width)
  )
end

function NETWORK.NETWORK_ADD_CLIENT_ENTITY_AREA(x1, y1, z1, x2, y2, z2)
  return native.invoke(
    Type.Int, 3349, false,
    arg(Type.Float, x1),
    arg(Type.Float, y1),
    arg(Type.Float, z1),
    arg(Type.Float, x2),
    arg(Type.Float, y2),
    arg(Type.Float, z2)
  )
end

function NETWORK.NETWORK_ADD_CLIENT_ENTITY_ANGLED_AREA(x1, y1, z1, x2, y2, z2, radius)
  return native.invoke(
    Type.Int, 3350, false,
    arg(Type.Float, x1),
    arg(Type.Float, y1),
    arg(Type.Float, z1),
    arg(Type.Float, x2),
    arg(Type.Float, y2),
    arg(Type.Float, z2),
    arg(Type.Float, radius)
  )
end

function NETWORK.NETWORK_REMOVE_ENTITY_AREA(areaHandle)
  return native.invoke(
    Type.Bool, 3351, false,
    arg(Type.Int, areaHandle)
  )
end

function NETWORK.NETWORK_ENTITY_AREA_DOES_EXIST(areaHandle)
  return native.invoke(
    Type.Bool, 3352, false,
    arg(Type.Int, areaHandle)
  )
end

function NETWORK.NETWORK_ENTITY_AREA_HAVE_ALL_REPLIED(areaHandle)
  return native.invoke(
    Type.Bool, 3353, false,
    arg(Type.Int, areaHandle)
  )
end

function NETWORK.NETWORK_ENTITY_AREA_IS_OCCUPIED(areaHandle)
  return native.invoke(
    Type.Bool, 3354, false,
    arg(Type.Int, areaHandle)
  )
end

function NETWORK.NETWORK_USE_HIGH_PRECISION_BLENDING(netID, toggle)
  native.invoke(
    Type.Void, 3355, false,
    arg(Type.Int, netID),
    arg(Type.Bool, toggle)
  )
end

function NETWORK.NETWORK_SET_CUSTOM_ARENA_BALL_PARAMS(netId)
  native.invoke(
    Type.Void, 3356, false,
    arg(Type.Int, netId)
  )
end

function NETWORK.NETWORK_ENTITY_USE_HIGH_PRECISION_ROTATION(netId, toggle)
  native.invoke(
    Type.Void, 3357, false,
    arg(Type.Int, netId),
    arg(Type.Bool, toggle)
  )
end

function NETWORK.NETWORK_REQUEST_CLOUD_BACKGROUND_SCRIPTS()
  return native.invoke(
    Type.Bool, 3358, false
  )
end

function NETWORK.NETWORK_IS_CLOUD_BACKGROUND_SCRIPT_REQUEST_PENDING()
  return native.invoke(
    Type.Bool, 3359, false
  )
end

function NETWORK.NETWORK_REQUEST_CLOUD_TUNABLES()
  native.invoke(
    Type.Void, 3360, false
  )
end

function NETWORK.NETWORK_IS_TUNABLE_CLOUD_REQUEST_PENDING()
  return native.invoke(
    Type.Bool, 3361, false
  )
end

function NETWORK.NETWORK_GET_TUNABLE_CLOUD_CRC()
  return native.invoke(
    Type.Int, 3362, false
  )
end

function NETWORK.NETWORK_DOES_TUNABLE_EXIST(tunableContext, tunableName)
  return native.invoke(
    Type.Bool, 3363, false,
    arg(Type.String, tunableContext),
    arg(Type.String, tunableName)
  )
end

function NETWORK.NETWORK_ACCESS_TUNABLE_INT(tunableContext, tunableName, value)
  return native.invoke(
    Type.Bool, 3364, false,
    arg(Type.String, tunableContext),
    arg(Type.String, tunableName),
    ref(Type.Int, value)
  )
end

function NETWORK.NETWORK_ACCESS_TUNABLE_FLOAT(tunableContext, tunableName, value)
  return native.invoke(
    Type.Bool, 3365, false,
    arg(Type.String, tunableContext),
    arg(Type.String, tunableName),
    ref(Type.Float, value)
  )
end

function NETWORK.NETWORK_ACCESS_TUNABLE_BOOL(tunableContext, tunableName)
  return native.invoke(
    Type.Bool, 3366, false,
    arg(Type.String, tunableContext),
    arg(Type.String, tunableName)
  )
end

function NETWORK.NETWORK_DOES_TUNABLE_EXIST_HASH(tunableContext, tunableName)
  return native.invoke(
    Type.Bool, 3367, false,
    arg(Type.Hash, tunableContext),
    arg(Type.Hash, tunableName)
  )
end

function NETWORK.NETWORK_ACCESS_TUNABLE_MODIFICATION_DETECTION_CLEAR()
  return native.invoke(
    Type.Bool, 3368, false
  )
end

function NETWORK.NETWORK_ACCESS_TUNABLE_INT_HASH(tunableContext, tunableName, value)
  return native.invoke(
    Type.Bool, 3369, false,
    arg(Type.Hash, tunableContext),
    arg(Type.Hash, tunableName),
    ref(Type.Int, value)
  )
end

function NETWORK.NETWORK_ACCESS_TUNABLE_INT_MODIFICATION_DETECTION_REGISTRATION_HASH(contextHash, nameHash, value)
  return native.invoke(
    Type.Bool, 3370, false,
    arg(Type.Hash, contextHash),
    arg(Type.Hash, nameHash),
    ref(Type.Int, value)
  )
end

function NETWORK.NETWORK_ACCESS_TUNABLE_FLOAT_HASH(tunableContext, tunableName, value)
  return native.invoke(
    Type.Bool, 3371, false,
    arg(Type.Hash, tunableContext),
    arg(Type.Hash, tunableName),
    ref(Type.Float, value)
  )
end

function NETWORK.NETWORK_ACCESS_TUNABLE_FLOAT_MODIFICATION_DETECTION_REGISTRATION_HASH(contextHash, nameHash, value)
  return native.invoke(
    Type.Bool, 3372, false,
    arg(Type.Hash, contextHash),
    arg(Type.Hash, nameHash),
    ref(Type.Float, value)
  )
end

function NETWORK.NETWORK_ACCESS_TUNABLE_BOOL_HASH(tunableContext, tunableName)
  return native.invoke(
    Type.Bool, 3373, false,
    arg(Type.Hash, tunableContext),
    arg(Type.Hash, tunableName)
  )
end

function NETWORK.NETWORK_ACCESS_TUNABLE_BOOL_MODIFICATION_DETECTION_REGISTRATION_HASH(contextHash, nameHash, value)
  return native.invoke(
    Type.Bool, 3374, false,
    arg(Type.Hash, contextHash),
    arg(Type.Hash, nameHash),
    ref(Type.Bool, value)
  )
end

function NETWORK.NETWORK_TRY_ACCESS_TUNABLE_BOOL_HASH(tunableContext, tunableName, defaultValue)
  return native.invoke(
    Type.Bool, 3375, false,
    arg(Type.Hash, tunableContext),
    arg(Type.Hash, tunableName),
    arg(Type.Bool, defaultValue)
  )
end

function NETWORK.NETWORK_GET_CONTENT_MODIFIER_LIST_ID(contentHash)
  return native.invoke(
    Type.Int, 3376, false,
    arg(Type.Hash, contentHash)
  )
end

function NETWORK.NETWORK_GET_BONE_ID_OF_FATAL_HIT()
  return native.invoke(
    Type.Int, 3377, false
  )
end

function NETWORK.NETWORK_RESET_BODY_TRACKER()
  native.invoke(
    Type.Void, 3378, false
  )
end

function NETWORK.NETWORK_GET_NUMBER_BODY_TRACKER_HITS()
  return native.invoke(
    Type.Int, 3379, false
  )
end

function NETWORK.NETWORK_HAS_BONE_BEEN_HIT_BY_KILLER(boneIndex)
  return native.invoke(
    Type.Bool, 3380, false,
    arg(Type.Int, boneIndex)
  )
end

function NETWORK.NETWORK_SET_ATTRIBUTE_DAMAGE_TO_PLAYER(ped, player)
  return native.invoke(
    Type.Bool, 3381, false,
    arg(Type.Ped, ped),
    arg(Type.Player, player)
  )
end

function NETWORK.NETWORK_TRIGGER_DAMAGE_EVENT_FOR_ZERO_DAMAGE(entity, toggle)
  native.invoke(
    Type.Void, 3382, false,
    arg(Type.Entity, entity),
    arg(Type.Bool, toggle)
  )
end

function NETWORK.NETWORK_TRIGGER_DAMAGE_EVENT_FOR_ZERO_WEAPON_HASH(entity, toggle)
  native.invoke(
    Type.Void, 3383, false,
    arg(Type.Entity, entity),
    arg(Type.Bool, toggle)
  )
end

function NETWORK.NETWORK_SET_NO_LONGER_NEEDED(entity, toggle)
  native.invoke(
    Type.Void, 3384, false,
    arg(Type.Entity, entity),
    arg(Type.Bool, toggle)
  )
end

function NETWORK.NETWORK_EXPLODE_VEHICLE(vehicle, isAudible, isInvisible, netId)
  return native.invoke(
    Type.Bool, 3385, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Bool, isAudible),
    arg(Type.Bool, isInvisible),
    arg(Type.Int, netId)
  )
end

function NETWORK.NETWORK_EXPLODE_HELI(vehicle, isAudible, isInvisible, netId)
  native.invoke(
    Type.Void, 3386, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Bool, isAudible),
    arg(Type.Bool, isInvisible),
    arg(Type.Int, netId)
  )
end

function NETWORK.NETWORK_USE_LOGARITHMIC_BLENDING_THIS_FRAME(entity)
  native.invoke(
    Type.Void, 3387, false,
    arg(Type.Entity, entity)
  )
end

function NETWORK.NETWORK_OVERRIDE_COORDS_AND_HEADING(entity, x, y, z, heading)
  native.invoke(
    Type.Void, 3388, false,
    arg(Type.Entity, entity),
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, z),
    arg(Type.Float, heading)
  )
end

function NETWORK.NETWORK_ENABLE_EXTRA_VEHICLE_ORIENTATION_BLEND_CHECKS(netId, toggle)
  native.invoke(
    Type.Void, 3389, false,
    arg(Type.Int, netId),
    arg(Type.Bool, toggle)
  )
end

function NETWORK.NETWORK_DISABLE_PROXIMITY_MIGRATION(netID)
  native.invoke(
    Type.Void, 3390, false,
    arg(Type.Int, netID)
  )
end

function NETWORK.NETWORK_SET_PROPERTY_ID(id)
  native.invoke(
    Type.Void, 3391, false,
    arg(Type.Int, id)
  )
end

function NETWORK.NETWORK_CLEAR_PROPERTY_ID()
  native.invoke(
    Type.Void, 3392, false
  )
end

function NETWORK.NETWORK_SET_PLAYER_MENTAL_STATE(p0)
  native.invoke(
    Type.Void, 3393, false,
    arg(Type.Int, p0)
  )
end

function NETWORK.NETWORK_SET_MINIMUM_RANK_FOR_MISSION(p0)
  native.invoke(
    Type.Void, 3394, false,
    arg(Type.Bool, p0)
  )
end

function NETWORK.NETWORK_CACHE_LOCAL_PLAYER_HEAD_BLEND_DATA()
  native.invoke(
    Type.Void, 3395, false
  )
end

function NETWORK.NETWORK_HAS_CACHED_PLAYER_HEAD_BLEND_DATA(player)
  return native.invoke(
    Type.Bool, 3396, false,
    arg(Type.Player, player)
  )
end

function NETWORK.NETWORK_APPLY_CACHED_PLAYER_HEAD_BLEND_DATA(ped, player)
  return native.invoke(
    Type.Bool, 3397, false,
    arg(Type.Ped, ped),
    arg(Type.Player, player)
  )
end

function NETWORK.GET_NUM_COMMERCE_ITEMS()
  return native.invoke(
    Type.Int, 3398, false
  )
end

function NETWORK.IS_COMMERCE_DATA_VALID()
  return native.invoke(
    Type.Bool, 3399, false
  )
end

function NETWORK.TRIGGER_COMMERCE_DATA_FETCH(p0)
  native.invoke(
    Type.Void, 3400, false,
    arg(Type.Any, p0)
  )
end

function NETWORK.IS_COMMERCE_DATA_FETCH_IN_PROGRESS()
  return native.invoke(
    Type.Bool, 3401, false
  )
end

function NETWORK.GET_COMMERCE_ITEM_ID(index)
  return native.invoke(
    Type.String, 3402, false,
    arg(Type.Int, index)
  )
end

function NETWORK.GET_COMMERCE_ITEM_NAME(index)
  return native.invoke(
    Type.String, 3403, false,
    arg(Type.Int, index)
  )
end

function NETWORK.GET_COMMERCE_PRODUCT_PRICE(index)
  return native.invoke(
    Type.String, 3404, false,
    arg(Type.Int, index)
  )
end

function NETWORK.GET_COMMERCE_ITEM_NUM_CATS(index)
  return native.invoke(
    Type.Int, 3405, false,
    arg(Type.Int, index)
  )
end

function NETWORK.GET_COMMERCE_ITEM_CAT(index, index2)
  return native.invoke(
    Type.String, 3406, false,
    arg(Type.Int, index),
    arg(Type.Int, index2)
  )
end

function NETWORK.OPEN_COMMERCE_STORE(p0, p1, p2)
  native.invoke(
    Type.Void, 3407, false,
    arg(Type.String, p0),
    arg(Type.String, p1),
    arg(Type.Int, p2)
  )
end

function NETWORK.IS_COMMERCE_STORE_OPEN()
  return native.invoke(
    Type.Bool, 3408, false
  )
end

function NETWORK.SET_STORE_ENABLED(toggle)
  native.invoke(
    Type.Void, 3409, false,
    arg(Type.Bool, toggle)
  )
end

function NETWORK.REQUEST_COMMERCE_ITEM_IMAGE(index)
  return native.invoke(
    Type.Bool, 3410, false,
    arg(Type.Int, index)
  )
end

function NETWORK.RELEASE_ALL_COMMERCE_ITEM_IMAGES()
  native.invoke(
    Type.Void, 3411, false
  )
end

function NETWORK.GET_COMMERCE_ITEM_TEXTURENAME(index)
  return native.invoke(
    Type.String, 3412, false,
    arg(Type.Int, index)
  )
end

function NETWORK.IS_STORE_AVAILABLE_TO_USER()
  return native.invoke(
    Type.Bool, 3413, false
  )
end

function NETWORK.DELAY_MP_STORE_OPEN()
  native.invoke(
    Type.Void, 3414, false
  )
end

function NETWORK.RESET_STORE_NETWORK_GAME_TRACKING()
  native.invoke(
    Type.Void, 3415, false
  )
end

function NETWORK.IS_USER_OLD_ENOUGH_TO_ACCESS_STORE()
  return native.invoke(
    Type.Bool, 3416, false
  )
end

function NETWORK.SET_LAST_VIEWED_SHOP_ITEM(p0, p1, p2)
  native.invoke(
    Type.Void, 3417, false,
    arg(Type.Hash, p0),
    arg(Type.Int, p1),
    arg(Type.Hash, p2)
  )
end

function NETWORK.GET_USER_PREMIUM_ACCESS()
  return native.invoke(
    Type.Int, 3418, false
  )
end

function NETWORK.GET_USER_STARTER_ACCESS()
  return native.invoke(
    Type.Int, 3419, false
  )
end

function NETWORK.CLOUD_DELETE_MEMBER_FILE(p0)
  return native.invoke(
    Type.Int, 3420, false,
    arg(Type.String, p0)
  )
end

function NETWORK.CLOUD_HAS_REQUEST_COMPLETED(requestId)
  return native.invoke(
    Type.Bool, 3421, false,
    arg(Type.Int, requestId)
  )
end

function NETWORK.CLOUD_DID_REQUEST_SUCCEED(requestId)
  return native.invoke(
    Type.Bool, 3422, false,
    arg(Type.Int, requestId)
  )
end

function NETWORK.CLOUD_CHECK_AVAILABILITY()
  native.invoke(
    Type.Void, 3423, false
  )
end

function NETWORK.CLOUD_IS_CHECKING_AVAILABILITY()
  return native.invoke(
    Type.Bool, 3424, false
  )
end

function NETWORK.CLOUD_GET_AVAILABILITY_CHECK_RESULT()
  return native.invoke(
    Type.Bool, 3425, false
  )
end

function NETWORK.GET_CONTENT_TO_LOAD_TYPE()
  return native.invoke(
    Type.Int, 3426, false
  )
end

function NETWORK.GET_IS_LAUNCH_FROM_LIVE_AREA()
  return native.invoke(
    Type.Bool, 3427, false
  )
end

function NETWORK.GET_IS_LIVE_AREA_LAUNCH_WITH_CONTENT()
  return native.invoke(
    Type.Bool, 3428, false
  )
end

function NETWORK.CLEAR_SERVICE_EVENT_ARGUMENTS()
  native.invoke(
    Type.Void, 3429, false
  )
end

function NETWORK.UGC_COPY_CONTENT(p0, p1)
  return native.invoke(
    Type.Bool, 3430, false,
    ref(Type.Any, p0),
    ref(Type.Any, p1)
  )
end

function NETWORK.UGC_IS_CREATING()
  return native.invoke(
    Type.Bool, 3431, false
  )
end

function NETWORK.UGC_HAS_CREATE_FINISHED()
  return native.invoke(
    Type.Bool, 3432, false
  )
end

function NETWORK.UGC_DID_CREATE_SUCCEED()
  return native.invoke(
    Type.Bool, 3433, false
  )
end

function NETWORK.UGC_GET_CREATE_RESULT()
  return native.invoke(
    Type.Int, 3434, false
  )
end

function NETWORK.UGC_GET_CREATE_CONTENT_ID()
  return native.invoke(
    Type.String, 3435, false
  )
end

function NETWORK.UGC_CLEAR_CREATE_RESULT()
  native.invoke(
    Type.Void, 3436, false
  )
end

function NETWORK.UGC_QUERY_MY_CONTENT(p0, p1, p2, p3, p4, p5)
  return native.invoke(
    Type.Bool, 3437, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1),
    ref(Type.Any, p2),
    arg(Type.Any, p3),
    arg(Type.Any, p4),
    arg(Type.Any, p5)
  )
end

function NETWORK.UGC_QUERY_BY_CATEGORY(p0, p1, p2, p3, p4, p5)
  return native.invoke(
    Type.Bool, 3438, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1),
    arg(Type.Any, p2),
    arg(Type.String, p3),
    arg(Type.Any, p4),
    arg(Type.Bool, p5)
  )
end

function NETWORK.UGC_QUERY_BY_CONTENT_ID(contentId, latestVersion, contentTypeName)
  return native.invoke(
    Type.Bool, 3439, false,
    arg(Type.String, contentId),
    arg(Type.Bool, latestVersion),
    arg(Type.String, contentTypeName)
  )
end

function NETWORK.UGC_QUERY_BY_CONTENT_IDS(data, count, latestVersion, contentTypeName)
  return native.invoke(
    Type.Bool, 3440, false,
    ref(Type.Any, data),
    arg(Type.Int, count),
    arg(Type.Bool, latestVersion),
    arg(Type.String, contentTypeName)
  )
end

function NETWORK.UGC_QUERY_MOST_RECENTLY_CREATED_CONTENT(offset, count, contentTypeName, p3)
  return native.invoke(
    Type.Bool, 3441, false,
    arg(Type.Int, offset),
    arg(Type.Int, count),
    arg(Type.String, contentTypeName),
    arg(Type.Int, p3)
  )
end

function NETWORK.UGC_GET_BOOKMARKED_CONTENT(p0, p1, p2, p3)
  return native.invoke(
    Type.Bool, 3442, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1),
    arg(Type.String, p2),
    ref(Type.Any, p3)
  )
end

function NETWORK.UGC_GET_MY_CONTENT(p0, p1, p2, p3)
  return native.invoke(
    Type.Bool, 3443, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1),
    arg(Type.String, p2),
    ref(Type.Any, p3)
  )
end

function NETWORK.UGC_GET_FRIEND_CONTENT(p0, p1, p2, p3)
  return native.invoke(
    Type.Bool, 3444, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1),
    arg(Type.String, p2),
    ref(Type.Any, p3)
  )
end

function NETWORK.UGC_GET_CREW_CONTENT(p0, p1, p2, p3, p4)
  return native.invoke(
    Type.Bool, 3445, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1),
    arg(Type.Any, p2),
    arg(Type.String, p3),
    ref(Type.Any, p4)
  )
end

function NETWORK.UGC_GET_GET_BY_CATEGORY(p0, p1, p2, p3, p4)
  return native.invoke(
    Type.Bool, 3446, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1),
    arg(Type.Any, p2),
    arg(Type.String, p3),
    ref(Type.Any, p4)
  )
end

function NETWORK.UGC_GET_GET_BY_CONTENT_ID(contentId, contentTypeName)
  return native.invoke(
    Type.Bool, 3447, false,
    arg(Type.String, contentId),
    arg(Type.String, contentTypeName)
  )
end

function NETWORK.UGC_GET_GET_BY_CONTENT_IDS(data, dataCount, contentTypeName)
  return native.invoke(
    Type.Bool, 3448, false,
    ref(Type.Any, data),
    arg(Type.Int, dataCount),
    arg(Type.String, contentTypeName)
  )
end

function NETWORK.UGC_GET_MOST_RECENTLY_CREATED_CONTENT(p0, p1, p2, p3)
  return native.invoke(
    Type.Bool, 3449, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1),
    ref(Type.Any, p2),
    ref(Type.Any, p3)
  )
end

function NETWORK.UGC_GET_MOST_RECENTLY_PLAYED_CONTENT(p0, p1, p2, p3)
  return native.invoke(
    Type.Bool, 3450, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1),
    ref(Type.Any, p2),
    ref(Type.Any, p3)
  )
end

function NETWORK.UGC_GET_TOP_RATED_CONTENT(p0, p1, p2, p3)
  return native.invoke(
    Type.Bool, 3451, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1),
    ref(Type.Any, p2),
    ref(Type.Any, p3)
  )
end

function NETWORK.UGC_CANCEL_QUERY()
  native.invoke(
    Type.Void, 3452, false
  )
end

function NETWORK.UGC_IS_GETTING()
  return native.invoke(
    Type.Bool, 3453, false
  )
end

function NETWORK.UGC_HAS_GET_FINISHED()
  return native.invoke(
    Type.Bool, 3454, false
  )
end

function NETWORK.UGC_DID_GET_SUCCEED()
  return native.invoke(
    Type.Bool, 3455, false
  )
end

function NETWORK.UGC_WAS_QUERY_FORCE_CANCELLED()
  return native.invoke(
    Type.Bool, 3456, false
  )
end

function NETWORK.UGC_GET_QUERY_RESULT()
  return native.invoke(
    Type.Int, 3457, false
  )
end

function NETWORK.UGC_GET_CONTENT_NUM()
  return native.invoke(
    Type.Int, 3458, false
  )
end

function NETWORK.UGC_GET_CONTENT_TOTAL()
  return native.invoke(
    Type.Int, 3459, false
  )
end

function NETWORK.UGC_GET_CONTENT_HASH()
  return native.invoke(
    Type.Hash, 3460, false
  )
end

function NETWORK.UGC_CLEAR_QUERY_RESULTS()
  native.invoke(
    Type.Void, 3461, false
  )
end

function NETWORK.UGC_GET_CONTENT_USER_ID(p0)
  return native.invoke(
    Type.String, 3462, false,
    arg(Type.Int, p0)
  )
end

function NETWORK.UGC_GET_CONTENT_CREATOR_GAMER_HANDLE(p0, p1)
  return native.invoke(
    Type.Bool, 3463, false,
    arg(Type.Int, p0),
    ref(Type.Any, p1)
  )
end

function NETWORK.UGC_GET_CONTENT_CREATED_BY_LOCAL_PLAYER(p0)
  return native.invoke(
    Type.Bool, 3464, false,
    arg(Type.Any, p0)
  )
end

function NETWORK.UGC_GET_CONTENT_USER_NAME(p0)
  return native.invoke(
    Type.String, 3465, false,
    arg(Type.Any, p0)
  )
end

function NETWORK.UGC_GET_CONTENT_IS_USING_SC_NICKNAME(p0)
  return native.invoke(
    Type.Bool, 3466, false,
    arg(Type.Any, p0)
  )
end

function NETWORK.UGC_GET_CONTENT_CATEGORY(p0)
  return native.invoke(
    Type.Int, 3467, false,
    arg(Type.Int, p0)
  )
end

function NETWORK.UGC_GET_CONTENT_ID(p0)
  return native.invoke(
    Type.String, 3468, false,
    arg(Type.Int, p0)
  )
end

function NETWORK.UGC_GET_ROOT_CONTENT_ID(p0)
  return native.invoke(
    Type.String, 3469, false,
    arg(Type.Int, p0)
  )
end

function NETWORK.UGC_GET_CONTENT_NAME(p0)
  return native.invoke(
    Type.String, 3470, false,
    arg(Type.Any, p0)
  )
end

function NETWORK.UGC_GET_CONTENT_DESCRIPTION_HASH(p0)
  return native.invoke(
    Type.Int, 3471, false,
    arg(Type.Any, p0)
  )
end

function NETWORK.UGC_GET_CONTENT_PATH(p0, p1)
  return native.invoke(
    Type.String, 3472, false,
    arg(Type.Int, p0),
    arg(Type.Int, p1)
  )
end

function NETWORK.UGC_GET_CONTENT_UPDATED_DATE(p0, p1)
  native.invoke(
    Type.Void, 3473, false,
    arg(Type.Any, p0),
    ref(Type.Any, p1)
  )
end

function NETWORK.UGC_GET_CONTENT_FILE_VERSION(p0, p1)
  return native.invoke(
    Type.Int, 3474, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1)
  )
end

function NETWORK.UGC_GET_CONTENT_HAS_LO_RES_PHOTO(p0)
  return native.invoke(
    Type.Bool, 3475, false,
    arg(Type.Int, p0)
  )
end

function NETWORK.UGC_GET_CONTENT_HAS_HI_RES_PHOTO(p0)
  return native.invoke(
    Type.Bool, 3476, false,
    arg(Type.Int, p0)
  )
end

function NETWORK.UGC_GET_CONTENT_LANGUAGE(p0)
  return native.invoke(
    Type.Int, 3477, false,
    arg(Type.Any, p0)
  )
end

function NETWORK.UGC_GET_CONTENT_IS_PUBLISHED(p0)
  return native.invoke(
    Type.Bool, 3478, false,
    arg(Type.Any, p0)
  )
end

function NETWORK.UGC_GET_CONTENT_IS_VERIFIED(p0)
  return native.invoke(
    Type.Bool, 3479, false,
    arg(Type.Any, p0)
  )
end

function NETWORK.UGC_GET_CONTENT_RATING(p0, p1)
  return native.invoke(
    Type.Float, 3480, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1)
  )
end

function NETWORK.UGC_GET_CONTENT_RATING_COUNT(p0, p1)
  return native.invoke(
    Type.Int, 3481, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1)
  )
end

function NETWORK.UGC_GET_CONTENT_RATING_POSITIVE_COUNT(p0, p1)
  return native.invoke(
    Type.Int, 3482, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1)
  )
end

function NETWORK.UGC_GET_CONTENT_RATING_NEGATIVE_COUNT(p0, p1)
  return native.invoke(
    Type.Int, 3483, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1)
  )
end

function NETWORK.UGC_GET_CONTENT_HAS_PLAYER_RECORD(p0)
  return native.invoke(
    Type.Bool, 3484, false,
    arg(Type.Any, p0)
  )
end

function NETWORK.UGC_GET_CONTENT_HAS_PLAYER_BOOKMARKED(p0)
  return native.invoke(
    Type.Bool, 3485, false,
    arg(Type.Any, p0)
  )
end

function NETWORK.UGC_REQUEST_CONTENT_DATA_FROM_INDEX(p0, p1)
  return native.invoke(
    Type.Int, 3486, false,
    arg(Type.Int, p0),
    arg(Type.Int, p1)
  )
end

function NETWORK.UGC_REQUEST_CONTENT_DATA_FROM_PARAMS(contentTypeName, contentId, p2, p3, p4)
  return native.invoke(
    Type.Int, 3487, false,
    arg(Type.String, contentTypeName),
    arg(Type.String, contentId),
    arg(Type.Int, p2),
    arg(Type.Int, p3),
    arg(Type.Int, p4)
  )
end

function NETWORK.UGC_REQUEST_CACHED_DESCRIPTION(p0)
  return native.invoke(
    Type.Int, 3488, false,
    arg(Type.Int, p0)
  )
end

function NETWORK.UGC_IS_DESCRIPTION_REQUEST_IN_PROGRESS(p0)
  return native.invoke(
    Type.Bool, 3489, false,
    arg(Type.Any, p0)
  )
end

function NETWORK.UGC_HAS_DESCRIPTION_REQUEST_FINISHED(p0)
  return native.invoke(
    Type.Bool, 3490, false,
    arg(Type.Any, p0)
  )
end

function NETWORK.UGC_DID_DESCRIPTION_REQUEST_SUCCEED(p0)
  return native.invoke(
    Type.Bool, 3491, false,
    arg(Type.Any, p0)
  )
end

function NETWORK.UGC_GET_CACHED_DESCRIPTION(p0, p1)
  return native.invoke(
    Type.String, 3492, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1)
  )
end

function NETWORK.UGC_RELEASE_CACHED_DESCRIPTION(p0)
  return native.invoke(
    Type.Bool, 3493, false,
    arg(Type.Any, p0)
  )
end

function NETWORK.UGC_RELEASE_ALL_CACHED_DESCRIPTIONS()
  native.invoke(
    Type.Void, 3494, false
  )
end

function NETWORK.UGC_HAS_PERMISSION_TO_WRITE()
  return native.invoke(
    Type.Bool, 3495, false
  )
end

function NETWORK.UGC_PUBLISH(contentId, baseContentId, contentTypeName)
  return native.invoke(
    Type.Bool, 3496, false,
    arg(Type.String, contentId),
    arg(Type.String, baseContentId),
    arg(Type.String, contentTypeName)
  )
end

function NETWORK.UGC_SET_BOOKMARKED(contentId, bookmarked, contentTypeName)
  return native.invoke(
    Type.Bool, 3497, false,
    arg(Type.String, contentId),
    arg(Type.Bool, bookmarked),
    arg(Type.String, contentTypeName)
  )
end

function NETWORK.UGC_SET_DELETED(p0, p1, p2)
  return native.invoke(
    Type.Bool, 3498, false,
    ref(Type.Any, p0),
    arg(Type.Bool, p1),
    arg(Type.String, p2)
  )
end

function NETWORK.UGC_IS_MODIFYING()
  return native.invoke(
    Type.Bool, 3499, false
  )
end

function NETWORK.UGC_HAS_MODIFY_FINISHED()
  return native.invoke(
    Type.Bool, 3500, false
  )
end

function NETWORK.UGC_DID_MODIFY_SUCCEED()
  return native.invoke(
    Type.Bool, 3501, false
  )
end

function NETWORK.UGC_GET_MODIFY_RESULT()
  return native.invoke(
    Type.Int, 3502, false
  )
end

function NETWORK.UGC_CLEAR_MODIFY_RESULT()
  native.invoke(
    Type.Void, 3503, false
  )
end

function NETWORK.UGC_GET_CREATORS_BY_USER_ID(p0, p1)
  return native.invoke(
    Type.Bool, 3504, false,
    ref(Type.Any, p0),
    ref(Type.Any, p1)
  )
end

function NETWORK.UGC_HAS_QUERY_CREATORS_FINISHED()
  return native.invoke(
    Type.Bool, 3505, false
  )
end

function NETWORK.UGC_DID_QUERY_CREATORS_SUCCEED()
  return native.invoke(
    Type.Bool, 3506, false
  )
end

function NETWORK.UGC_GET_CREATOR_NUM()
  return native.invoke(
    Type.Int, 3507, false
  )
end

function NETWORK.UGC_LOAD_OFFLINE_QUERY(p0)
  return native.invoke(
    Type.Bool, 3508, false,
    arg(Type.Any, p0)
  )
end

function NETWORK.UGC_CLEAR_OFFLINE_QUERY()
  native.invoke(
    Type.Void, 3509, false
  )
end

function NETWORK.UGC_SET_QUERY_DATA_FROM_OFFLINE(p0)
  native.invoke(
    Type.Void, 3510, false,
    arg(Type.Bool, p0)
  )
end

function NETWORK.UGC_SET_USING_OFFLINE_CONTENT(p0)
  native.invoke(
    Type.Void, 3511, false,
    arg(Type.Bool, p0)
  )
end

function NETWORK.UGC_IS_LANGUAGE_SUPPORTED(p0)
  return native.invoke(
    Type.Bool, 3512, false,
    arg(Type.Any, p0)
  )
end

function NETWORK.FACEBOOK_POST_COMPLETED_HEIST(heistName, cashEarned, xpEarned)
  return native.invoke(
    Type.Bool, 3513, false,
    arg(Type.String, heistName),
    arg(Type.Int, cashEarned),
    arg(Type.Int, xpEarned)
  )
end

function NETWORK.FACEBOOK_POST_CREATE_CHARACTER()
  return native.invoke(
    Type.Bool, 3514, false
  )
end

function NETWORK.FACEBOOK_POST_COMPLETED_MILESTONE(milestoneId)
  return native.invoke(
    Type.Bool, 3515, false,
    arg(Type.Int, milestoneId)
  )
end

function NETWORK.FACEBOOK_HAS_POST_COMPLETED()
  return native.invoke(
    Type.Bool, 3516, false
  )
end

function NETWORK.FACEBOOK_DID_POST_SUCCEED()
  return native.invoke(
    Type.Bool, 3517, false
  )
end

function NETWORK.FACEBOOK_CAN_POST_TO_FACEBOOK()
  return native.invoke(
    Type.Bool, 3518, false
  )
end

function NETWORK.TEXTURE_DOWNLOAD_REQUEST(gamerHandle, filePath, name, p3)
  return native.invoke(
    Type.Int, 3519, false,
    ref(Type.Any, gamerHandle),
    arg(Type.String, filePath),
    arg(Type.String, name),
    arg(Type.Bool, p3)
  )
end

function NETWORK.TITLE_TEXTURE_DOWNLOAD_REQUEST(filePath, name, p2)
  return native.invoke(
    Type.Int, 3520, false,
    arg(Type.String, filePath),
    arg(Type.String, name),
    arg(Type.Bool, p2)
  )
end

function NETWORK.UGC_TEXTURE_DOWNLOAD_REQUEST(p0, p1, p2, p3, p4, p5)
  return native.invoke(
    Type.Int, 3521, false,
    arg(Type.String, p0),
    arg(Type.Int, p1),
    arg(Type.Int, p2),
    arg(Type.Int, p3),
    arg(Type.String, p4),
    arg(Type.Bool, p5)
  )
end

function NETWORK.TEXTURE_DOWNLOAD_RELEASE(p0)
  native.invoke(
    Type.Void, 3522, false,
    arg(Type.Int, p0)
  )
end

function NETWORK.TEXTURE_DOWNLOAD_HAS_FAILED(p0)
  return native.invoke(
    Type.Bool, 3523, false,
    arg(Type.Int, p0)
  )
end

function NETWORK.TEXTURE_DOWNLOAD_GET_NAME(p0)
  return native.invoke(
    Type.String, 3524, false,
    arg(Type.Int, p0)
  )
end

function NETWORK.GET_STATUS_OF_TEXTURE_DOWNLOAD(p0)
  return native.invoke(
    Type.Int, 3525, false,
    arg(Type.Int, p0)
  )
end

function NETWORK.NETWORK_CHECK_ROS_LINK_WENTDOWN_NOT_NET()
  return native.invoke(
    Type.Bool, 3526, false
  )
end

function NETWORK.NETWORK_SHOULD_SHOW_STRICT_NAT_WARNING()
  return native.invoke(
    Type.Bool, 3527, false
  )
end

function NETWORK.NETWORK_IS_CABLE_CONNECTED()
  return native.invoke(
    Type.Bool, 3528, false
  )
end

function NETWORK.NETWORK_HAVE_SCS_PRIVATE_MSG_PRIV()
  return native.invoke(
    Type.Bool, 3529, false
  )
end

function NETWORK.NETWORK_HAVE_ROS_SOCIAL_CLUB_PRIV()
  return native.invoke(
    Type.Bool, 3530, false
  )
end

function NETWORK.NETWORK_HAVE_ROS_BANNED_PRIV()
  return native.invoke(
    Type.Bool, 3531, false
  )
end

function NETWORK.NETWORK_HAVE_ROS_CREATE_TICKET_PRIV()
  return native.invoke(
    Type.Bool, 3532, false
  )
end

function NETWORK.NETWORK_HAVE_ROS_MULTIPLAYER_PRIV()
  return native.invoke(
    Type.Bool, 3533, false
  )
end

function NETWORK.NETWORK_HAVE_ROS_LEADERBOARD_WRITE_PRIV()
  return native.invoke(
    Type.Bool, 3534, false
  )
end

function NETWORK.NETWORK_HAS_ROS_PRIVILEGE(index)
  return native.invoke(
    Type.Bool, 3535, false,
    arg(Type.Int, index)
  )
end

function NETWORK.NETWORK_HAS_ROS_PRIVILEGE_END_DATE(privilege, banType, timeData)
  return native.invoke(
    Type.Bool, 3536, false,
    arg(Type.Int, privilege),
    ref(Type.Int, banType),
    ref(Type.Any, timeData)
  )
end

function NETWORK.NETWORK_HAS_ROS_PRIVILEGE_PLAYED_LAST_GEN()
  return native.invoke(
    Type.Bool, 3537, false
  )
end

function NETWORK.NETWORK_HAS_ROS_PRIVILEGE_SPECIAL_EDITION_CONTENT()
  return native.invoke(
    Type.Bool, 3538, false
  )
end

function NETWORK._NETWORK_HAS_ROS_PRIVILEGE_MP_TEXT_COMMUNICATION()
  return native.invoke(
    Type.Bool, 3539, false
  )
end

function NETWORK._NETWORK_HAS_ROS_PRIVILEGE_MP_VOICE_COMMUNICATION()
  return native.invoke(
    Type.Bool, 3540, false
  )
end

function NETWORK.NETWORK_START_COMMUNICATION_PERMISSIONS_CHECK(p0)
  return native.invoke(
    Type.Int, 3541, false,
    arg(Type.Any, p0)
  )
end

function NETWORK.NETWORK_START_USER_CONTENT_PERMISSIONS_CHECK(netHandle)
  return native.invoke(
    Type.Int, 3542, false,
    ref(Type.Any, netHandle)
  )
end

function NETWORK.NETWORK_SKIP_RADIO_RESET_NEXT_CLOSE()
  native.invoke(
    Type.Void, 3543, false
  )
end

function NETWORK.NETWORK_SKIP_RADIO_RESET_NEXT_OPEN()
  native.invoke(
    Type.Void, 3544, false
  )
end

function NETWORK.NETWORK_SKIP_RADIO_WARNING()
  return native.invoke(
    Type.Bool, 3545, false
  )
end

function NETWORK.NETWORK_FORCE_LOCAL_PLAYER_SCAR_SYNC()
  native.invoke(
    Type.Void, 3546, false
  )
end

function NETWORK.NETWORK_DISABLE_LEAVE_REMOTE_PED_BEHIND(toggle)
  native.invoke(
    Type.Void, 3547, false,
    arg(Type.Bool, toggle)
  )
end

function NETWORK.NETWORK_ALLOW_REMOTE_ATTACHMENT_MODIFICATION(entity, toggle)
  native.invoke(
    Type.Void, 3548, false,
    arg(Type.Entity, entity),
    arg(Type.Bool, toggle)
  )
end

function NETWORK.NETWORK_SHOW_CHAT_RESTRICTION_MSC(player)
  native.invoke(
    Type.Void, 3549, false,
    arg(Type.Player, player)
  )
end

function NETWORK.NETWORK_SHOW_PSN_UGC_RESTRICTION()
  native.invoke(
    Type.Void, 3550, false
  )
end

function NETWORK.NETWORK_IS_TITLE_UPDATE_REQUIRED()
  return native.invoke(
    Type.Bool, 3551, false
  )
end

function NETWORK.NETWORK_QUIT_MP_TO_DESKTOP()
  native.invoke(
    Type.Void, 3552, false
  )
end

function NETWORK.NETWORK_IS_CONNECTED_VIA_RELAY(player)
  return native.invoke(
    Type.Bool, 3553, false,
    arg(Type.Player, player)
  )
end

function NETWORK.NETWORK_GET_AVERAGE_LATENCY(player)
  return native.invoke(
    Type.Float, 3554, false,
    arg(Type.Player, player)
  )
end

function NETWORK.NETWORK_GET_AVERAGE_PING(player)
  return native.invoke(
    Type.Float, 3555, false,
    arg(Type.Player, player)
  )
end

function NETWORK.NETWORK_GET_AVERAGE_PACKET_LOSS(player)
  return native.invoke(
    Type.Float, 3556, false,
    arg(Type.Player, player)
  )
end

function NETWORK.NETWORK_GET_NUM_UNACKED_RELIABLES(player)
  return native.invoke(
    Type.Int, 3557, false,
    arg(Type.Player, player)
  )
end

function NETWORK.NETWORK_GET_UNRELIABLE_RESEND_COUNT(player)
  return native.invoke(
    Type.Int, 3558, false,
    arg(Type.Player, player)
  )
end

function NETWORK.NETWORK_GET_HIGHEST_RELIABLE_RESEND_COUNT(player)
  return native.invoke(
    Type.Int, 3559, false,
    arg(Type.Player, player)
  )
end

function NETWORK.NETWORK_REPORT_CODE_TAMPER()
  native.invoke(
    Type.Void, 3560, false
  )
end

function NETWORK.NETWORK_GET_LAST_ENTITY_POS_RECEIVED_OVER_NETWORK(entity)
  return native.invoke(
    Type.Vector3, 3561, false,
    arg(Type.Entity, entity)
  )
end

function NETWORK.NETWORK_GET_LAST_PLAYER_POS_RECEIVED_OVER_NETWORK(player)
  return native.invoke(
    Type.Vector3, 3562, false,
    arg(Type.Player, player)
  )
end

function NETWORK.NETWORK_GET_LAST_VEL_RECEIVED_OVER_NETWORK(entity)
  return native.invoke(
    Type.Vector3, 3563, false,
    arg(Type.Entity, entity)
  )
end

function NETWORK.NETWORK_GET_PREDICTED_VELOCITY(entity, maxSpeedToPredict)
  return native.invoke(
    Type.Vector3, 3564, false,
    arg(Type.Entity, entity),
    arg(Type.Float, maxSpeedToPredict)
  )
end

function NETWORK.NETWORK_DUMP_NET_IF_CONFIG()
  native.invoke(
    Type.Void, 3565, false
  )
end

function NETWORK.NETWORK_GET_SIGNALLING_INFO(p0)
  native.invoke(
    Type.Void, 3566, false,
    ref(Type.Any, p0)
  )
end

function NETWORK.NETWORK_GET_NET_STATISTICS_INFO(p0)
  native.invoke(
    Type.Void, 3567, false,
    ref(Type.Any, p0)
  )
end

function NETWORK.NETWORK_GET_PLAYER_ACCOUNT_ID(player)
  return native.invoke(
    Type.Int, 3568, false,
    arg(Type.Player, player)
  )
end

function NETWORK.NETWORK_UGC_NAV(p0, p1)
  native.invoke(
    Type.Void, 3569, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1)
  )
end


OBJECT = {}

function OBJECT.CREATE_OBJECT(modelHash, x, y, z, isNetwork, bScriptHostObj, dynamic)
  return native.invoke(
    Type.Object, 3570, false,
    arg(Type.Hash, modelHash),
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, z),
    arg(Type.Bool, isNetwork),
    arg(Type.Bool, bScriptHostObj),
    arg(Type.Bool, dynamic)
  )
end

function OBJECT.CREATE_OBJECT_NO_OFFSET(modelHash, x, y, z, isNetwork, bScriptHostObj, dynamic)
  return native.invoke(
    Type.Object, 3571, false,
    arg(Type.Hash, modelHash),
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, z),
    arg(Type.Bool, isNetwork),
    arg(Type.Bool, bScriptHostObj),
    arg(Type.Bool, dynamic)
  )
end

function OBJECT.DELETE_OBJECT(object)
  native.invoke(
    Type.Void, 3572, false,
    ref(Type.Object, object)
  )
end

function OBJECT.PLACE_OBJECT_ON_GROUND_PROPERLY(object)
  return native.invoke(
    Type.Bool, 3573, false,
    arg(Type.Object, object)
  )
end

function OBJECT.PLACE_OBJECT_ON_GROUND_OR_OBJECT_PROPERLY(object)
  return native.invoke(
    Type.Bool, 3574, false,
    arg(Type.Object, object)
  )
end

function OBJECT.ROTATE_OBJECT(object, p1, p2, p3)
  return native.invoke(
    Type.Bool, 3575, false,
    arg(Type.Object, object),
    arg(Type.Float, p1),
    arg(Type.Float, p2),
    arg(Type.Bool, p3)
  )
end

function OBJECT.SLIDE_OBJECT(object, toX, toY, toZ, speedX, speedY, speedZ, collision)
  return native.invoke(
    Type.Bool, 3576, false,
    arg(Type.Object, object),
    arg(Type.Float, toX),
    arg(Type.Float, toY),
    arg(Type.Float, toZ),
    arg(Type.Float, speedX),
    arg(Type.Float, speedY),
    arg(Type.Float, speedZ),
    arg(Type.Bool, collision)
  )
end

function OBJECT.SET_OBJECT_TARGETTABLE(object, targettable, p2)
  native.invoke(
    Type.Void, 3577, false,
    arg(Type.Object, object),
    arg(Type.Bool, targettable),
    arg(Type.Any, p2)
  )
end

function OBJECT.SET_OBJECT_FORCE_VEHICLES_TO_AVOID(object, toggle)
  native.invoke(
    Type.Void, 3578, false,
    arg(Type.Object, object),
    arg(Type.Bool, toggle)
  )
end

function OBJECT.GET_CLOSEST_OBJECT_OF_TYPE(x, y, z, radius, modelHash, isMission, p6, p7)
  return native.invoke(
    Type.Object, 3579, false,
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, z),
    arg(Type.Float, radius),
    arg(Type.Hash, modelHash),
    arg(Type.Bool, isMission),
    arg(Type.Bool, p6),
    arg(Type.Bool, p7)
  )
end

function OBJECT.HAS_OBJECT_BEEN_BROKEN(object, p1)
  return native.invoke(
    Type.Bool, 3580, false,
    arg(Type.Object, object),
    arg(Type.Any, p1)
  )
end

function OBJECT.HAS_CLOSEST_OBJECT_OF_TYPE_BEEN_BROKEN(p0, p1, p2, p3, modelHash, p5)
  return native.invoke(
    Type.Bool, 3581, false,
    arg(Type.Float, p0),
    arg(Type.Float, p1),
    arg(Type.Float, p2),
    arg(Type.Float, p3),
    arg(Type.Hash, modelHash),
    arg(Type.Any, p5)
  )
end

function OBJECT.HAS_CLOSEST_OBJECT_OF_TYPE_BEEN_COMPLETELY_DESTROYED(x, y, z, radius, modelHash, p5)
  return native.invoke(
    Type.Bool, 3582, false,
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, z),
    arg(Type.Float, radius),
    arg(Type.Hash, modelHash),
    arg(Type.Bool, p5)
  )
end

function OBJECT.GET_HAS_OBJECT_BEEN_COMPLETELY_DESTROYED(p0)
  return native.invoke(
    Type.Bool, 3583, false,
    arg(Type.Any, p0)
  )
end

function OBJECT.GET_OFFSET_FROM_COORD_AND_HEADING_IN_WORLD_COORDS(xPos, yPos, zPos, heading, xOffset, yOffset, zOffset)
  return native.invoke(
    Type.Vector3, 3584, false,
    arg(Type.Float, xPos),
    arg(Type.Float, yPos),
    arg(Type.Float, zPos),
    arg(Type.Float, heading),
    arg(Type.Float, xOffset),
    arg(Type.Float, yOffset),
    arg(Type.Float, zOffset)
  )
end

function OBJECT.GET_COORDS_AND_ROTATION_OF_CLOSEST_OBJECT_OF_TYPE(x, y, z, radius, modelHash, outPosition, outRotation, rotationOrder)
  return native.invoke(
    Type.Bool, 3585, true,
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, z),
    arg(Type.Float, radius),
    arg(Type.Hash, modelHash),
    ref(Type.Vector3, outPosition),
    ref(Type.Vector3, outRotation),
    arg(Type.Int, rotationOrder)
  )
end

function OBJECT.SET_STATE_OF_CLOSEST_DOOR_OF_TYPE(type, x, y, z, locked, heading, p6)
  native.invoke(
    Type.Void, 3586, false,
    arg(Type.Hash, type),
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, z),
    arg(Type.Bool, locked),
    arg(Type.Float, heading),
    arg(Type.Bool, p6)
  )
end

function OBJECT.GET_STATE_OF_CLOSEST_DOOR_OF_TYPE(type, x, y, z, locked, heading)
  native.invoke(
    Type.Void, 3587, false,
    arg(Type.Hash, type),
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, z),
    ref(Type.Bool, locked),
    ref(Type.Float, heading)
  )
end

function OBJECT.SET_LOCKED_UNSTREAMED_IN_DOOR_OF_TYPE(modelHash, x, y, z, locked, xRotMult, yRotMult, zRotMult)
  native.invoke(
    Type.Void, 3588, false,
    arg(Type.Hash, modelHash),
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, z),
    arg(Type.Bool, locked),
    arg(Type.Float, xRotMult),
    arg(Type.Float, yRotMult),
    arg(Type.Float, zRotMult)
  )
end

function OBJECT.PLAY_OBJECT_AUTO_START_ANIM(p0)
  native.invoke(
    Type.Void, 3589, false,
    arg(Type.Any, p0)
  )
end

function OBJECT.ADD_DOOR_TO_SYSTEM(doorHash, modelHash, x, y, z, p5, scriptDoor, isLocal)
  native.invoke(
    Type.Void, 3590, false,
    arg(Type.Hash, doorHash),
    arg(Type.Hash, modelHash),
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, z),
    arg(Type.Bool, p5),
    arg(Type.Bool, scriptDoor),
    arg(Type.Bool, isLocal)
  )
end

function OBJECT.REMOVE_DOOR_FROM_SYSTEM(doorHash, p1)
  native.invoke(
    Type.Void, 3591, false,
    arg(Type.Hash, doorHash),
    arg(Type.Any, p1)
  )
end

function OBJECT.DOOR_SYSTEM_SET_DOOR_STATE(doorHash, state, requestDoor, forceUpdate)
  native.invoke(
    Type.Void, 3592, false,
    arg(Type.Hash, doorHash),
    arg(Type.Int, state),
    arg(Type.Bool, requestDoor),
    arg(Type.Bool, forceUpdate)
  )
end

function OBJECT.DOOR_SYSTEM_GET_DOOR_STATE(doorHash)
  return native.invoke(
    Type.Int, 3593, false,
    arg(Type.Hash, doorHash)
  )
end

function OBJECT.DOOR_SYSTEM_GET_DOOR_PENDING_STATE(doorHash)
  return native.invoke(
    Type.Int, 3594, false,
    arg(Type.Hash, doorHash)
  )
end

function OBJECT.DOOR_SYSTEM_SET_AUTOMATIC_RATE(doorHash, rate, requestDoor, forceUpdate)
  native.invoke(
    Type.Void, 3595, false,
    arg(Type.Hash, doorHash),
    arg(Type.Float, rate),
    arg(Type.Bool, requestDoor),
    arg(Type.Bool, forceUpdate)
  )
end

function OBJECT.DOOR_SYSTEM_SET_AUTOMATIC_DISTANCE(doorHash, distance, requestDoor, forceUpdate)
  native.invoke(
    Type.Void, 3596, false,
    arg(Type.Hash, doorHash),
    arg(Type.Float, distance),
    arg(Type.Bool, requestDoor),
    arg(Type.Bool, forceUpdate)
  )
end

function OBJECT.DOOR_SYSTEM_SET_OPEN_RATIO(doorHash, ajar, requestDoor, forceUpdate)
  native.invoke(
    Type.Void, 3597, false,
    arg(Type.Hash, doorHash),
    arg(Type.Float, ajar),
    arg(Type.Bool, requestDoor),
    arg(Type.Bool, forceUpdate)
  )
end

function OBJECT.DOOR_SYSTEM_GET_AUTOMATIC_DISTANCE(doorHash)
  return native.invoke(
    Type.Float, 3598, false,
    arg(Type.Hash, doorHash)
  )
end

function OBJECT.DOOR_SYSTEM_GET_OPEN_RATIO(doorHash)
  return native.invoke(
    Type.Float, 3599, false,
    arg(Type.Hash, doorHash)
  )
end

function OBJECT.DOOR_SYSTEM_SET_SPRING_REMOVED(doorHash, removed, requestDoor, forceUpdate)
  native.invoke(
    Type.Void, 3600, false,
    arg(Type.Hash, doorHash),
    arg(Type.Bool, removed),
    arg(Type.Bool, requestDoor),
    arg(Type.Bool, forceUpdate)
  )
end

function OBJECT.DOOR_SYSTEM_SET_HOLD_OPEN(doorHash, toggle)
  native.invoke(
    Type.Void, 3601, false,
    arg(Type.Hash, doorHash),
    arg(Type.Bool, toggle)
  )
end

function OBJECT.DOOR_SYSTEM_SET_DOOR_OPEN_FOR_RACES(doorHash, p1)
  native.invoke(
    Type.Void, 3602, false,
    arg(Type.Hash, doorHash),
    arg(Type.Bool, p1)
  )
end

function OBJECT.IS_DOOR_REGISTERED_WITH_SYSTEM(doorHash)
  return native.invoke(
    Type.Bool, 3603, false,
    arg(Type.Hash, doorHash)
  )
end

function OBJECT.IS_DOOR_CLOSED(doorHash)
  return native.invoke(
    Type.Bool, 3604, false,
    arg(Type.Hash, doorHash)
  )
end

function OBJECT.OPEN_ALL_BARRIERS_FOR_RACE(p0)
  native.invoke(
    Type.Void, 3605, false,
    arg(Type.Bool, p0)
  )
end

function OBJECT.CLOSE_ALL_BARRIERS_FOR_RACE()
  native.invoke(
    Type.Void, 3606, false
  )
end

function OBJECT.DOOR_SYSTEM_GET_IS_PHYSICS_LOADED(p0)
  return native.invoke(
    Type.Bool, 3607, false,
    arg(Type.Any, p0)
  )
end

function OBJECT.DOOR_SYSTEM_FIND_EXISTING_DOOR(x, y, z, modelHash, outDoorHash)
  return native.invoke(
    Type.Bool, 3608, false,
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, z),
    arg(Type.Hash, modelHash),
    ref(Type.Hash, outDoorHash)
  )
end

function OBJECT.IS_GARAGE_EMPTY(garageHash, p1, p2)
  return native.invoke(
    Type.Bool, 3609, false,
    arg(Type.Hash, garageHash),
    arg(Type.Bool, p1),
    arg(Type.Int, p2)
  )
end

function OBJECT.IS_PLAYER_ENTIRELY_INSIDE_GARAGE(garageHash, player, p2, p3)
  return native.invoke(
    Type.Bool, 3610, false,
    arg(Type.Hash, garageHash),
    arg(Type.Player, player),
    arg(Type.Float, p2),
    arg(Type.Int, p3)
  )
end

function OBJECT.IS_PLAYER_PARTIALLY_INSIDE_GARAGE(garageHash, player, p2)
  return native.invoke(
    Type.Bool, 3611, false,
    arg(Type.Hash, garageHash),
    arg(Type.Player, player),
    arg(Type.Int, p2)
  )
end

function OBJECT.ARE_ENTITIES_ENTIRELY_INSIDE_GARAGE(garageHash, p1, p2, p3, p4)
  return native.invoke(
    Type.Bool, 3612, false,
    arg(Type.Hash, garageHash),
    arg(Type.Bool, p1),
    arg(Type.Bool, p2),
    arg(Type.Bool, p3),
    arg(Type.Any, p4)
  )
end

function OBJECT.IS_ANY_ENTITY_ENTIRELY_INSIDE_GARAGE(garageHash, p1, p2, p3, p4)
  return native.invoke(
    Type.Bool, 3613, false,
    arg(Type.Hash, garageHash),
    arg(Type.Bool, p1),
    arg(Type.Bool, p2),
    arg(Type.Bool, p3),
    arg(Type.Any, p4)
  )
end

function OBJECT.IS_OBJECT_ENTIRELY_INSIDE_GARAGE(garageHash, entity, p2, p3)
  return native.invoke(
    Type.Bool, 3614, false,
    arg(Type.Hash, garageHash),
    arg(Type.Entity, entity),
    arg(Type.Float, p2),
    arg(Type.Int, p3)
  )
end

function OBJECT.IS_OBJECT_PARTIALLY_INSIDE_GARAGE(garageHash, entity, p2)
  return native.invoke(
    Type.Bool, 3615, false,
    arg(Type.Hash, garageHash),
    arg(Type.Entity, entity),
    arg(Type.Int, p2)
  )
end

function OBJECT.CLEAR_GARAGE(garageHash, isNetwork)
  native.invoke(
    Type.Void, 3616, false,
    arg(Type.Hash, garageHash),
    arg(Type.Bool, isNetwork)
  )
end

function OBJECT.CLEAR_OBJECTS_INSIDE_GARAGE(garageHash, vehicles, peds, objects, isNetwork)
  native.invoke(
    Type.Void, 3617, false,
    arg(Type.Hash, garageHash),
    arg(Type.Bool, vehicles),
    arg(Type.Bool, peds),
    arg(Type.Bool, objects),
    arg(Type.Bool, isNetwork)
  )
end

function OBJECT.DISABLE_TIDYING_UP_IN_GARAGE(id, toggle)
  native.invoke(
    Type.Void, 3618, false,
    arg(Type.Int, id),
    arg(Type.Bool, toggle)
  )
end

function OBJECT.ENABLE_SAVING_IN_GARAGE(garageHash, toggle)
  native.invoke(
    Type.Void, 3619, false,
    arg(Type.Hash, garageHash),
    arg(Type.Bool, toggle)
  )
end

function OBJECT.CLOSE_SAFEHOUSE_GARAGES()
  native.invoke(
    Type.Void, 3620, false
  )
end

function OBJECT.DOES_OBJECT_OF_TYPE_EXIST_AT_COORDS(x, y, z, radius, hash, p5)
  return native.invoke(
    Type.Bool, 3621, false,
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, z),
    arg(Type.Float, radius),
    arg(Type.Hash, hash),
    arg(Type.Bool, p5)
  )
end

function OBJECT.IS_POINT_IN_ANGLED_AREA(xPos, yPos, zPos, x1, y1, z1, x2, y2, z2, width, debug, includeZ)
  return native.invoke(
    Type.Bool, 3622, false,
    arg(Type.Float, xPos),
    arg(Type.Float, yPos),
    arg(Type.Float, zPos),
    arg(Type.Float, x1),
    arg(Type.Float, y1),
    arg(Type.Float, z1),
    arg(Type.Float, x2),
    arg(Type.Float, y2),
    arg(Type.Float, z2),
    arg(Type.Float, width),
    arg(Type.Bool, debug),
    arg(Type.Bool, includeZ)
  )
end

function OBJECT.SET_OBJECT_ALLOW_LOW_LOD_BUOYANCY(object, toggle)
  native.invoke(
    Type.Void, 3623, false,
    arg(Type.Object, object),
    arg(Type.Bool, toggle)
  )
end

function OBJECT.SET_OBJECT_PHYSICS_PARAMS(object, weight, p2, p3, p4, p5, gravity, p7, p8, p9, p10, buoyancy)
  native.invoke(
    Type.Void, 3624, false,
    arg(Type.Object, object),
    arg(Type.Float, weight),
    arg(Type.Float, p2),
    arg(Type.Float, p3),
    arg(Type.Float, p4),
    arg(Type.Float, p5),
    arg(Type.Float, gravity),
    arg(Type.Float, p7),
    arg(Type.Float, p8),
    arg(Type.Float, p9),
    arg(Type.Float, p10),
    arg(Type.Float, buoyancy)
  )
end

function OBJECT.GET_OBJECT_FRAGMENT_DAMAGE_HEALTH(p0, p1)
  return native.invoke(
    Type.Float, 3625, false,
    arg(Type.Any, p0),
    arg(Type.Bool, p1)
  )
end

function OBJECT.SET_ACTIVATE_OBJECT_PHYSICS_AS_SOON_AS_IT_IS_UNFROZEN(object, toggle)
  native.invoke(
    Type.Void, 3626, false,
    arg(Type.Object, object),
    arg(Type.Bool, toggle)
  )
end

function OBJECT.IS_ANY_OBJECT_NEAR_POINT(x, y, z, range, p4)
  return native.invoke(
    Type.Bool, 3627, false,
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, z),
    arg(Type.Float, range),
    arg(Type.Bool, p4)
  )
end

function OBJECT.IS_OBJECT_NEAR_POINT(objectHash, x, y, z, range)
  return native.invoke(
    Type.Bool, 3628, false,
    arg(Type.Hash, objectHash),
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, z),
    arg(Type.Float, range)
  )
end

function OBJECT.REMOVE_OBJECT_HIGH_DETAIL_MODEL(object)
  native.invoke(
    Type.Void, 3629, false,
    arg(Type.Object, object)
  )
end

function OBJECT.BREAK_OBJECT_FRAGMENT_CHILD(p0, p1, p2)
  native.invoke(
    Type.Void, 3630, false,
    arg(Type.Object, p0),
    arg(Type.Any, p1),
    arg(Type.Bool, p2)
  )
end

function OBJECT.DAMAGE_OBJECT_FRAGMENT_CHILD(p0, p1, p2)
  native.invoke(
    Type.Void, 3631, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1),
    arg(Type.Any, p2)
  )
end

function OBJECT.FIX_OBJECT_FRAGMENT(object)
  native.invoke(
    Type.Void, 3632, false,
    arg(Type.Object, object)
  )
end

function OBJECT.TRACK_OBJECT_VISIBILITY(object)
  native.invoke(
    Type.Void, 3633, false,
    arg(Type.Object, object)
  )
end

function OBJECT.IS_OBJECT_VISIBLE(object)
  return native.invoke(
    Type.Bool, 3634, false,
    arg(Type.Object, object)
  )
end

function OBJECT.SET_OBJECT_IS_SPECIAL_GOLFBALL(object, toggle)
  native.invoke(
    Type.Void, 3635, false,
    arg(Type.Object, object),
    arg(Type.Bool, toggle)
  )
end

function OBJECT.SET_OBJECT_TAKES_DAMAGE_FROM_COLLIDING_WITH_BUILDINGS(p0, p1)
  native.invoke(
    Type.Void, 3636, false,
    arg(Type.Any, p0),
    arg(Type.Bool, p1)
  )
end

function OBJECT.ALLOW_DAMAGE_EVENTS_FOR_NON_NETWORKED_OBJECTS(value)
  native.invoke(
    Type.Void, 3637, false,
    arg(Type.Bool, value)
  )
end

function OBJECT.SET_CUTSCENES_WEAPON_FLASHLIGHT_ON_THIS_FRAME(object, toggle)
  native.invoke(
    Type.Void, 3638, false,
    arg(Type.Object, object),
    arg(Type.Bool, toggle)
  )
end

function OBJECT.GET_RAYFIRE_MAP_OBJECT(x, y, z, radius, name)
  return native.invoke(
    Type.Object, 3639, false,
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, z),
    arg(Type.Float, radius),
    arg(Type.String, name)
  )
end

function OBJECT.SET_STATE_OF_RAYFIRE_MAP_OBJECT(object, state)
  native.invoke(
    Type.Void, 3640, false,
    arg(Type.Object, object),
    arg(Type.Int, state)
  )
end

function OBJECT.GET_STATE_OF_RAYFIRE_MAP_OBJECT(object)
  return native.invoke(
    Type.Int, 3641, false,
    arg(Type.Object, object)
  )
end

function OBJECT.DOES_RAYFIRE_MAP_OBJECT_EXIST(object)
  return native.invoke(
    Type.Bool, 3642, false,
    arg(Type.Object, object)
  )
end

function OBJECT.GET_RAYFIRE_MAP_OBJECT_ANIM_PHASE(object)
  return native.invoke(
    Type.Float, 3643, false,
    arg(Type.Object, object)
  )
end

function OBJECT.CREATE_PICKUP(pickupHash, posX, posY, posZ, p4, value, p6, modelHash)
  return native.invoke(
    Type.Pickup, 3644, false,
    arg(Type.Hash, pickupHash),
    arg(Type.Float, posX),
    arg(Type.Float, posY),
    arg(Type.Float, posZ),
    arg(Type.Int, p4),
    arg(Type.Int, value),
    arg(Type.Bool, p6),
    arg(Type.Hash, modelHash)
  )
end

function OBJECT.CREATE_PICKUP_ROTATE(pickupHash, posX, posY, posZ, rotX, rotY, rotZ, flag, amount, p9, p10, modelHash)
  return native.invoke(
    Type.Pickup, 3645, false,
    arg(Type.Hash, pickupHash),
    arg(Type.Float, posX),
    arg(Type.Float, posY),
    arg(Type.Float, posZ),
    arg(Type.Float, rotX),
    arg(Type.Float, rotY),
    arg(Type.Float, rotZ),
    arg(Type.Int, flag),
    arg(Type.Int, amount),
    arg(Type.Any, p9),
    arg(Type.Bool, p10),
    arg(Type.Hash, modelHash)
  )
end

function OBJECT.FORCE_PICKUP_ROTATE_FACE_UP()
  native.invoke(
    Type.Void, 3646, false
  )
end

function OBJECT.SET_CUSTOM_PICKUP_WEAPON_HASH(pickupHash, pickup)
  native.invoke(
    Type.Void, 3647, false,
    arg(Type.Hash, pickupHash),
    arg(Type.Pickup, pickup)
  )
end

function OBJECT.CREATE_AMBIENT_PICKUP(pickupHash, posX, posY, posZ, flags, value, modelHash, p7, p8)
  return native.invoke(
    Type.Object, 3648, false,
    arg(Type.Hash, pickupHash),
    arg(Type.Float, posX),
    arg(Type.Float, posY),
    arg(Type.Float, posZ),
    arg(Type.Int, flags),
    arg(Type.Int, value),
    arg(Type.Hash, modelHash),
    arg(Type.Bool, p7),
    arg(Type.Bool, p8)
  )
end

function OBJECT.CREATE_NON_NETWORKED_AMBIENT_PICKUP(pickupHash, posX, posY, posZ, flags, value, modelHash, p7, p8)
  return native.invoke(
    Type.Object, 3649, false,
    arg(Type.Hash, pickupHash),
    arg(Type.Float, posX),
    arg(Type.Float, posY),
    arg(Type.Float, posZ),
    arg(Type.Int, flags),
    arg(Type.Int, value),
    arg(Type.Hash, modelHash),
    arg(Type.Bool, p7),
    arg(Type.Bool, p8)
  )
end

function OBJECT.BLOCK_PLAYERS_FOR_AMBIENT_PICKUP(p0, p1)
  native.invoke(
    Type.Void, 3650, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1)
  )
end

function OBJECT.CREATE_PORTABLE_PICKUP(pickupHash, x, y, z, placeOnGround, modelHash)
  return native.invoke(
    Type.Object, 3651, false,
    arg(Type.Hash, pickupHash),
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, z),
    arg(Type.Bool, placeOnGround),
    arg(Type.Hash, modelHash)
  )
end

function OBJECT.CREATE_NON_NETWORKED_PORTABLE_PICKUP(pickupHash, x, y, z, placeOnGround, modelHash)
  return native.invoke(
    Type.Object, 3652, false,
    arg(Type.Hash, pickupHash),
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, z),
    arg(Type.Bool, placeOnGround),
    arg(Type.Hash, modelHash)
  )
end

function OBJECT.ATTACH_PORTABLE_PICKUP_TO_PED(pickupObject, ped)
  native.invoke(
    Type.Void, 3653, false,
    arg(Type.Object, pickupObject),
    arg(Type.Ped, ped)
  )
end

function OBJECT.DETACH_PORTABLE_PICKUP_FROM_PED(pickupObject)
  native.invoke(
    Type.Void, 3654, false,
    arg(Type.Object, pickupObject)
  )
end

function OBJECT.FORCE_PORTABLE_PICKUP_LAST_ACCESSIBLE_POSITION_SETTING(object)
  native.invoke(
    Type.Void, 3655, false,
    arg(Type.Object, object)
  )
end

function OBJECT.HIDE_PORTABLE_PICKUP_WHEN_DETACHED(pickupObject, toggle)
  native.invoke(
    Type.Void, 3656, false,
    arg(Type.Object, pickupObject),
    arg(Type.Bool, toggle)
  )
end

function OBJECT.SET_MAX_NUM_PORTABLE_PICKUPS_CARRIED_BY_PLAYER(modelHash, number)
  native.invoke(
    Type.Void, 3657, false,
    arg(Type.Hash, modelHash),
    arg(Type.Int, number)
  )
end

function OBJECT.SET_LOCAL_PLAYER_CAN_COLLECT_PORTABLE_PICKUPS(toggle)
  native.invoke(
    Type.Void, 3658, false,
    arg(Type.Bool, toggle)
  )
end

function OBJECT.GET_SAFE_PICKUP_COORDS(x, y, z, p3, p4)
  return native.invoke(
    Type.Vector3, 3659, false,
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, z),
    arg(Type.Float, p3),
    arg(Type.Float, p4)
  )
end

function OBJECT.ADD_EXTENDED_PICKUP_PROBE_AREA(x, y, z, radius)
  native.invoke(
    Type.Void, 3660, false,
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, z),
    arg(Type.Float, radius)
  )
end

function OBJECT.CLEAR_EXTENDED_PICKUP_PROBE_AREAS()
  native.invoke(
    Type.Void, 3661, false
  )
end

function OBJECT.GET_PICKUP_COORDS(pickup)
  return native.invoke(
    Type.Vector3, 3662, false,
    arg(Type.Pickup, pickup)
  )
end

function OBJECT.SUPPRESS_PICKUP_SOUND_FOR_PICKUP(p0, p1)
  native.invoke(
    Type.Void, 3663, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1)
  )
end

function OBJECT.REMOVE_ALL_PICKUPS_OF_TYPE(pickupHash)
  native.invoke(
    Type.Void, 3664, false,
    arg(Type.Hash, pickupHash)
  )
end

function OBJECT.HAS_PICKUP_BEEN_COLLECTED(pickup)
  return native.invoke(
    Type.Bool, 3665, false,
    arg(Type.Pickup, pickup)
  )
end

function OBJECT.REMOVE_PICKUP(pickup)
  native.invoke(
    Type.Void, 3666, false,
    arg(Type.Pickup, pickup)
  )
end

function OBJECT.CREATE_MONEY_PICKUPS(x, y, z, value, amount, model)
  native.invoke(
    Type.Void, 3667, false,
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, z),
    arg(Type.Int, value),
    arg(Type.Int, amount),
    arg(Type.Hash, model)
  )
end

function OBJECT.DOES_PICKUP_EXIST(pickup)
  return native.invoke(
    Type.Bool, 3668, false,
    arg(Type.Pickup, pickup)
  )
end

function OBJECT.DOES_PICKUP_OBJECT_EXIST(pickupObject)
  return native.invoke(
    Type.Bool, 3669, false,
    arg(Type.Object, pickupObject)
  )
end

function OBJECT.GET_PICKUP_OBJECT(pickup)
  return native.invoke(
    Type.Object, 3670, false,
    arg(Type.Pickup, pickup)
  )
end

function OBJECT.IS_OBJECT_A_PICKUP(object)
  return native.invoke(
    Type.Bool, 3671, false,
    arg(Type.Object, object)
  )
end

function OBJECT.IS_OBJECT_A_PORTABLE_PICKUP(object)
  return native.invoke(
    Type.Bool, 3672, false,
    arg(Type.Object, object)
  )
end

function OBJECT.DOES_PICKUP_OF_TYPE_EXIST_IN_AREA(pickupHash, x, y, z, radius)
  return native.invoke(
    Type.Bool, 3673, false,
    arg(Type.Hash, pickupHash),
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, z),
    arg(Type.Float, radius)
  )
end

function OBJECT.SET_PICKUP_REGENERATION_TIME(pickup, duration)
  native.invoke(
    Type.Void, 3674, false,
    arg(Type.Pickup, pickup),
    arg(Type.Int, duration)
  )
end

function OBJECT.FORCE_PICKUP_REGENERATE(p0)
  native.invoke(
    Type.Void, 3675, false,
    arg(Type.Any, p0)
  )
end

function OBJECT.SET_PLAYER_PERMITTED_TO_COLLECT_PICKUPS_OF_TYPE(player, pickupHash, toggle)
  native.invoke(
    Type.Void, 3676, false,
    arg(Type.Player, player),
    arg(Type.Hash, pickupHash),
    arg(Type.Bool, toggle)
  )
end

function OBJECT.SET_LOCAL_PLAYER_PERMITTED_TO_COLLECT_PICKUPS_WITH_MODEL(modelHash, toggle)
  native.invoke(
    Type.Void, 3677, false,
    arg(Type.Hash, modelHash),
    arg(Type.Bool, toggle)
  )
end

function OBJECT.ALLOW_ALL_PLAYERS_TO_COLLECT_PICKUPS_OF_TYPE(pickupHash)
  native.invoke(
    Type.Void, 3678, false,
    arg(Type.Hash, pickupHash)
  )
end

function OBJECT.SET_TEAM_PICKUP_OBJECT(object, p1, p2)
  native.invoke(
    Type.Void, 3679, false,
    arg(Type.Object, object),
    arg(Type.Any, p1),
    arg(Type.Bool, p2)
  )
end

function OBJECT.PREVENT_COLLECTION_OF_PORTABLE_PICKUP(object, p1, p2)
  native.invoke(
    Type.Void, 3680, false,
    arg(Type.Object, object),
    arg(Type.Bool, p1),
    arg(Type.Bool, p2)
  )
end

function OBJECT.SET_PICKUP_OBJECT_GLOW_WHEN_UNCOLLECTABLE(pickup, toggle)
  native.invoke(
    Type.Void, 3681, false,
    arg(Type.Pickup, pickup),
    arg(Type.Bool, toggle)
  )
end

function OBJECT.SET_PICKUP_GLOW_OFFSET(pickup, p1)
  native.invoke(
    Type.Void, 3682, false,
    arg(Type.Pickup, pickup),
    arg(Type.Float, p1)
  )
end

function OBJECT.SET_PICKUP_OBJECT_GLOW_OFFSET(pickup, p1, p2)
  native.invoke(
    Type.Void, 3683, false,
    arg(Type.Pickup, pickup),
    arg(Type.Float, p1),
    arg(Type.Bool, p2)
  )
end

function OBJECT.SET_OBJECT_GLOW_IN_SAME_TEAM(pickup)
  native.invoke(
    Type.Void, 3684, false,
    arg(Type.Pickup, pickup)
  )
end

function OBJECT.SET_PICKUP_OBJECT_ARROW_MARKER(pickup, toggle)
  native.invoke(
    Type.Void, 3685, false,
    arg(Type.Pickup, pickup),
    arg(Type.Bool, toggle)
  )
end

function OBJECT.ALLOW_PICKUP_ARROW_MARKER_WHEN_UNCOLLECTABLE(pickup, toggle)
  native.invoke(
    Type.Void, 3686, false,
    arg(Type.Pickup, pickup),
    arg(Type.Bool, toggle)
  )
end

function OBJECT.GET_DEFAULT_AMMO_FOR_WEAPON_PICKUP(pickupHash)
  return native.invoke(
    Type.Int, 3687, false,
    arg(Type.Hash, pickupHash)
  )
end

function OBJECT.SET_PICKUP_GENERATION_RANGE_MULTIPLIER(multiplier)
  native.invoke(
    Type.Void, 3688, false,
    arg(Type.Float, multiplier)
  )
end

function OBJECT.GET_PICKUP_GENERATION_RANGE_MULTIPLIER()
  return native.invoke(
    Type.Float, 3689, false
  )
end

function OBJECT.SET_ONLY_ALLOW_AMMO_COLLECTION_WHEN_LOW(p0)
  native.invoke(
    Type.Void, 3690, false,
    arg(Type.Bool, p0)
  )
end

function OBJECT.SET_PICKUP_UNCOLLECTABLE(pickup, toggle)
  native.invoke(
    Type.Void, 3691, false,
    arg(Type.Pickup, pickup),
    arg(Type.Bool, toggle)
  )
end

function OBJECT.SET_PICKUP_TRANSPARENT_WHEN_UNCOLLECTABLE(pickup, toggle)
  native.invoke(
    Type.Void, 3692, false,
    arg(Type.Pickup, pickup),
    arg(Type.Bool, toggle)
  )
end

function OBJECT.SET_PICKUP_HIDDEN_WHEN_UNCOLLECTABLE(pickup, toggle)
  native.invoke(
    Type.Void, 3693, false,
    arg(Type.Pickup, pickup),
    arg(Type.Bool, toggle)
  )
end

function OBJECT.SET_PICKUP_OBJECT_TRANSPARENT_WHEN_UNCOLLECTABLE(pickup, toggle)
  native.invoke(
    Type.Void, 3694, false,
    arg(Type.Pickup, pickup),
    arg(Type.Bool, toggle)
  )
end

function OBJECT.SET_PICKUP_OBJECT_ALPHA_WHEN_TRANSPARENT(p0)
  native.invoke(
    Type.Void, 3695, false,
    arg(Type.Int, p0)
  )
end

function OBJECT.SET_PORTABLE_PICKUP_PERSIST(pickup, toggle)
  native.invoke(
    Type.Void, 3696, false,
    arg(Type.Pickup, pickup),
    arg(Type.Bool, toggle)
  )
end

function OBJECT.ALLOW_PORTABLE_PICKUP_TO_MIGRATE_TO_NON_PARTICIPANTS(pickup, toggle)
  native.invoke(
    Type.Void, 3697, false,
    arg(Type.Pickup, pickup),
    arg(Type.Bool, toggle)
  )
end

function OBJECT.FORCE_ACTIVATE_PHYSICS_ON_UNFIXED_PICKUP(pickup, toggle)
  native.invoke(
    Type.Void, 3698, false,
    arg(Type.Pickup, pickup),
    arg(Type.Bool, toggle)
  )
end

function OBJECT.ALLOW_PICKUP_BY_NONE_PARTICIPANT(pickup, toggle)
  native.invoke(
    Type.Void, 3699, false,
    arg(Type.Pickup, pickup),
    arg(Type.Bool, toggle)
  )
end

function OBJECT.SUPPRESS_PICKUP_REWARD_TYPE(rewardType, suppress)
  native.invoke(
    Type.Void, 3700, false,
    arg(Type.Int, rewardType),
    arg(Type.Bool, suppress)
  )
end

function OBJECT.CLEAR_ALL_PICKUP_REWARD_TYPE_SUPPRESSION()
  native.invoke(
    Type.Void, 3701, false
  )
end

function OBJECT.CLEAR_PICKUP_REWARD_TYPE_SUPPRESSION(rewardType)
  native.invoke(
    Type.Void, 3702, false,
    arg(Type.Int, rewardType)
  )
end

function OBJECT.RENDER_FAKE_PICKUP_GLOW(x, y, z, colorIndex)
  native.invoke(
    Type.Void, 3703, false,
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, z),
    arg(Type.Int, colorIndex)
  )
end

function OBJECT.SET_PICKUP_OBJECT_COLLECTABLE_IN_VEHICLE(pickup)
  native.invoke(
    Type.Void, 3704, false,
    arg(Type.Pickup, pickup)
  )
end

function OBJECT.SET_PICKUP_TRACK_DAMAGE_EVENTS(pickup, toggle)
  native.invoke(
    Type.Void, 3705, false,
    arg(Type.Pickup, pickup),
    arg(Type.Bool, toggle)
  )
end

function OBJECT.SET_ENTITY_FLAG_SUPPRESS_SHADOW(entity, toggle)
  native.invoke(
    Type.Void, 3706, false,
    arg(Type.Entity, entity),
    arg(Type.Bool, toggle)
  )
end

function OBJECT.SET_ENTITY_FLAG_RENDER_SMALL_SHADOW(object, toggle)
  native.invoke(
    Type.Void, 3707, false,
    arg(Type.Object, object),
    arg(Type.Bool, toggle)
  )
end

function OBJECT.GET_WEAPON_TYPE_FROM_PICKUP_TYPE(pickupHash)
  return native.invoke(
    Type.Hash, 3708, false,
    arg(Type.Hash, pickupHash)
  )
end

function OBJECT.GET_PICKUP_TYPE_FROM_WEAPON_HASH(weaponHash)
  return native.invoke(
    Type.Hash, 3709, false,
    arg(Type.Hash, weaponHash)
  )
end

function OBJECT.IS_PICKUP_WEAPON_OBJECT_VALID(object)
  return native.invoke(
    Type.Bool, 3710, false,
    arg(Type.Object, object)
  )
end

function OBJECT.GET_OBJECT_TINT_INDEX(object)
  return native.invoke(
    Type.Int, 3711, false,
    arg(Type.Object, object)
  )
end

function OBJECT.SET_OBJECT_TINT_INDEX(object, textureVariation)
  native.invoke(
    Type.Void, 3712, false,
    arg(Type.Object, object),
    arg(Type.Int, textureVariation)
  )
end

function OBJECT.SET_TINT_INDEX_CLOSEST_BUILDING_OF_TYPE(x, y, z, radius, modelHash, textureVariation)
  return native.invoke(
    Type.Bool, 3713, false,
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, z),
    arg(Type.Float, radius),
    arg(Type.Hash, modelHash),
    arg(Type.Int, textureVariation)
  )
end

function OBJECT.SET_PROP_TINT_INDEX(p0, p1)
  native.invoke(
    Type.Void, 3714, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1)
  )
end

function OBJECT.SET_PROP_LIGHT_COLOR(object, p1, r, g, b)
  return native.invoke(
    Type.Bool, 3715, false,
    arg(Type.Object, object),
    arg(Type.Bool, p1),
    arg(Type.Int, r),
    arg(Type.Int, g),
    arg(Type.Int, b)
  )
end

function OBJECT.IS_PROP_LIGHT_OVERRIDEN(object)
  return native.invoke(
    Type.Bool, 3716, false,
    arg(Type.Object, object)
  )
end

function OBJECT.SET_OBJECT_IS_VISIBLE_IN_MIRRORS(object, toggle)
  native.invoke(
    Type.Void, 3717, false,
    arg(Type.Object, object),
    arg(Type.Bool, toggle)
  )
end

function OBJECT.SET_OBJECT_SPEED_BOOST_AMOUNT(object, p1)
  native.invoke(
    Type.Void, 3718, false,
    arg(Type.Object, object),
    arg(Type.Any, p1)
  )
end

function OBJECT.SET_OBJECT_SPEED_BOOST_DURATION(object, duration)
  native.invoke(
    Type.Void, 3719, false,
    arg(Type.Object, object),
    arg(Type.Float, duration)
  )
end

function OBJECT.CONVERT_OLD_PICKUP_TYPE_TO_NEW(pickupHash)
  return native.invoke(
    Type.Hash, 3720, false,
    arg(Type.Hash, pickupHash)
  )
end

function OBJECT.SET_FORCE_OBJECT_THIS_FRAME(x, y, z, p3)
  native.invoke(
    Type.Void, 3721, false,
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, z),
    arg(Type.Float, p3)
  )
end

function OBJECT.ONLY_CLEAN_UP_OBJECT_WHEN_OUT_OF_RANGE(object)
  native.invoke(
    Type.Void, 3722, false,
    arg(Type.Object, object)
  )
end

function OBJECT.SET_DISABLE_COLLISIONS_BETWEEN_CARS_AND_CAR_PARACHUTE(p0)
  native.invoke(
    Type.Void, 3723, false,
    arg(Type.Any, p0)
  )
end

function OBJECT.SET_PROJECTILES_SHOULD_EXPLODE_ON_CONTACT(entity, p1)
  native.invoke(
    Type.Void, 3724, false,
    arg(Type.Entity, entity),
    arg(Type.Any, p1)
  )
end

function OBJECT.SET_DRIVE_ARTICULATED_JOINT(object, toggle, p2)
  native.invoke(
    Type.Void, 3725, false,
    arg(Type.Object, object),
    arg(Type.Bool, toggle),
    arg(Type.Int, p2)
  )
end

function OBJECT.SET_DRIVE_ARTICULATED_JOINT_WITH_INFLICTOR(object, toggle, p2, ped)
  native.invoke(
    Type.Void, 3726, false,
    arg(Type.Object, object),
    arg(Type.Bool, toggle),
    arg(Type.Int, p2),
    arg(Type.Ped, ped)
  )
end

function OBJECT.SET_OBJECT_IS_A_PRESSURE_PLATE(object, toggle)
  native.invoke(
    Type.Void, 3727, false,
    arg(Type.Object, object),
    arg(Type.Bool, toggle)
  )
end

function OBJECT.SET_WEAPON_IMPACTS_APPLY_GREATER_FORCE(object, p1)
  native.invoke(
    Type.Void, 3728, false,
    arg(Type.Object, object),
    arg(Type.Bool, p1)
  )
end

function OBJECT.GET_IS_ARTICULATED_JOINT_AT_MIN_ANGLE(object, p1)
  return native.invoke(
    Type.Bool, 3729, false,
    arg(Type.Object, object),
    arg(Type.Any, p1)
  )
end

function OBJECT.GET_IS_ARTICULATED_JOINT_AT_MAX_ANGLE(p0, p1)
  return native.invoke(
    Type.Bool, 3730, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1)
  )
end

function OBJECT.SET_IS_OBJECT_ARTICULATED(object, toggle)
  native.invoke(
    Type.Void, 3731, false,
    arg(Type.Object, object),
    arg(Type.Bool, toggle)
  )
end

function OBJECT.SET_IS_OBJECT_BALL(object, toggle)
  native.invoke(
    Type.Void, 3732, false,
    arg(Type.Object, object),
    arg(Type.Bool, toggle)
  )
end


PAD = {}

function PAD.IS_CONTROL_ENABLED(control, action)
  return native.invoke(
    Type.Bool, 3733, false,
    arg(Type.Int, control),
    arg(Type.Int, action)
  )
end

function PAD.IS_CONTROL_PRESSED(control, action)
  return native.invoke(
    Type.Bool, 3734, false,
    arg(Type.Int, control),
    arg(Type.Int, action)
  )
end

function PAD.IS_CONTROL_RELEASED(control, action)
  return native.invoke(
    Type.Bool, 3735, false,
    arg(Type.Int, control),
    arg(Type.Int, action)
  )
end

function PAD.IS_CONTROL_JUST_PRESSED(control, action)
  return native.invoke(
    Type.Bool, 3736, false,
    arg(Type.Int, control),
    arg(Type.Int, action)
  )
end

function PAD.IS_CONTROL_JUST_RELEASED(control, action)
  return native.invoke(
    Type.Bool, 3737, false,
    arg(Type.Int, control),
    arg(Type.Int, action)
  )
end

function PAD.GET_CONTROL_VALUE(control, action)
  return native.invoke(
    Type.Int, 3738, false,
    arg(Type.Int, control),
    arg(Type.Int, action)
  )
end

function PAD.GET_CONTROL_NORMAL(control, action)
  return native.invoke(
    Type.Float, 3739, false,
    arg(Type.Int, control),
    arg(Type.Int, action)
  )
end

function PAD.SET_USE_ADJUSTED_MOUSE_COORDS(toggle)
  native.invoke(
    Type.Void, 3740, false,
    arg(Type.Bool, toggle)
  )
end

function PAD.GET_CONTROL_UNBOUND_NORMAL(control, action)
  return native.invoke(
    Type.Float, 3741, false,
    arg(Type.Int, control),
    arg(Type.Int, action)
  )
end

function PAD.SET_CONTROL_VALUE_NEXT_FRAME(control, action, value)
  return native.invoke(
    Type.Bool, 3742, false,
    arg(Type.Int, control),
    arg(Type.Int, action),
    arg(Type.Float, value)
  )
end

function PAD.IS_DISABLED_CONTROL_PRESSED(control, action)
  return native.invoke(
    Type.Bool, 3743, false,
    arg(Type.Int, control),
    arg(Type.Int, action)
  )
end

function PAD.IS_DISABLED_CONTROL_RELEASED(control, action)
  return native.invoke(
    Type.Bool, 3744, false,
    arg(Type.Int, control),
    arg(Type.Int, action)
  )
end

function PAD.IS_DISABLED_CONTROL_JUST_PRESSED(control, action)
  return native.invoke(
    Type.Bool, 3745, false,
    arg(Type.Int, control),
    arg(Type.Int, action)
  )
end

function PAD.IS_DISABLED_CONTROL_JUST_RELEASED(control, action)
  return native.invoke(
    Type.Bool, 3746, false,
    arg(Type.Int, control),
    arg(Type.Int, action)
  )
end

function PAD.GET_DISABLED_CONTROL_NORMAL(control, action)
  return native.invoke(
    Type.Float, 3747, false,
    arg(Type.Int, control),
    arg(Type.Int, action)
  )
end

function PAD.GET_DISABLED_CONTROL_UNBOUND_NORMAL(control, action)
  return native.invoke(
    Type.Float, 3748, false,
    arg(Type.Int, control),
    arg(Type.Int, action)
  )
end

function PAD.GET_CONTROL_HOW_LONG_AGO(control)
  return native.invoke(
    Type.Int, 3749, false,
    arg(Type.Int, control)
  )
end

function PAD.IS_USING_KEYBOARD_AND_MOUSE(control)
  return native.invoke(
    Type.Bool, 3750, false,
    arg(Type.Int, control)
  )
end

function PAD.IS_USING_CURSOR(control)
  return native.invoke(
    Type.Bool, 3751, false,
    arg(Type.Int, control)
  )
end

function PAD.SET_CURSOR_POSITION(x, y)
  return native.invoke(
    Type.Bool, 3752, false,
    arg(Type.Float, x),
    arg(Type.Float, y)
  )
end

function PAD.IS_USING_REMOTE_PLAY(control)
  return native.invoke(
    Type.Bool, 3753, false,
    arg(Type.Int, control)
  )
end

function PAD.HAVE_CONTROLS_CHANGED(control)
  return native.invoke(
    Type.Bool, 3754, false,
    arg(Type.Int, control)
  )
end

function PAD.GET_CONTROL_INSTRUCTIONAL_BUTTONS_STRING(control, action, allowXOSwap)
  return native.invoke(
    Type.String, 3755, false,
    arg(Type.Int, control),
    arg(Type.Int, action),
    arg(Type.Bool, allowXOSwap)
  )
end

function PAD.GET_CONTROL_GROUP_INSTRUCTIONAL_BUTTONS_STRING(control, controlGroup, allowXOSwap)
  return native.invoke(
    Type.String, 3756, false,
    arg(Type.Int, control),
    arg(Type.Int, controlGroup),
    arg(Type.Bool, allowXOSwap)
  )
end

function PAD.SET_CONTROL_LIGHT_EFFECT_COLOR(control, red, green, blue)
  native.invoke(
    Type.Void, 3757, false,
    arg(Type.Int, control),
    arg(Type.Int, red),
    arg(Type.Int, green),
    arg(Type.Int, blue)
  )
end

function PAD.CLEAR_CONTROL_LIGHT_EFFECT(control)
  native.invoke(
    Type.Void, 3758, false,
    arg(Type.Int, control)
  )
end

function PAD.SET_CONTROL_SHAKE(control, duration, frequency)
  native.invoke(
    Type.Void, 3759, false,
    arg(Type.Int, control),
    arg(Type.Int, duration),
    arg(Type.Int, frequency)
  )
end

function PAD.SET_CONTROL_TRIGGER_SHAKE(control, leftDuration, leftFrequency, rightDuration, rightFrequency)
  native.invoke(
    Type.Void, 3760, false,
    arg(Type.Int, control),
    arg(Type.Int, leftDuration),
    arg(Type.Int, leftFrequency),
    arg(Type.Int, rightDuration),
    arg(Type.Int, rightFrequency)
  )
end

function PAD.STOP_CONTROL_SHAKE(control)
  native.invoke(
    Type.Void, 3761, false,
    arg(Type.Int, control)
  )
end

function PAD.SET_CONTROL_SHAKE_SUPPRESSED_ID(control, uniqueId)
  native.invoke(
    Type.Void, 3762, false,
    arg(Type.Int, control),
    arg(Type.Int, uniqueId)
  )
end

function PAD.CLEAR_CONTROL_SHAKE_SUPPRESSED_ID(control)
  native.invoke(
    Type.Void, 3763, false,
    arg(Type.Int, control)
  )
end

function PAD.IS_LOOK_INVERTED()
  return native.invoke(
    Type.Bool, 3764, false
  )
end

function PAD.IS_MOUSE_LOOK_INVERTED()
  return native.invoke(
    Type.Bool, 3765, false
  )
end

function PAD.GET_LOCAL_PLAYER_AIM_STATE()
  return native.invoke(
    Type.Int, 3766, false
  )
end

function PAD.GET_LOCAL_PLAYER_GAMEPAD_AIM_STATE()
  return native.invoke(
    Type.Int, 3767, false
  )
end

function PAD.GET_IS_USING_ALTERNATE_HANDBRAKE()
  return native.invoke(
    Type.Bool, 3768, false
  )
end

function PAD.GET_IS_USING_ALTERNATE_DRIVEBY()
  return native.invoke(
    Type.Bool, 3769, false
  )
end

function PAD.GET_ALLOW_MOVEMENT_WHILE_ZOOMED()
  return native.invoke(
    Type.Bool, 3770, false
  )
end

function PAD.SET_PLAYERPAD_SHAKES_WHEN_CONTROLLER_DISABLED(toggle)
  native.invoke(
    Type.Void, 3771, false,
    arg(Type.Bool, toggle)
  )
end

function PAD.SET_INPUT_EXCLUSIVE(control, action)
  native.invoke(
    Type.Void, 3772, false,
    arg(Type.Int, control),
    arg(Type.Int, action)
  )
end

function PAD.DISABLE_CONTROL_ACTION(control, action, disableRelatedActions)
  native.invoke(
    Type.Void, 3773, false,
    arg(Type.Int, control),
    arg(Type.Int, action),
    arg(Type.Bool, disableRelatedActions)
  )
end

function PAD.ENABLE_CONTROL_ACTION(control, action, enableRelatedActions)
  native.invoke(
    Type.Void, 3774, false,
    arg(Type.Int, control),
    arg(Type.Int, action),
    arg(Type.Bool, enableRelatedActions)
  )
end

function PAD.DISABLE_ALL_CONTROL_ACTIONS(control)
  native.invoke(
    Type.Void, 3775, false,
    arg(Type.Int, control)
  )
end

function PAD.ENABLE_ALL_CONTROL_ACTIONS(control)
  native.invoke(
    Type.Void, 3776, false,
    arg(Type.Int, control)
  )
end

function PAD.INIT_PC_SCRIPTED_CONTROLS(schemeName)
  return native.invoke(
    Type.Bool, 3777, false,
    arg(Type.String, schemeName)
  )
end

function PAD.SWITCH_PC_SCRIPTED_CONTROLS(schemeName)
  return native.invoke(
    Type.Bool, 3778, false,
    arg(Type.String, schemeName)
  )
end

function PAD.SHUTDOWN_PC_SCRIPTED_CONTROLS()
  native.invoke(
    Type.Void, 3779, false
  )
end

function PAD.ALLOW_ALTERNATIVE_SCRIPT_CONTROLS_LAYOUT(control)
  native.invoke(
    Type.Void, 3780, false,
    arg(Type.Int, control)
  )
end


PATHFIND = {}

function PATHFIND.SET_ROADS_IN_AREA(x1, y1, z1, x2, y2, z2, nodeEnabled, unknown2)
  native.invoke(
    Type.Void, 3781, false,
    arg(Type.Float, x1),
    arg(Type.Float, y1),
    arg(Type.Float, z1),
    arg(Type.Float, x2),
    arg(Type.Float, y2),
    arg(Type.Float, z2),
    arg(Type.Bool, nodeEnabled),
    arg(Type.Bool, unknown2)
  )
end

function PATHFIND.SET_ROADS_IN_ANGLED_AREA(x1, y1, z1, x2, y2, z2, width, unknown1, unknown2, unknown3)
  native.invoke(
    Type.Void, 3782, false,
    arg(Type.Float, x1),
    arg(Type.Float, y1),
    arg(Type.Float, z1),
    arg(Type.Float, x2),
    arg(Type.Float, y2),
    arg(Type.Float, z2),
    arg(Type.Float, width),
    arg(Type.Bool, unknown1),
    arg(Type.Bool, unknown2),
    arg(Type.Bool, unknown3)
  )
end

function PATHFIND.SET_PED_PATHS_IN_AREA(x1, y1, z1, x2, y2, z2, p6, p7)
  native.invoke(
    Type.Void, 3783, false,
    arg(Type.Float, x1),
    arg(Type.Float, y1),
    arg(Type.Float, z1),
    arg(Type.Float, x2),
    arg(Type.Float, y2),
    arg(Type.Float, z2),
    arg(Type.Bool, p6),
    arg(Type.Any, p7)
  )
end

function PATHFIND.GET_SAFE_COORD_FOR_PED(x, y, z, onGround, outPosition, flags)
  return native.invoke(
    Type.Bool, 3784, true,
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, z),
    arg(Type.Bool, onGround),
    ref(Type.Vector3, outPosition),
    arg(Type.Int, flags)
  )
end

function PATHFIND.GET_CLOSEST_VEHICLE_NODE(x, y, z, outPosition, nodeFlags, p5, p6)
  return native.invoke(
    Type.Bool, 3785, true,
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, z),
    ref(Type.Vector3, outPosition),
    arg(Type.Int, nodeFlags),
    arg(Type.Float, p5),
    arg(Type.Float, p6)
  )
end

function PATHFIND.GET_CLOSEST_MAJOR_VEHICLE_NODE(x, y, z, outPosition, unknown1, unknown2)
  return native.invoke(
    Type.Bool, 3786, true,
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, z),
    ref(Type.Vector3, outPosition),
    arg(Type.Float, unknown1),
    arg(Type.Float, unknown2)
  )
end

function PATHFIND.GET_CLOSEST_VEHICLE_NODE_WITH_HEADING(x, y, z, outPosition, outHeading, nodeType, p6, p7)
  return native.invoke(
    Type.Bool, 3787, true,
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, z),
    ref(Type.Vector3, outPosition),
    ref(Type.Float, outHeading),
    arg(Type.Int, nodeType),
    arg(Type.Float, p6),
    arg(Type.Float, p7)
  )
end

function PATHFIND.GET_NTH_CLOSEST_VEHICLE_NODE(x, y, z, nthClosest, outPosition, nodeFlags, unknown1, unknown2)
  return native.invoke(
    Type.Bool, 3788, true,
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, z),
    arg(Type.Int, nthClosest),
    ref(Type.Vector3, outPosition),
    arg(Type.Int, nodeFlags),
    arg(Type.Float, unknown1),
    arg(Type.Float, unknown2)
  )
end

function PATHFIND.GET_NTH_CLOSEST_VEHICLE_NODE_ID(x, y, z, nth, nodeFlags, p5, p6)
  return native.invoke(
    Type.Int, 3789, false,
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, z),
    arg(Type.Int, nth),
    arg(Type.Int, nodeFlags),
    arg(Type.Float, p5),
    arg(Type.Float, p6)
  )
end

function PATHFIND.GET_NTH_CLOSEST_VEHICLE_NODE_WITH_HEADING(x, y, z, nthClosest, outPosition, outHeading, outNumLanes, nodeFlags, unknown3, unknown4)
  return native.invoke(
    Type.Bool, 3790, true,
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, z),
    arg(Type.Int, nthClosest),
    ref(Type.Vector3, outPosition),
    ref(Type.Float, outHeading),
    ref(Type.Int, outNumLanes),
    arg(Type.Int, nodeFlags),
    arg(Type.Float, unknown3),
    arg(Type.Float, unknown4)
  )
end

function PATHFIND.GET_NTH_CLOSEST_VEHICLE_NODE_ID_WITH_HEADING(x, y, z, nthClosest, outPosition, outHeading, nodeFlags, p7, p8)
  return native.invoke(
    Type.Int, 3791, true,
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, z),
    arg(Type.Int, nthClosest),
    ref(Type.Vector3, outPosition),
    ref(Type.Float, outHeading),
    arg(Type.Int, nodeFlags),
    arg(Type.Float, p7),
    arg(Type.Float, p8)
  )
end

function PATHFIND.GET_NTH_CLOSEST_VEHICLE_NODE_FAVOUR_DIRECTION(x, y, z, desiredX, desiredY, desiredZ, nthClosest, outPosition, outHeading, nodeFlags, p10, p11)
  return native.invoke(
    Type.Bool, 3792, true,
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, z),
    arg(Type.Float, desiredX),
    arg(Type.Float, desiredY),
    arg(Type.Float, desiredZ),
    arg(Type.Int, nthClosest),
    ref(Type.Vector3, outPosition),
    ref(Type.Float, outHeading),
    arg(Type.Int, nodeFlags),
    arg(Type.Float, p10),
    arg(Type.Float, p11)
  )
end

function PATHFIND.GET_VEHICLE_NODE_PROPERTIES(x, y, z, density, flags)
  return native.invoke(
    Type.Bool, 3793, false,
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, z),
    ref(Type.Int, density),
    ref(Type.Int, flags)
  )
end

function PATHFIND.IS_VEHICLE_NODE_ID_VALID(vehicleNodeId)
  return native.invoke(
    Type.Bool, 3794, false,
    arg(Type.Int, vehicleNodeId)
  )
end

function PATHFIND.GET_VEHICLE_NODE_POSITION(nodeId, outPosition)
  native.invoke(
    Type.Void, 3795, true,
    arg(Type.Int, nodeId),
    ref(Type.Vector3, outPosition)
  )
end

function PATHFIND.GET_VEHICLE_NODE_IS_GPS_ALLOWED(nodeID)
  return native.invoke(
    Type.Bool, 3796, false,
    arg(Type.Int, nodeID)
  )
end

function PATHFIND.GET_VEHICLE_NODE_IS_SWITCHED_OFF(nodeID)
  return native.invoke(
    Type.Bool, 3797, false,
    arg(Type.Int, nodeID)
  )
end

function PATHFIND.GET_CLOSEST_ROAD(x, y, z, p3, p4, p5, p6, p7, p8, p9, p10)
  return native.invoke(
    Type.Bool, 3798, true,
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, z),
    arg(Type.Float, p3),
    arg(Type.Int, p4),
    ref(Type.Vector3, p5),
    ref(Type.Vector3, p6),
    ref(Type.Any, p7),
    ref(Type.Any, p8),
    ref(Type.Float, p9),
    arg(Type.Bool, p10)
  )
end

function PATHFIND.LOAD_ALL_PATH_NODES(set)
  return native.invoke(
    Type.Bool, 3799, false,
    arg(Type.Bool, set)
  )
end

function PATHFIND.SET_ALLOW_STREAM_PROLOGUE_NODES(toggle)
  native.invoke(
    Type.Void, 3800, false,
    arg(Type.Bool, toggle)
  )
end

function PATHFIND.SET_ALLOW_STREAM_HEIST_ISLAND_NODES(type)
  native.invoke(
    Type.Void, 3801, false,
    arg(Type.Int, type)
  )
end

function PATHFIND.ARE_NODES_LOADED_FOR_AREA(x1, y1, x2, y2)
  return native.invoke(
    Type.Bool, 3802, false,
    arg(Type.Float, x1),
    arg(Type.Float, y1),
    arg(Type.Float, x2),
    arg(Type.Float, y2)
  )
end

function PATHFIND.REQUEST_PATH_NODES_IN_AREA_THIS_FRAME(x1, y1, x2, y2)
  return native.invoke(
    Type.Bool, 3803, false,
    arg(Type.Float, x1),
    arg(Type.Float, y1),
    arg(Type.Float, x2),
    arg(Type.Float, y2)
  )
end

function PATHFIND.SET_ROADS_BACK_TO_ORIGINAL(p0, p1, p2, p3, p4, p5, p6)
  native.invoke(
    Type.Void, 3804, false,
    arg(Type.Float, p0),
    arg(Type.Float, p1),
    arg(Type.Float, p2),
    arg(Type.Float, p3),
    arg(Type.Float, p4),
    arg(Type.Float, p5),
    arg(Type.Any, p6)
  )
end

function PATHFIND.SET_ROADS_BACK_TO_ORIGINAL_IN_ANGLED_AREA(x1, y1, z1, x2, y2, z2, width, p7)
  native.invoke(
    Type.Void, 3805, false,
    arg(Type.Float, x1),
    arg(Type.Float, y1),
    arg(Type.Float, z1),
    arg(Type.Float, x2),
    arg(Type.Float, y2),
    arg(Type.Float, z2),
    arg(Type.Float, width),
    arg(Type.Any, p7)
  )
end

function PATHFIND.SET_AMBIENT_PED_RANGE_MULTIPLIER_THIS_FRAME(multiplier)
  native.invoke(
    Type.Void, 3806, false,
    arg(Type.Float, multiplier)
  )
end

function PATHFIND.ADJUST_AMBIENT_PED_SPAWN_DENSITIES_THIS_FRAME(p0, p1, p2, p3, p4, p5, p6)
  native.invoke(
    Type.Void, 3807, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1),
    arg(Type.Any, p2),
    arg(Type.Any, p3),
    arg(Type.Any, p4),
    arg(Type.Any, p5),
    arg(Type.Any, p6)
  )
end

function PATHFIND.SET_PED_PATHS_BACK_TO_ORIGINAL(x1, y1, z1, x2, y2, z2, p6)
  native.invoke(
    Type.Void, 3808, false,
    arg(Type.Float, x1),
    arg(Type.Float, y1),
    arg(Type.Float, z1),
    arg(Type.Float, x2),
    arg(Type.Float, y2),
    arg(Type.Float, z2),
    arg(Type.Any, p6)
  )
end

function PATHFIND.GET_RANDOM_VEHICLE_NODE(x, y, z, radius, p4, p5, p6, outPosition, nodeId)
  return native.invoke(
    Type.Bool, 3809, true,
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, z),
    arg(Type.Float, radius),
    arg(Type.Bool, p4),
    arg(Type.Bool, p5),
    arg(Type.Bool, p6),
    ref(Type.Vector3, outPosition),
    ref(Type.Int, nodeId)
  )
end

function PATHFIND.GET_SPAWN_COORDS_FOR_VEHICLE_NODE(nodeAddress, towardsCoorsX, towardsCoorsY, towardsCoorsZ, centrePoint, heading)
  return native.invoke(
    Type.Vector3, 3810, true,
    arg(Type.Int, nodeAddress),
    arg(Type.Float, towardsCoorsX),
    arg(Type.Float, towardsCoorsY),
    arg(Type.Float, towardsCoorsZ),
    ref(Type.Vector3, centrePoint),
    ref(Type.Float, heading)
  )
end

function PATHFIND.GET_STREET_NAME_AT_COORD(x, y, z, streetName, crossingRoad)
  native.invoke(
    Type.Void, 3811, false,
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, z),
    ref(Type.Hash, streetName),
    ref(Type.Hash, crossingRoad)
  )
end

function PATHFIND.GENERATE_DIRECTIONS_TO_COORD(x, y, z, p3, direction, p5, distToNxJunction)
  return native.invoke(
    Type.Int, 3812, false,
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, z),
    arg(Type.Bool, p3),
    ref(Type.Int, direction),
    ref(Type.Float, p5),
    ref(Type.Float, distToNxJunction)
  )
end

function PATHFIND.SET_IGNORE_NO_GPS_FLAG(toggle)
  native.invoke(
    Type.Void, 3813, false,
    arg(Type.Bool, toggle)
  )
end

function PATHFIND.SET_IGNORE_NO_GPS_FLAG_UNTIL_FIRST_NORMAL_NODE(toggle)
  native.invoke(
    Type.Void, 3814, false,
    arg(Type.Bool, toggle)
  )
end

function PATHFIND.SET_GPS_DISABLED_ZONE(x1, y1, z1, x2, y2, z3)
  native.invoke(
    Type.Void, 3815, false,
    arg(Type.Float, x1),
    arg(Type.Float, y1),
    arg(Type.Float, z1),
    arg(Type.Float, x2),
    arg(Type.Float, y2),
    arg(Type.Float, z3)
  )
end

function PATHFIND.GET_GPS_BLIP_ROUTE_LENGTH()
  return native.invoke(
    Type.Int, 3816, false
  )
end

function PATHFIND.GET_POS_ALONG_GPS_TYPE_ROUTE(result, p1, p2, p3)
  return native.invoke(
    Type.Bool, 3817, true,
    ref(Type.Vector3, result),
    arg(Type.Bool, p1),
    arg(Type.Float, p2),
    arg(Type.Int, p3)
  )
end

function PATHFIND.GET_GPS_BLIP_ROUTE_FOUND()
  return native.invoke(
    Type.Bool, 3818, false
  )
end

function PATHFIND.GET_ROAD_BOUNDARY_USING_HEADING(x, y, z, heading, outPosition)
  return native.invoke(
    Type.Bool, 3819, true,
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, z),
    arg(Type.Float, heading),
    ref(Type.Vector3, outPosition)
  )
end

function PATHFIND.GET_POSITION_BY_SIDE_OF_ROAD(x, y, z, p3, outPosition)
  return native.invoke(
    Type.Bool, 3820, true,
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, z),
    arg(Type.Int, p3),
    ref(Type.Vector3, outPosition)
  )
end

function PATHFIND.IS_POINT_ON_ROAD(x, y, z, vehicle)
  return native.invoke(
    Type.Bool, 3821, false,
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, z),
    arg(Type.Vehicle, vehicle)
  )
end

function PATHFIND.GET_NEXT_GPS_DISABLED_ZONE_INDEX()
  return native.invoke(
    Type.Int, 3822, false
  )
end

function PATHFIND.SET_GPS_DISABLED_ZONE_AT_INDEX(x1, y1, z1, x2, y2, z2, index)
  native.invoke(
    Type.Void, 3823, false,
    arg(Type.Float, x1),
    arg(Type.Float, y1),
    arg(Type.Float, z1),
    arg(Type.Float, x2),
    arg(Type.Float, y2),
    arg(Type.Float, z2),
    arg(Type.Int, index)
  )
end

function PATHFIND.CLEAR_GPS_DISABLED_ZONE_AT_INDEX(index)
  native.invoke(
    Type.Void, 3824, false,
    arg(Type.Int, index)
  )
end

function PATHFIND.ADD_NAVMESH_REQUIRED_REGION(x, y, radius)
  native.invoke(
    Type.Void, 3825, false,
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, radius)
  )
end

function PATHFIND.REMOVE_NAVMESH_REQUIRED_REGIONS()
  native.invoke(
    Type.Void, 3826, false
  )
end

function PATHFIND.IS_NAVMESH_REQUIRED_REGION_IN_USE()
  return native.invoke(
    Type.Bool, 3827, false
  )
end

function PATHFIND.DISABLE_NAVMESH_IN_AREA(x1, y1, z1, x2, y2, z2, toggle)
  native.invoke(
    Type.Void, 3828, false,
    arg(Type.Float, x1),
    arg(Type.Float, y1),
    arg(Type.Float, z1),
    arg(Type.Float, x2),
    arg(Type.Float, y2),
    arg(Type.Float, z2),
    arg(Type.Bool, toggle)
  )
end

function PATHFIND.ARE_ALL_NAVMESH_REGIONS_LOADED()
  return native.invoke(
    Type.Bool, 3829, false
  )
end

function PATHFIND.IS_NAVMESH_LOADED_IN_AREA(x1, y1, z1, x2, y2, z2)
  return native.invoke(
    Type.Bool, 3830, false,
    arg(Type.Float, x1),
    arg(Type.Float, y1),
    arg(Type.Float, z1),
    arg(Type.Float, x2),
    arg(Type.Float, y2),
    arg(Type.Float, z2)
  )
end

function PATHFIND.GET_NUM_NAVMESHES_EXISTING_IN_AREA(x1, y1, z1, x2, y2, z2)
  return native.invoke(
    Type.Int, 3831, false,
    arg(Type.Float, x1),
    arg(Type.Float, y1),
    arg(Type.Float, z1),
    arg(Type.Float, x2),
    arg(Type.Float, y2),
    arg(Type.Float, z2)
  )
end

function PATHFIND.ADD_NAVMESH_BLOCKING_OBJECT(p0, p1, p2, p3, p4, p5, p6, p7, p8)
  return native.invoke(
    Type.Int, 3832, false,
    arg(Type.Float, p0),
    arg(Type.Float, p1),
    arg(Type.Float, p2),
    arg(Type.Float, p3),
    arg(Type.Float, p4),
    arg(Type.Float, p5),
    arg(Type.Float, p6),
    arg(Type.Bool, p7),
    arg(Type.Any, p8)
  )
end

function PATHFIND.UPDATE_NAVMESH_BLOCKING_OBJECT(p0, p1, p2, p3, p4, p5, p6, p7, p8)
  native.invoke(
    Type.Void, 3833, false,
    arg(Type.Any, p0),
    arg(Type.Float, p1),
    arg(Type.Float, p2),
    arg(Type.Float, p3),
    arg(Type.Float, p4),
    arg(Type.Float, p5),
    arg(Type.Float, p6),
    arg(Type.Float, p7),
    arg(Type.Any, p8)
  )
end

function PATHFIND.REMOVE_NAVMESH_BLOCKING_OBJECT(p0)
  native.invoke(
    Type.Void, 3834, false,
    arg(Type.Any, p0)
  )
end

function PATHFIND.DOES_NAVMESH_BLOCKING_OBJECT_EXIST(p0)
  return native.invoke(
    Type.Bool, 3835, false,
    arg(Type.Any, p0)
  )
end

function PATHFIND.GET_APPROX_HEIGHT_FOR_POINT(x, y)
  return native.invoke(
    Type.Float, 3836, false,
    arg(Type.Float, x),
    arg(Type.Float, y)
  )
end

function PATHFIND.GET_APPROX_HEIGHT_FOR_AREA(x1, y1, x2, y2)
  return native.invoke(
    Type.Float, 3837, false,
    arg(Type.Float, x1),
    arg(Type.Float, y1),
    arg(Type.Float, x2),
    arg(Type.Float, y2)
  )
end

function PATHFIND.GET_APPROX_FLOOR_FOR_POINT(x, y)
  return native.invoke(
    Type.Float, 3838, false,
    arg(Type.Float, x),
    arg(Type.Float, y)
  )
end

function PATHFIND.GET_APPROX_FLOOR_FOR_AREA(x1, y1, x2, y2)
  return native.invoke(
    Type.Float, 3839, false,
    arg(Type.Float, x1),
    arg(Type.Float, y1),
    arg(Type.Float, x2),
    arg(Type.Float, y2)
  )
end

function PATHFIND.CALCULATE_TRAVEL_DISTANCE_BETWEEN_POINTS(x1, y1, z1, x2, y2, z2)
  return native.invoke(
    Type.Float, 3840, false,
    arg(Type.Float, x1),
    arg(Type.Float, y1),
    arg(Type.Float, z1),
    arg(Type.Float, x2),
    arg(Type.Float, y2),
    arg(Type.Float, z2)
  )
end


PED = {}

function PED.CREATE_PED(pedType, modelHash, x, y, z, heading, isNetwork, bScriptHostPed)
  return native.invoke(
    Type.Ped, 3841, false,
    arg(Type.Int, pedType),
    arg(Type.Hash, modelHash),
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, z),
    arg(Type.Float, heading),
    arg(Type.Bool, isNetwork),
    arg(Type.Bool, bScriptHostPed)
  )
end

function PED.DELETE_PED(ped)
  native.invoke(
    Type.Void, 3842, false,
    ref(Type.Ped, ped)
  )
end

function PED.CLONE_PED(ped, isNetwork, bScriptHostPed, copyHeadBlendFlag)
  return native.invoke(
    Type.Ped, 3843, false,
    arg(Type.Ped, ped),
    arg(Type.Bool, isNetwork),
    arg(Type.Bool, bScriptHostPed),
    arg(Type.Bool, copyHeadBlendFlag)
  )
end

function PED.CLONE_PED_ALT(ped, isNetwork, bScriptHostPed, copyHeadBlendFlag, p4)
  return native.invoke(
    Type.Ped, 3844, false,
    arg(Type.Ped, ped),
    arg(Type.Bool, isNetwork),
    arg(Type.Bool, bScriptHostPed),
    arg(Type.Bool, copyHeadBlendFlag),
    arg(Type.Bool, p4)
  )
end

function PED.CLONE_PED_TO_TARGET(ped, targetPed)
  native.invoke(
    Type.Void, 3845, false,
    arg(Type.Ped, ped),
    arg(Type.Ped, targetPed)
  )
end

function PED.CLONE_PED_TO_TARGET_ALT(ped, targetPed, p2)
  native.invoke(
    Type.Void, 3846, false,
    arg(Type.Ped, ped),
    arg(Type.Ped, targetPed),
    arg(Type.Bool, p2)
  )
end

function PED.IS_PED_IN_VEHICLE(ped, vehicle, atGetIn)
  return native.invoke(
    Type.Bool, 3847, false,
    arg(Type.Ped, ped),
    arg(Type.Vehicle, vehicle),
    arg(Type.Bool, atGetIn)
  )
end

function PED.IS_PED_IN_MODEL(ped, modelHash)
  return native.invoke(
    Type.Bool, 3848, false,
    arg(Type.Ped, ped),
    arg(Type.Hash, modelHash)
  )
end

function PED.IS_PED_IN_ANY_VEHICLE(ped, atGetIn)
  return native.invoke(
    Type.Bool, 3849, false,
    arg(Type.Ped, ped),
    arg(Type.Bool, atGetIn)
  )
end

function PED.IS_COP_PED_IN_AREA_3D(x1, y1, z1, x2, y2, z2)
  return native.invoke(
    Type.Bool, 3850, false,
    arg(Type.Float, x1),
    arg(Type.Float, y1),
    arg(Type.Float, z1),
    arg(Type.Float, x2),
    arg(Type.Float, y2),
    arg(Type.Float, z2)
  )
end

function PED.IS_PED_INJURED(ped)
  return native.invoke(
    Type.Bool, 3851, false,
    arg(Type.Ped, ped)
  )
end

function PED.IS_PED_HURT(ped)
  return native.invoke(
    Type.Bool, 3852, false,
    arg(Type.Ped, ped)
  )
end

function PED.IS_PED_FATALLY_INJURED(ped)
  return native.invoke(
    Type.Bool, 3853, false,
    arg(Type.Ped, ped)
  )
end

function PED.IS_PED_DEAD_OR_DYING(ped, p1)
  return native.invoke(
    Type.Bool, 3854, false,
    arg(Type.Ped, ped),
    arg(Type.Bool, p1)
  )
end

function PED.IS_CONVERSATION_PED_DEAD(ped)
  return native.invoke(
    Type.Bool, 3855, false,
    arg(Type.Ped, ped)
  )
end

function PED.IS_PED_AIMING_FROM_COVER(ped)
  return native.invoke(
    Type.Bool, 3856, false,
    arg(Type.Ped, ped)
  )
end

function PED.IS_PED_RELOADING(ped)
  return native.invoke(
    Type.Bool, 3857, false,
    arg(Type.Ped, ped)
  )
end

function PED.IS_PED_A_PLAYER(ped)
  return native.invoke(
    Type.Bool, 3858, false,
    arg(Type.Ped, ped)
  )
end

function PED.CREATE_PED_INSIDE_VEHICLE(vehicle, pedType, modelHash, seat, isNetwork, bScriptHostPed)
  return native.invoke(
    Type.Ped, 3859, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Int, pedType),
    arg(Type.Hash, modelHash),
    arg(Type.Int, seat),
    arg(Type.Bool, isNetwork),
    arg(Type.Bool, bScriptHostPed)
  )
end

function PED.SET_PED_DESIRED_HEADING(ped, heading)
  native.invoke(
    Type.Void, 3860, false,
    arg(Type.Ped, ped),
    arg(Type.Float, heading)
  )
end

function PED.FORCE_ALL_HEADING_VALUES_TO_ALIGN(ped)
  native.invoke(
    Type.Void, 3861, false,
    arg(Type.Ped, ped)
  )
end

function PED.IS_PED_FACING_PED(ped, otherPed, angle)
  return native.invoke(
    Type.Bool, 3862, false,
    arg(Type.Ped, ped),
    arg(Type.Ped, otherPed),
    arg(Type.Float, angle)
  )
end

function PED.IS_PED_IN_MELEE_COMBAT(ped)
  return native.invoke(
    Type.Bool, 3863, false,
    arg(Type.Ped, ped)
  )
end

function PED.IS_PED_STOPPED(ped)
  return native.invoke(
    Type.Bool, 3864, false,
    arg(Type.Ped, ped)
  )
end

function PED.IS_PED_SHOOTING_IN_AREA(ped, x1, y1, z1, x2, y2, z2, p7, p8)
  return native.invoke(
    Type.Bool, 3865, false,
    arg(Type.Ped, ped),
    arg(Type.Float, x1),
    arg(Type.Float, y1),
    arg(Type.Float, z1),
    arg(Type.Float, x2),
    arg(Type.Float, y2),
    arg(Type.Float, z2),
    arg(Type.Bool, p7),
    arg(Type.Bool, p8)
  )
end

function PED.IS_ANY_PED_SHOOTING_IN_AREA(x1, y1, z1, x2, y2, z2, p6, p7)
  return native.invoke(
    Type.Bool, 3866, false,
    arg(Type.Float, x1),
    arg(Type.Float, y1),
    arg(Type.Float, z1),
    arg(Type.Float, x2),
    arg(Type.Float, y2),
    arg(Type.Float, z2),
    arg(Type.Bool, p6),
    arg(Type.Bool, p7)
  )
end

function PED.IS_PED_SHOOTING(ped)
  return native.invoke(
    Type.Bool, 3867, false,
    arg(Type.Ped, ped)
  )
end

function PED.SET_PED_ACCURACY(ped, accuracy)
  native.invoke(
    Type.Void, 3868, false,
    arg(Type.Ped, ped),
    arg(Type.Int, accuracy)
  )
end

function PED.GET_PED_ACCURACY(ped)
  return native.invoke(
    Type.Int, 3869, false,
    arg(Type.Ped, ped)
  )
end

function PED.SET_AMBIENT_LAW_PED_ACCURACY_MODIFIER(multiplier)
  native.invoke(
    Type.Void, 3870, false,
    arg(Type.Float, multiplier)
  )
end

function PED.IS_PED_MODEL(ped, modelHash)
  return native.invoke(
    Type.Bool, 3871, false,
    arg(Type.Ped, ped),
    arg(Type.Hash, modelHash)
  )
end

function PED.EXPLODE_PED_HEAD(ped, weaponHash)
  native.invoke(
    Type.Void, 3872, false,
    arg(Type.Ped, ped),
    arg(Type.Hash, weaponHash)
  )
end

function PED.REMOVE_PED_ELEGANTLY(ped)
  native.invoke(
    Type.Void, 3873, false,
    ref(Type.Ped, ped)
  )
end

function PED.ADD_ARMOUR_TO_PED(ped, amount)
  native.invoke(
    Type.Void, 3874, false,
    arg(Type.Ped, ped),
    arg(Type.Int, amount)
  )
end

function PED.SET_PED_ARMOUR(ped, amount)
  native.invoke(
    Type.Void, 3875, false,
    arg(Type.Ped, ped),
    arg(Type.Int, amount)
  )
end

function PED.SET_PED_INTO_VEHICLE(ped, vehicle, seatIndex)
  native.invoke(
    Type.Void, 3876, false,
    arg(Type.Ped, ped),
    arg(Type.Vehicle, vehicle),
    arg(Type.Int, seatIndex)
  )
end

function PED.SET_PED_ALLOW_VEHICLES_OVERRIDE(ped, toggle)
  native.invoke(
    Type.Void, 3877, false,
    arg(Type.Ped, ped),
    arg(Type.Bool, toggle)
  )
end

function PED.CAN_CREATE_RANDOM_PED(p0)
  return native.invoke(
    Type.Bool, 3878, false,
    arg(Type.Bool, p0)
  )
end

function PED.CREATE_RANDOM_PED(posX, posY, posZ)
  return native.invoke(
    Type.Ped, 3879, false,
    arg(Type.Float, posX),
    arg(Type.Float, posY),
    arg(Type.Float, posZ)
  )
end

function PED.CREATE_RANDOM_PED_AS_DRIVER(vehicle, returnHandle)
  return native.invoke(
    Type.Ped, 3880, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Bool, returnHandle)
  )
end

function PED.CAN_CREATE_RANDOM_DRIVER()
  return native.invoke(
    Type.Bool, 3881, false
  )
end

function PED.CAN_CREATE_RANDOM_BIKE_RIDER()
  return native.invoke(
    Type.Bool, 3882, false
  )
end

function PED.SET_PED_MOVE_ANIMS_BLEND_OUT(ped)
  native.invoke(
    Type.Void, 3883, false,
    arg(Type.Ped, ped)
  )
end

function PED.SET_PED_CAN_BE_DRAGGED_OUT(ped, toggle)
  native.invoke(
    Type.Void, 3884, false,
    arg(Type.Ped, ped),
    arg(Type.Bool, toggle)
  )
end

function PED.SET_PED_ALLOW_HURT_COMBAT_FOR_ALL_MISSION_PEDS(toggle)
  native.invoke(
    Type.Void, 3885, false,
    arg(Type.Bool, toggle)
  )
end

function PED.IS_PED_MALE(ped)
  return native.invoke(
    Type.Bool, 3886, false,
    arg(Type.Ped, ped)
  )
end

function PED.IS_PED_HUMAN(ped)
  return native.invoke(
    Type.Bool, 3887, false,
    arg(Type.Ped, ped)
  )
end

function PED.GET_VEHICLE_PED_IS_IN(ped, includeEntering)
  return native.invoke(
    Type.Vehicle, 3888, false,
    arg(Type.Ped, ped),
    arg(Type.Bool, includeEntering)
  )
end

function PED.RESET_PED_LAST_VEHICLE(ped)
  native.invoke(
    Type.Void, 3889, false,
    arg(Type.Ped, ped)
  )
end

function PED.SET_PED_DENSITY_MULTIPLIER_THIS_FRAME(multiplier)
  native.invoke(
    Type.Void, 3890, false,
    arg(Type.Float, multiplier)
  )
end

function PED.SET_SCENARIO_PED_DENSITY_MULTIPLIER_THIS_FRAME(p0, p1)
  native.invoke(
    Type.Void, 3891, false,
    arg(Type.Float, p0),
    arg(Type.Float, p1)
  )
end

function PED.SUPPRESS_AMBIENT_PED_AGGRESSIVE_CLEANUP_THIS_FRAME()
  native.invoke(
    Type.Void, 3892, false
  )
end

function PED.SET_SCRIPTED_CONVERSION_COORD_THIS_FRAME(x, y, z)
  native.invoke(
    Type.Void, 3893, false,
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, z)
  )
end

function PED.SET_PED_NON_CREATION_AREA(x1, y1, z1, x2, y2, z2)
  native.invoke(
    Type.Void, 3894, false,
    arg(Type.Float, x1),
    arg(Type.Float, y1),
    arg(Type.Float, z1),
    arg(Type.Float, x2),
    arg(Type.Float, y2),
    arg(Type.Float, z2)
  )
end

function PED.CLEAR_PED_NON_CREATION_AREA()
  native.invoke(
    Type.Void, 3895, false
  )
end

function PED.INSTANTLY_FILL_PED_POPULATION()
  native.invoke(
    Type.Void, 3896, false
  )
end

function PED.IS_PED_ON_MOUNT(ped)
  return native.invoke(
    Type.Bool, 3897, false,
    arg(Type.Ped, ped)
  )
end

function PED.GET_MOUNT(ped)
  return native.invoke(
    Type.Ped, 3898, false,
    arg(Type.Ped, ped)
  )
end

function PED.IS_PED_ON_VEHICLE(ped)
  return native.invoke(
    Type.Bool, 3899, false,
    arg(Type.Ped, ped)
  )
end

function PED.IS_PED_ON_SPECIFIC_VEHICLE(ped, vehicle)
  return native.invoke(
    Type.Bool, 3900, false,
    arg(Type.Ped, ped),
    arg(Type.Vehicle, vehicle)
  )
end

function PED.SET_PED_MONEY(ped, amount)
  native.invoke(
    Type.Void, 3901, false,
    arg(Type.Ped, ped),
    arg(Type.Int, amount)
  )
end

function PED.GET_PED_MONEY(ped)
  return native.invoke(
    Type.Int, 3902, false,
    arg(Type.Ped, ped)
  )
end

function PED.SET_HEALTH_SNACKS_CARRIED_BY_ALL_NEW_PEDS(p0, p1)
  native.invoke(
    Type.Void, 3903, false,
    arg(Type.Float, p0),
    arg(Type.Any, p1)
  )
end

function PED.SET_AMBIENT_PEDS_DROP_MONEY(p0)
  native.invoke(
    Type.Void, 3904, false,
    arg(Type.Bool, p0)
  )
end

function PED.SET_BLOCKING_OF_NON_TEMPORARY_EVENTS_FOR_AMBIENT_PEDS_THIS_FRAME(p0)
  native.invoke(
    Type.Void, 3905, false,
    arg(Type.Bool, p0)
  )
end

function PED.SET_PED_SUFFERS_CRITICAL_HITS(ped, toggle)
  native.invoke(
    Type.Void, 3906, false,
    arg(Type.Ped, ped),
    arg(Type.Bool, toggle)
  )
end

function PED.SET_PED_UPPER_BODY_DAMAGE_ONLY(ped, toggle)
  native.invoke(
    Type.Void, 3907, false,
    arg(Type.Ped, ped),
    arg(Type.Bool, toggle)
  )
end

function PED.IS_PED_SITTING_IN_VEHICLE(ped, vehicle)
  return native.invoke(
    Type.Bool, 3908, false,
    arg(Type.Ped, ped),
    arg(Type.Vehicle, vehicle)
  )
end

function PED.IS_PED_SITTING_IN_ANY_VEHICLE(ped)
  return native.invoke(
    Type.Bool, 3909, false,
    arg(Type.Ped, ped)
  )
end

function PED.IS_PED_ON_FOOT(ped)
  return native.invoke(
    Type.Bool, 3910, false,
    arg(Type.Ped, ped)
  )
end

function PED.IS_PED_ON_ANY_BIKE(ped)
  return native.invoke(
    Type.Bool, 3911, false,
    arg(Type.Ped, ped)
  )
end

function PED.IS_PED_PLANTING_BOMB(ped)
  return native.invoke(
    Type.Bool, 3912, false,
    arg(Type.Ped, ped)
  )
end

function PED.GET_DEAD_PED_PICKUP_COORDS(ped, p1, p2)
  return native.invoke(
    Type.Vector3, 3913, false,
    arg(Type.Ped, ped),
    arg(Type.Float, p1),
    arg(Type.Float, p2)
  )
end

function PED.IS_PED_IN_ANY_BOAT(ped)
  return native.invoke(
    Type.Bool, 3914, false,
    arg(Type.Ped, ped)
  )
end

function PED.IS_PED_IN_ANY_SUB(ped)
  return native.invoke(
    Type.Bool, 3915, false,
    arg(Type.Ped, ped)
  )
end

function PED.IS_PED_IN_ANY_HELI(ped)
  return native.invoke(
    Type.Bool, 3916, false,
    arg(Type.Ped, ped)
  )
end

function PED.IS_PED_IN_ANY_PLANE(ped)
  return native.invoke(
    Type.Bool, 3917, false,
    arg(Type.Ped, ped)
  )
end

function PED.IS_PED_IN_FLYING_VEHICLE(ped)
  return native.invoke(
    Type.Bool, 3918, false,
    arg(Type.Ped, ped)
  )
end

function PED.SET_PED_DIES_IN_WATER(ped, toggle)
  native.invoke(
    Type.Void, 3919, false,
    arg(Type.Ped, ped),
    arg(Type.Bool, toggle)
  )
end

function PED.GET_PED_DIES_IN_WATER(ped)
  return native.invoke(
    Type.Bool, 3920, false,
    arg(Type.Ped, ped)
  )
end

function PED.SET_PED_DIES_IN_SINKING_VEHICLE(ped, toggle)
  native.invoke(
    Type.Void, 3921, false,
    arg(Type.Ped, ped),
    arg(Type.Bool, toggle)
  )
end

function PED.GET_PED_ARMOUR(ped)
  return native.invoke(
    Type.Int, 3922, false,
    arg(Type.Ped, ped)
  )
end

function PED.SET_PED_STAY_IN_VEHICLE_WHEN_JACKED(ped, toggle)
  native.invoke(
    Type.Void, 3923, false,
    arg(Type.Ped, ped),
    arg(Type.Bool, toggle)
  )
end

function PED.SET_PED_CAN_BE_SHOT_IN_VEHICLE(ped, toggle)
  native.invoke(
    Type.Void, 3924, false,
    arg(Type.Ped, ped),
    arg(Type.Bool, toggle)
  )
end

function PED.GET_PED_LAST_DAMAGE_BONE(ped, outBone)
  return native.invoke(
    Type.Bool, 3925, false,
    arg(Type.Ped, ped),
    ref(Type.Int, outBone)
  )
end

function PED.CLEAR_PED_LAST_DAMAGE_BONE(ped)
  native.invoke(
    Type.Void, 3926, false,
    arg(Type.Ped, ped)
  )
end

function PED.SET_AI_WEAPON_DAMAGE_MODIFIER(value)
  native.invoke(
    Type.Void, 3927, false,
    arg(Type.Float, value)
  )
end

function PED.RESET_AI_WEAPON_DAMAGE_MODIFIER()
  native.invoke(
    Type.Void, 3928, false
  )
end

function PED.SET_AI_MELEE_WEAPON_DAMAGE_MODIFIER(modifier)
  native.invoke(
    Type.Void, 3929, false,
    arg(Type.Float, modifier)
  )
end

function PED.RESET_AI_MELEE_WEAPON_DAMAGE_MODIFIER()
  native.invoke(
    Type.Void, 3930, false
  )
end

function PED.SET_TREAT_AS_AMBIENT_PED_FOR_DRIVER_LOCKON(ped, p1)
  native.invoke(
    Type.Void, 3931, false,
    arg(Type.Ped, ped),
    arg(Type.Bool, p1)
  )
end

function PED.SET_PED_CAN_BE_TARGETTED(ped, toggle)
  native.invoke(
    Type.Void, 3932, false,
    arg(Type.Ped, ped),
    arg(Type.Bool, toggle)
  )
end

function PED.SET_PED_CAN_BE_TARGETTED_BY_TEAM(ped, team, toggle)
  native.invoke(
    Type.Void, 3933, false,
    arg(Type.Ped, ped),
    arg(Type.Int, team),
    arg(Type.Bool, toggle)
  )
end

function PED.SET_PED_CAN_BE_TARGETTED_BY_PLAYER(ped, player, toggle)
  native.invoke(
    Type.Void, 3934, false,
    arg(Type.Ped, ped),
    arg(Type.Player, player),
    arg(Type.Bool, toggle)
  )
end

function PED.SET_ALLOW_LOCKON_TO_PED_IF_FRIENDLY(ped, toggle)
  native.invoke(
    Type.Void, 3935, false,
    arg(Type.Ped, ped),
    arg(Type.Bool, toggle)
  )
end

function PED.SET_USE_CAMERA_HEADING_FOR_DESIRED_DIRECTION_LOCK_ON_TEST(ped, toggle)
  native.invoke(
    Type.Void, 3936, false,
    arg(Type.Ped, ped),
    arg(Type.Bool, toggle)
  )
end

function PED.IS_PED_IN_ANY_POLICE_VEHICLE(ped)
  return native.invoke(
    Type.Bool, 3937, false,
    arg(Type.Ped, ped)
  )
end

function PED.FORCE_PED_TO_OPEN_PARACHUTE(ped)
  native.invoke(
    Type.Void, 3938, false,
    arg(Type.Ped, ped)
  )
end

function PED.IS_PED_IN_PARACHUTE_FREE_FALL(ped)
  return native.invoke(
    Type.Bool, 3939, false,
    arg(Type.Ped, ped)
  )
end

function PED.IS_PED_FALLING(ped)
  return native.invoke(
    Type.Bool, 3940, false,
    arg(Type.Ped, ped)
  )
end

function PED.IS_PED_JUMPING(ped)
  return native.invoke(
    Type.Bool, 3941, false,
    arg(Type.Ped, ped)
  )
end

function PED.IS_PED_LANDING(p0)
  return native.invoke(
    Type.Bool, 3942, false,
    arg(Type.Any, p0)
  )
end

function PED.IS_PED_DOING_A_BEAST_JUMP(p0)
  return native.invoke(
    Type.Bool, 3943, false,
    arg(Type.Any, p0)
  )
end

function PED.IS_PED_CLIMBING(ped)
  return native.invoke(
    Type.Bool, 3944, false,
    arg(Type.Ped, ped)
  )
end

function PED.IS_PED_VAULTING(ped)
  return native.invoke(
    Type.Bool, 3945, false,
    arg(Type.Ped, ped)
  )
end

function PED.IS_PED_DIVING(ped)
  return native.invoke(
    Type.Bool, 3946, false,
    arg(Type.Ped, ped)
  )
end

function PED.IS_PED_JUMPING_OUT_OF_VEHICLE(ped)
  return native.invoke(
    Type.Bool, 3947, false,
    arg(Type.Ped, ped)
  )
end

function PED.IS_PED_OPENING_DOOR(ped)
  return native.invoke(
    Type.Bool, 3948, false,
    arg(Type.Ped, ped)
  )
end

function PED.GET_PED_PARACHUTE_STATE(ped)
  return native.invoke(
    Type.Int, 3949, false,
    arg(Type.Ped, ped)
  )
end

function PED.GET_PED_PARACHUTE_LANDING_TYPE(ped)
  return native.invoke(
    Type.Int, 3950, false,
    arg(Type.Ped, ped)
  )
end

function PED.SET_PED_PARACHUTE_TINT_INDEX(ped, tintIndex)
  native.invoke(
    Type.Void, 3951, false,
    arg(Type.Ped, ped),
    arg(Type.Int, tintIndex)
  )
end

function PED.GET_PED_PARACHUTE_TINT_INDEX(ped, outTintIndex)
  native.invoke(
    Type.Void, 3952, false,
    arg(Type.Ped, ped),
    ref(Type.Int, outTintIndex)
  )
end

function PED.SET_PED_RESERVE_PARACHUTE_TINT_INDEX(ped, p1)
  native.invoke(
    Type.Void, 3953, false,
    arg(Type.Ped, ped),
    arg(Type.Any, p1)
  )
end

function PED.CREATE_PARACHUTE_BAG_OBJECT(ped, p1, p2)
  return native.invoke(
    Type.Object, 3954, false,
    arg(Type.Ped, ped),
    arg(Type.Bool, p1),
    arg(Type.Bool, p2)
  )
end

function PED.SET_PED_DUCKING(ped, toggle)
  native.invoke(
    Type.Void, 3955, false,
    arg(Type.Ped, ped),
    arg(Type.Bool, toggle)
  )
end

function PED.IS_PED_DUCKING(ped)
  return native.invoke(
    Type.Bool, 3956, false,
    arg(Type.Ped, ped)
  )
end

function PED.IS_PED_IN_ANY_TAXI(ped)
  return native.invoke(
    Type.Bool, 3957, false,
    arg(Type.Ped, ped)
  )
end

function PED.SET_PED_ID_RANGE(ped, value)
  native.invoke(
    Type.Void, 3958, false,
    arg(Type.Ped, ped),
    arg(Type.Float, value)
  )
end

function PED.SET_PED_HIGHLY_PERCEPTIVE(ped, toggle)
  native.invoke(
    Type.Void, 3959, false,
    arg(Type.Ped, ped),
    arg(Type.Bool, toggle)
  )
end

function PED.SET_COP_PERCEPTION_OVERRIDES(seeingRange, seeingRangePeripheral, hearingRange, visualFieldMinAzimuthAngle, visualFieldMaxAzimuthAngle, fieldOfGazeMaxAngle, p6)
  native.invoke(
    Type.Void, 3960, false,
    arg(Type.Float, seeingRange),
    arg(Type.Float, seeingRangePeripheral),
    arg(Type.Float, hearingRange),
    arg(Type.Float, visualFieldMinAzimuthAngle),
    arg(Type.Float, visualFieldMaxAzimuthAngle),
    arg(Type.Float, fieldOfGazeMaxAngle),
    arg(Type.Float, p6)
  )
end

function PED.SET_PED_INJURED_ON_GROUND_BEHAVIOUR(ped, p1)
  native.invoke(
    Type.Void, 3961, false,
    arg(Type.Ped, ped),
    arg(Type.Float, p1)
  )
end

function PED.DISABLE_PED_INJURED_ON_GROUND_BEHAVIOUR(ped)
  native.invoke(
    Type.Void, 3962, false,
    arg(Type.Ped, ped)
  )
end

function PED.SET_PED_SEEING_RANGE(ped, value)
  native.invoke(
    Type.Void, 3963, false,
    arg(Type.Ped, ped),
    arg(Type.Float, value)
  )
end

function PED.SET_PED_HEARING_RANGE(ped, value)
  native.invoke(
    Type.Void, 3964, false,
    arg(Type.Ped, ped),
    arg(Type.Float, value)
  )
end

function PED.SET_PED_VISUAL_FIELD_MIN_ANGLE(ped, value)
  native.invoke(
    Type.Void, 3965, false,
    arg(Type.Ped, ped),
    arg(Type.Float, value)
  )
end

function PED.SET_PED_VISUAL_FIELD_MAX_ANGLE(ped, value)
  native.invoke(
    Type.Void, 3966, false,
    arg(Type.Ped, ped),
    arg(Type.Float, value)
  )
end

function PED.SET_PED_VISUAL_FIELD_MIN_ELEVATION_ANGLE(ped, angle)
  native.invoke(
    Type.Void, 3967, false,
    arg(Type.Ped, ped),
    arg(Type.Float, angle)
  )
end

function PED.SET_PED_VISUAL_FIELD_MAX_ELEVATION_ANGLE(ped, angle)
  native.invoke(
    Type.Void, 3968, false,
    arg(Type.Ped, ped),
    arg(Type.Float, angle)
  )
end

function PED.SET_PED_VISUAL_FIELD_PERIPHERAL_RANGE(ped, range)
  native.invoke(
    Type.Void, 3969, false,
    arg(Type.Ped, ped),
    arg(Type.Float, range)
  )
end

function PED.SET_PED_VISUAL_FIELD_CENTER_ANGLE(ped, angle)
  native.invoke(
    Type.Void, 3970, false,
    arg(Type.Ped, ped),
    arg(Type.Float, angle)
  )
end

function PED.GET_PED_VISUAL_FIELD_CENTER_ANGLE(ped)
  return native.invoke(
    Type.Float, 3971, false,
    arg(Type.Ped, ped)
  )
end

function PED.SET_PED_STEALTH_MOVEMENT(ped, p1, action)
  native.invoke(
    Type.Void, 3972, false,
    arg(Type.Ped, ped),
    arg(Type.Bool, p1),
    arg(Type.String, action)
  )
end

function PED.GET_PED_STEALTH_MOVEMENT(ped)
  return native.invoke(
    Type.Bool, 3973, false,
    arg(Type.Ped, ped)
  )
end

function PED.CREATE_GROUP(unused)
  return native.invoke(
    Type.Int, 3974, false,
    arg(Type.Int, unused)
  )
end

function PED.SET_PED_AS_GROUP_LEADER(ped, groupId)
  native.invoke(
    Type.Void, 3975, false,
    arg(Type.Ped, ped),
    arg(Type.Int, groupId)
  )
end

function PED.SET_PED_AS_GROUP_MEMBER(ped, groupId)
  native.invoke(
    Type.Void, 3976, false,
    arg(Type.Ped, ped),
    arg(Type.Int, groupId)
  )
end

function PED.SET_PED_CAN_TELEPORT_TO_GROUP_LEADER(pedHandle, groupHandle, toggle)
  native.invoke(
    Type.Void, 3977, false,
    arg(Type.Ped, pedHandle),
    arg(Type.Int, groupHandle),
    arg(Type.Bool, toggle)
  )
end

function PED.REMOVE_GROUP(groupId)
  native.invoke(
    Type.Void, 3978, false,
    arg(Type.Int, groupId)
  )
end

function PED.REMOVE_PED_FROM_GROUP(ped)
  native.invoke(
    Type.Void, 3979, false,
    arg(Type.Ped, ped)
  )
end

function PED.IS_PED_GROUP_MEMBER(ped, groupId)
  return native.invoke(
    Type.Bool, 3980, false,
    arg(Type.Ped, ped),
    arg(Type.Int, groupId)
  )
end

function PED.IS_PED_HANGING_ON_TO_VEHICLE(ped)
  return native.invoke(
    Type.Bool, 3981, false,
    arg(Type.Ped, ped)
  )
end

function PED.SET_GROUP_SEPARATION_RANGE(groupHandle, separationRange)
  native.invoke(
    Type.Void, 3982, false,
    arg(Type.Int, groupHandle),
    arg(Type.Float, separationRange)
  )
end

function PED.SET_PED_MIN_GROUND_TIME_FOR_STUNGUN(ped, ms)
  native.invoke(
    Type.Void, 3983, false,
    arg(Type.Ped, ped),
    arg(Type.Int, ms)
  )
end

function PED.IS_PED_PRONE(ped)
  return native.invoke(
    Type.Bool, 3984, false,
    arg(Type.Ped, ped)
  )
end

function PED.IS_PED_IN_COMBAT(ped, target)
  return native.invoke(
    Type.Bool, 3985, false,
    arg(Type.Ped, ped),
    arg(Type.Ped, target)
  )
end

function PED.GET_PED_TARGET_FROM_COMBAT_PED(ped, p1)
  return native.invoke(
    Type.Entity, 3986, false,
    arg(Type.Ped, ped),
    arg(Type.Any, p1)
  )
end

function PED.CAN_PED_IN_COMBAT_SEE_TARGET(ped, target)
  return native.invoke(
    Type.Bool, 3987, false,
    arg(Type.Ped, ped),
    arg(Type.Ped, target)
  )
end

function PED.IS_PED_DOING_DRIVEBY(ped)
  return native.invoke(
    Type.Bool, 3988, false,
    arg(Type.Ped, ped)
  )
end

function PED.IS_PED_JACKING(ped)
  return native.invoke(
    Type.Bool, 3989, false,
    arg(Type.Ped, ped)
  )
end

function PED.IS_PED_BEING_JACKED(ped)
  return native.invoke(
    Type.Bool, 3990, false,
    arg(Type.Ped, ped)
  )
end

function PED.IS_PED_BEING_STUNNED(ped, p1)
  return native.invoke(
    Type.Bool, 3991, false,
    arg(Type.Ped, ped),
    arg(Type.Int, p1)
  )
end

function PED.GET_PEDS_JACKER(ped)
  return native.invoke(
    Type.Ped, 3992, false,
    arg(Type.Ped, ped)
  )
end

function PED.GET_JACK_TARGET(ped)
  return native.invoke(
    Type.Ped, 3993, false,
    arg(Type.Ped, ped)
  )
end

function PED.IS_PED_FLEEING(ped)
  return native.invoke(
    Type.Bool, 3994, false,
    arg(Type.Ped, ped)
  )
end

function PED.IS_PED_IN_COVER(ped, exceptUseWeapon)
  return native.invoke(
    Type.Bool, 3995, false,
    arg(Type.Ped, ped),
    arg(Type.Bool, exceptUseWeapon)
  )
end

function PED.IS_PED_IN_COVER_FACING_LEFT(ped)
  return native.invoke(
    Type.Bool, 3996, false,
    arg(Type.Ped, ped)
  )
end

function PED.IS_PED_IN_HIGH_COVER(ped)
  return native.invoke(
    Type.Bool, 3997, false,
    arg(Type.Ped, ped)
  )
end

function PED.IS_PED_GOING_INTO_COVER(ped)
  return native.invoke(
    Type.Bool, 3998, false,
    arg(Type.Ped, ped)
  )
end

function PED.SET_PED_PINNED_DOWN(ped, pinned, i)
  return native.invoke(
    Type.Bool, 3999, false,
    arg(Type.Ped, ped),
    arg(Type.Bool, pinned),
    arg(Type.Int, i)
  )
end

function PED._HAS_PED_CLEAR_LOS_TO_ENTITY(ped, entity, x, y, z, p5, p6, p7)
  return native.invoke(
    Type.Bool, 4000, false,
    arg(Type.Ped, ped),
    arg(Type.Entity, entity),
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, z),
    arg(Type.Int, p5),
    arg(Type.Bool, p6),
    arg(Type.Bool, p7)
  )
end

function PED.GET_SEAT_PED_IS_TRYING_TO_ENTER(ped)
  return native.invoke(
    Type.Int, 4001, false,
    arg(Type.Ped, ped)
  )
end

function PED.GET_VEHICLE_PED_IS_TRYING_TO_ENTER(ped)
  return native.invoke(
    Type.Vehicle, 4002, false,
    arg(Type.Ped, ped)
  )
end

function PED.GET_PED_SOURCE_OF_DEATH(ped)
  return native.invoke(
    Type.Entity, 4003, false,
    arg(Type.Ped, ped)
  )
end

function PED.GET_PED_CAUSE_OF_DEATH(ped)
  return native.invoke(
    Type.Hash, 4004, false,
    arg(Type.Ped, ped)
  )
end

function PED.GET_PED_TIME_OF_DEATH(ped)
  return native.invoke(
    Type.Int, 4005, false,
    arg(Type.Ped, ped)
  )
end

function PED.COUNT_PEDS_IN_COMBAT_WITH_TARGET(ped)
  return native.invoke(
    Type.Int, 4006, false,
    arg(Type.Ped, ped)
  )
end

function PED.COUNT_PEDS_IN_COMBAT_WITH_TARGET_WITHIN_RADIUS(ped, x, y, z, radius)
  return native.invoke(
    Type.Int, 4007, false,
    arg(Type.Ped, ped),
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, z),
    arg(Type.Float, radius)
  )
end

function PED.SET_PED_RELATIONSHIP_GROUP_DEFAULT_HASH(ped, hash)
  native.invoke(
    Type.Void, 4008, false,
    arg(Type.Ped, ped),
    arg(Type.Hash, hash)
  )
end

function PED.SET_PED_RELATIONSHIP_GROUP_HASH(ped, hash)
  native.invoke(
    Type.Void, 4009, false,
    arg(Type.Ped, ped),
    arg(Type.Hash, hash)
  )
end

function PED.SET_RELATIONSHIP_BETWEEN_GROUPS(relationship, group1, group2)
  native.invoke(
    Type.Void, 4010, false,
    arg(Type.Int, relationship),
    arg(Type.Hash, group1),
    arg(Type.Hash, group2)
  )
end

function PED.CLEAR_RELATIONSHIP_BETWEEN_GROUPS(relationship, group1, group2)
  native.invoke(
    Type.Void, 4011, false,
    arg(Type.Int, relationship),
    arg(Type.Hash, group1),
    arg(Type.Hash, group2)
  )
end

function PED.ADD_RELATIONSHIP_GROUP(name, groupHash)
  return native.invoke(
    Type.Bool, 4012, false,
    arg(Type.String, name),
    ref(Type.Hash, groupHash)
  )
end

function PED.REMOVE_RELATIONSHIP_GROUP(groupHash)
  native.invoke(
    Type.Void, 4013, false,
    arg(Type.Hash, groupHash)
  )
end

function PED.DOES_RELATIONSHIP_GROUP_EXIST(groupHash)
  return native.invoke(
    Type.Bool, 4014, false,
    arg(Type.Hash, groupHash)
  )
end

function PED.GET_RELATIONSHIP_BETWEEN_PEDS(ped1, ped2)
  return native.invoke(
    Type.Int, 4015, false,
    arg(Type.Ped, ped1),
    arg(Type.Ped, ped2)
  )
end

function PED.GET_PED_RELATIONSHIP_GROUP_DEFAULT_HASH(ped)
  return native.invoke(
    Type.Hash, 4016, false,
    arg(Type.Ped, ped)
  )
end

function PED.GET_PED_RELATIONSHIP_GROUP_HASH(ped)
  return native.invoke(
    Type.Hash, 4017, false,
    arg(Type.Ped, ped)
  )
end

function PED.GET_RELATIONSHIP_BETWEEN_GROUPS(group1, group2)
  return native.invoke(
    Type.Int, 4018, false,
    arg(Type.Hash, group1),
    arg(Type.Hash, group2)
  )
end

function PED.SET_RELATIONSHIP_GROUP_AFFECTS_WANTED_LEVEL(group, p1)
  native.invoke(
    Type.Void, 4019, false,
    arg(Type.Hash, group),
    arg(Type.Bool, p1)
  )
end

function PED.TELL_GROUP_PEDS_IN_AREA_TO_ATTACK(ped, p1, p2, hash, p4, p5)
  native.invoke(
    Type.Void, 4020, false,
    arg(Type.Ped, ped),
    arg(Type.Any, p1),
    arg(Type.Float, p2),
    arg(Type.Hash, hash),
    arg(Type.Any, p4),
    arg(Type.Any, p5)
  )
end

function PED.SET_PED_CAN_BE_TARGETED_WITHOUT_LOS(ped, toggle)
  native.invoke(
    Type.Void, 4021, false,
    arg(Type.Ped, ped),
    arg(Type.Bool, toggle)
  )
end

function PED.SET_PED_TO_INFORM_RESPECTED_FRIENDS(ped, radius, maxFriends)
  native.invoke(
    Type.Void, 4022, false,
    arg(Type.Ped, ped),
    arg(Type.Float, radius),
    arg(Type.Int, maxFriends)
  )
end

function PED.IS_PED_RESPONDING_TO_EVENT(ped, event)
  return native.invoke(
    Type.Bool, 4023, false,
    arg(Type.Ped, ped),
    arg(Type.Any, event)
  )
end

function PED.GET_POS_FROM_FIRED_EVENT(ped, eventType, outData)
  return native.invoke(
    Type.Bool, 4024, false,
    arg(Type.Ped, ped),
    arg(Type.Int, eventType),
    ref(Type.Any, outData)
  )
end

function PED.SET_PED_FIRING_PATTERN(ped, patternHash)
  native.invoke(
    Type.Void, 4025, false,
    arg(Type.Ped, ped),
    arg(Type.Hash, patternHash)
  )
end

function PED.SET_PED_SHOOT_RATE(ped, shootRate)
  native.invoke(
    Type.Void, 4026, false,
    arg(Type.Ped, ped),
    arg(Type.Int, shootRate)
  )
end

function PED.SET_COMBAT_FLOAT(ped, combatType, p2)
  native.invoke(
    Type.Void, 4027, false,
    arg(Type.Ped, ped),
    arg(Type.Int, combatType),
    arg(Type.Float, p2)
  )
end

function PED.GET_COMBAT_FLOAT(ped, p1)
  return native.invoke(
    Type.Float, 4028, false,
    arg(Type.Ped, ped),
    arg(Type.Int, p1)
  )
end

function PED.GET_GROUP_SIZE(groupID, p1, sizeInMembers)
  native.invoke(
    Type.Void, 4029, false,
    arg(Type.Int, groupID),
    ref(Type.Any, p1),
    ref(Type.Int, sizeInMembers)
  )
end

function PED.DOES_GROUP_EXIST(groupId)
  return native.invoke(
    Type.Bool, 4030, false,
    arg(Type.Int, groupId)
  )
end

function PED.GET_PED_GROUP_INDEX(ped)
  return native.invoke(
    Type.Int, 4031, false,
    arg(Type.Ped, ped)
  )
end

function PED.IS_PED_IN_GROUP(ped)
  return native.invoke(
    Type.Bool, 4032, false,
    arg(Type.Ped, ped)
  )
end

function PED.GET_PLAYER_PED_IS_FOLLOWING(ped)
  return native.invoke(
    Type.Player, 4033, false,
    arg(Type.Ped, ped)
  )
end

function PED.SET_GROUP_FORMATION(groupId, formationType)
  native.invoke(
    Type.Void, 4034, false,
    arg(Type.Int, groupId),
    arg(Type.Int, formationType)
  )
end

function PED.SET_GROUP_FORMATION_SPACING(groupId, x, y, z)
  native.invoke(
    Type.Void, 4035, false,
    arg(Type.Int, groupId),
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, z)
  )
end

function PED.RESET_GROUP_FORMATION_DEFAULT_SPACING(groupHandle)
  native.invoke(
    Type.Void, 4036, false,
    arg(Type.Int, groupHandle)
  )
end

function PED.GET_VEHICLE_PED_IS_USING(ped)
  return native.invoke(
    Type.Vehicle, 4037, false,
    arg(Type.Ped, ped)
  )
end

function PED.GET_VEHICLE_PED_IS_ENTERING(ped)
  return native.invoke(
    Type.Vehicle, 4038, false,
    arg(Type.Ped, ped)
  )
end

function PED.SET_PED_GRAVITY(ped, toggle)
  native.invoke(
    Type.Void, 4039, false,
    arg(Type.Ped, ped),
    arg(Type.Bool, toggle)
  )
end

function PED.APPLY_DAMAGE_TO_PED(ped, damageAmount, p2, p3, weaponType)
  native.invoke(
    Type.Void, 4040, false,
    arg(Type.Ped, ped),
    arg(Type.Int, damageAmount),
    arg(Type.Bool, p2),
    arg(Type.Any, p3),
    arg(Type.Hash, weaponType)
  )
end

function PED.GET_TIME_PED_DAMAGED_BY_WEAPON(ped, weaponHash)
  return native.invoke(
    Type.Int, 4041, false,
    arg(Type.Ped, ped),
    arg(Type.Hash, weaponHash)
  )
end

function PED.SET_PED_ALLOWED_TO_DUCK(ped, toggle)
  native.invoke(
    Type.Void, 4042, false,
    arg(Type.Ped, ped),
    arg(Type.Bool, toggle)
  )
end

function PED.SET_PED_NEVER_LEAVES_GROUP(ped, toggle)
  native.invoke(
    Type.Void, 4043, false,
    arg(Type.Ped, ped),
    arg(Type.Bool, toggle)
  )
end

function PED.GET_PED_TYPE(ped)
  return native.invoke(
    Type.Int, 4044, false,
    arg(Type.Ped, ped)
  )
end

function PED.SET_PED_AS_COP(ped, toggle)
  native.invoke(
    Type.Void, 4045, false,
    arg(Type.Ped, ped),
    arg(Type.Bool, toggle)
  )
end

function PED.SET_PED_HEALTH_PENDING_LAST_DAMAGE_EVENT_OVERRIDE_FLAG(toggle)
  native.invoke(
    Type.Void, 4046, false,
    arg(Type.Bool, toggle)
  )
end

function PED.SET_PED_MAX_HEALTH(ped, value)
  native.invoke(
    Type.Void, 4047, false,
    arg(Type.Ped, ped),
    arg(Type.Int, value)
  )
end

function PED.GET_PED_MAX_HEALTH(ped)
  return native.invoke(
    Type.Int, 4048, false,
    arg(Type.Ped, ped)
  )
end

function PED.SET_PED_MAX_TIME_IN_WATER(ped, value)
  native.invoke(
    Type.Void, 4049, false,
    arg(Type.Ped, ped),
    arg(Type.Float, value)
  )
end

function PED.SET_PED_MAX_TIME_UNDERWATER(ped, value)
  native.invoke(
    Type.Void, 4050, false,
    arg(Type.Ped, ped),
    arg(Type.Float, value)
  )
end

function PED.SET_CORPSE_RAGDOLL_FRICTION(ped, p1)
  native.invoke(
    Type.Void, 4051, false,
    arg(Type.Ped, ped),
    arg(Type.Float, p1)
  )
end

function PED.SET_PED_VEHICLE_FORCED_SEAT_USAGE(ped, vehicle, seatIndex, flags, p4)
  native.invoke(
    Type.Void, 4052, false,
    arg(Type.Ped, ped),
    arg(Type.Vehicle, vehicle),
    arg(Type.Int, seatIndex),
    arg(Type.Int, flags),
    arg(Type.Any, p4)
  )
end

function PED.CLEAR_ALL_PED_VEHICLE_FORCED_SEAT_USAGE(ped)
  native.invoke(
    Type.Void, 4053, false,
    arg(Type.Ped, ped)
  )
end

function PED.SET_PED_CAN_BE_KNOCKED_OFF_BIKE(p0, p1)
  native.invoke(
    Type.Void, 4054, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1)
  )
end

function PED.SET_PED_CAN_BE_KNOCKED_OFF_VEHICLE(ped, state)
  native.invoke(
    Type.Void, 4055, false,
    arg(Type.Ped, ped),
    arg(Type.Int, state)
  )
end

function PED.CAN_KNOCK_PED_OFF_VEHICLE(ped)
  return native.invoke(
    Type.Bool, 4056, false,
    arg(Type.Ped, ped)
  )
end

function PED.KNOCK_PED_OFF_VEHICLE(ped)
  native.invoke(
    Type.Void, 4057, false,
    arg(Type.Ped, ped)
  )
end

function PED.SET_PED_COORDS_NO_GANG(ped, posX, posY, posZ)
  native.invoke(
    Type.Void, 4058, false,
    arg(Type.Ped, ped),
    arg(Type.Float, posX),
    arg(Type.Float, posY),
    arg(Type.Float, posZ)
  )
end

function PED.GET_PED_AS_GROUP_MEMBER(groupID, memberNumber)
  return native.invoke(
    Type.Ped, 4059, false,
    arg(Type.Int, groupID),
    arg(Type.Int, memberNumber)
  )
end

function PED.GET_PED_AS_GROUP_LEADER(groupID)
  return native.invoke(
    Type.Ped, 4060, false,
    arg(Type.Int, groupID)
  )
end

function PED.SET_PED_KEEP_TASK(ped, toggle)
  native.invoke(
    Type.Void, 4061, false,
    arg(Type.Ped, ped),
    arg(Type.Bool, toggle)
  )
end

function PED.SET_PED_ALLOW_MINOR_REACTIONS_AS_MISSION_PED(ped, toggle)
  native.invoke(
    Type.Void, 4062, false,
    arg(Type.Ped, ped),
    arg(Type.Bool, toggle)
  )
end

function PED.IS_PED_SWIMMING(ped)
  return native.invoke(
    Type.Bool, 4063, false,
    arg(Type.Ped, ped)
  )
end

function PED.IS_PED_SWIMMING_UNDER_WATER(ped)
  return native.invoke(
    Type.Bool, 4064, false,
    arg(Type.Ped, ped)
  )
end

function PED.SET_PED_COORDS_KEEP_VEHICLE(ped, posX, posY, posZ)
  native.invoke(
    Type.Void, 4065, false,
    arg(Type.Ped, ped),
    arg(Type.Float, posX),
    arg(Type.Float, posY),
    arg(Type.Float, posZ)
  )
end

function PED.SET_PED_DIES_IN_VEHICLE(ped, toggle)
  native.invoke(
    Type.Void, 4066, false,
    arg(Type.Ped, ped),
    arg(Type.Bool, toggle)
  )
end

function PED.SET_CREATE_RANDOM_COPS(toggle)
  native.invoke(
    Type.Void, 4067, false,
    arg(Type.Bool, toggle)
  )
end

function PED.SET_CREATE_RANDOM_COPS_NOT_ON_SCENARIOS(toggle)
  native.invoke(
    Type.Void, 4068, false,
    arg(Type.Bool, toggle)
  )
end

function PED.SET_CREATE_RANDOM_COPS_ON_SCENARIOS(toggle)
  native.invoke(
    Type.Void, 4069, false,
    arg(Type.Bool, toggle)
  )
end

function PED.CAN_CREATE_RANDOM_COPS()
  return native.invoke(
    Type.Bool, 4070, false
  )
end

function PED.SET_PED_AS_ENEMY(ped, toggle)
  native.invoke(
    Type.Void, 4071, false,
    arg(Type.Ped, ped),
    arg(Type.Bool, toggle)
  )
end

function PED.SET_PED_CAN_SMASH_GLASS(ped, p1, p2)
  native.invoke(
    Type.Void, 4072, false,
    arg(Type.Ped, ped),
    arg(Type.Bool, p1),
    arg(Type.Bool, p2)
  )
end

function PED.IS_PED_IN_ANY_TRAIN(ped)
  return native.invoke(
    Type.Bool, 4073, false,
    arg(Type.Ped, ped)
  )
end

function PED.IS_PED_GETTING_INTO_A_VEHICLE(ped)
  return native.invoke(
    Type.Bool, 4074, false,
    arg(Type.Ped, ped)
  )
end

function PED.IS_PED_TRYING_TO_ENTER_A_LOCKED_VEHICLE(ped)
  return native.invoke(
    Type.Bool, 4075, false,
    arg(Type.Ped, ped)
  )
end

function PED.SET_ENABLE_HANDCUFFS(ped, toggle)
  native.invoke(
    Type.Void, 4076, false,
    arg(Type.Ped, ped),
    arg(Type.Bool, toggle)
  )
end

function PED.SET_ENABLE_BOUND_ANKLES(ped, toggle)
  native.invoke(
    Type.Void, 4077, false,
    arg(Type.Ped, ped),
    arg(Type.Bool, toggle)
  )
end

function PED.SET_ENABLE_SCUBA(ped, toggle)
  native.invoke(
    Type.Void, 4078, false,
    arg(Type.Ped, ped),
    arg(Type.Bool, toggle)
  )
end

function PED.SET_CAN_ATTACK_FRIENDLY(ped, toggle, p2)
  native.invoke(
    Type.Void, 4079, false,
    arg(Type.Ped, ped),
    arg(Type.Bool, toggle),
    arg(Type.Bool, p2)
  )
end

function PED.GET_PED_ALERTNESS(ped)
  return native.invoke(
    Type.Int, 4080, false,
    arg(Type.Ped, ped)
  )
end

function PED.SET_PED_ALERTNESS(ped, value)
  native.invoke(
    Type.Void, 4081, false,
    arg(Type.Ped, ped),
    arg(Type.Int, value)
  )
end

function PED.SET_PED_GET_OUT_UPSIDE_DOWN_VEHICLE(ped, toggle)
  native.invoke(
    Type.Void, 4082, false,
    arg(Type.Ped, ped),
    arg(Type.Bool, toggle)
  )
end

function PED.SET_PED_MOVEMENT_CLIPSET(ped, clipSet, transitionSpeed)
  native.invoke(
    Type.Void, 4083, false,
    arg(Type.Ped, ped),
    arg(Type.String, clipSet),
    arg(Type.Float, transitionSpeed)
  )
end

function PED.RESET_PED_MOVEMENT_CLIPSET(ped, p1)
  native.invoke(
    Type.Void, 4084, false,
    arg(Type.Ped, ped),
    arg(Type.Float, p1)
  )
end

function PED.SET_PED_STRAFE_CLIPSET(ped, clipSet)
  native.invoke(
    Type.Void, 4085, false,
    arg(Type.Ped, ped),
    arg(Type.String, clipSet)
  )
end

function PED.RESET_PED_STRAFE_CLIPSET(ped)
  native.invoke(
    Type.Void, 4086, false,
    arg(Type.Ped, ped)
  )
end

function PED.SET_PED_WEAPON_MOVEMENT_CLIPSET(ped, clipSet)
  native.invoke(
    Type.Void, 4087, false,
    arg(Type.Ped, ped),
    arg(Type.String, clipSet)
  )
end

function PED.RESET_PED_WEAPON_MOVEMENT_CLIPSET(ped)
  native.invoke(
    Type.Void, 4088, false,
    arg(Type.Ped, ped)
  )
end

function PED.SET_PED_DRIVE_BY_CLIPSET_OVERRIDE(ped, clipset)
  native.invoke(
    Type.Void, 4089, false,
    arg(Type.Ped, ped),
    arg(Type.String, clipset)
  )
end

function PED.CLEAR_PED_DRIVE_BY_CLIPSET_OVERRIDE(ped)
  native.invoke(
    Type.Void, 4090, false,
    arg(Type.Ped, ped)
  )
end

function PED.SET_PED_MOTION_IN_COVER_CLIPSET_OVERRIDE(ped, p1)
  native.invoke(
    Type.Void, 4091, false,
    arg(Type.Ped, ped),
    arg(Type.String, p1)
  )
end

function PED.CLEAR_PED_MOTION_IN_COVER_CLIPSET_OVERRIDE(ped)
  native.invoke(
    Type.Void, 4092, false,
    arg(Type.Ped, ped)
  )
end

function PED.CLEAR_PED_FALL_UPPER_BODY_CLIPSET_OVERRIDE(ped)
  native.invoke(
    Type.Void, 4093, false,
    arg(Type.Ped, ped)
  )
end

function PED.SET_PED_IN_VEHICLE_CONTEXT(ped, context)
  native.invoke(
    Type.Void, 4094, false,
    arg(Type.Ped, ped),
    arg(Type.Hash, context)
  )
end

function PED.RESET_PED_IN_VEHICLE_CONTEXT(ped)
  native.invoke(
    Type.Void, 4095, false,
    arg(Type.Ped, ped)
  )
end

function PED.IS_SCRIPTED_SCENARIO_PED_USING_CONDITIONAL_ANIM(ped, animDict, anim)
  return native.invoke(
    Type.Bool, 4096, false,
    arg(Type.Ped, ped),
    arg(Type.String, animDict),
    arg(Type.String, anim)
  )
end

function PED.SET_PED_ALTERNATE_WALK_ANIM(ped, animDict, animName, p3, p4)
  native.invoke(
    Type.Void, 4097, false,
    arg(Type.Ped, ped),
    arg(Type.String, animDict),
    arg(Type.String, animName),
    arg(Type.Float, p3),
    arg(Type.Bool, p4)
  )
end

function PED.CLEAR_PED_ALTERNATE_WALK_ANIM(ped, p1)
  native.invoke(
    Type.Void, 4098, false,
    arg(Type.Ped, ped),
    arg(Type.Float, p1)
  )
end

function PED.SET_PED_ALTERNATE_MOVEMENT_ANIM(ped, stance, animDictionary, animationName, p4, p5)
  native.invoke(
    Type.Void, 4099, false,
    arg(Type.Ped, ped),
    arg(Type.Int, stance),
    arg(Type.String, animDictionary),
    arg(Type.String, animationName),
    arg(Type.Float, p4),
    arg(Type.Bool, p5)
  )
end

function PED.CLEAR_PED_ALTERNATE_MOVEMENT_ANIM(ped, stance, p2)
  native.invoke(
    Type.Void, 4100, false,
    arg(Type.Ped, ped),
    arg(Type.Int, stance),
    arg(Type.Float, p2)
  )
end

function PED.SET_PED_GESTURE_GROUP(ped, animGroupGesture)
  native.invoke(
    Type.Void, 4101, false,
    arg(Type.Ped, ped),
    arg(Type.String, animGroupGesture)
  )
end

function PED.GET_ANIM_INITIAL_OFFSET_POSITION(animDict, animName, x, y, z, xRot, yRot, zRot, p8, p9)
  return native.invoke(
    Type.Vector3, 4102, false,
    arg(Type.String, animDict),
    arg(Type.String, animName),
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, z),
    arg(Type.Float, xRot),
    arg(Type.Float, yRot),
    arg(Type.Float, zRot),
    arg(Type.Float, p8),
    arg(Type.Int, p9)
  )
end

function PED.GET_ANIM_INITIAL_OFFSET_ROTATION(animDict, animName, x, y, z, xRot, yRot, zRot, p8, p9)
  return native.invoke(
    Type.Vector3, 4103, false,
    arg(Type.String, animDict),
    arg(Type.String, animName),
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, z),
    arg(Type.Float, xRot),
    arg(Type.Float, yRot),
    arg(Type.Float, zRot),
    arg(Type.Float, p8),
    arg(Type.Int, p9)
  )
end

function PED.GET_PED_DRAWABLE_VARIATION(ped, componentId)
  return native.invoke(
    Type.Int, 4104, false,
    arg(Type.Ped, ped),
    arg(Type.Int, componentId)
  )
end

function PED.GET_NUMBER_OF_PED_DRAWABLE_VARIATIONS(ped, componentId)
  return native.invoke(
    Type.Int, 4105, false,
    arg(Type.Ped, ped),
    arg(Type.Int, componentId)
  )
end

function PED.GET_PED_TEXTURE_VARIATION(ped, componentId)
  return native.invoke(
    Type.Int, 4106, false,
    arg(Type.Ped, ped),
    arg(Type.Int, componentId)
  )
end

function PED.GET_NUMBER_OF_PED_TEXTURE_VARIATIONS(ped, componentId, drawableId)
  return native.invoke(
    Type.Int, 4107, false,
    arg(Type.Ped, ped),
    arg(Type.Int, componentId),
    arg(Type.Int, drawableId)
  )
end

function PED.GET_NUMBER_OF_PED_PROP_DRAWABLE_VARIATIONS(ped, propId)
  return native.invoke(
    Type.Int, 4108, false,
    arg(Type.Ped, ped),
    arg(Type.Int, propId)
  )
end

function PED.GET_NUMBER_OF_PED_PROP_TEXTURE_VARIATIONS(ped, propId, drawableId)
  return native.invoke(
    Type.Int, 4109, false,
    arg(Type.Ped, ped),
    arg(Type.Int, propId),
    arg(Type.Int, drawableId)
  )
end

function PED.GET_PED_PALETTE_VARIATION(ped, componentId)
  return native.invoke(
    Type.Int, 4110, false,
    arg(Type.Ped, ped),
    arg(Type.Int, componentId)
  )
end

function PED.GET_MP_OUTFIT_DATA_FROM_METADATA(p0, p1)
  return native.invoke(
    Type.Bool, 4111, false,
    ref(Type.Any, p0),
    ref(Type.Any, p1)
  )
end

function PED.GET_FM_MALE_SHOP_PED_APPAREL_ITEM_INDEX(p0)
  return native.invoke(
    Type.Int, 4112, false,
    arg(Type.Int, p0)
  )
end

function PED.GET_FM_FEMALE_SHOP_PED_APPAREL_ITEM_INDEX(p0)
  return native.invoke(
    Type.Int, 4113, false,
    arg(Type.Int, p0)
  )
end

function PED.IS_PED_COMPONENT_VARIATION_VALID(ped, componentId, drawableId, textureId)
  return native.invoke(
    Type.Bool, 4114, false,
    arg(Type.Ped, ped),
    arg(Type.Int, componentId),
    arg(Type.Int, drawableId),
    arg(Type.Int, textureId)
  )
end

function PED.SET_PED_COMPONENT_VARIATION(ped, componentId, drawableId, textureId, paletteId)
  native.invoke(
    Type.Void, 4115, false,
    arg(Type.Ped, ped),
    arg(Type.Int, componentId),
    arg(Type.Int, drawableId),
    arg(Type.Int, textureId),
    arg(Type.Int, paletteId)
  )
end

function PED.SET_PED_RANDOM_COMPONENT_VARIATION(ped, p1)
  native.invoke(
    Type.Void, 4116, false,
    arg(Type.Ped, ped),
    arg(Type.Int, p1)
  )
end

function PED.SET_PED_RANDOM_PROPS(ped)
  native.invoke(
    Type.Void, 4117, false,
    arg(Type.Ped, ped)
  )
end

function PED.SET_PED_DEFAULT_COMPONENT_VARIATION(ped)
  native.invoke(
    Type.Void, 4118, false,
    arg(Type.Ped, ped)
  )
end

function PED.SET_PED_BLEND_FROM_PARENTS(ped, p1, p2, p3, p4)
  native.invoke(
    Type.Void, 4119, false,
    arg(Type.Ped, ped),
    arg(Type.Any, p1),
    arg(Type.Any, p2),
    arg(Type.Float, p3),
    arg(Type.Float, p4)
  )
end

function PED.SET_PED_HEAD_BLEND_DATA(ped, shapeFirstID, shapeSecondID, shapeThirdID, skinFirstID, skinSecondID, skinThirdID, shapeMix, skinMix, thirdMix, isParent)
  native.invoke(
    Type.Void, 4120, false,
    arg(Type.Ped, ped),
    arg(Type.Int, shapeFirstID),
    arg(Type.Int, shapeSecondID),
    arg(Type.Int, shapeThirdID),
    arg(Type.Int, skinFirstID),
    arg(Type.Int, skinSecondID),
    arg(Type.Int, skinThirdID),
    arg(Type.Float, shapeMix),
    arg(Type.Float, skinMix),
    arg(Type.Float, thirdMix),
    arg(Type.Bool, isParent)
  )
end

function PED.GET_PED_HEAD_BLEND_DATA(ped, headBlendData)
  return native.invoke(
    Type.Bool, 4121, false,
    arg(Type.Ped, ped),
    ref(Type.Any, headBlendData)
  )
end

function PED.UPDATE_PED_HEAD_BLEND_DATA(ped, shapeMix, skinMix, thirdMix)
  native.invoke(
    Type.Void, 4122, false,
    arg(Type.Ped, ped),
    arg(Type.Float, shapeMix),
    arg(Type.Float, skinMix),
    arg(Type.Float, thirdMix)
  )
end

function PED.SET_HEAD_BLEND_EYE_COLOR(ped, index)
  native.invoke(
    Type.Void, 4123, false,
    arg(Type.Ped, ped),
    arg(Type.Int, index)
  )
end

function PED.GET_HEAD_BLEND_EYE_COLOR(ped)
  return native.invoke(
    Type.Int, 4124, false,
    arg(Type.Ped, ped)
  )
end

function PED.SET_PED_HEAD_OVERLAY(ped, overlayID, index, opacity)
  native.invoke(
    Type.Void, 4125, false,
    arg(Type.Ped, ped),
    arg(Type.Int, overlayID),
    arg(Type.Int, index),
    arg(Type.Float, opacity)
  )
end

function PED.GET_PED_HEAD_OVERLAY(ped, overlayID)
  return native.invoke(
    Type.Int, 4126, false,
    arg(Type.Ped, ped),
    arg(Type.Int, overlayID)
  )
end

function PED.GET_PED_HEAD_OVERLAY_NUM(overlayID)
  return native.invoke(
    Type.Int, 4127, false,
    arg(Type.Int, overlayID)
  )
end

function PED.SET_PED_HEAD_OVERLAY_TINT(ped, overlayID, colorType, colorID, secondColorID)
  native.invoke(
    Type.Void, 4128, false,
    arg(Type.Ped, ped),
    arg(Type.Int, overlayID),
    arg(Type.Int, colorType),
    arg(Type.Int, colorID),
    arg(Type.Int, secondColorID)
  )
end

function PED.SET_PED_HAIR_TINT(ped, colorID, highlightColorID)
  native.invoke(
    Type.Void, 4129, false,
    arg(Type.Ped, ped),
    arg(Type.Int, colorID),
    arg(Type.Int, highlightColorID)
  )
end

function PED.GET_NUM_PED_HAIR_TINTS()
  return native.invoke(
    Type.Int, 4130, false
  )
end

function PED.GET_NUM_PED_MAKEUP_TINTS()
  return native.invoke(
    Type.Int, 4131, false
  )
end

function PED.GET_PED_HAIR_TINT_COLOR(hairColorIndex, outR, outG, outB)
  native.invoke(
    Type.Void, 4132, false,
    arg(Type.Int, hairColorIndex),
    ref(Type.Int, outR),
    ref(Type.Int, outG),
    ref(Type.Int, outB)
  )
end

function PED.GET_PED_MAKEUP_TINT_COLOR(makeupColorIndex, outR, outG, outB)
  native.invoke(
    Type.Void, 4133, false,
    arg(Type.Int, makeupColorIndex),
    ref(Type.Int, outR),
    ref(Type.Int, outG),
    ref(Type.Int, outB)
  )
end

function PED.IS_PED_HAIR_TINT_FOR_CREATOR(colorId)
  return native.invoke(
    Type.Bool, 4134, false,
    arg(Type.Int, colorId)
  )
end

function PED.GET_DEFAULT_SECONDARY_TINT_FOR_CREATOR(colorId)
  return native.invoke(
    Type.Int, 4135, false,
    arg(Type.Int, colorId)
  )
end

function PED.IS_PED_LIPSTICK_TINT_FOR_CREATOR(colorId)
  return native.invoke(
    Type.Bool, 4136, false,
    arg(Type.Int, colorId)
  )
end

function PED.IS_PED_BLUSH_TINT_FOR_CREATOR(colorId)
  return native.invoke(
    Type.Bool, 4137, false,
    arg(Type.Int, colorId)
  )
end

function PED.IS_PED_HAIR_TINT_FOR_BARBER(colorID)
  return native.invoke(
    Type.Bool, 4138, false,
    arg(Type.Int, colorID)
  )
end

function PED.GET_DEFAULT_SECONDARY_TINT_FOR_BARBER(colorID)
  return native.invoke(
    Type.Int, 4139, false,
    arg(Type.Int, colorID)
  )
end

function PED.IS_PED_LIPSTICK_TINT_FOR_BARBER(colorID)
  return native.invoke(
    Type.Bool, 4140, false,
    arg(Type.Int, colorID)
  )
end

function PED.IS_PED_BLUSH_TINT_FOR_BARBER(colorID)
  return native.invoke(
    Type.Bool, 4141, false,
    arg(Type.Int, colorID)
  )
end

function PED.IS_PED_BLUSH_FACEPAINT_TINT_FOR_BARBER(colorId)
  return native.invoke(
    Type.Bool, 4142, false,
    arg(Type.Int, colorId)
  )
end

function PED.GET_TINT_INDEX_FOR_LAST_GEN_HAIR_TEXTURE(modelHash, drawableId, textureId)
  return native.invoke(
    Type.Int, 4143, false,
    arg(Type.Hash, modelHash),
    arg(Type.Int, drawableId),
    arg(Type.Int, textureId)
  )
end

function PED.SET_PED_MICRO_MORPH(ped, index, scale)
  native.invoke(
    Type.Void, 4144, false,
    arg(Type.Ped, ped),
    arg(Type.Int, index),
    arg(Type.Float, scale)
  )
end

function PED.HAS_PED_HEAD_BLEND_FINISHED(ped)
  return native.invoke(
    Type.Bool, 4145, false,
    arg(Type.Ped, ped)
  )
end

function PED.FINALIZE_HEAD_BLEND(ped)
  native.invoke(
    Type.Void, 4146, false,
    arg(Type.Ped, ped)
  )
end

function PED.SET_HEAD_BLEND_PALETTE_COLOR(ped, r, g, b, id)
  native.invoke(
    Type.Void, 4147, false,
    arg(Type.Ped, ped),
    arg(Type.Int, r),
    arg(Type.Int, g),
    arg(Type.Int, b),
    arg(Type.Int, id)
  )
end

function PED.DISABLE_HEAD_BLEND_PALETTE_COLOR(ped)
  native.invoke(
    Type.Void, 4148, false,
    arg(Type.Ped, ped)
  )
end

function PED.GET_PED_HEAD_BLEND_FIRST_INDEX(type)
  return native.invoke(
    Type.Int, 4149, false,
    arg(Type.Int, type)
  )
end

function PED.GET_PED_HEAD_BLEND_NUM_HEADS(type)
  return native.invoke(
    Type.Int, 4150, false,
    arg(Type.Int, type)
  )
end

function PED.SET_PED_PRELOAD_VARIATION_DATA(ped, slot, drawableId, textureId)
  return native.invoke(
    Type.Int, 4151, false,
    arg(Type.Ped, ped),
    arg(Type.Int, slot),
    arg(Type.Int, drawableId),
    arg(Type.Int, textureId)
  )
end

function PED.HAS_PED_PRELOAD_VARIATION_DATA_FINISHED(ped)
  return native.invoke(
    Type.Bool, 4152, false,
    arg(Type.Ped, ped)
  )
end

function PED.RELEASE_PED_PRELOAD_VARIATION_DATA(ped)
  native.invoke(
    Type.Void, 4153, false,
    arg(Type.Ped, ped)
  )
end

function PED.SET_PED_PRELOAD_PROP_DATA(ped, componentId, drawableId, TextureId)
  return native.invoke(
    Type.Int, 4154, false,
    arg(Type.Ped, ped),
    arg(Type.Int, componentId),
    arg(Type.Int, drawableId),
    arg(Type.Int, TextureId)
  )
end

function PED.HAS_PED_PRELOAD_PROP_DATA_FINISHED(ped)
  return native.invoke(
    Type.Bool, 4155, false,
    arg(Type.Ped, ped)
  )
end

function PED.RELEASE_PED_PRELOAD_PROP_DATA(ped)
  native.invoke(
    Type.Void, 4156, false,
    arg(Type.Ped, ped)
  )
end

function PED.GET_PED_PROP_INDEX(ped, componentId, p2)
  return native.invoke(
    Type.Int, 4157, false,
    arg(Type.Ped, ped),
    arg(Type.Int, componentId),
    arg(Type.Any, p2)
  )
end

function PED.SET_PED_PROP_INDEX(ped, componentId, drawableId, TextureId, attach, p5)
  native.invoke(
    Type.Void, 4158, false,
    arg(Type.Ped, ped),
    arg(Type.Int, componentId),
    arg(Type.Int, drawableId),
    arg(Type.Int, TextureId),
    arg(Type.Bool, attach),
    arg(Type.Any, p5)
  )
end

function PED.KNOCK_OFF_PED_PROP(ped, p1, p2, p3, p4)
  native.invoke(
    Type.Void, 4159, false,
    arg(Type.Ped, ped),
    arg(Type.Bool, p1),
    arg(Type.Bool, p2),
    arg(Type.Bool, p3),
    arg(Type.Bool, p4)
  )
end

function PED.CLEAR_PED_PROP(ped, propId, p2)
  native.invoke(
    Type.Void, 4160, false,
    arg(Type.Ped, ped),
    arg(Type.Int, propId),
    arg(Type.Any, p2)
  )
end

function PED.CLEAR_ALL_PED_PROPS(ped, p1)
  native.invoke(
    Type.Void, 4161, false,
    arg(Type.Ped, ped),
    arg(Type.Any, p1)
  )
end

function PED.DROP_AMBIENT_PROP(ped)
  native.invoke(
    Type.Void, 4162, false,
    arg(Type.Ped, ped)
  )
end

function PED.GET_PED_PROP_TEXTURE_INDEX(ped, componentId)
  return native.invoke(
    Type.Int, 4163, false,
    arg(Type.Ped, ped),
    arg(Type.Int, componentId)
  )
end

function PED.CLEAR_PED_PARACHUTE_PACK_VARIATION(ped)
  native.invoke(
    Type.Void, 4164, false,
    arg(Type.Ped, ped)
  )
end

function PED.SET_PED_SCUBA_GEAR_VARIATION(ped)
  native.invoke(
    Type.Void, 4165, false,
    arg(Type.Ped, ped)
  )
end

function PED.CLEAR_PED_SCUBA_GEAR_VARIATION(ped)
  native.invoke(
    Type.Void, 4166, false,
    arg(Type.Ped, ped)
  )
end

function PED.IS_USING_PED_SCUBA_GEAR_VARIATION(p0)
  return native.invoke(
    Type.Bool, 4167, false,
    arg(Type.Any, p0)
  )
end

function PED.SET_BLOCKING_OF_NON_TEMPORARY_EVENTS(ped, toggle)
  native.invoke(
    Type.Void, 4168, false,
    arg(Type.Ped, ped),
    arg(Type.Bool, toggle)
  )
end

function PED.SET_PED_BOUNDS_ORIENTATION(ped, p1, p2, x, y, z)
  native.invoke(
    Type.Void, 4169, false,
    arg(Type.Ped, ped),
    arg(Type.Float, p1),
    arg(Type.Float, p2),
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, z)
  )
end

function PED.REGISTER_TARGET(ped, target)
  native.invoke(
    Type.Void, 4170, false,
    arg(Type.Ped, ped),
    arg(Type.Ped, target)
  )
end

function PED.REGISTER_HATED_TARGETS_AROUND_PED(ped, radius)
  native.invoke(
    Type.Void, 4171, false,
    arg(Type.Ped, ped),
    arg(Type.Float, radius)
  )
end

function PED.GET_RANDOM_PED_AT_COORD(x, y, z, xRadius, yRadius, zRadius, pedType)
  return native.invoke(
    Type.Ped, 4172, false,
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, z),
    arg(Type.Float, xRadius),
    arg(Type.Float, yRadius),
    arg(Type.Float, zRadius),
    arg(Type.Int, pedType)
  )
end

function PED.GET_CLOSEST_PED(x, y, z, radius, p4, p5, outPed, p7, p8, pedType)
  return native.invoke(
    Type.Bool, 4173, false,
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, z),
    arg(Type.Float, radius),
    arg(Type.Bool, p4),
    arg(Type.Bool, p5),
    ref(Type.Ped, outPed),
    arg(Type.Bool, p7),
    arg(Type.Bool, p8),
    arg(Type.Int, pedType)
  )
end

function PED.SET_SCENARIO_PEDS_TO_BE_RETURNED_BY_NEXT_COMMAND(value)
  native.invoke(
    Type.Void, 4174, false,
    arg(Type.Bool, value)
  )
end

function PED.GET_CAN_PED_BE_GRABBED_BY_SCRIPT(ped, p1, p2, p3, p4, p5, p6, p7, p8)
  return native.invoke(
    Type.Bool, 4175, false,
    arg(Type.Ped, ped),
    arg(Type.Bool, p1),
    arg(Type.Bool, p2),
    arg(Type.Bool, p3),
    arg(Type.Bool, p4),
    arg(Type.Bool, p5),
    arg(Type.Bool, p6),
    arg(Type.Bool, p7),
    arg(Type.Any, p8)
  )
end

function PED.SET_DRIVER_RACING_MODIFIER(driver, modifier)
  native.invoke(
    Type.Void, 4176, false,
    arg(Type.Ped, driver),
    arg(Type.Float, modifier)
  )
end

function PED.SET_DRIVER_ABILITY(driver, ability)
  native.invoke(
    Type.Void, 4177, false,
    arg(Type.Ped, driver),
    arg(Type.Float, ability)
  )
end

function PED.SET_DRIVER_AGGRESSIVENESS(driver, aggressiveness)
  native.invoke(
    Type.Void, 4178, false,
    arg(Type.Ped, driver),
    arg(Type.Float, aggressiveness)
  )
end

function PED.CAN_PED_RAGDOLL(ped)
  return native.invoke(
    Type.Bool, 4179, false,
    arg(Type.Ped, ped)
  )
end

function PED.SET_PED_TO_RAGDOLL(ped, time1, time2, ragdollType, p4, p5, p6)
  return native.invoke(
    Type.Bool, 4180, false,
    arg(Type.Ped, ped),
    arg(Type.Int, time1),
    arg(Type.Int, time2),
    arg(Type.Int, ragdollType),
    arg(Type.Bool, p4),
    arg(Type.Bool, p5),
    arg(Type.Bool, p6)
  )
end

function PED.SET_PED_TO_RAGDOLL_WITH_FALL(ped, time, p2, ragdollType, x, y, z, velocity, p8, p9, p10, p11, p12, p13)
  return native.invoke(
    Type.Bool, 4181, false,
    arg(Type.Ped, ped),
    arg(Type.Int, time),
    arg(Type.Int, p2),
    arg(Type.Int, ragdollType),
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, z),
    arg(Type.Float, velocity),
    arg(Type.Float, p8),
    arg(Type.Float, p9),
    arg(Type.Float, p10),
    arg(Type.Float, p11),
    arg(Type.Float, p12),
    arg(Type.Float, p13)
  )
end

function PED.SET_PED_RAGDOLL_ON_COLLISION(ped, toggle)
  native.invoke(
    Type.Void, 4182, false,
    arg(Type.Ped, ped),
    arg(Type.Bool, toggle)
  )
end

function PED.IS_PED_RAGDOLL(ped)
  return native.invoke(
    Type.Bool, 4183, false,
    arg(Type.Ped, ped)
  )
end

function PED.IS_PED_RUNNING_RAGDOLL_TASK(ped)
  return native.invoke(
    Type.Bool, 4184, false,
    arg(Type.Ped, ped)
  )
end

function PED.SET_PED_RAGDOLL_FORCE_FALL(ped)
  native.invoke(
    Type.Void, 4185, false,
    arg(Type.Ped, ped)
  )
end

function PED.RESET_PED_RAGDOLL_TIMER(ped)
  native.invoke(
    Type.Void, 4186, false,
    arg(Type.Ped, ped)
  )
end

function PED.SET_PED_CAN_RAGDOLL(ped, toggle)
  native.invoke(
    Type.Void, 4187, false,
    arg(Type.Ped, ped),
    arg(Type.Bool, toggle)
  )
end

function PED.IS_PED_RUNNING_MELEE_TASK(ped)
  return native.invoke(
    Type.Bool, 4188, false,
    arg(Type.Ped, ped)
  )
end

function PED.IS_PED_RUNNING_MOBILE_PHONE_TASK(ped)
  return native.invoke(
    Type.Bool, 4189, false,
    arg(Type.Ped, ped)
  )
end

function PED.IS_MOBILE_PHONE_TO_PED_EAR(ped)
  return native.invoke(
    Type.Bool, 4190, false,
    arg(Type.Ped, ped)
  )
end

function PED.SET_RAGDOLL_BLOCKING_FLAGS(ped, blockingFlag)
  native.invoke(
    Type.Void, 4191, false,
    arg(Type.Ped, ped),
    arg(Type.Int, blockingFlag)
  )
end

function PED.CLEAR_RAGDOLL_BLOCKING_FLAGS(ped, blockingFlag)
  native.invoke(
    Type.Void, 4192, false,
    arg(Type.Ped, ped),
    arg(Type.Int, blockingFlag)
  )
end

function PED.SET_PED_ANGLED_DEFENSIVE_AREA(ped, p1, p2, p3, p4, p5, p6, p7, p8, p9)
  native.invoke(
    Type.Void, 4193, false,
    arg(Type.Ped, ped),
    arg(Type.Float, p1),
    arg(Type.Float, p2),
    arg(Type.Float, p3),
    arg(Type.Float, p4),
    arg(Type.Float, p5),
    arg(Type.Float, p6),
    arg(Type.Float, p7),
    arg(Type.Bool, p8),
    arg(Type.Bool, p9)
  )
end

function PED.SET_PED_SPHERE_DEFENSIVE_AREA(ped, x, y, z, radius, p5, p6)
  native.invoke(
    Type.Void, 4194, false,
    arg(Type.Ped, ped),
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, z),
    arg(Type.Float, radius),
    arg(Type.Bool, p5),
    arg(Type.Bool, p6)
  )
end

function PED.SET_PED_DEFENSIVE_SPHERE_ATTACHED_TO_PED(ped, target, xOffset, yOffset, zOffset, radius, p6)
  native.invoke(
    Type.Void, 4195, false,
    arg(Type.Ped, ped),
    arg(Type.Ped, target),
    arg(Type.Float, xOffset),
    arg(Type.Float, yOffset),
    arg(Type.Float, zOffset),
    arg(Type.Float, radius),
    arg(Type.Bool, p6)
  )
end

function PED.SET_PED_DEFENSIVE_SPHERE_ATTACHED_TO_VEHICLE(ped, target, xOffset, yOffset, zOffset, radius, p6)
  native.invoke(
    Type.Void, 4196, false,
    arg(Type.Ped, ped),
    arg(Type.Vehicle, target),
    arg(Type.Float, xOffset),
    arg(Type.Float, yOffset),
    arg(Type.Float, zOffset),
    arg(Type.Float, radius),
    arg(Type.Bool, p6)
  )
end

function PED.SET_PED_DEFENSIVE_AREA_ATTACHED_TO_PED(ped, attachPed, p2, p3, p4, p5, p6, p7, p8, p9, p10)
  native.invoke(
    Type.Void, 4197, false,
    arg(Type.Ped, ped),
    arg(Type.Ped, attachPed),
    arg(Type.Float, p2),
    arg(Type.Float, p3),
    arg(Type.Float, p4),
    arg(Type.Float, p5),
    arg(Type.Float, p6),
    arg(Type.Float, p7),
    arg(Type.Float, p8),
    arg(Type.Bool, p9),
    arg(Type.Bool, p10)
  )
end

function PED.SET_PED_DEFENSIVE_AREA_DIRECTION(ped, p1, p2, p3, p4)
  native.invoke(
    Type.Void, 4198, false,
    arg(Type.Ped, ped),
    arg(Type.Float, p1),
    arg(Type.Float, p2),
    arg(Type.Float, p3),
    arg(Type.Bool, p4)
  )
end

function PED.REMOVE_PED_DEFENSIVE_AREA(ped, toggle)
  native.invoke(
    Type.Void, 4199, false,
    arg(Type.Ped, ped),
    arg(Type.Bool, toggle)
  )
end

function PED.GET_PED_DEFENSIVE_AREA_POSITION(ped, p1)
  return native.invoke(
    Type.Vector3, 4200, false,
    arg(Type.Ped, ped),
    arg(Type.Bool, p1)
  )
end

function PED.IS_PED_DEFENSIVE_AREA_ACTIVE(ped, p1)
  return native.invoke(
    Type.Bool, 4201, false,
    arg(Type.Ped, ped),
    arg(Type.Bool, p1)
  )
end

function PED.SET_PED_PREFERRED_COVER_SET(ped, itemSet)
  native.invoke(
    Type.Void, 4202, false,
    arg(Type.Ped, ped),
    arg(Type.Any, itemSet)
  )
end

function PED.REMOVE_PED_PREFERRED_COVER_SET(ped)
  native.invoke(
    Type.Void, 4203, false,
    arg(Type.Ped, ped)
  )
end

function PED.REVIVE_INJURED_PED(ped)
  native.invoke(
    Type.Void, 4204, false,
    arg(Type.Ped, ped)
  )
end

function PED.RESURRECT_PED(ped)
  native.invoke(
    Type.Void, 4205, false,
    arg(Type.Ped, ped)
  )
end

function PED.SET_PED_NAME_DEBUG(ped, name)
  native.invoke(
    Type.Void, 4206, false,
    arg(Type.Ped, ped),
    arg(Type.String, name)
  )
end

function PED.GET_PED_EXTRACTED_DISPLACEMENT(ped, worldSpace)
  return native.invoke(
    Type.Vector3, 4207, false,
    arg(Type.Ped, ped),
    arg(Type.Bool, worldSpace)
  )
end

function PED.SET_PED_DIES_WHEN_INJURED(ped, toggle)
  native.invoke(
    Type.Void, 4208, false,
    arg(Type.Ped, ped),
    arg(Type.Bool, toggle)
  )
end

function PED.SET_PED_ENABLE_WEAPON_BLOCKING(ped, toggle)
  native.invoke(
    Type.Void, 4209, false,
    arg(Type.Ped, ped),
    arg(Type.Bool, toggle)
  )
end

function PED.SPECIAL_FUNCTION_DO_NOT_USE(ped, p1)
  native.invoke(
    Type.Void, 4210, false,
    arg(Type.Ped, ped),
    arg(Type.Bool, p1)
  )
end

function PED.RESET_PED_VISIBLE_DAMAGE(ped)
  native.invoke(
    Type.Void, 4211, false,
    arg(Type.Ped, ped)
  )
end

function PED.APPLY_PED_BLOOD_DAMAGE_BY_ZONE(ped, p1, p2, p3, p4)
  native.invoke(
    Type.Void, 4212, false,
    arg(Type.Ped, ped),
    arg(Type.Any, p1),
    arg(Type.Float, p2),
    arg(Type.Float, p3),
    arg(Type.Any, p4)
  )
end

function PED.APPLY_PED_BLOOD(ped, boneIndex, xRot, yRot, zRot, woundType)
  native.invoke(
    Type.Void, 4213, false,
    arg(Type.Ped, ped),
    arg(Type.Int, boneIndex),
    arg(Type.Float, xRot),
    arg(Type.Float, yRot),
    arg(Type.Float, zRot),
    arg(Type.String, woundType)
  )
end

function PED.APPLY_PED_BLOOD_BY_ZONE(ped, p1, p2, p3, p4)
  native.invoke(
    Type.Void, 4214, false,
    arg(Type.Ped, ped),
    arg(Type.Int, p1),
    arg(Type.Float, p2),
    arg(Type.Float, p3),
    arg(Type.String, p4)
  )
end

function PED.APPLY_PED_BLOOD_SPECIFIC(ped, p1, p2, p3, p4, p5, p6, p7, p8)
  native.invoke(
    Type.Void, 4215, false,
    arg(Type.Ped, ped),
    arg(Type.Int, p1),
    arg(Type.Float, p2),
    arg(Type.Float, p3),
    arg(Type.Float, p4),
    arg(Type.Float, p5),
    arg(Type.Int, p6),
    arg(Type.Float, p7),
    arg(Type.String, p8)
  )
end

function PED.APPLY_PED_DAMAGE_DECAL(ped, damageZone, xOffset, yOffset, heading, scale, alpha, variation, fadeIn, decalName)
  native.invoke(
    Type.Void, 4216, false,
    arg(Type.Ped, ped),
    arg(Type.Int, damageZone),
    arg(Type.Float, xOffset),
    arg(Type.Float, yOffset),
    arg(Type.Float, heading),
    arg(Type.Float, scale),
    arg(Type.Float, alpha),
    arg(Type.Int, variation),
    arg(Type.Bool, fadeIn),
    arg(Type.String, decalName)
  )
end

function PED.APPLY_PED_DAMAGE_PACK(ped, damagePack, damage, mult)
  native.invoke(
    Type.Void, 4217, false,
    arg(Type.Ped, ped),
    arg(Type.String, damagePack),
    arg(Type.Float, damage),
    arg(Type.Float, mult)
  )
end

function PED.CLEAR_PED_BLOOD_DAMAGE(ped)
  native.invoke(
    Type.Void, 4218, false,
    arg(Type.Ped, ped)
  )
end

function PED.CLEAR_PED_BLOOD_DAMAGE_BY_ZONE(ped, p1)
  native.invoke(
    Type.Void, 4219, false,
    arg(Type.Ped, ped),
    arg(Type.Int, p1)
  )
end

function PED.HIDE_PED_BLOOD_DAMAGE_BY_ZONE(ped, p1, p2)
  native.invoke(
    Type.Void, 4220, false,
    arg(Type.Ped, ped),
    arg(Type.Any, p1),
    arg(Type.Bool, p2)
  )
end

function PED.CLEAR_PED_DAMAGE_DECAL_BY_ZONE(ped, p1, p2)
  native.invoke(
    Type.Void, 4221, false,
    arg(Type.Ped, ped),
    arg(Type.Int, p1),
    arg(Type.String, p2)
  )
end

function PED.GET_PED_DECORATIONS_STATE(ped)
  return native.invoke(
    Type.Int, 4222, false,
    arg(Type.Ped, ped)
  )
end

function PED.MARK_PED_DECORATIONS_AS_CLONED_FROM_LOCAL_PLAYER(ped, p1)
  native.invoke(
    Type.Void, 4223, false,
    arg(Type.Ped, ped),
    arg(Type.Bool, p1)
  )
end

function PED.CLEAR_PED_WETNESS(ped)
  native.invoke(
    Type.Void, 4224, false,
    arg(Type.Ped, ped)
  )
end

function PED.SET_PED_WETNESS_HEIGHT(ped, height)
  native.invoke(
    Type.Void, 4225, false,
    arg(Type.Ped, ped),
    arg(Type.Float, height)
  )
end

function PED.SET_PED_WETNESS_ENABLED_THIS_FRAME(ped)
  native.invoke(
    Type.Void, 4226, false,
    arg(Type.Ped, ped)
  )
end

function PED.SET_PED_WETNESS(ped, wetLevel)
  native.invoke(
    Type.Void, 4227, false,
    arg(Type.Ped, ped),
    arg(Type.Float, wetLevel)
  )
end

function PED.CLEAR_PED_ENV_DIRT(ped)
  native.invoke(
    Type.Void, 4228, false,
    arg(Type.Ped, ped)
  )
end

function PED.SET_PED_SWEAT(ped, sweat)
  native.invoke(
    Type.Void, 4229, false,
    arg(Type.Ped, ped),
    arg(Type.Float, sweat)
  )
end

function PED.ADD_PED_DECORATION_FROM_HASHES(ped, collection, overlay)
  native.invoke(
    Type.Void, 4230, false,
    arg(Type.Ped, ped),
    arg(Type.Hash, collection),
    arg(Type.Hash, overlay)
  )
end

function PED.ADD_PED_DECORATION_FROM_HASHES_IN_CORONA(ped, collection, overlay)
  native.invoke(
    Type.Void, 4231, false,
    arg(Type.Ped, ped),
    arg(Type.Hash, collection),
    arg(Type.Hash, overlay)
  )
end

function PED.GET_PED_DECORATION_ZONE_FROM_HASHES(collection, overlay)
  return native.invoke(
    Type.Int, 4232, false,
    arg(Type.Hash, collection),
    arg(Type.Hash, overlay)
  )
end

function PED.CLEAR_PED_DECORATIONS(ped)
  native.invoke(
    Type.Void, 4233, false,
    arg(Type.Ped, ped)
  )
end

function PED.CLEAR_PED_DECORATIONS_LEAVE_SCARS(ped)
  native.invoke(
    Type.Void, 4234, false,
    arg(Type.Ped, ped)
  )
end

function PED.WAS_PED_SKELETON_UPDATED(ped)
  return native.invoke(
    Type.Bool, 4235, false,
    arg(Type.Ped, ped)
  )
end

function PED.GET_PED_BONE_COORDS(ped, boneId, offsetX, offsetY, offsetZ)
  return native.invoke(
    Type.Vector3, 4236, false,
    arg(Type.Ped, ped),
    arg(Type.Int, boneId),
    arg(Type.Float, offsetX),
    arg(Type.Float, offsetY),
    arg(Type.Float, offsetZ)
  )
end

function PED.CREATE_NM_MESSAGE(startImmediately, messageId)
  native.invoke(
    Type.Void, 4237, false,
    arg(Type.Bool, startImmediately),
    arg(Type.Int, messageId)
  )
end

function PED.GIVE_PED_NM_MESSAGE(ped)
  native.invoke(
    Type.Void, 4238, false,
    arg(Type.Ped, ped)
  )
end

function PED.ADD_SCENARIO_BLOCKING_AREA(x1, y1, z1, x2, y2, z2, p6, p7, p8, p9, p10)
  return native.invoke(
    Type.Int, 4239, false,
    arg(Type.Float, x1),
    arg(Type.Float, y1),
    arg(Type.Float, z1),
    arg(Type.Float, x2),
    arg(Type.Float, y2),
    arg(Type.Float, z2),
    arg(Type.Bool, p6),
    arg(Type.Bool, p7),
    arg(Type.Bool, p8),
    arg(Type.Bool, p9),
    arg(Type.Any, p10)
  )
end

function PED.REMOVE_SCENARIO_BLOCKING_AREAS()
  native.invoke(
    Type.Void, 4240, false
  )
end

function PED.REMOVE_SCENARIO_BLOCKING_AREA(p0, p1)
  native.invoke(
    Type.Void, 4241, false,
    arg(Type.Any, p0),
    arg(Type.Bool, p1)
  )
end

function PED.SET_SCENARIO_PEDS_SPAWN_IN_SPHERE_AREA(x, y, z, range, p4)
  native.invoke(
    Type.Void, 4242, false,
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, z),
    arg(Type.Float, range),
    arg(Type.Int, p4)
  )
end

function PED.DOES_SCENARIO_BLOCKING_AREA_EXISTS(x1, y1, z1, x2, y2, z2)
  return native.invoke(
    Type.Bool, 4243, false,
    arg(Type.Float, x1),
    arg(Type.Float, y1),
    arg(Type.Float, z1),
    arg(Type.Float, x2),
    arg(Type.Float, y2),
    arg(Type.Float, z2)
  )
end

function PED.IS_PED_USING_SCENARIO(ped, scenario)
  return native.invoke(
    Type.Bool, 4244, false,
    arg(Type.Ped, ped),
    arg(Type.String, scenario)
  )
end

function PED.IS_PED_USING_ANY_SCENARIO(ped)
  return native.invoke(
    Type.Bool, 4245, false,
    arg(Type.Ped, ped)
  )
end

function PED.SET_PED_PANIC_EXIT_SCENARIO(p0, p1, p2, p3)
  return native.invoke(
    Type.Bool, 4246, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1),
    arg(Type.Any, p2),
    arg(Type.Any, p3)
  )
end

function PED.TOGGLE_SCENARIO_PED_COWER_IN_PLACE(ped, toggle)
  native.invoke(
    Type.Void, 4247, false,
    arg(Type.Ped, ped),
    arg(Type.Bool, toggle)
  )
end

function PED.TRIGGER_PED_SCENARIO_PANICEXITTOFLEE(p0, p1, p2, p3)
  return native.invoke(
    Type.Bool, 4248, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1),
    arg(Type.Any, p2),
    arg(Type.Any, p3)
  )
end

function PED.SET_PED_SHOULD_PLAY_DIRECTED_NORMAL_SCENARIO_EXIT(p0, p1, p2, p3)
  return native.invoke(
    Type.Bool, 4249, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1),
    arg(Type.Any, p2),
    arg(Type.Any, p3)
  )
end

function PED.SET_PED_SHOULD_PLAY_NORMAL_SCENARIO_EXIT(ped)
  native.invoke(
    Type.Void, 4250, false,
    arg(Type.Ped, ped)
  )
end

function PED.SET_PED_SHOULD_PLAY_IMMEDIATE_SCENARIO_EXIT(ped)
  native.invoke(
    Type.Void, 4251, false,
    arg(Type.Ped, ped)
  )
end

function PED.SET_PED_SHOULD_PLAY_FLEE_SCENARIO_EXIT(ped, p1, p2, p3)
  return native.invoke(
    Type.Bool, 4252, false,
    arg(Type.Ped, ped),
    arg(Type.Any, p1),
    arg(Type.Any, p2),
    arg(Type.Any, p3)
  )
end

function PED.SET_PED_SHOULD_IGNORE_SCENARIO_EXIT_COLLISION_CHECKS(ped, p1)
  native.invoke(
    Type.Void, 4253, false,
    arg(Type.Ped, ped),
    arg(Type.Bool, p1)
  )
end

function PED.SET_PED_SHOULD_IGNORE_SCENARIO_NAV_CHECKS(p0, p1)
  native.invoke(
    Type.Void, 4254, false,
    arg(Type.Any, p0),
    arg(Type.Bool, p1)
  )
end

function PED.SET_PED_SHOULD_PROBE_FOR_SCENARIO_EXITS_IN_ONE_FRAME(p0, p1)
  native.invoke(
    Type.Void, 4255, false,
    arg(Type.Any, p0),
    arg(Type.Bool, p1)
  )
end

function PED.IS_PED_GESTURING(p0)
  return native.invoke(
    Type.Bool, 4256, false,
    arg(Type.Any, p0)
  )
end

function PED.RESET_FACIAL_IDLE_ANIM(ped)
  native.invoke(
    Type.Void, 4257, false,
    arg(Type.Ped, ped)
  )
end

function PED.PLAY_FACIAL_ANIM(ped, animName, animDict)
  native.invoke(
    Type.Void, 4258, false,
    arg(Type.Ped, ped),
    arg(Type.String, animName),
    arg(Type.String, animDict)
  )
end

function PED.SET_FACIAL_CLIPSET(ped, animDict)
  native.invoke(
    Type.Void, 4259, false,
    arg(Type.Ped, ped),
    arg(Type.String, animDict)
  )
end

function PED.SET_FACIAL_IDLE_ANIM_OVERRIDE(ped, animName, animDict)
  native.invoke(
    Type.Void, 4260, false,
    arg(Type.Ped, ped),
    arg(Type.String, animName),
    arg(Type.String, animDict)
  )
end

function PED.CLEAR_FACIAL_IDLE_ANIM_OVERRIDE(ped)
  native.invoke(
    Type.Void, 4261, false,
    arg(Type.Ped, ped)
  )
end

function PED.SET_PED_CAN_PLAY_GESTURE_ANIMS(ped, toggle)
  native.invoke(
    Type.Void, 4262, false,
    arg(Type.Ped, ped),
    arg(Type.Bool, toggle)
  )
end

function PED.SET_PED_CAN_PLAY_VISEME_ANIMS(ped, toggle, p2)
  native.invoke(
    Type.Void, 4263, false,
    arg(Type.Ped, ped),
    arg(Type.Bool, toggle),
    arg(Type.Bool, p2)
  )
end

function PED.SET_PED_IS_IGNORED_BY_AUTO_OPEN_DOORS(ped, p1)
  native.invoke(
    Type.Void, 4264, false,
    arg(Type.Ped, ped),
    arg(Type.Bool, p1)
  )
end

function PED.SET_PED_CAN_PLAY_AMBIENT_ANIMS(ped, toggle)
  native.invoke(
    Type.Void, 4265, false,
    arg(Type.Ped, ped),
    arg(Type.Bool, toggle)
  )
end

function PED.SET_PED_CAN_PLAY_AMBIENT_BASE_ANIMS(ped, toggle)
  native.invoke(
    Type.Void, 4266, false,
    arg(Type.Ped, ped),
    arg(Type.Bool, toggle)
  )
end

function PED.TRIGGER_IDLE_ANIMATION_ON_PED(ped)
  native.invoke(
    Type.Void, 4267, false,
    arg(Type.Ped, ped)
  )
end

function PED.SET_PED_CAN_ARM_IK(ped, toggle)
  native.invoke(
    Type.Void, 4268, false,
    arg(Type.Ped, ped),
    arg(Type.Bool, toggle)
  )
end

function PED.SET_PED_CAN_HEAD_IK(ped, toggle)
  native.invoke(
    Type.Void, 4269, false,
    arg(Type.Ped, ped),
    arg(Type.Bool, toggle)
  )
end

function PED.SET_PED_CAN_LEG_IK(ped, toggle)
  native.invoke(
    Type.Void, 4270, false,
    arg(Type.Ped, ped),
    arg(Type.Bool, toggle)
  )
end

function PED.SET_PED_CAN_TORSO_IK(ped, toggle)
  native.invoke(
    Type.Void, 4271, false,
    arg(Type.Ped, ped),
    arg(Type.Bool, toggle)
  )
end

function PED.SET_PED_CAN_TORSO_REACT_IK(ped, p1)
  native.invoke(
    Type.Void, 4272, false,
    arg(Type.Ped, ped),
    arg(Type.Bool, p1)
  )
end

function PED.SET_PED_CAN_TORSO_VEHICLE_IK(ped, p1)
  native.invoke(
    Type.Void, 4273, false,
    arg(Type.Ped, ped),
    arg(Type.Bool, p1)
  )
end

function PED.SET_PED_CAN_USE_AUTO_CONVERSATION_LOOKAT(ped, toggle)
  native.invoke(
    Type.Void, 4274, false,
    arg(Type.Ped, ped),
    arg(Type.Bool, toggle)
  )
end

function PED.IS_PED_HEADTRACKING_PED(ped1, ped2)
  return native.invoke(
    Type.Bool, 4275, false,
    arg(Type.Ped, ped1),
    arg(Type.Ped, ped2)
  )
end

function PED.IS_PED_HEADTRACKING_ENTITY(ped, entity)
  return native.invoke(
    Type.Bool, 4276, false,
    arg(Type.Ped, ped),
    arg(Type.Entity, entity)
  )
end

function PED.SET_PED_PRIMARY_LOOKAT(ped, lookAt)
  native.invoke(
    Type.Void, 4277, false,
    arg(Type.Ped, ped),
    arg(Type.Ped, lookAt)
  )
end

function PED.SET_PED_CLOTH_PIN_FRAMES(p0, p1)
  native.invoke(
    Type.Void, 4278, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1)
  )
end

function PED.SET_PED_CLOTH_PACKAGE_INDEX(p0, p1)
  native.invoke(
    Type.Void, 4279, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1)
  )
end

function PED.SET_PED_CLOTH_PRONE(p0, p1)
  native.invoke(
    Type.Void, 4280, false,
    arg(Type.Any, p0),
    arg(Type.Bool, p1)
  )
end

function PED.SET_PED_CONFIG_FLAG(ped, flagId, value)
  native.invoke(
    Type.Void, 4281, false,
    arg(Type.Ped, ped),
    arg(Type.Int, flagId),
    arg(Type.Bool, value)
  )
end

function PED.SET_PED_RESET_FLAG(ped, flagId, doReset)
  native.invoke(
    Type.Void, 4282, false,
    arg(Type.Ped, ped),
    arg(Type.Int, flagId),
    arg(Type.Bool, doReset)
  )
end

function PED.GET_PED_CONFIG_FLAG(ped, flagId, p2)
  return native.invoke(
    Type.Bool, 4283, false,
    arg(Type.Ped, ped),
    arg(Type.Int, flagId),
    arg(Type.Bool, p2)
  )
end

function PED.GET_PED_RESET_FLAG(ped, flagId)
  return native.invoke(
    Type.Bool, 4284, false,
    arg(Type.Ped, ped),
    arg(Type.Int, flagId)
  )
end

function PED.SET_PED_GROUP_MEMBER_PASSENGER_INDEX(ped, index)
  native.invoke(
    Type.Void, 4285, false,
    arg(Type.Ped, ped),
    arg(Type.Int, index)
  )
end

function PED.SET_PED_CAN_EVASIVE_DIVE(ped, toggle)
  native.invoke(
    Type.Void, 4286, false,
    arg(Type.Ped, ped),
    arg(Type.Bool, toggle)
  )
end

function PED.IS_PED_EVASIVE_DIVING(ped, evadingEntity)
  return native.invoke(
    Type.Bool, 4287, false,
    arg(Type.Ped, ped),
    ref(Type.Entity, evadingEntity)
  )
end

function PED.SET_PED_SHOOTS_AT_COORD(ped, x, y, z, toggle)
  native.invoke(
    Type.Void, 4288, false,
    arg(Type.Ped, ped),
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, z),
    arg(Type.Bool, toggle)
  )
end

function PED.SET_PED_MODEL_IS_SUPPRESSED(modelHash, toggle)
  native.invoke(
    Type.Void, 4289, false,
    arg(Type.Hash, modelHash),
    arg(Type.Bool, toggle)
  )
end

function PED.STOP_ANY_PED_MODEL_BEING_SUPPRESSED()
  native.invoke(
    Type.Void, 4290, false
  )
end

function PED.SET_PED_CAN_BE_TARGETED_WHEN_INJURED(ped, toggle)
  native.invoke(
    Type.Void, 4291, false,
    arg(Type.Ped, ped),
    arg(Type.Bool, toggle)
  )
end

function PED.SET_PED_GENERATES_DEAD_BODY_EVENTS(ped, toggle)
  native.invoke(
    Type.Void, 4292, false,
    arg(Type.Ped, ped),
    arg(Type.Bool, toggle)
  )
end

function PED.BLOCK_PED_FROM_GENERATING_DEAD_BODY_EVENTS_WHEN_DEAD(ped, toggle)
  native.invoke(
    Type.Void, 4293, false,
    arg(Type.Ped, ped),
    arg(Type.Bool, toggle)
  )
end

function PED.SET_PED_WILL_ONLY_ATTACK_WANTED_PLAYER(p0, p1)
  native.invoke(
    Type.Void, 4294, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1)
  )
end

function PED.SET_PED_CAN_RAGDOLL_FROM_PLAYER_IMPACT(ped, toggle)
  native.invoke(
    Type.Void, 4295, false,
    arg(Type.Ped, ped),
    arg(Type.Bool, toggle)
  )
end

function PED.GIVE_PED_HELMET(ped, cannotRemove, helmetFlag, textureIndex)
  native.invoke(
    Type.Void, 4296, false,
    arg(Type.Ped, ped),
    arg(Type.Bool, cannotRemove),
    arg(Type.Int, helmetFlag),
    arg(Type.Int, textureIndex)
  )
end

function PED.REMOVE_PED_HELMET(ped, instantly)
  native.invoke(
    Type.Void, 4297, false,
    arg(Type.Ped, ped),
    arg(Type.Bool, instantly)
  )
end

function PED.IS_PED_TAKING_OFF_HELMET(ped)
  return native.invoke(
    Type.Bool, 4298, false,
    arg(Type.Ped, ped)
  )
end

function PED.SET_PED_HELMET(ped, canWearHelmet)
  native.invoke(
    Type.Void, 4299, false,
    arg(Type.Ped, ped),
    arg(Type.Bool, canWearHelmet)
  )
end

function PED.SET_PED_HELMET_FLAG(ped, helmetFlag)
  native.invoke(
    Type.Void, 4300, false,
    arg(Type.Ped, ped),
    arg(Type.Int, helmetFlag)
  )
end

function PED.SET_PED_HELMET_PROP_INDEX(ped, propIndex, p2)
  native.invoke(
    Type.Void, 4301, false,
    arg(Type.Ped, ped),
    arg(Type.Int, propIndex),
    arg(Type.Bool, p2)
  )
end

function PED.SET_PED_HELMET_VISOR_PROP_INDICES(ped, p1, p2, p3)
  native.invoke(
    Type.Void, 4302, false,
    arg(Type.Ped, ped),
    arg(Type.Bool, p1),
    arg(Type.Int, p2),
    arg(Type.Int, p3)
  )
end

function PED.IS_PED_HELMET_VISOR_UP(ped)
  return native.invoke(
    Type.Bool, 4303, false,
    arg(Type.Ped, ped)
  )
end

function PED.SET_PED_HELMET_TEXTURE_INDEX(ped, textureIndex)
  native.invoke(
    Type.Void, 4304, false,
    arg(Type.Ped, ped),
    arg(Type.Int, textureIndex)
  )
end

function PED.IS_PED_WEARING_HELMET(ped)
  return native.invoke(
    Type.Bool, 4305, false,
    arg(Type.Ped, ped)
  )
end

function PED.CLEAR_PED_STORED_HAT_PROP(ped)
  native.invoke(
    Type.Void, 4306, false,
    arg(Type.Ped, ped)
  )
end

function PED.GET_PED_HELMET_STORED_HAT_PROP_INDEX(ped)
  return native.invoke(
    Type.Int, 4307, false,
    arg(Type.Ped, ped)
  )
end

function PED.GET_PED_HELMET_STORED_HAT_TEX_INDEX(ped)
  return native.invoke(
    Type.Int, 4308, false,
    arg(Type.Ped, ped)
  )
end

function PED.IS_CURRENT_HEAD_PROP_A_HELMET(p0)
  return native.invoke(
    Type.Bool, 4309, false,
    arg(Type.Any, p0)
  )
end

function PED.SET_PED_TO_LOAD_COVER(ped, toggle)
  native.invoke(
    Type.Void, 4310, false,
    arg(Type.Ped, ped),
    arg(Type.Bool, toggle)
  )
end

function PED.SET_PED_CAN_COWER_IN_COVER(ped, toggle)
  native.invoke(
    Type.Void, 4311, false,
    arg(Type.Ped, ped),
    arg(Type.Bool, toggle)
  )
end

function PED.SET_PED_CAN_PEEK_IN_COVER(ped, toggle)
  native.invoke(
    Type.Void, 4312, false,
    arg(Type.Ped, ped),
    arg(Type.Bool, toggle)
  )
end

function PED.SET_PED_PLAYS_HEAD_ON_HORN_ANIM_WHEN_DIES_IN_VEHICLE(ped, toggle)
  native.invoke(
    Type.Void, 4313, false,
    arg(Type.Ped, ped),
    arg(Type.Bool, toggle)
  )
end

function PED.SET_PED_LEG_IK_MODE(ped, mode)
  native.invoke(
    Type.Void, 4314, false,
    arg(Type.Ped, ped),
    arg(Type.Int, mode)
  )
end

function PED.SET_PED_MOTION_BLUR(ped, toggle)
  native.invoke(
    Type.Void, 4315, false,
    arg(Type.Ped, ped),
    arg(Type.Bool, toggle)
  )
end

function PED.SET_PED_CAN_SWITCH_WEAPON(ped, toggle)
  native.invoke(
    Type.Void, 4316, false,
    arg(Type.Ped, ped),
    arg(Type.Bool, toggle)
  )
end

function PED.SET_PED_DIES_INSTANTLY_IN_WATER(ped, toggle)
  native.invoke(
    Type.Void, 4317, false,
    arg(Type.Ped, ped),
    arg(Type.Bool, toggle)
  )
end

function PED.SET_LADDER_CLIMB_INPUT_STATE(ped, p1)
  native.invoke(
    Type.Void, 4318, false,
    arg(Type.Ped, ped),
    arg(Type.Int, p1)
  )
end

function PED.STOP_PED_WEAPON_FIRING_WHEN_DROPPED(ped)
  native.invoke(
    Type.Void, 4319, false,
    arg(Type.Ped, ped)
  )
end

function PED.SET_SCRIPTED_ANIM_SEAT_OFFSET(ped, p1)
  native.invoke(
    Type.Void, 4320, false,
    arg(Type.Ped, ped),
    arg(Type.Float, p1)
  )
end

function PED.SET_PED_COMBAT_MOVEMENT(ped, combatMovement)
  native.invoke(
    Type.Void, 4321, false,
    arg(Type.Ped, ped),
    arg(Type.Int, combatMovement)
  )
end

function PED.GET_PED_COMBAT_MOVEMENT(ped)
  return native.invoke(
    Type.Int, 4322, false,
    arg(Type.Ped, ped)
  )
end

function PED.SET_PED_COMBAT_ABILITY(ped, abilityLevel)
  native.invoke(
    Type.Void, 4323, false,
    arg(Type.Ped, ped),
    arg(Type.Int, abilityLevel)
  )
end

function PED.SET_PED_COMBAT_RANGE(ped, combatRange)
  native.invoke(
    Type.Void, 4324, false,
    arg(Type.Ped, ped),
    arg(Type.Int, combatRange)
  )
end

function PED.GET_PED_COMBAT_RANGE(ped)
  return native.invoke(
    Type.Int, 4325, false,
    arg(Type.Ped, ped)
  )
end

function PED.SET_PED_COMBAT_ATTRIBUTES(ped, attributeId, enabled)
  native.invoke(
    Type.Void, 4326, false,
    arg(Type.Ped, ped),
    arg(Type.Int, attributeId),
    arg(Type.Bool, enabled)
  )
end

function PED.SET_PED_TARGET_LOSS_RESPONSE(ped, responseType)
  native.invoke(
    Type.Void, 4327, false,
    arg(Type.Ped, ped),
    arg(Type.Int, responseType)
  )
end

function PED.IS_PED_PERFORMING_MELEE_ACTION(ped)
  return native.invoke(
    Type.Bool, 4328, false,
    arg(Type.Ped, ped)
  )
end

function PED.IS_PED_PERFORMING_STEALTH_KILL(ped)
  return native.invoke(
    Type.Bool, 4329, false,
    arg(Type.Ped, ped)
  )
end

function PED.IS_PED_PERFORMING_A_COUNTER_ATTACK(ped)
  return native.invoke(
    Type.Bool, 4330, false,
    arg(Type.Ped, ped)
  )
end

function PED.IS_PED_BEING_STEALTH_KILLED(ped)
  return native.invoke(
    Type.Bool, 4331, false,
    arg(Type.Ped, ped)
  )
end

function PED.GET_MELEE_TARGET_FOR_PED(ped)
  return native.invoke(
    Type.Ped, 4332, false,
    arg(Type.Ped, ped)
  )
end

function PED.WAS_PED_KILLED_BY_STEALTH(ped)
  return native.invoke(
    Type.Bool, 4333, false,
    arg(Type.Ped, ped)
  )
end

function PED.WAS_PED_KILLED_BY_TAKEDOWN(ped)
  return native.invoke(
    Type.Bool, 4334, false,
    arg(Type.Ped, ped)
  )
end

function PED.WAS_PED_KNOCKED_OUT(ped)
  return native.invoke(
    Type.Bool, 4335, false,
    arg(Type.Ped, ped)
  )
end

function PED.SET_PED_FLEE_ATTRIBUTES(ped, attributeFlags, enable)
  native.invoke(
    Type.Void, 4336, false,
    arg(Type.Ped, ped),
    arg(Type.Int, attributeFlags),
    arg(Type.Bool, enable)
  )
end

function PED.SET_PED_COWER_HASH(ped, p1)
  native.invoke(
    Type.Void, 4337, false,
    arg(Type.Ped, ped),
    arg(Type.String, p1)
  )
end

function PED.SET_PED_STEERS_AROUND_DEAD_BODIES(ped, toggle)
  native.invoke(
    Type.Void, 4338, false,
    arg(Type.Ped, ped),
    arg(Type.Bool, toggle)
  )
end

function PED.SET_PED_STEERS_AROUND_PEDS(ped, toggle)
  native.invoke(
    Type.Void, 4339, false,
    arg(Type.Ped, ped),
    arg(Type.Bool, toggle)
  )
end

function PED.SET_PED_STEERS_AROUND_OBJECTS(ped, toggle)
  native.invoke(
    Type.Void, 4340, false,
    arg(Type.Ped, ped),
    arg(Type.Bool, toggle)
  )
end

function PED.SET_PED_STEERS_AROUND_VEHICLES(ped, toggle)
  native.invoke(
    Type.Void, 4341, false,
    arg(Type.Ped, ped),
    arg(Type.Bool, toggle)
  )
end

function PED.SET_PED_IS_AVOIDED_BY_OTHERS(p0, p1)
  native.invoke(
    Type.Void, 4342, false,
    arg(Type.Any, p0),
    arg(Type.Bool, p1)
  )
end

function PED.SET_PED_INCREASED_AVOIDANCE_RADIUS(ped)
  native.invoke(
    Type.Void, 4343, false,
    arg(Type.Ped, ped)
  )
end

function PED.SET_PED_BLOCKS_PATHING_WHEN_DEAD(ped, toggle)
  native.invoke(
    Type.Void, 4344, false,
    arg(Type.Ped, ped),
    arg(Type.Bool, toggle)
  )
end

function PED.SET_PED_NO_TIME_DELAY_BEFORE_SHOT(p0)
  native.invoke(
    Type.Void, 4345, false,
    arg(Type.Any, p0)
  )
end

function PED.IS_ANY_PED_NEAR_POINT(x, y, z, radius)
  return native.invoke(
    Type.Bool, 4346, false,
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, z),
    arg(Type.Float, radius)
  )
end

function PED.FORCE_PED_AI_AND_ANIMATION_UPDATE(ped, p1, p2)
  native.invoke(
    Type.Void, 4347, false,
    arg(Type.Ped, ped),
    arg(Type.Bool, p1),
    arg(Type.Bool, p2)
  )
end

function PED.IS_PED_HEADING_TOWARDS_POSITION(ped, x, y, z, p4)
  return native.invoke(
    Type.Bool, 4348, false,
    arg(Type.Ped, ped),
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, z),
    arg(Type.Float, p4)
  )
end

function PED.REQUEST_PED_VISIBILITY_TRACKING(ped)
  native.invoke(
    Type.Void, 4349, false,
    arg(Type.Ped, ped)
  )
end

function PED.REQUEST_PED_VEHICLE_VISIBILITY_TRACKING(ped, p1)
  native.invoke(
    Type.Void, 4350, false,
    arg(Type.Ped, ped),
    arg(Type.Bool, p1)
  )
end

function PED.REQUEST_PED_RESTRICTED_VEHICLE_VISIBILITY_TRACKING(ped, p1)
  native.invoke(
    Type.Void, 4351, false,
    arg(Type.Ped, ped),
    arg(Type.Bool, p1)
  )
end

function PED.REQUEST_PED_USE_SMALL_BBOX_VISIBILITY_TRACKING(ped, p1)
  native.invoke(
    Type.Void, 4352, false,
    arg(Type.Ped, ped),
    arg(Type.Bool, p1)
  )
end

function PED.IS_TRACKED_PED_VISIBLE(ped)
  return native.invoke(
    Type.Bool, 4353, false,
    arg(Type.Ped, ped)
  )
end

function PED.GET_TRACKED_PED_PIXELCOUNT(ped)
  return native.invoke(
    Type.Int, 4354, false,
    arg(Type.Ped, ped)
  )
end

function PED.IS_PED_TRACKED(ped)
  return native.invoke(
    Type.Bool, 4355, false,
    arg(Type.Ped, ped)
  )
end

function PED.HAS_PED_RECEIVED_EVENT(ped, eventId)
  return native.invoke(
    Type.Bool, 4356, false,
    arg(Type.Ped, ped),
    arg(Type.Int, eventId)
  )
end

function PED.CAN_PED_SEE_HATED_PED(ped1, ped2)
  return native.invoke(
    Type.Bool, 4357, false,
    arg(Type.Ped, ped1),
    arg(Type.Ped, ped2)
  )
end

function PED.CAN_PED_SHUFFLE_TO_OR_FROM_TURRET_SEAT(ped, p1)
  return native.invoke(
    Type.Bool, 4358, false,
    arg(Type.Ped, ped),
    ref(Type.Int, p1)
  )
end

function PED.CAN_PED_SHUFFLE_TO_OR_FROM_EXTRA_SEAT(ped, p1)
  return native.invoke(
    Type.Bool, 4359, false,
    arg(Type.Ped, ped),
    ref(Type.Int, p1)
  )
end

function PED.GET_PED_BONE_INDEX(ped, boneId)
  return native.invoke(
    Type.Int, 4360, false,
    arg(Type.Ped, ped),
    arg(Type.Int, boneId)
  )
end

function PED.GET_PED_RAGDOLL_BONE_INDEX(ped, bone)
  return native.invoke(
    Type.Int, 4361, false,
    arg(Type.Ped, ped),
    arg(Type.Int, bone)
  )
end

function PED.SET_PED_ENVEFF_SCALE(ped, value)
  native.invoke(
    Type.Void, 4362, false,
    arg(Type.Ped, ped),
    arg(Type.Float, value)
  )
end

function PED.GET_PED_ENVEFF_SCALE(ped)
  return native.invoke(
    Type.Float, 4363, false,
    arg(Type.Ped, ped)
  )
end

function PED.SET_ENABLE_PED_ENVEFF_SCALE(ped, toggle)
  native.invoke(
    Type.Void, 4364, false,
    arg(Type.Ped, ped),
    arg(Type.Bool, toggle)
  )
end

function PED.SET_PED_ENVEFF_CPV_ADD(ped, p1)
  native.invoke(
    Type.Void, 4365, false,
    arg(Type.Ped, ped),
    arg(Type.Float, p1)
  )
end

function PED.SET_PED_ENVEFF_COLOR_MODULATOR(ped, p1, p2, p3)
  native.invoke(
    Type.Void, 4366, false,
    arg(Type.Ped, ped),
    arg(Type.Int, p1),
    arg(Type.Int, p2),
    arg(Type.Int, p3)
  )
end

function PED.SET_PED_EMISSIVE_SCALE(ped, intensity)
  native.invoke(
    Type.Void, 4367, false,
    arg(Type.Ped, ped),
    arg(Type.Float, intensity)
  )
end

function PED.GET_PED_EMISSIVE_SCALE(ped)
  return native.invoke(
    Type.Float, 4368, false,
    arg(Type.Ped, ped)
  )
end

function PED.IS_PED_SHADER_READY(ped)
  return native.invoke(
    Type.Bool, 4369, false,
    arg(Type.Ped, ped)
  )
end

function PED.SET_PED_ENABLE_CREW_EMBLEM(ped, toggle)
  native.invoke(
    Type.Void, 4370, false,
    arg(Type.Ped, ped),
    arg(Type.Bool, toggle)
  )
end

function PED.REQUEST_RAGDOLL_BOUNDS_UPDATE(p0, p1)
  native.invoke(
    Type.Void, 4371, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1)
  )
end

function PED.SET_PED_AO_BLOB_RENDERING(ped, toggle)
  native.invoke(
    Type.Void, 4372, false,
    arg(Type.Ped, ped),
    arg(Type.Bool, toggle)
  )
end

function PED.IS_PED_SHELTERED(ped)
  return native.invoke(
    Type.Bool, 4373, false,
    arg(Type.Ped, ped)
  )
end

function PED.CREATE_SYNCHRONIZED_SCENE(x, y, z, roll, pitch, yaw, p6)
  return native.invoke(
    Type.Int, 4374, false,
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, z),
    arg(Type.Float, roll),
    arg(Type.Float, pitch),
    arg(Type.Float, yaw),
    arg(Type.Int, p6)
  )
end

function PED.CREATE_SYNCHRONIZED_SCENE_AT_MAP_OBJECT(x, y, z, radius, object)
  return native.invoke(
    Type.Int, 4375, false,
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, z),
    arg(Type.Float, radius),
    arg(Type.Hash, object)
  )
end

function PED.IS_SYNCHRONIZED_SCENE_RUNNING(sceneId)
  return native.invoke(
    Type.Bool, 4376, false,
    arg(Type.Int, sceneId)
  )
end

function PED.SET_SYNCHRONIZED_SCENE_ORIGIN(sceneID, x, y, z, roll, pitch, yaw, p7)
  native.invoke(
    Type.Void, 4377, false,
    arg(Type.Int, sceneID),
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, z),
    arg(Type.Float, roll),
    arg(Type.Float, pitch),
    arg(Type.Float, yaw),
    arg(Type.Bool, p7)
  )
end

function PED.SET_SYNCHRONIZED_SCENE_PHASE(sceneID, phase)
  native.invoke(
    Type.Void, 4378, false,
    arg(Type.Int, sceneID),
    arg(Type.Float, phase)
  )
end

function PED.GET_SYNCHRONIZED_SCENE_PHASE(sceneID)
  return native.invoke(
    Type.Float, 4379, false,
    arg(Type.Int, sceneID)
  )
end

function PED.SET_SYNCHRONIZED_SCENE_RATE(sceneID, rate)
  native.invoke(
    Type.Void, 4380, false,
    arg(Type.Int, sceneID),
    arg(Type.Float, rate)
  )
end

function PED.GET_SYNCHRONIZED_SCENE_RATE(sceneID)
  return native.invoke(
    Type.Float, 4381, false,
    arg(Type.Int, sceneID)
  )
end

function PED.SET_SYNCHRONIZED_SCENE_LOOPED(sceneID, toggle)
  native.invoke(
    Type.Void, 4382, false,
    arg(Type.Int, sceneID),
    arg(Type.Bool, toggle)
  )
end

function PED.IS_SYNCHRONIZED_SCENE_LOOPED(sceneID)
  return native.invoke(
    Type.Bool, 4383, false,
    arg(Type.Int, sceneID)
  )
end

function PED.SET_SYNCHRONIZED_SCENE_HOLD_LAST_FRAME(sceneID, toggle)
  native.invoke(
    Type.Void, 4384, false,
    arg(Type.Int, sceneID),
    arg(Type.Bool, toggle)
  )
end

function PED.IS_SYNCHRONIZED_SCENE_HOLD_LAST_FRAME(sceneID)
  return native.invoke(
    Type.Bool, 4385, false,
    arg(Type.Int, sceneID)
  )
end

function PED.ATTACH_SYNCHRONIZED_SCENE_TO_ENTITY(sceneID, entity, boneIndex)
  native.invoke(
    Type.Void, 4386, false,
    arg(Type.Int, sceneID),
    arg(Type.Entity, entity),
    arg(Type.Int, boneIndex)
  )
end

function PED.DETACH_SYNCHRONIZED_SCENE(sceneID)
  native.invoke(
    Type.Void, 4387, false,
    arg(Type.Int, sceneID)
  )
end

function PED.TAKE_OWNERSHIP_OF_SYNCHRONIZED_SCENE(scene)
  native.invoke(
    Type.Void, 4388, false,
    arg(Type.Int, scene)
  )
end

function PED.FORCE_PED_MOTION_STATE(ped, motionStateHash, p2, p3, p4)
  return native.invoke(
    Type.Bool, 4389, false,
    arg(Type.Ped, ped),
    arg(Type.Hash, motionStateHash),
    arg(Type.Bool, p2),
    arg(Type.Int, p3),
    arg(Type.Bool, p4)
  )
end

function PED.GET_PED_CURRENT_MOVE_BLEND_RATIO(ped, speedX, speedY)
  return native.invoke(
    Type.Bool, 4390, false,
    arg(Type.Ped, ped),
    ref(Type.Float, speedX),
    ref(Type.Float, speedY)
  )
end

function PED.SET_PED_MAX_MOVE_BLEND_RATIO(ped, value)
  native.invoke(
    Type.Void, 4391, false,
    arg(Type.Ped, ped),
    arg(Type.Float, value)
  )
end

function PED.SET_PED_MIN_MOVE_BLEND_RATIO(ped, value)
  native.invoke(
    Type.Void, 4392, false,
    arg(Type.Ped, ped),
    arg(Type.Float, value)
  )
end

function PED.SET_PED_MOVE_RATE_OVERRIDE(ped, value)
  native.invoke(
    Type.Void, 4393, false,
    arg(Type.Ped, ped),
    arg(Type.Float, value)
  )
end

function PED.SET_PED_MOVE_RATE_IN_WATER_OVERRIDE(ped, p1)
  native.invoke(
    Type.Void, 4394, false,
    arg(Type.Ped, ped),
    arg(Type.Float, p1)
  )
end

function PED.PED_HAS_SEXINESS_FLAG_SET(ped, sexinessFlag)
  return native.invoke(
    Type.Bool, 4395, false,
    arg(Type.Ped, ped),
    arg(Type.Int, sexinessFlag)
  )
end

function PED.GET_PED_NEARBY_VEHICLES(ped, sizeAndVehs)
  return native.invoke(
    Type.Int, 4396, false,
    arg(Type.Ped, ped),
    ref(Type.Any, sizeAndVehs)
  )
end

function PED.GET_PED_NEARBY_PEDS(ped, sizeAndPeds, ignore)
  return native.invoke(
    Type.Int, 4397, false,
    arg(Type.Ped, ped),
    ref(Type.Any, sizeAndPeds),
    arg(Type.Int, ignore)
  )
end

function PED.HAVE_ALL_STREAMING_REQUESTS_COMPLETED(ped)
  return native.invoke(
    Type.Bool, 4398, false,
    arg(Type.Ped, ped)
  )
end

function PED.IS_PED_USING_ACTION_MODE(ped)
  return native.invoke(
    Type.Bool, 4399, false,
    arg(Type.Ped, ped)
  )
end

function PED.SET_PED_USING_ACTION_MODE(ped, p1, p2, action)
  native.invoke(
    Type.Void, 4400, false,
    arg(Type.Ped, ped),
    arg(Type.Bool, p1),
    arg(Type.Int, p2),
    arg(Type.String, action)
  )
end

function PED.SET_MOVEMENT_MODE_OVERRIDE(ped, name)
  native.invoke(
    Type.Void, 4401, false,
    arg(Type.Ped, ped),
    arg(Type.String, name)
  )
end

function PED.SET_PED_CAPSULE(ped, value)
  native.invoke(
    Type.Void, 4402, false,
    arg(Type.Ped, ped),
    arg(Type.Float, value)
  )
end

function PED.REGISTER_PEDHEADSHOT(ped)
  return native.invoke(
    Type.Int, 4403, false,
    arg(Type.Ped, ped)
  )
end

function PED.REGISTER_PEDHEADSHOT_HIRES(ped)
  return native.invoke(
    Type.Int, 4404, false,
    arg(Type.Ped, ped)
  )
end

function PED.REGISTER_PEDHEADSHOT_TRANSPARENT(ped)
  return native.invoke(
    Type.Int, 4405, false,
    arg(Type.Ped, ped)
  )
end

function PED.UNREGISTER_PEDHEADSHOT(id)
  native.invoke(
    Type.Void, 4406, false,
    arg(Type.Int, id)
  )
end

function PED.IS_PEDHEADSHOT_VALID(id)
  return native.invoke(
    Type.Bool, 4407, false,
    arg(Type.Int, id)
  )
end

function PED.IS_PEDHEADSHOT_READY(id)
  return native.invoke(
    Type.Bool, 4408, false,
    arg(Type.Int, id)
  )
end

function PED.GET_PEDHEADSHOT_TXD_STRING(id)
  return native.invoke(
    Type.String, 4409, false,
    arg(Type.Int, id)
  )
end

function PED.REQUEST_PEDHEADSHOT_IMG_UPLOAD(id)
  return native.invoke(
    Type.Bool, 4410, false,
    arg(Type.Int, id)
  )
end

function PED.RELEASE_PEDHEADSHOT_IMG_UPLOAD(id)
  native.invoke(
    Type.Void, 4411, false,
    arg(Type.Int, id)
  )
end

function PED.IS_PEDHEADSHOT_IMG_UPLOAD_AVAILABLE()
  return native.invoke(
    Type.Bool, 4412, false
  )
end

function PED.HAS_PEDHEADSHOT_IMG_UPLOAD_FAILED()
  return native.invoke(
    Type.Bool, 4413, false
  )
end

function PED.HAS_PEDHEADSHOT_IMG_UPLOAD_SUCCEEDED()
  return native.invoke(
    Type.Bool, 4414, false
  )
end

function PED.SET_PED_HEATSCALE_OVERRIDE(ped, heatScale)
  native.invoke(
    Type.Void, 4415, false,
    arg(Type.Ped, ped),
    arg(Type.Float, heatScale)
  )
end

function PED.DISABLE_PED_HEATSCALE_OVERRIDE(ped)
  native.invoke(
    Type.Void, 4416, false,
    arg(Type.Ped, ped)
  )
end

function PED.SPAWNPOINTS_START_SEARCH(p0, p1, p2, p3, p4, interiorFlags, scale, duration)
  native.invoke(
    Type.Void, 4417, false,
    arg(Type.Float, p0),
    arg(Type.Float, p1),
    arg(Type.Float, p2),
    arg(Type.Float, p3),
    arg(Type.Float, p4),
    arg(Type.Int, interiorFlags),
    arg(Type.Float, scale),
    arg(Type.Int, duration)
  )
end

function PED.SPAWNPOINTS_START_SEARCH_IN_ANGLED_AREA(x1, y1, z1, x2, y2, z2, width, interiorFlags, scale, duration)
  native.invoke(
    Type.Void, 4418, false,
    arg(Type.Float, x1),
    arg(Type.Float, y1),
    arg(Type.Float, z1),
    arg(Type.Float, x2),
    arg(Type.Float, y2),
    arg(Type.Float, z2),
    arg(Type.Float, width),
    arg(Type.Int, interiorFlags),
    arg(Type.Float, scale),
    arg(Type.Int, duration)
  )
end

function PED.SPAWNPOINTS_CANCEL_SEARCH()
  native.invoke(
    Type.Void, 4419, false
  )
end

function PED.SPAWNPOINTS_IS_SEARCH_ACTIVE()
  return native.invoke(
    Type.Bool, 4420, false
  )
end

function PED.SPAWNPOINTS_IS_SEARCH_COMPLETE()
  return native.invoke(
    Type.Bool, 4421, false
  )
end

function PED.SPAWNPOINTS_IS_SEARCH_FAILED()
  return native.invoke(
    Type.Bool, 4422, false
  )
end

function PED.SPAWNPOINTS_GET_NUM_SEARCH_RESULTS()
  return native.invoke(
    Type.Int, 4423, false
  )
end

function PED.SPAWNPOINTS_GET_SEARCH_RESULT(randomInt, x, y, z)
  native.invoke(
    Type.Void, 4424, false,
    arg(Type.Int, randomInt),
    ref(Type.Float, x),
    ref(Type.Float, y),
    ref(Type.Float, z)
  )
end

function PED.SPAWNPOINTS_GET_SEARCH_RESULT_FLAGS(p0, p1)
  native.invoke(
    Type.Void, 4425, false,
    arg(Type.Int, p0),
    ref(Type.Int, p1)
  )
end

function PED.SET_IK_TARGET(ped, ikIndex, entityLookAt, boneLookAt, offsetX, offsetY, offsetZ, p7, blendInDuration, blendOutDuration)
  native.invoke(
    Type.Void, 4426, false,
    arg(Type.Ped, ped),
    arg(Type.Int, ikIndex),
    arg(Type.Entity, entityLookAt),
    arg(Type.Int, boneLookAt),
    arg(Type.Float, offsetX),
    arg(Type.Float, offsetY),
    arg(Type.Float, offsetZ),
    arg(Type.Any, p7),
    arg(Type.Int, blendInDuration),
    arg(Type.Int, blendOutDuration)
  )
end

function PED.FORCE_INSTANT_LEG_IK_SETUP(ped)
  native.invoke(
    Type.Void, 4427, false,
    arg(Type.Ped, ped)
  )
end

function PED.REQUEST_ACTION_MODE_ASSET(asset)
  native.invoke(
    Type.Void, 4428, false,
    arg(Type.String, asset)
  )
end

function PED.HAS_ACTION_MODE_ASSET_LOADED(asset)
  return native.invoke(
    Type.Bool, 4429, false,
    arg(Type.String, asset)
  )
end

function PED.REMOVE_ACTION_MODE_ASSET(asset)
  native.invoke(
    Type.Void, 4430, false,
    arg(Type.String, asset)
  )
end

function PED.REQUEST_STEALTH_MODE_ASSET(asset)
  native.invoke(
    Type.Void, 4431, false,
    arg(Type.String, asset)
  )
end

function PED.HAS_STEALTH_MODE_ASSET_LOADED(asset)
  return native.invoke(
    Type.Bool, 4432, false,
    arg(Type.String, asset)
  )
end

function PED.REMOVE_STEALTH_MODE_ASSET(asset)
  native.invoke(
    Type.Void, 4433, false,
    arg(Type.String, asset)
  )
end

function PED.SET_PED_LOD_MULTIPLIER(ped, multiplier)
  native.invoke(
    Type.Void, 4434, false,
    arg(Type.Ped, ped),
    arg(Type.Float, multiplier)
  )
end

function PED.SET_PED_CAN_LOSE_PROPS_ON_DAMAGE(ped, toggle, p2)
  native.invoke(
    Type.Void, 4435, false,
    arg(Type.Ped, ped),
    arg(Type.Bool, toggle),
    arg(Type.Int, p2)
  )
end

function PED.SET_FORCE_FOOTSTEP_UPDATE(ped, toggle)
  native.invoke(
    Type.Void, 4436, false,
    arg(Type.Ped, ped),
    arg(Type.Bool, toggle)
  )
end

function PED.SET_FORCE_STEP_TYPE(ped, p1, type, p3)
  native.invoke(
    Type.Void, 4437, false,
    arg(Type.Ped, ped),
    arg(Type.Bool, p1),
    arg(Type.Int, type),
    arg(Type.Int, p3)
  )
end

function PED.IS_ANY_HOSTILE_PED_NEAR_POINT(ped, x, y, z, radius)
  return native.invoke(
    Type.Bool, 4438, false,
    arg(Type.Ped, ped),
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, z),
    arg(Type.Float, radius)
  )
end

function PED.SET_PED_CAN_PLAY_IN_CAR_IDLES(ped, toggle)
  native.invoke(
    Type.Void, 4439, false,
    arg(Type.Ped, ped),
    arg(Type.Bool, toggle)
  )
end

function PED.IS_TARGET_PED_IN_PERCEPTION_AREA(ped, targetPed, p2, p3, p4, p5)
  return native.invoke(
    Type.Bool, 4440, false,
    arg(Type.Ped, ped),
    arg(Type.Ped, targetPed),
    arg(Type.Float, p2),
    arg(Type.Float, p3),
    arg(Type.Float, p4),
    arg(Type.Float, p5)
  )
end

function PED.SET_POP_CONTROL_SPHERE_THIS_FRAME(x, y, z, min, max)
  native.invoke(
    Type.Void, 4441, false,
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, z),
    arg(Type.Float, min),
    arg(Type.Float, max)
  )
end

function PED.FORCE_ZERO_MASS_IN_COLLISIONS(ped)
  native.invoke(
    Type.Void, 4442, false,
    arg(Type.Ped, ped)
  )
end

function PED.SET_DISABLE_HIGH_FALL_DEATH(ped, toggle)
  native.invoke(
    Type.Void, 4443, false,
    arg(Type.Ped, ped),
    arg(Type.Bool, toggle)
  )
end

function PED.SET_PED_PHONE_PALETTE_IDX(p0, p1)
  native.invoke(
    Type.Void, 4444, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1)
  )
end

function PED.SET_PED_STEER_BIAS(ped, value)
  native.invoke(
    Type.Void, 4445, false,
    arg(Type.Ped, ped),
    arg(Type.Float, value)
  )
end

function PED.IS_PED_SWITCHING_WEAPON(Ped)
  return native.invoke(
    Type.Bool, 4446, false,
    arg(Type.Ped, Ped)
  )
end

function PED.SET_PED_TREATED_AS_FRIENDLY(p0, p1, p2)
  native.invoke(
    Type.Void, 4447, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1),
    arg(Type.Any, p2)
  )
end

function PED.SET_DISABLE_PED_MAP_COLLISION(ped)
  native.invoke(
    Type.Void, 4448, false,
    arg(Type.Ped, ped)
  )
end

function PED.ENABLE_MP_LIGHT(ped, toggle)
  native.invoke(
    Type.Void, 4449, false,
    arg(Type.Ped, ped),
    arg(Type.Bool, toggle)
  )
end

function PED.GET_MP_LIGHT_ENABLED(ped)
  return native.invoke(
    Type.Bool, 4450, false,
    arg(Type.Ped, ped)
  )
end

function PED.CLEAR_COVER_POINT_FOR_PED(ped)
  native.invoke(
    Type.Void, 4451, false,
    arg(Type.Ped, ped)
  )
end

function PED.SET_ALLOW_STUNT_JUMP_CAMERA(ped, toggle)
  native.invoke(
    Type.Void, 4452, false,
    arg(Type.Ped, ped),
    arg(Type.Bool, toggle)
  )
end


PHYSICS = {}

function PHYSICS.ADD_ROPE(x, y, z, rotX, rotY, rotZ, length, ropeType, maxLength, minLength, windingSpeed, p11, p12, rigid, p14, breakWhenShot, unkPtr)
  return native.invoke(
    Type.Int, 4453, false,
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, z),
    arg(Type.Float, rotX),
    arg(Type.Float, rotY),
    arg(Type.Float, rotZ),
    arg(Type.Float, length),
    arg(Type.Int, ropeType),
    arg(Type.Float, maxLength),
    arg(Type.Float, minLength),
    arg(Type.Float, windingSpeed),
    arg(Type.Bool, p11),
    arg(Type.Bool, p12),
    arg(Type.Bool, rigid),
    arg(Type.Float, p14),
    arg(Type.Bool, breakWhenShot),
    ref(Type.Any, unkPtr)
  )
end

function PHYSICS.DELETE_ROPE(ropeId)
  native.invoke(
    Type.Void, 4454, false,
    ref(Type.Int, ropeId)
  )
end

function PHYSICS.DELETE_CHILD_ROPE(ropeId)
  native.invoke(
    Type.Void, 4455, false,
    arg(Type.Int, ropeId)
  )
end

function PHYSICS.DOES_ROPE_EXIST(ropeId)
  return native.invoke(
    Type.Bool, 4456, false,
    ref(Type.Int, ropeId)
  )
end

function PHYSICS.ROPE_DRAW_ENABLED(ropeId, p1)
  native.invoke(
    Type.Void, 4457, false,
    ref(Type.Int, ropeId),
    arg(Type.Bool, p1)
  )
end

function PHYSICS.ROPE_DRAW_SHADOW_ENABLED(ropeId, toggle)
  native.invoke(
    Type.Void, 4458, false,
    ref(Type.Int, ropeId),
    arg(Type.Bool, toggle)
  )
end

function PHYSICS.LOAD_ROPE_DATA(ropeId, rope_preset)
  native.invoke(
    Type.Void, 4459, false,
    arg(Type.Int, ropeId),
    arg(Type.String, rope_preset)
  )
end

function PHYSICS.PIN_ROPE_VERTEX(ropeId, vertex, x, y, z)
  native.invoke(
    Type.Void, 4460, false,
    arg(Type.Int, ropeId),
    arg(Type.Int, vertex),
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, z)
  )
end

function PHYSICS.UNPIN_ROPE_VERTEX(ropeId, vertex)
  native.invoke(
    Type.Void, 4461, false,
    arg(Type.Int, ropeId),
    arg(Type.Int, vertex)
  )
end

function PHYSICS.GET_ROPE_VERTEX_COUNT(ropeId)
  return native.invoke(
    Type.Int, 4462, false,
    arg(Type.Int, ropeId)
  )
end

function PHYSICS.ATTACH_ENTITIES_TO_ROPE(ropeId, ent1, ent2, ent1_x, ent1_y, ent1_z, ent2_x, ent2_y, ent2_z, length, p10, p11, p12, p13)
  native.invoke(
    Type.Void, 4463, false,
    arg(Type.Int, ropeId),
    arg(Type.Entity, ent1),
    arg(Type.Entity, ent2),
    arg(Type.Float, ent1_x),
    arg(Type.Float, ent1_y),
    arg(Type.Float, ent1_z),
    arg(Type.Float, ent2_x),
    arg(Type.Float, ent2_y),
    arg(Type.Float, ent2_z),
    arg(Type.Float, length),
    arg(Type.Bool, p10),
    arg(Type.Bool, p11),
    ref(Type.Any, p12),
    ref(Type.Any, p13)
  )
end

function PHYSICS.ATTACH_ROPE_TO_ENTITY(ropeId, entity, x, y, z, p5)
  native.invoke(
    Type.Void, 4464, false,
    arg(Type.Int, ropeId),
    arg(Type.Entity, entity),
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, z),
    arg(Type.Bool, p5)
  )
end

function PHYSICS.DETACH_ROPE_FROM_ENTITY(ropeId, entity)
  native.invoke(
    Type.Void, 4465, false,
    arg(Type.Int, ropeId),
    arg(Type.Entity, entity)
  )
end

function PHYSICS.ROPE_SET_UPDATE_PINVERTS(ropeId)
  native.invoke(
    Type.Void, 4466, false,
    arg(Type.Int, ropeId)
  )
end

function PHYSICS.ROPE_SET_UPDATE_ORDER(ropeId, p1)
  native.invoke(
    Type.Void, 4467, false,
    arg(Type.Int, ropeId),
    arg(Type.Any, p1)
  )
end

function PHYSICS.ROPE_SET_SMOOTH_REELIN(ropeId, p1)
  native.invoke(
    Type.Void, 4468, false,
    arg(Type.Int, ropeId),
    arg(Type.Bool, p1)
  )
end

function PHYSICS.IS_ROPE_ATTACHED_AT_BOTH_ENDS(ropeId)
  return native.invoke(
    Type.Bool, 4469, false,
    ref(Type.Int, ropeId)
  )
end

function PHYSICS.GET_ROPE_LAST_VERTEX_COORD(ropeId)
  return native.invoke(
    Type.Vector3, 4470, false,
    arg(Type.Int, ropeId)
  )
end

function PHYSICS.GET_ROPE_VERTEX_COORD(ropeId, vertex)
  return native.invoke(
    Type.Vector3, 4471, false,
    arg(Type.Int, ropeId),
    arg(Type.Int, vertex)
  )
end

function PHYSICS.START_ROPE_WINDING(ropeId)
  native.invoke(
    Type.Void, 4472, false,
    arg(Type.Int, ropeId)
  )
end

function PHYSICS.STOP_ROPE_WINDING(ropeId)
  native.invoke(
    Type.Void, 4473, false,
    arg(Type.Int, ropeId)
  )
end

function PHYSICS.START_ROPE_UNWINDING_FRONT(ropeId)
  native.invoke(
    Type.Void, 4474, false,
    arg(Type.Int, ropeId)
  )
end

function PHYSICS.STOP_ROPE_UNWINDING_FRONT(ropeId)
  native.invoke(
    Type.Void, 4475, false,
    arg(Type.Int, ropeId)
  )
end

function PHYSICS.ROPE_CONVERT_TO_SIMPLE(ropeId)
  native.invoke(
    Type.Void, 4476, false,
    arg(Type.Int, ropeId)
  )
end

function PHYSICS.ROPE_LOAD_TEXTURES()
  native.invoke(
    Type.Void, 4477, false
  )
end

function PHYSICS.ROPE_ARE_TEXTURES_LOADED()
  return native.invoke(
    Type.Bool, 4478, false
  )
end

function PHYSICS.ROPE_UNLOAD_TEXTURES()
  native.invoke(
    Type.Void, 4479, false
  )
end

function PHYSICS.DOES_SCRIPT_OWN_ROPE(ropeId)
  return native.invoke(
    Type.Bool, 4480, false,
    arg(Type.Int, ropeId)
  )
end

function PHYSICS.ROPE_ATTACH_VIRTUAL_BOUND_GEOM(ropeId, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13)
  native.invoke(
    Type.Void, 4481, false,
    arg(Type.Int, ropeId),
    arg(Type.Int, p1),
    arg(Type.Float, p2),
    arg(Type.Float, p3),
    arg(Type.Float, p4),
    arg(Type.Float, p5),
    arg(Type.Float, p6),
    arg(Type.Float, p7),
    arg(Type.Float, p8),
    arg(Type.Float, p9),
    arg(Type.Float, p10),
    arg(Type.Float, p11),
    arg(Type.Float, p12),
    arg(Type.Float, p13)
  )
end

function PHYSICS.ROPE_CHANGE_SCRIPT_OWNER(p0, p1, p2)
  native.invoke(
    Type.Void, 4482, false,
    arg(Type.Any, p0),
    arg(Type.Bool, p1),
    arg(Type.Bool, p2)
  )
end

function PHYSICS.ROPE_SET_REFFRAMEVELOCITY_COLLIDERORDER(ropeId, p1)
  native.invoke(
    Type.Void, 4483, false,
    arg(Type.Int, ropeId),
    arg(Type.Int, p1)
  )
end

function PHYSICS.ROPE_GET_DISTANCE_BETWEEN_ENDS(ropeId)
  return native.invoke(
    Type.Float, 4484, false,
    arg(Type.Int, ropeId)
  )
end

function PHYSICS.ROPE_FORCE_LENGTH(ropeId, length)
  native.invoke(
    Type.Void, 4485, false,
    arg(Type.Int, ropeId),
    arg(Type.Float, length)
  )
end

function PHYSICS.ROPE_RESET_LENGTH(ropeId, length)
  native.invoke(
    Type.Void, 4486, false,
    arg(Type.Int, ropeId),
    arg(Type.Float, length)
  )
end

function PHYSICS.APPLY_IMPULSE_TO_CLOTH(posX, posY, posZ, vecX, vecY, vecZ, impulse)
  native.invoke(
    Type.Void, 4487, false,
    arg(Type.Float, posX),
    arg(Type.Float, posY),
    arg(Type.Float, posZ),
    arg(Type.Float, vecX),
    arg(Type.Float, vecY),
    arg(Type.Float, vecZ),
    arg(Type.Float, impulse)
  )
end

function PHYSICS.SET_DAMPING(entity, vertex, value)
  native.invoke(
    Type.Void, 4488, false,
    arg(Type.Entity, entity),
    arg(Type.Int, vertex),
    arg(Type.Float, value)
  )
end

function PHYSICS.ACTIVATE_PHYSICS(entity)
  native.invoke(
    Type.Void, 4489, false,
    arg(Type.Entity, entity)
  )
end

function PHYSICS.SET_CGOFFSET(entity, x, y, z)
  native.invoke(
    Type.Void, 4490, false,
    arg(Type.Entity, entity),
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, z)
  )
end

function PHYSICS.GET_CGOFFSET(entity)
  return native.invoke(
    Type.Vector3, 4491, false,
    arg(Type.Entity, entity)
  )
end

function PHYSICS.SET_CG_AT_BOUNDCENTER(entity)
  native.invoke(
    Type.Void, 4492, false,
    arg(Type.Entity, entity)
  )
end

function PHYSICS.BREAK_ENTITY_GLASS(entity, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10)
  native.invoke(
    Type.Void, 4493, false,
    arg(Type.Entity, entity),
    arg(Type.Float, p1),
    arg(Type.Float, p2),
    arg(Type.Float, p3),
    arg(Type.Float, p4),
    arg(Type.Float, p5),
    arg(Type.Float, p6),
    arg(Type.Float, p7),
    arg(Type.Float, p8),
    arg(Type.Any, p9),
    arg(Type.Bool, p10)
  )
end

function PHYSICS.GET_IS_ENTITY_A_FRAG(object)
  return native.invoke(
    Type.Bool, 4494, false,
    arg(Type.Object, object)
  )
end

function PHYSICS.SET_DISABLE_BREAKING(object, toggle)
  native.invoke(
    Type.Void, 4495, false,
    arg(Type.Object, object),
    arg(Type.Bool, toggle)
  )
end

function PHYSICS.RESET_DISABLE_BREAKING(object)
  native.invoke(
    Type.Void, 4496, false,
    arg(Type.Object, object)
  )
end

function PHYSICS.SET_DISABLE_FRAG_DAMAGE(object, toggle)
  native.invoke(
    Type.Void, 4497, false,
    arg(Type.Object, object),
    arg(Type.Bool, toggle)
  )
end

function PHYSICS.SET_USE_KINEMATIC_PHYSICS(entity, toggle)
  native.invoke(
    Type.Void, 4498, false,
    arg(Type.Entity, entity),
    arg(Type.Bool, toggle)
  )
end

function PHYSICS.SET_IN_STUNT_MODE(p0)
  native.invoke(
    Type.Void, 4499, false,
    arg(Type.Bool, p0)
  )
end

function PHYSICS.SET_IN_ARENA_MODE(toggle)
  native.invoke(
    Type.Void, 4500, false,
    arg(Type.Bool, toggle)
  )
end


PLAYER = {}

function PLAYER.GET_PLAYER_PED(player)
  return native.invoke(
    Type.Ped, 4501, false,
    arg(Type.Player, player)
  )
end

function PLAYER.GET_PLAYER_PED_SCRIPT_INDEX(player)
  return native.invoke(
    Type.Ped, 4502, false,
    arg(Type.Player, player)
  )
end

function PLAYER.SET_PLAYER_MODEL(player, model)
  native.invoke(
    Type.Void, 4503, false,
    arg(Type.Player, player),
    arg(Type.Hash, model)
  )
end

function PLAYER.CHANGE_PLAYER_PED(player, ped, p2, resetDamage)
  native.invoke(
    Type.Void, 4504, false,
    arg(Type.Player, player),
    arg(Type.Ped, ped),
    arg(Type.Bool, p2),
    arg(Type.Bool, resetDamage)
  )
end

function PLAYER.GET_PLAYER_RGB_COLOUR(player, r, g, b)
  native.invoke(
    Type.Void, 4505, false,
    arg(Type.Player, player),
    ref(Type.Int, r),
    ref(Type.Int, g),
    ref(Type.Int, b)
  )
end

function PLAYER.GET_NUMBER_OF_PLAYERS()
  return native.invoke(
    Type.Int, 4506, false
  )
end

function PLAYER.GET_PLAYER_TEAM(player)
  return native.invoke(
    Type.Int, 4507, false,
    arg(Type.Player, player)
  )
end

function PLAYER.SET_PLAYER_TEAM(player, team)
  native.invoke(
    Type.Void, 4508, false,
    arg(Type.Player, player),
    arg(Type.Int, team)
  )
end

function PLAYER.GET_NUMBER_OF_PLAYERS_IN_TEAM(team)
  return native.invoke(
    Type.Int, 4509, false,
    arg(Type.Int, team)
  )
end

function PLAYER.GET_PLAYER_NAME(player)
  return native.invoke(
    Type.String, 4510, false,
    arg(Type.Player, player)
  )
end

function PLAYER.GET_WANTED_LEVEL_RADIUS(player)
  return native.invoke(
    Type.Float, 4511, false,
    arg(Type.Player, player)
  )
end

function PLAYER.GET_PLAYER_WANTED_CENTRE_POSITION(player)
  return native.invoke(
    Type.Vector3, 4512, false,
    arg(Type.Player, player)
  )
end

function PLAYER.SET_PLAYER_WANTED_CENTRE_POSITION(player, position, p2, p3)
  native.invoke(
    Type.Void, 4513, true,
    arg(Type.Player, player),
    ref(Type.Vector3, position),
    arg(Type.Bool, p2),
    arg(Type.Bool, p3)
  )
end

function PLAYER.GET_WANTED_LEVEL_THRESHOLD(wantedLevel)
  return native.invoke(
    Type.Int, 4514, false,
    arg(Type.Int, wantedLevel)
  )
end

function PLAYER.SET_PLAYER_WANTED_LEVEL(player, wantedLevel, disableNoMission)
  native.invoke(
    Type.Void, 4515, false,
    arg(Type.Player, player),
    arg(Type.Int, wantedLevel),
    arg(Type.Bool, disableNoMission)
  )
end

function PLAYER.SET_PLAYER_WANTED_LEVEL_NO_DROP(player, wantedLevel, p2)
  native.invoke(
    Type.Void, 4516, false,
    arg(Type.Player, player),
    arg(Type.Int, wantedLevel),
    arg(Type.Bool, p2)
  )
end

function PLAYER.SET_PLAYER_WANTED_LEVEL_NOW(player, p1)
  native.invoke(
    Type.Void, 4517, false,
    arg(Type.Player, player),
    arg(Type.Bool, p1)
  )
end

function PLAYER.ARE_PLAYER_FLASHING_STARS_ABOUT_TO_DROP(player)
  return native.invoke(
    Type.Bool, 4518, false,
    arg(Type.Player, player)
  )
end

function PLAYER.ARE_PLAYER_STARS_GREYED_OUT(player)
  return native.invoke(
    Type.Bool, 4519, false,
    arg(Type.Player, player)
  )
end

function PLAYER.IS_WANTED_AND_HAS_BEEN_SEEN_BY_COPS(player)
  return native.invoke(
    Type.Bool, 4520, false,
    arg(Type.Player, player)
  )
end

function PLAYER.SET_DISPATCH_COPS_FOR_PLAYER(player, toggle)
  native.invoke(
    Type.Void, 4521, false,
    arg(Type.Player, player),
    arg(Type.Bool, toggle)
  )
end

function PLAYER.IS_PLAYER_WANTED_LEVEL_GREATER(player, wantedLevel)
  return native.invoke(
    Type.Bool, 4522, false,
    arg(Type.Player, player),
    arg(Type.Int, wantedLevel)
  )
end

function PLAYER.CLEAR_PLAYER_WANTED_LEVEL(player)
  native.invoke(
    Type.Void, 4523, false,
    arg(Type.Player, player)
  )
end

function PLAYER.IS_PLAYER_DEAD(player)
  return native.invoke(
    Type.Bool, 4524, false,
    arg(Type.Player, player)
  )
end

function PLAYER.IS_PLAYER_PRESSING_HORN(player)
  return native.invoke(
    Type.Bool, 4525, false,
    arg(Type.Player, player)
  )
end

function PLAYER.SET_PLAYER_CONTROL(player, bHasControl, flags)
  native.invoke(
    Type.Void, 4526, false,
    arg(Type.Player, player),
    arg(Type.Bool, bHasControl),
    arg(Type.Int, flags)
  )
end

function PLAYER.GET_PLAYER_WANTED_LEVEL(player)
  return native.invoke(
    Type.Int, 4527, false,
    arg(Type.Player, player)
  )
end

function PLAYER.SET_MAX_WANTED_LEVEL(maxWantedLevel)
  native.invoke(
    Type.Void, 4528, false,
    arg(Type.Int, maxWantedLevel)
  )
end

function PLAYER.SET_POLICE_RADAR_BLIPS(toggle)
  native.invoke(
    Type.Void, 4529, false,
    arg(Type.Bool, toggle)
  )
end

function PLAYER.SET_POLICE_IGNORE_PLAYER(player, toggle)
  native.invoke(
    Type.Void, 4530, false,
    arg(Type.Player, player),
    arg(Type.Bool, toggle)
  )
end

function PLAYER.IS_PLAYER_PLAYING(player)
  return native.invoke(
    Type.Bool, 4531, false,
    arg(Type.Player, player)
  )
end

function PLAYER.SET_EVERYONE_IGNORE_PLAYER(player, toggle)
  native.invoke(
    Type.Void, 4532, false,
    arg(Type.Player, player),
    arg(Type.Bool, toggle)
  )
end

function PLAYER.SET_ALL_RANDOM_PEDS_FLEE(player, toggle)
  native.invoke(
    Type.Void, 4533, false,
    arg(Type.Player, player),
    arg(Type.Bool, toggle)
  )
end

function PLAYER.SET_ALL_RANDOM_PEDS_FLEE_THIS_FRAME(player)
  native.invoke(
    Type.Void, 4534, false,
    arg(Type.Player, player)
  )
end

function PLAYER.SET_ALL_NEUTRAL_RANDOM_PEDS_FLEE(player, toggle)
  native.invoke(
    Type.Void, 4535, false,
    arg(Type.Player, player),
    arg(Type.Bool, toggle)
  )
end

function PLAYER.SET_ALL_NEUTRAL_RANDOM_PEDS_FLEE_THIS_FRAME(player)
  native.invoke(
    Type.Void, 4536, false,
    arg(Type.Player, player)
  )
end

function PLAYER.SET_LAW_PEDS_CAN_ATTACK_NON_WANTED_PLAYER_THIS_FRAME(player)
  native.invoke(
    Type.Void, 4537, false,
    arg(Type.Player, player)
  )
end

function PLAYER.SET_IGNORE_LOW_PRIORITY_SHOCKING_EVENTS(player, toggle)
  native.invoke(
    Type.Void, 4538, false,
    arg(Type.Player, player),
    arg(Type.Bool, toggle)
  )
end

function PLAYER.SET_WANTED_LEVEL_MULTIPLIER(multiplier)
  native.invoke(
    Type.Void, 4539, false,
    arg(Type.Float, multiplier)
  )
end

function PLAYER.SET_WANTED_LEVEL_DIFFICULTY(player, difficulty)
  native.invoke(
    Type.Void, 4540, false,
    arg(Type.Player, player),
    arg(Type.Float, difficulty)
  )
end

function PLAYER.RESET_WANTED_LEVEL_DIFFICULTY(player)
  native.invoke(
    Type.Void, 4541, false,
    arg(Type.Player, player)
  )
end

function PLAYER.GET_WANTED_LEVEL_TIME_TO_ESCAPE()
  return native.invoke(
    Type.Int, 4542, false
  )
end

function PLAYER.SET_WANTED_LEVEL_HIDDEN_ESCAPE_TIME(player, wantedLevel, lossTime)
  native.invoke(
    Type.Void, 4543, false,
    arg(Type.Player, player),
    arg(Type.Int, wantedLevel),
    arg(Type.Int, lossTime)
  )
end

function PLAYER.RESET_WANTED_LEVEL_HIDDEN_ESCAPE_TIME(player)
  native.invoke(
    Type.Void, 4544, false,
    arg(Type.Player, player)
  )
end

function PLAYER.START_FIRING_AMNESTY(duration)
  native.invoke(
    Type.Void, 4545, false,
    arg(Type.Int, duration)
  )
end

function PLAYER.REPORT_CRIME(player, crimeType, wantedLvlThresh)
  native.invoke(
    Type.Void, 4546, false,
    arg(Type.Player, player),
    arg(Type.Int, crimeType),
    arg(Type.Int, wantedLvlThresh)
  )
end

function PLAYER.SUPPRESS_CRIME_THIS_FRAME(player, crimeType)
  native.invoke(
    Type.Void, 4547, false,
    arg(Type.Player, player),
    arg(Type.Int, crimeType)
  )
end

function PLAYER.UPDATE_WANTED_POSITION_THIS_FRAME(player)
  native.invoke(
    Type.Void, 4548, false,
    arg(Type.Player, player)
  )
end

function PLAYER.SUPPRESS_LOSING_WANTED_LEVEL_IF_HIDDEN_THIS_FRAME(player)
  native.invoke(
    Type.Void, 4549, false,
    arg(Type.Player, player)
  )
end

function PLAYER.ALLOW_EVASION_HUD_IF_DISABLING_HIDDEN_EVASION_THIS_FRAME(player, p1)
  native.invoke(
    Type.Void, 4550, false,
    arg(Type.Player, player),
    arg(Type.Any, p1)
  )
end

function PLAYER.FORCE_START_HIDDEN_EVASION(player)
  native.invoke(
    Type.Void, 4551, false,
    arg(Type.Player, player)
  )
end

function PLAYER.SUPPRESS_WITNESSES_CALLING_POLICE_THIS_FRAME(player)
  native.invoke(
    Type.Void, 4552, false,
    arg(Type.Player, player)
  )
end

function PLAYER.REPORT_POLICE_SPOTTED_PLAYER(player)
  native.invoke(
    Type.Void, 4553, false,
    arg(Type.Player, player)
  )
end

function PLAYER.SET_LAW_RESPONSE_DELAY_OVERRIDE(p0)
  native.invoke(
    Type.Void, 4554, false,
    arg(Type.Float, p0)
  )
end

function PLAYER.RESET_LAW_RESPONSE_DELAY_OVERRIDE()
  native.invoke(
    Type.Void, 4555, false
  )
end

function PLAYER.CAN_PLAYER_START_MISSION(player)
  return native.invoke(
    Type.Bool, 4556, false,
    arg(Type.Player, player)
  )
end

function PLAYER.IS_PLAYER_READY_FOR_CUTSCENE(player)
  return native.invoke(
    Type.Bool, 4557, false,
    arg(Type.Player, player)
  )
end

function PLAYER.IS_PLAYER_TARGETTING_ENTITY(player, entity)
  return native.invoke(
    Type.Bool, 4558, false,
    arg(Type.Player, player),
    arg(Type.Entity, entity)
  )
end

function PLAYER.GET_PLAYER_TARGET_ENTITY(player, entity)
  return native.invoke(
    Type.Bool, 4559, false,
    arg(Type.Player, player),
    ref(Type.Entity, entity)
  )
end

function PLAYER.IS_PLAYER_FREE_AIMING(player)
  return native.invoke(
    Type.Bool, 4560, false,
    arg(Type.Player, player)
  )
end

function PLAYER.IS_PLAYER_FREE_AIMING_AT_ENTITY(player, entity)
  return native.invoke(
    Type.Bool, 4561, false,
    arg(Type.Player, player),
    arg(Type.Entity, entity)
  )
end

function PLAYER.GET_ENTITY_PLAYER_IS_FREE_AIMING_AT(player, entity)
  return native.invoke(
    Type.Bool, 4562, false,
    arg(Type.Player, player),
    ref(Type.Entity, entity)
  )
end

function PLAYER.SET_PLAYER_LOCKON_RANGE_OVERRIDE(player, range)
  native.invoke(
    Type.Void, 4563, false,
    arg(Type.Player, player),
    arg(Type.Float, range)
  )
end

function PLAYER.SET_PLAYER_CAN_DO_DRIVE_BY(player, toggle)
  native.invoke(
    Type.Void, 4564, false,
    arg(Type.Player, player),
    arg(Type.Bool, toggle)
  )
end

function PLAYER.SET_PLAYER_CAN_BE_HASSLED_BY_GANGS(player, toggle)
  native.invoke(
    Type.Void, 4565, false,
    arg(Type.Player, player),
    arg(Type.Bool, toggle)
  )
end

function PLAYER.SET_PLAYER_CAN_USE_COVER(player, toggle)
  native.invoke(
    Type.Void, 4566, false,
    arg(Type.Player, player),
    arg(Type.Bool, toggle)
  )
end

function PLAYER.GET_MAX_WANTED_LEVEL()
  return native.invoke(
    Type.Int, 4567, false
  )
end

function PLAYER.IS_PLAYER_TARGETTING_ANYTHING(player)
  return native.invoke(
    Type.Bool, 4568, false,
    arg(Type.Player, player)
  )
end

function PLAYER.SET_PLAYER_SPRINT(player, toggle)
  native.invoke(
    Type.Void, 4569, false,
    arg(Type.Player, player),
    arg(Type.Bool, toggle)
  )
end

function PLAYER.RESET_PLAYER_STAMINA(player)
  native.invoke(
    Type.Void, 4570, false,
    arg(Type.Player, player)
  )
end

function PLAYER.RESTORE_PLAYER_STAMINA(player, p1)
  native.invoke(
    Type.Void, 4571, false,
    arg(Type.Player, player),
    arg(Type.Float, p1)
  )
end

function PLAYER.GET_PLAYER_SPRINT_STAMINA_REMAINING(player)
  return native.invoke(
    Type.Float, 4572, false,
    arg(Type.Player, player)
  )
end

function PLAYER.GET_PLAYER_SPRINT_TIME_REMAINING(player)
  return native.invoke(
    Type.Float, 4573, false,
    arg(Type.Player, player)
  )
end

function PLAYER.GET_PLAYER_UNDERWATER_TIME_REMAINING(player)
  return native.invoke(
    Type.Float, 4574, false,
    arg(Type.Player, player)
  )
end

function PLAYER.SET_PLAYER_UNDERWATER_BREATH_PERCENT_REMAINING(player, time)
  return native.invoke(
    Type.Float, 4575, false,
    arg(Type.Player, player),
    arg(Type.Float, time)
  )
end

function PLAYER.GET_PLAYER_GROUP(player)
  return native.invoke(
    Type.Int, 4576, false,
    arg(Type.Player, player)
  )
end

function PLAYER.GET_PLAYER_MAX_ARMOUR(player)
  return native.invoke(
    Type.Int, 4577, false,
    arg(Type.Player, player)
  )
end

function PLAYER.IS_PLAYER_CONTROL_ON(player)
  return native.invoke(
    Type.Bool, 4578, false,
    arg(Type.Player, player)
  )
end

function PLAYER.GET_ARE_CAMERA_CONTROLS_DISABLED()
  return native.invoke(
    Type.Bool, 4579, false
  )
end

function PLAYER.IS_PLAYER_SCRIPT_CONTROL_ON(player)
  return native.invoke(
    Type.Bool, 4580, false,
    arg(Type.Player, player)
  )
end

function PLAYER.IS_PLAYER_CLIMBING(player)
  return native.invoke(
    Type.Bool, 4581, false,
    arg(Type.Player, player)
  )
end

function PLAYER.IS_PLAYER_BEING_ARRESTED(player, atArresting)
  return native.invoke(
    Type.Bool, 4582, false,
    arg(Type.Player, player),
    arg(Type.Bool, atArresting)
  )
end

function PLAYER.RESET_PLAYER_ARREST_STATE(player)
  native.invoke(
    Type.Void, 4583, false,
    arg(Type.Player, player)
  )
end

function PLAYER.GET_PLAYERS_LAST_VEHICLE()
  return native.invoke(
    Type.Vehicle, 4584, false
  )
end

function PLAYER.GET_PLAYER_INDEX()
  return native.invoke(
    Type.Player, 4585, false
  )
end

function PLAYER.INT_TO_PLAYERINDEX(value)
  return native.invoke(
    Type.Player, 4586, false,
    arg(Type.Int, value)
  )
end

function PLAYER.INT_TO_PARTICIPANTINDEX(value)
  return native.invoke(
    Type.Int, 4587, false,
    arg(Type.Int, value)
  )
end

function PLAYER.GET_TIME_SINCE_PLAYER_HIT_VEHICLE(player)
  return native.invoke(
    Type.Int, 4588, false,
    arg(Type.Player, player)
  )
end

function PLAYER.GET_TIME_SINCE_PLAYER_HIT_PED(player)
  return native.invoke(
    Type.Int, 4589, false,
    arg(Type.Player, player)
  )
end

function PLAYER.GET_TIME_SINCE_PLAYER_DROVE_ON_PAVEMENT(player)
  return native.invoke(
    Type.Int, 4590, false,
    arg(Type.Player, player)
  )
end

function PLAYER.GET_TIME_SINCE_PLAYER_DROVE_AGAINST_TRAFFIC(player)
  return native.invoke(
    Type.Int, 4591, false,
    arg(Type.Player, player)
  )
end

function PLAYER.IS_PLAYER_FREE_FOR_AMBIENT_TASK(player)
  return native.invoke(
    Type.Bool, 4592, false,
    arg(Type.Player, player)
  )
end

function PLAYER.PLAYER_ID()
  return native.invoke(
    Type.Player, 4593, false
  )
end

function PLAYER.PLAYER_PED_ID()
  return native.invoke(
    Type.Ped, 4594, false
  )
end

function PLAYER.NETWORK_PLAYER_ID_TO_INT()
  return native.invoke(
    Type.Int, 4595, false
  )
end

function PLAYER.HAS_FORCE_CLEANUP_OCCURRED(cleanupFlags)
  return native.invoke(
    Type.Bool, 4596, false,
    arg(Type.Int, cleanupFlags)
  )
end

function PLAYER.FORCE_CLEANUP(cleanupFlags)
  native.invoke(
    Type.Void, 4597, false,
    arg(Type.Int, cleanupFlags)
  )
end

function PLAYER.FORCE_CLEANUP_FOR_ALL_THREADS_WITH_THIS_NAME(name, cleanupFlags)
  native.invoke(
    Type.Void, 4598, false,
    arg(Type.String, name),
    arg(Type.Int, cleanupFlags)
  )
end

function PLAYER.FORCE_CLEANUP_FOR_THREAD_WITH_THIS_ID(id, cleanupFlags)
  native.invoke(
    Type.Void, 4599, false,
    arg(Type.Int, id),
    arg(Type.Int, cleanupFlags)
  )
end

function PLAYER.GET_CAUSE_OF_MOST_RECENT_FORCE_CLEANUP()
  return native.invoke(
    Type.Int, 4600, false
  )
end

function PLAYER.SET_PLAYER_MAY_ONLY_ENTER_THIS_VEHICLE(player, vehicle)
  native.invoke(
    Type.Void, 4601, false,
    arg(Type.Player, player),
    arg(Type.Vehicle, vehicle)
  )
end

function PLAYER.SET_PLAYER_MAY_NOT_ENTER_ANY_VEHICLE(player)
  native.invoke(
    Type.Void, 4602, false,
    arg(Type.Player, player)
  )
end

function PLAYER.GIVE_ACHIEVEMENT_TO_PLAYER(achievementId)
  return native.invoke(
    Type.Bool, 4603, false,
    arg(Type.Int, achievementId)
  )
end

function PLAYER.SET_ACHIEVEMENT_PROGRESS(achievementId, progress)
  return native.invoke(
    Type.Bool, 4604, false,
    arg(Type.Int, achievementId),
    arg(Type.Int, progress)
  )
end

function PLAYER.GET_ACHIEVEMENT_PROGRESS(achievementId)
  return native.invoke(
    Type.Int, 4605, false,
    arg(Type.Int, achievementId)
  )
end

function PLAYER.HAS_ACHIEVEMENT_BEEN_PASSED(achievementId)
  return native.invoke(
    Type.Bool, 4606, false,
    arg(Type.Int, achievementId)
  )
end

function PLAYER.IS_PLAYER_ONLINE()
  return native.invoke(
    Type.Bool, 4607, false
  )
end

function PLAYER.IS_PLAYER_LOGGING_IN_NP()
  return native.invoke(
    Type.Bool, 4608, false
  )
end

function PLAYER.DISPLAY_SYSTEM_SIGNIN_UI(p0)
  native.invoke(
    Type.Void, 4609, false,
    arg(Type.Bool, p0)
  )
end

function PLAYER.IS_SYSTEM_UI_BEING_DISPLAYED()
  return native.invoke(
    Type.Bool, 4610, false
  )
end

function PLAYER.SET_PLAYER_INVINCIBLE(player, toggle)
  native.invoke(
    Type.Void, 4611, false,
    arg(Type.Player, player),
    arg(Type.Bool, toggle)
  )
end

function PLAYER.GET_PLAYER_INVINCIBLE(player)
  return native.invoke(
    Type.Bool, 4612, false,
    arg(Type.Player, player)
  )
end

function PLAYER.GET_PLAYER_DEBUG_INVINCIBLE(player)
  return native.invoke(
    Type.Bool, 4613, false,
    arg(Type.Player, player)
  )
end

function PLAYER.SET_PLAYER_INVINCIBLE_BUT_HAS_REACTIONS(player, toggle)
  native.invoke(
    Type.Void, 4614, false,
    arg(Type.Player, player),
    arg(Type.Bool, toggle)
  )
end

function PLAYER.SET_PLAYER_CAN_COLLECT_DROPPED_MONEY(player, p1)
  native.invoke(
    Type.Void, 4615, false,
    arg(Type.Player, player),
    arg(Type.Bool, p1)
  )
end

function PLAYER.REMOVE_PLAYER_HELMET(player, p2)
  native.invoke(
    Type.Void, 4616, false,
    arg(Type.Player, player),
    arg(Type.Bool, p2)
  )
end

function PLAYER.GIVE_PLAYER_RAGDOLL_CONTROL(player, toggle)
  native.invoke(
    Type.Void, 4617, false,
    arg(Type.Player, player),
    arg(Type.Bool, toggle)
  )
end

function PLAYER.SET_PLAYER_LOCKON(player, toggle)
  native.invoke(
    Type.Void, 4618, false,
    arg(Type.Player, player),
    arg(Type.Bool, toggle)
  )
end

function PLAYER.SET_PLAYER_TARGETING_MODE(targetMode)
  native.invoke(
    Type.Void, 4619, false,
    arg(Type.Int, targetMode)
  )
end

function PLAYER.GET_PLAYER_TARGETING_MODE()
  return native.invoke(
    Type.Int, 4620, false
  )
end

function PLAYER.SET_PLAYER_TARGET_LEVEL(targetLevel)
  native.invoke(
    Type.Void, 4621, false,
    arg(Type.Int, targetLevel)
  )
end

function PLAYER.GET_IS_USING_FPS_THIRD_PERSON_COVER()
  return native.invoke(
    Type.Bool, 4622, false
  )
end

function PLAYER.GET_IS_USING_HOOD_CAMERA()
  return native.invoke(
    Type.Bool, 4623, false
  )
end

function PLAYER.CLEAR_PLAYER_HAS_DAMAGED_AT_LEAST_ONE_PED(player)
  native.invoke(
    Type.Void, 4624, false,
    arg(Type.Player, player)
  )
end

function PLAYER.HAS_PLAYER_DAMAGED_AT_LEAST_ONE_PED(player)
  return native.invoke(
    Type.Bool, 4625, false,
    arg(Type.Player, player)
  )
end

function PLAYER.CLEAR_PLAYER_HAS_DAMAGED_AT_LEAST_ONE_NON_ANIMAL_PED(player)
  native.invoke(
    Type.Void, 4626, false,
    arg(Type.Player, player)
  )
end

function PLAYER.HAS_PLAYER_DAMAGED_AT_LEAST_ONE_NON_ANIMAL_PED(player)
  return native.invoke(
    Type.Bool, 4627, false,
    arg(Type.Player, player)
  )
end

function PLAYER.SET_AIR_DRAG_MULTIPLIER_FOR_PLAYERS_VEHICLE(player, multiplier)
  native.invoke(
    Type.Void, 4628, false,
    arg(Type.Player, player),
    arg(Type.Float, multiplier)
  )
end

function PLAYER.SET_SWIM_MULTIPLIER_FOR_PLAYER(player, multiplier)
  native.invoke(
    Type.Void, 4629, false,
    arg(Type.Player, player),
    arg(Type.Float, multiplier)
  )
end

function PLAYER.SET_RUN_SPRINT_MULTIPLIER_FOR_PLAYER(player, multiplier)
  native.invoke(
    Type.Void, 4630, false,
    arg(Type.Player, player),
    arg(Type.Float, multiplier)
  )
end

function PLAYER.GET_TIME_SINCE_LAST_ARREST()
  return native.invoke(
    Type.Int, 4631, false
  )
end

function PLAYER.GET_TIME_SINCE_LAST_DEATH()
  return native.invoke(
    Type.Int, 4632, false
  )
end

function PLAYER.ASSISTED_MOVEMENT_CLOSE_ROUTE()
  native.invoke(
    Type.Void, 4633, false
  )
end

function PLAYER.ASSISTED_MOVEMENT_FLUSH_ROUTE()
  native.invoke(
    Type.Void, 4634, false
  )
end

function PLAYER.SET_PLAYER_FORCED_AIM(player, toggle)
  native.invoke(
    Type.Void, 4635, false,
    arg(Type.Player, player),
    arg(Type.Bool, toggle)
  )
end

function PLAYER.SET_PLAYER_FORCED_ZOOM(player, toggle)
  native.invoke(
    Type.Void, 4636, false,
    arg(Type.Player, player),
    arg(Type.Bool, toggle)
  )
end

function PLAYER.SET_PLAYER_FORCE_SKIP_AIM_INTRO(player, toggle)
  native.invoke(
    Type.Void, 4637, false,
    arg(Type.Player, player),
    arg(Type.Bool, toggle)
  )
end

function PLAYER.DISABLE_PLAYER_FIRING(player, toggle)
  native.invoke(
    Type.Void, 4638, false,
    arg(Type.Player, player),
    arg(Type.Bool, toggle)
  )
end

function PLAYER.DISABLE_PLAYER_THROW_GRENADE_WHILE_USING_GUN()
  native.invoke(
    Type.Void, 4639, false
  )
end

function PLAYER.SET_DISABLE_AMBIENT_MELEE_MOVE(player, toggle)
  native.invoke(
    Type.Void, 4640, false,
    arg(Type.Player, player),
    arg(Type.Bool, toggle)
  )
end

function PLAYER.SET_PLAYER_MAX_ARMOUR(player, value)
  native.invoke(
    Type.Void, 4641, false,
    arg(Type.Player, player),
    arg(Type.Int, value)
  )
end

function PLAYER.SPECIAL_ABILITY_ACTIVATE(player, p1)
  native.invoke(
    Type.Void, 4642, false,
    arg(Type.Player, player),
    arg(Type.Int, p1)
  )
end

function PLAYER.SET_SPECIAL_ABILITY_MP(player, p1, p2)
  native.invoke(
    Type.Void, 4643, false,
    arg(Type.Player, player),
    arg(Type.Int, p1),
    arg(Type.Any, p2)
  )
end

function PLAYER.SPECIAL_ABILITY_DEACTIVATE_MP(player, p1)
  native.invoke(
    Type.Void, 4644, false,
    arg(Type.Player, player),
    arg(Type.Int, p1)
  )
end

function PLAYER.SPECIAL_ABILITY_DEACTIVATE(player, p1)
  native.invoke(
    Type.Void, 4645, false,
    arg(Type.Player, player),
    arg(Type.Any, p1)
  )
end

function PLAYER.SPECIAL_ABILITY_DEACTIVATE_FAST(player, p1)
  native.invoke(
    Type.Void, 4646, false,
    arg(Type.Player, player),
    arg(Type.Any, p1)
  )
end

function PLAYER.SPECIAL_ABILITY_RESET(player, p1)
  native.invoke(
    Type.Void, 4647, false,
    arg(Type.Player, player),
    arg(Type.Any, p1)
  )
end

function PLAYER.SPECIAL_ABILITY_CHARGE_ON_MISSION_FAILED(player, p1)
  native.invoke(
    Type.Void, 4648, false,
    arg(Type.Player, player),
    arg(Type.Any, p1)
  )
end

function PLAYER.SPECIAL_ABILITY_CHARGE_SMALL(player, p1, p2, p3)
  native.invoke(
    Type.Void, 4649, false,
    arg(Type.Player, player),
    arg(Type.Bool, p1),
    arg(Type.Bool, p2),
    arg(Type.Any, p3)
  )
end

function PLAYER.SPECIAL_ABILITY_CHARGE_MEDIUM(player, p1, p2, p3)
  native.invoke(
    Type.Void, 4650, false,
    arg(Type.Player, player),
    arg(Type.Bool, p1),
    arg(Type.Bool, p2),
    arg(Type.Any, p3)
  )
end

function PLAYER.SPECIAL_ABILITY_CHARGE_LARGE(player, p1, p2, p3)
  native.invoke(
    Type.Void, 4651, false,
    arg(Type.Player, player),
    arg(Type.Bool, p1),
    arg(Type.Bool, p2),
    arg(Type.Any, p3)
  )
end

function PLAYER.SPECIAL_ABILITY_CHARGE_CONTINUOUS(player, p1, p2)
  native.invoke(
    Type.Void, 4652, false,
    arg(Type.Player, player),
    arg(Type.Ped, p1),
    arg(Type.Any, p2)
  )
end

function PLAYER.SPECIAL_ABILITY_CHARGE_ABSOLUTE(player, p1, p2, p3)
  native.invoke(
    Type.Void, 4653, false,
    arg(Type.Player, player),
    arg(Type.Int, p1),
    arg(Type.Bool, p2),
    arg(Type.Any, p3)
  )
end

function PLAYER.SPECIAL_ABILITY_CHARGE_NORMALIZED(player, normalizedValue, p2, p3)
  native.invoke(
    Type.Void, 4654, false,
    arg(Type.Player, player),
    arg(Type.Float, normalizedValue),
    arg(Type.Bool, p2),
    arg(Type.Any, p3)
  )
end

function PLAYER.SPECIAL_ABILITY_FILL_METER(player, p1, p2)
  native.invoke(
    Type.Void, 4655, false,
    arg(Type.Player, player),
    arg(Type.Bool, p1),
    arg(Type.Any, p2)
  )
end

function PLAYER.SPECIAL_ABILITY_DEPLETE_METER(player, p1, p2)
  native.invoke(
    Type.Void, 4656, false,
    arg(Type.Player, player),
    arg(Type.Bool, p1),
    arg(Type.Any, p2)
  )
end

function PLAYER.SPECIAL_ABILITY_LOCK(playerModel, p1)
  native.invoke(
    Type.Void, 4657, false,
    arg(Type.Hash, playerModel),
    arg(Type.Any, p1)
  )
end

function PLAYER.SPECIAL_ABILITY_UNLOCK(playerModel, p1)
  native.invoke(
    Type.Void, 4658, false,
    arg(Type.Hash, playerModel),
    arg(Type.Any, p1)
  )
end

function PLAYER.IS_SPECIAL_ABILITY_UNLOCKED(playerModel)
  return native.invoke(
    Type.Bool, 4659, false,
    arg(Type.Hash, playerModel)
  )
end

function PLAYER.IS_SPECIAL_ABILITY_ACTIVE(player, p1)
  return native.invoke(
    Type.Bool, 4660, false,
    arg(Type.Player, player),
    arg(Type.Any, p1)
  )
end

function PLAYER.IS_SPECIAL_ABILITY_METER_FULL(player, p1)
  return native.invoke(
    Type.Bool, 4661, false,
    arg(Type.Player, player),
    arg(Type.Any, p1)
  )
end

function PLAYER.ENABLE_SPECIAL_ABILITY(player, toggle, p2)
  native.invoke(
    Type.Void, 4662, false,
    arg(Type.Player, player),
    arg(Type.Bool, toggle),
    arg(Type.Any, p2)
  )
end

function PLAYER.IS_SPECIAL_ABILITY_ENABLED(player, p1)
  return native.invoke(
    Type.Bool, 4663, false,
    arg(Type.Player, player),
    arg(Type.Any, p1)
  )
end

function PLAYER.SET_SPECIAL_ABILITY_MULTIPLIER(multiplier)
  native.invoke(
    Type.Void, 4664, false,
    arg(Type.Float, multiplier)
  )
end

function PLAYER.UPDATE_SPECIAL_ABILITY_FROM_STAT(player, p1)
  native.invoke(
    Type.Void, 4665, false,
    arg(Type.Player, player),
    arg(Type.Any, p1)
  )
end

function PLAYER.GET_IS_PLAYER_DRIVING_ON_HIGHWAY(player)
  return native.invoke(
    Type.Bool, 4666, false,
    arg(Type.Player, player)
  )
end

function PLAYER.GET_IS_PLAYER_DRIVING_WRECKLESS(player, p1)
  return native.invoke(
    Type.Bool, 4667, false,
    arg(Type.Player, player),
    arg(Type.Int, p1)
  )
end

function PLAYER.GET_IS_MOPPING_AREA_FREE_IN_FRONT_OF_PLAYER(player, p1)
  return native.invoke(
    Type.Bool, 4668, false,
    arg(Type.Player, player),
    arg(Type.Float, p1)
  )
end

function PLAYER.START_PLAYER_TELEPORT(player, x, y, z, heading, p5, findCollisionLand, p7)
  native.invoke(
    Type.Void, 4669, false,
    arg(Type.Player, player),
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, z),
    arg(Type.Float, heading),
    arg(Type.Bool, p5),
    arg(Type.Bool, findCollisionLand),
    arg(Type.Bool, p7)
  )
end

function PLAYER.UPDATE_PLAYER_TELEPORT(player)
  return native.invoke(
    Type.Bool, 4670, false,
    arg(Type.Player, player)
  )
end

function PLAYER.STOP_PLAYER_TELEPORT()
  native.invoke(
    Type.Void, 4671, false
  )
end

function PLAYER.IS_PLAYER_TELEPORT_ACTIVE()
  return native.invoke(
    Type.Bool, 4672, false
  )
end

function PLAYER.GET_PLAYER_CURRENT_STEALTH_NOISE(player)
  return native.invoke(
    Type.Float, 4673, false,
    arg(Type.Player, player)
  )
end

function PLAYER.SET_PLAYER_HEALTH_RECHARGE_MULTIPLIER(player, regenRate)
  native.invoke(
    Type.Void, 4674, false,
    arg(Type.Player, player),
    arg(Type.Float, regenRate)
  )
end

function PLAYER.GET_PLAYER_HEALTH_RECHARGE_MAX_PERCENT(player)
  return native.invoke(
    Type.Float, 4675, false,
    arg(Type.Player, player)
  )
end

function PLAYER.SET_PLAYER_HEALTH_RECHARGE_MAX_PERCENT(player, limit)
  native.invoke(
    Type.Void, 4676, false,
    arg(Type.Player, player),
    arg(Type.Float, limit)
  )
end

function PLAYER.DISABLE_PLAYER_HEALTH_RECHARGE(player)
  native.invoke(
    Type.Void, 4677, false,
    arg(Type.Player, player)
  )
end

function PLAYER.SET_PLAYER_FALL_DISTANCE_TO_TRIGGER_RAGDOLL_OVERRIDE(player, p1)
  native.invoke(
    Type.Void, 4678, false,
    arg(Type.Player, player),
    arg(Type.Float, p1)
  )
end

function PLAYER.SET_PLAYER_WEAPON_DAMAGE_MODIFIER(player, modifier)
  native.invoke(
    Type.Void, 4679, false,
    arg(Type.Player, player),
    arg(Type.Float, modifier)
  )
end

function PLAYER.SET_PLAYER_WEAPON_DEFENSE_MODIFIER(player, modifier)
  native.invoke(
    Type.Void, 4680, false,
    arg(Type.Player, player),
    arg(Type.Float, modifier)
  )
end

function PLAYER.SET_PLAYER_WEAPON_MINIGUN_DEFENSE_MODIFIER(player, modifier)
  native.invoke(
    Type.Void, 4681, false,
    arg(Type.Player, player),
    arg(Type.Float, modifier)
  )
end

function PLAYER.SET_PLAYER_MELEE_WEAPON_DAMAGE_MODIFIER(player, modifier, p2)
  native.invoke(
    Type.Void, 4682, false,
    arg(Type.Player, player),
    arg(Type.Float, modifier),
    arg(Type.Bool, p2)
  )
end

function PLAYER.SET_PLAYER_MELEE_WEAPON_DEFENSE_MODIFIER(player, modifier)
  native.invoke(
    Type.Void, 4683, false,
    arg(Type.Player, player),
    arg(Type.Float, modifier)
  )
end

function PLAYER.SET_PLAYER_VEHICLE_DAMAGE_MODIFIER(player, modifier)
  native.invoke(
    Type.Void, 4684, false,
    arg(Type.Player, player),
    arg(Type.Float, modifier)
  )
end

function PLAYER.SET_PLAYER_VEHICLE_DEFENSE_MODIFIER(player, modifier)
  native.invoke(
    Type.Void, 4685, false,
    arg(Type.Player, player),
    arg(Type.Float, modifier)
  )
end

function PLAYER.SET_PLAYER_MAX_EXPLOSIVE_DAMAGE(player, p1)
  native.invoke(
    Type.Void, 4686, false,
    arg(Type.Player, player),
    arg(Type.Float, p1)
  )
end

function PLAYER.SET_PLAYER_EXPLOSIVE_DAMAGE_MODIFIER(player, p1)
  native.invoke(
    Type.Void, 4687, false,
    arg(Type.Player, player),
    arg(Type.Any, p1)
  )
end

function PLAYER.SET_PLAYER_WEAPON_TAKEDOWN_DEFENSE_MODIFIER(player, p1)
  native.invoke(
    Type.Void, 4688, false,
    arg(Type.Player, player),
    arg(Type.Float, p1)
  )
end

function PLAYER.SET_PLAYER_PARACHUTE_TINT_INDEX(player, tintIndex)
  native.invoke(
    Type.Void, 4689, false,
    arg(Type.Player, player),
    arg(Type.Int, tintIndex)
  )
end

function PLAYER.GET_PLAYER_PARACHUTE_TINT_INDEX(player, tintIndex)
  native.invoke(
    Type.Void, 4690, false,
    arg(Type.Player, player),
    ref(Type.Int, tintIndex)
  )
end

function PLAYER.SET_PLAYER_RESERVE_PARACHUTE_TINT_INDEX(player, index)
  native.invoke(
    Type.Void, 4691, false,
    arg(Type.Player, player),
    arg(Type.Int, index)
  )
end

function PLAYER.GET_PLAYER_RESERVE_PARACHUTE_TINT_INDEX(player, index)
  native.invoke(
    Type.Void, 4692, false,
    arg(Type.Player, player),
    ref(Type.Int, index)
  )
end

function PLAYER.SET_PLAYER_PARACHUTE_PACK_TINT_INDEX(player, tintIndex)
  native.invoke(
    Type.Void, 4693, false,
    arg(Type.Player, player),
    arg(Type.Int, tintIndex)
  )
end

function PLAYER.GET_PLAYER_PARACHUTE_PACK_TINT_INDEX(player, tintIndex)
  native.invoke(
    Type.Void, 4694, false,
    arg(Type.Player, player),
    ref(Type.Int, tintIndex)
  )
end

function PLAYER.SET_PLAYER_HAS_RESERVE_PARACHUTE(player)
  native.invoke(
    Type.Void, 4695, false,
    arg(Type.Player, player)
  )
end

function PLAYER.GET_PLAYER_HAS_RESERVE_PARACHUTE(player)
  return native.invoke(
    Type.Bool, 4696, false,
    arg(Type.Player, player)
  )
end

function PLAYER.SET_PLAYER_CAN_LEAVE_PARACHUTE_SMOKE_TRAIL(player, enabled)
  native.invoke(
    Type.Void, 4697, false,
    arg(Type.Player, player),
    arg(Type.Bool, enabled)
  )
end

function PLAYER.SET_PLAYER_PARACHUTE_SMOKE_TRAIL_COLOR(player, r, g, b)
  native.invoke(
    Type.Void, 4698, false,
    arg(Type.Player, player),
    arg(Type.Int, r),
    arg(Type.Int, g),
    arg(Type.Int, b)
  )
end

function PLAYER.GET_PLAYER_PARACHUTE_SMOKE_TRAIL_COLOR(player, r, g, b)
  native.invoke(
    Type.Void, 4699, false,
    arg(Type.Player, player),
    ref(Type.Int, r),
    ref(Type.Int, g),
    ref(Type.Int, b)
  )
end

function PLAYER.SET_PLAYER_PHONE_PALETTE_IDX(player, flags)
  native.invoke(
    Type.Void, 4700, false,
    arg(Type.Player, player),
    arg(Type.Int, flags)
  )
end

function PLAYER.SET_PLAYER_NOISE_MULTIPLIER(player, multiplier)
  native.invoke(
    Type.Void, 4701, false,
    arg(Type.Player, player),
    arg(Type.Float, multiplier)
  )
end

function PLAYER.SET_PLAYER_SNEAKING_NOISE_MULTIPLIER(player, multiplier)
  native.invoke(
    Type.Void, 4702, false,
    arg(Type.Player, player),
    arg(Type.Float, multiplier)
  )
end

function PLAYER.CAN_PED_HEAR_PLAYER(player, ped)
  return native.invoke(
    Type.Bool, 4703, false,
    arg(Type.Player, player),
    arg(Type.Ped, ped)
  )
end

function PLAYER.SIMULATE_PLAYER_INPUT_GAIT(player, amount, gaitType, speed, p4, p5, p6)
  native.invoke(
    Type.Void, 4704, false,
    arg(Type.Player, player),
    arg(Type.Float, amount),
    arg(Type.Int, gaitType),
    arg(Type.Float, speed),
    arg(Type.Bool, p4),
    arg(Type.Bool, p5),
    arg(Type.Any, p6)
  )
end

function PLAYER.RESET_PLAYER_INPUT_GAIT(player)
  native.invoke(
    Type.Void, 4705, false,
    arg(Type.Player, player)
  )
end

function PLAYER.SET_AUTO_GIVE_PARACHUTE_WHEN_ENTER_PLANE(player, toggle)
  native.invoke(
    Type.Void, 4706, false,
    arg(Type.Player, player),
    arg(Type.Bool, toggle)
  )
end

function PLAYER.SET_AUTO_GIVE_SCUBA_GEAR_WHEN_EXIT_VEHICLE(player, toggle)
  native.invoke(
    Type.Void, 4707, false,
    arg(Type.Player, player),
    arg(Type.Bool, toggle)
  )
end

function PLAYER.SET_PLAYER_STEALTH_PERCEPTION_MODIFIER(player, value)
  native.invoke(
    Type.Void, 4708, false,
    arg(Type.Player, player),
    arg(Type.Float, value)
  )
end

function PLAYER.IS_REMOTE_PLAYER_IN_NON_CLONED_VEHICLE(player)
  return native.invoke(
    Type.Bool, 4709, false,
    arg(Type.Player, player)
  )
end

function PLAYER.INCREASE_PLAYER_JUMP_SUPPRESSION_RANGE(player)
  native.invoke(
    Type.Void, 4710, false,
    arg(Type.Player, player)
  )
end

function PLAYER.SET_PLAYER_SIMULATE_AIMING(player, toggle)
  native.invoke(
    Type.Void, 4711, false,
    arg(Type.Player, player),
    arg(Type.Bool, toggle)
  )
end

function PLAYER.SET_PLAYER_CLOTH_PIN_FRAMES(player, p1)
  native.invoke(
    Type.Void, 4712, false,
    arg(Type.Player, player),
    arg(Type.Int, p1)
  )
end

function PLAYER.SET_PLAYER_CLOTH_PACKAGE_INDEX(index)
  native.invoke(
    Type.Void, 4713, false,
    arg(Type.Int, index)
  )
end

function PLAYER.SET_PLAYER_CLOTH_LOCK_COUNTER(value)
  native.invoke(
    Type.Void, 4714, false,
    arg(Type.Int, value)
  )
end

function PLAYER.PLAYER_ATTACH_VIRTUAL_BOUND(p0, p1, p2, p3, p4, p5, p6, p7)
  native.invoke(
    Type.Void, 4715, false,
    arg(Type.Float, p0),
    arg(Type.Float, p1),
    arg(Type.Float, p2),
    arg(Type.Float, p3),
    arg(Type.Float, p4),
    arg(Type.Float, p5),
    arg(Type.Float, p6),
    arg(Type.Float, p7)
  )
end

function PLAYER.PLAYER_DETACH_VIRTUAL_BOUND()
  native.invoke(
    Type.Void, 4716, false
  )
end

function PLAYER.HAS_PLAYER_BEEN_SPOTTED_IN_STOLEN_VEHICLE(player)
  return native.invoke(
    Type.Bool, 4717, false,
    arg(Type.Player, player)
  )
end

function PLAYER.IS_PLAYER_BATTLE_AWARE(player)
  return native.invoke(
    Type.Bool, 4718, false,
    arg(Type.Player, player)
  )
end

function PLAYER.GET_PLAYER_RECEIVED_BATTLE_EVENT_RECENTLY(player, p1, p2)
  return native.invoke(
    Type.Bool, 4719, false,
    arg(Type.Player, player),
    arg(Type.Int, p1),
    arg(Type.Bool, p2)
  )
end

function PLAYER.EXTEND_WORLD_BOUNDARY_FOR_PLAYER(x, y, z)
  native.invoke(
    Type.Void, 4720, false,
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, z)
  )
end

function PLAYER.RESET_WORLD_BOUNDARY_FOR_PLAYER()
  native.invoke(
    Type.Void, 4721, false
  )
end

function PLAYER.IS_PLAYER_RIDING_TRAIN(player)
  return native.invoke(
    Type.Bool, 4722, false,
    arg(Type.Player, player)
  )
end

function PLAYER.HAS_PLAYER_LEFT_THE_WORLD(player)
  return native.invoke(
    Type.Bool, 4723, false,
    arg(Type.Player, player)
  )
end

function PLAYER.SET_PLAYER_LEAVE_PED_BEHIND(player, toggle)
  native.invoke(
    Type.Void, 4724, false,
    arg(Type.Player, player),
    arg(Type.Bool, toggle)
  )
end

function PLAYER.SET_PLAYER_PARACHUTE_VARIATION_OVERRIDE(player, p1, p2, p3, p4)
  native.invoke(
    Type.Void, 4725, false,
    arg(Type.Player, player),
    arg(Type.Int, p1),
    arg(Type.Any, p2),
    arg(Type.Any, p3),
    arg(Type.Bool, p4)
  )
end

function PLAYER.CLEAR_PLAYER_PARACHUTE_VARIATION_OVERRIDE(player)
  native.invoke(
    Type.Void, 4726, false,
    arg(Type.Player, player)
  )
end

function PLAYER.SET_PLAYER_PARACHUTE_MODEL_OVERRIDE(player, model)
  native.invoke(
    Type.Void, 4727, false,
    arg(Type.Player, player),
    arg(Type.Hash, model)
  )
end

function PLAYER.SET_PLAYER_RESERVE_PARACHUTE_MODEL_OVERRIDE(player, model)
  native.invoke(
    Type.Void, 4728, false,
    arg(Type.Player, player),
    arg(Type.Hash, model)
  )
end

function PLAYER.GET_PLAYER_PARACHUTE_MODEL_OVERRIDE(player)
  return native.invoke(
    Type.Hash, 4729, false,
    arg(Type.Player, player)
  )
end

function PLAYER.GET_PLAYER_RESERVE_PARACHUTE_MODEL_OVERRIDE(player)
  return native.invoke(
    Type.Hash, 4730, false,
    arg(Type.Player, player)
  )
end

function PLAYER.CLEAR_PLAYER_PARACHUTE_MODEL_OVERRIDE(player)
  native.invoke(
    Type.Void, 4731, false,
    arg(Type.Player, player)
  )
end

function PLAYER.CLEAR_PLAYER_RESERVE_PARACHUTE_MODEL_OVERRIDE(player)
  native.invoke(
    Type.Void, 4732, false,
    arg(Type.Player, player)
  )
end

function PLAYER.SET_PLAYER_PARACHUTE_PACK_MODEL_OVERRIDE(player, model)
  native.invoke(
    Type.Void, 4733, false,
    arg(Type.Player, player),
    arg(Type.Hash, model)
  )
end

function PLAYER.CLEAR_PLAYER_PARACHUTE_PACK_MODEL_OVERRIDE(player)
  native.invoke(
    Type.Void, 4734, false,
    arg(Type.Player, player)
  )
end

function PLAYER.DISABLE_PLAYER_VEHICLE_REWARDS(player)
  native.invoke(
    Type.Void, 4735, false,
    arg(Type.Player, player)
  )
end

function PLAYER.SET_PLAYER_SPECTATED_VEHICLE_RADIO_OVERRIDE(p0)
  native.invoke(
    Type.Void, 4736, false,
    arg(Type.Bool, p0)
  )
end

function PLAYER.SET_PLAYER_BLUETOOTH_STATE(player, state)
  native.invoke(
    Type.Void, 4737, false,
    arg(Type.Player, player),
    arg(Type.Bool, state)
  )
end

function PLAYER.IS_PLAYER_BLUETOOTH_ENABLE(player)
  return native.invoke(
    Type.Bool, 4738, false,
    arg(Type.Player, player)
  )
end

function PLAYER.DISABLE_CAMERA_VIEW_MODE_CYCLE(player)
  native.invoke(
    Type.Void, 4739, false,
    arg(Type.Player, player)
  )
end

function PLAYER.GET_PLAYER_FAKE_WANTED_LEVEL(player)
  return native.invoke(
    Type.Int, 4740, false,
    arg(Type.Player, player)
  )
end

function PLAYER.SET_PLAYER_CAN_DAMAGE_PLAYER(player1, player2, toggle)
  native.invoke(
    Type.Void, 4741, false,
    arg(Type.Player, player1),
    arg(Type.Player, player2),
    arg(Type.Bool, toggle)
  )
end

function PLAYER.SET_APPLY_WAYPOINT_OF_PLAYER(player, hudColor)
  native.invoke(
    Type.Void, 4742, false,
    arg(Type.Player, player),
    arg(Type.Int, hudColor)
  )
end

function PLAYER.IS_PLAYER_VEHICLE_WEAPON_TOGGLED_TO_NON_HOMING(p0)
  return native.invoke(
    Type.Bool, 4743, false,
    arg(Type.Any, p0)
  )
end

function PLAYER.SET_PLAYER_VEHICLE_WEAPON_TO_NON_HOMING(p0)
  native.invoke(
    Type.Void, 4744, false,
    arg(Type.Any, p0)
  )
end

function PLAYER.SET_PLAYER_HOMING_DISABLED_FOR_ALL_VEHICLE_WEAPONS(p0, p1)
  native.invoke(
    Type.Void, 4745, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1)
  )
end

function PLAYER.ADD_PLAYER_TARGETABLE_ENTITY(player, entity)
  native.invoke(
    Type.Void, 4746, false,
    arg(Type.Player, player),
    arg(Type.Entity, entity)
  )
end

function PLAYER.REMOVE_PLAYER_TARGETABLE_ENTITY(player, entity)
  native.invoke(
    Type.Void, 4747, false,
    arg(Type.Player, player),
    arg(Type.Entity, entity)
  )
end

function PLAYER.SET_PLAYER_PREVIOUS_VARIATION_DATA(player, p1, p2, p3, p4, p5)
  native.invoke(
    Type.Void, 4748, false,
    arg(Type.Player, player),
    arg(Type.Int, p1),
    arg(Type.Int, p2),
    arg(Type.Any, p3),
    arg(Type.Any, p4),
    arg(Type.Any, p5)
  )
end

function PLAYER.REMOVE_SCRIPT_FIRE_POSITION()
  native.invoke(
    Type.Void, 4749, false
  )
end

function PLAYER.SET_SCRIPT_FIRE_POSITION(coordX, coordY, coordZ)
  native.invoke(
    Type.Void, 4750, false,
    arg(Type.Float, coordX),
    arg(Type.Float, coordY),
    arg(Type.Float, coordZ)
  )
end


RECORDING = {}

function RECORDING.REPLAY_START_EVENT(p0)
  native.invoke(
    Type.Void, 4751, false,
    arg(Type.Int, p0)
  )
end

function RECORDING.REPLAY_STOP_EVENT()
  native.invoke(
    Type.Void, 4752, false
  )
end

function RECORDING.REPLAY_CANCEL_EVENT()
  native.invoke(
    Type.Void, 4753, false
  )
end

function RECORDING.REPLAY_RECORD_BACK_FOR_TIME(p0, p1, p2)
  native.invoke(
    Type.Void, 4754, false,
    arg(Type.Float, p0),
    arg(Type.Float, p1),
    arg(Type.Int, p2)
  )
end

function RECORDING.REPLAY_CHECK_FOR_EVENT_THIS_FRAME(missionNameLabel, p1)
  native.invoke(
    Type.Void, 4755, false,
    arg(Type.String, missionNameLabel),
    arg(Type.Any, p1)
  )
end

function RECORDING.REPLAY_PREVENT_RECORDING_THIS_FRAME()
  native.invoke(
    Type.Void, 4756, false
  )
end

function RECORDING.REPLAY_RESET_EVENT_INFO()
  native.invoke(
    Type.Void, 4757, false
  )
end

function RECORDING.REPLAY_DISABLE_CAMERA_MOVEMENT_THIS_FRAME()
  native.invoke(
    Type.Void, 4758, false
  )
end

function RECORDING.RECORD_GREATEST_MOMENT(p0, p1, p2)
  native.invoke(
    Type.Void, 4759, false,
    arg(Type.Int, p0),
    arg(Type.Int, p1),
    arg(Type.Int, p2)
  )
end

function RECORDING.START_REPLAY_RECORDING(mode)
  native.invoke(
    Type.Void, 4760, false,
    arg(Type.Int, mode)
  )
end

function RECORDING.STOP_REPLAY_RECORDING()
  native.invoke(
    Type.Void, 4761, false
  )
end

function RECORDING.CANCEL_REPLAY_RECORDING()
  native.invoke(
    Type.Void, 4762, false
  )
end

function RECORDING.SAVE_REPLAY_RECORDING()
  return native.invoke(
    Type.Bool, 4763, false
  )
end

function RECORDING.IS_REPLAY_RECORDING()
  return native.invoke(
    Type.Bool, 4764, false
  )
end

function RECORDING.IS_REPLAY_INITIALIZED()
  return native.invoke(
    Type.Bool, 4765, false
  )
end

function RECORDING.IS_REPLAY_AVAILABLE()
  return native.invoke(
    Type.Bool, 4766, false
  )
end

function RECORDING.IS_REPLAY_RECORD_SPACE_AVAILABLE(p0)
  return native.invoke(
    Type.Bool, 4767, false,
    arg(Type.Bool, p0)
  )
end


REPLAY = {}

function REPLAY.REGISTER_EFFECT_FOR_REPLAY_EDITOR(p0, p1)
  native.invoke(
    Type.Void, 4768, false,
    arg(Type.String, p0),
    arg(Type.Bool, p1)
  )
end

function REPLAY.REPLAY_SYSTEM_HAS_REQUESTED_A_SCRIPT_CLEANUP()
  return native.invoke(
    Type.Bool, 4769, false
  )
end

function REPLAY.SET_SCRIPTS_HAVE_CLEANED_UP_FOR_REPLAY_SYSTEM()
  native.invoke(
    Type.Void, 4770, false
  )
end

function REPLAY.SET_REPLAY_SYSTEM_PAUSED_FOR_SAVE(p0)
  native.invoke(
    Type.Void, 4771, false,
    arg(Type.Bool, p0)
  )
end

function REPLAY.REPLAY_CONTROL_SHUTDOWN()
  native.invoke(
    Type.Void, 4772, false
  )
end

function REPLAY.ACTIVATE_ROCKSTAR_EDITOR(p0)
  native.invoke(
    Type.Void, 4773, false,
    arg(Type.Int, p0)
  )
end


SAVEMIGRATION = {}

function SAVEMIGRATION.SAVEMIGRATION_IS_MP_ENABLED()
  return native.invoke(
    Type.Bool, 4774, false
  )
end

function SAVEMIGRATION.SAVEMIGRATION_MP_REQUEST_ACCOUNTS()
  return native.invoke(
    Type.Bool, 4775, false
  )
end

function SAVEMIGRATION.SAVEMIGRATION_MP_GET_ACCOUNTS_STATUS()
  return native.invoke(
    Type.Int, 4776, false
  )
end

function SAVEMIGRATION.SAVEMIGRATION_MP_NUM_ACCOUNTS()
  return native.invoke(
    Type.Int, 4777, false
  )
end

function SAVEMIGRATION.SAVEMIGRATION_MP_GET_ACCOUNT(p0, p1)
  return native.invoke(
    Type.Bool, 4778, false,
    arg(Type.Int, p0),
    ref(Type.Any, p1)
  )
end

function SAVEMIGRATION.SAVEMIGRATION_MP_REQUEST_STATUS()
  return native.invoke(
    Type.Bool, 4779, false
  )
end

function SAVEMIGRATION.SAVEMIGRATION_MP_GET_STATUS()
  return native.invoke(
    Type.Int, 4780, false
  )
end


SCRIPT = {}

function SCRIPT.REQUEST_SCRIPT(scriptName)
  native.invoke(
    Type.Void, 4781, false,
    arg(Type.String, scriptName)
  )
end

function SCRIPT.SET_SCRIPT_AS_NO_LONGER_NEEDED(scriptName)
  native.invoke(
    Type.Void, 4782, false,
    arg(Type.String, scriptName)
  )
end

function SCRIPT.HAS_SCRIPT_LOADED(scriptName)
  return native.invoke(
    Type.Bool, 4783, false,
    arg(Type.String, scriptName)
  )
end

function SCRIPT.DOES_SCRIPT_EXIST(scriptName)
  return native.invoke(
    Type.Bool, 4784, false,
    arg(Type.String, scriptName)
  )
end

function SCRIPT.REQUEST_SCRIPT_WITH_NAME_HASH(scriptHash)
  native.invoke(
    Type.Void, 4785, false,
    arg(Type.Hash, scriptHash)
  )
end

function SCRIPT.SET_SCRIPT_WITH_NAME_HASH_AS_NO_LONGER_NEEDED(scriptHash)
  native.invoke(
    Type.Void, 4786, false,
    arg(Type.Hash, scriptHash)
  )
end

function SCRIPT.HAS_SCRIPT_WITH_NAME_HASH_LOADED(scriptHash)
  return native.invoke(
    Type.Bool, 4787, false,
    arg(Type.Hash, scriptHash)
  )
end

function SCRIPT.DOES_SCRIPT_WITH_NAME_HASH_EXIST(scriptHash)
  return native.invoke(
    Type.Bool, 4788, false,
    arg(Type.Hash, scriptHash)
  )
end

function SCRIPT.TERMINATE_THREAD(threadId)
  native.invoke(
    Type.Void, 4789, false,
    arg(Type.Int, threadId)
  )
end

function SCRIPT.IS_THREAD_ACTIVE(threadId)
  return native.invoke(
    Type.Bool, 4790, false,
    arg(Type.Int, threadId)
  )
end

function SCRIPT.GET_NAME_OF_SCRIPT_WITH_THIS_ID(threadId)
  return native.invoke(
    Type.String, 4791, false,
    arg(Type.Int, threadId)
  )
end

function SCRIPT.SCRIPT_THREAD_ITERATOR_RESET()
  native.invoke(
    Type.Void, 4792, false
  )
end

function SCRIPT.SCRIPT_THREAD_ITERATOR_GET_NEXT_THREAD_ID()
  return native.invoke(
    Type.Int, 4793, false
  )
end

function SCRIPT.GET_ID_OF_THIS_THREAD()
  return native.invoke(
    Type.Int, 4794, false
  )
end

function SCRIPT.TERMINATE_THIS_THREAD()
  native.invoke(
    Type.Void, 4795, false
  )
end

function SCRIPT.GET_NUMBER_OF_THREADS_RUNNING_THE_SCRIPT_WITH_THIS_HASH(scriptHash)
  return native.invoke(
    Type.Int, 4796, false,
    arg(Type.Hash, scriptHash)
  )
end

function SCRIPT.GET_THIS_SCRIPT_NAME()
  return native.invoke(
    Type.String, 4797, false
  )
end

function SCRIPT.GET_HASH_OF_THIS_SCRIPT_NAME()
  return native.invoke(
    Type.Hash, 4798, false
  )
end

function SCRIPT.GET_NUMBER_OF_EVENTS(eventGroup)
  return native.invoke(
    Type.Int, 4799, false,
    arg(Type.Int, eventGroup)
  )
end

function SCRIPT.GET_EVENT_EXISTS(eventGroup, eventIndex)
  return native.invoke(
    Type.Bool, 4800, false,
    arg(Type.Int, eventGroup),
    arg(Type.Int, eventIndex)
  )
end

function SCRIPT.GET_EVENT_AT_INDEX(eventGroup, eventIndex)
  return native.invoke(
    Type.Int, 4801, false,
    arg(Type.Int, eventGroup),
    arg(Type.Int, eventIndex)
  )
end

function SCRIPT.GET_EVENT_DATA(eventGroup, eventIndex, eventData, eventDataSize)
  return native.invoke(
    Type.Bool, 4802, false,
    arg(Type.Int, eventGroup),
    arg(Type.Int, eventIndex),
    ref(Type.Any, eventData),
    arg(Type.Int, eventDataSize)
  )
end

function SCRIPT.TRIGGER_SCRIPT_EVENT(eventGroup, eventData, eventDataSize, playerBits)
  native.invoke(
    Type.Void, 4803, false,
    arg(Type.Int, eventGroup),
    ref(Type.Any, eventData),
    arg(Type.Int, eventDataSize),
    arg(Type.Int, playerBits)
  )
end

function SCRIPT.SHUTDOWN_LOADING_SCREEN()
  native.invoke(
    Type.Void, 4804, false
  )
end

function SCRIPT.SET_NO_LOADING_SCREEN(toggle)
  native.invoke(
    Type.Void, 4805, false,
    arg(Type.Bool, toggle)
  )
end

function SCRIPT.GET_NO_LOADING_SCREEN()
  return native.invoke(
    Type.Bool, 4806, false
  )
end

function SCRIPT.COMMIT_TO_LOADINGSCREEN_SELCTION()
  native.invoke(
    Type.Void, 4807, false
  )
end

function SCRIPT.BG_IS_EXITFLAG_SET()
  return native.invoke(
    Type.Bool, 4808, false
  )
end

function SCRIPT.BG_SET_EXITFLAG_RESPONSE()
  native.invoke(
    Type.Void, 4809, false
  )
end

function SCRIPT.BG_START_CONTEXT_HASH(contextHash)
  native.invoke(
    Type.Void, 4810, false,
    arg(Type.Hash, contextHash)
  )
end

function SCRIPT.BG_END_CONTEXT_HASH(contextHash)
  native.invoke(
    Type.Void, 4811, false,
    arg(Type.Hash, contextHash)
  )
end

function SCRIPT.BG_START_CONTEXT(contextName)
  native.invoke(
    Type.Void, 4812, false,
    arg(Type.String, contextName)
  )
end

function SCRIPT.BG_END_CONTEXT(contextName)
  native.invoke(
    Type.Void, 4813, false,
    arg(Type.String, contextName)
  )
end

function SCRIPT.BG_DOES_LAUNCH_PARAM_EXIST(scriptIndex, p1)
  return native.invoke(
    Type.Bool, 4814, false,
    arg(Type.Int, scriptIndex),
    arg(Type.String, p1)
  )
end

function SCRIPT.BG_GET_LAUNCH_PARAM_VALUE(scriptIndex, p1)
  return native.invoke(
    Type.Int, 4815, false,
    arg(Type.Int, scriptIndex),
    arg(Type.String, p1)
  )
end

function SCRIPT.BG_GET_SCRIPT_ID_FROM_NAME_HASH(p0)
  return native.invoke(
    Type.Int, 4816, false,
    arg(Type.Hash, p0)
  )
end

function SCRIPT._SEND_TU_SCRIPT_EVENT_NEW(eventGroup, eventData, eventDataSize, playerBits, eventType)
  native.invoke(
    Type.Void, 4817, false,
    arg(Type.Int, eventGroup),
    ref(Type.Any, eventData),
    arg(Type.Int, eventDataSize),
    arg(Type.Int, playerBits),
    arg(Type.Hash, eventType)
  )
end


SECURITY = {}

function SECURITY.REGISTER_SCRIPT_VARIABLE(variable)
  native.invoke(
    Type.Void, 4818, false,
    ref(Type.Any, variable)
  )
end

function SECURITY.UNREGISTER_SCRIPT_VARIABLE(variable)
  native.invoke(
    Type.Void, 4819, false,
    ref(Type.Any, variable)
  )
end

function SECURITY.FORCE_CHECK_SCRIPT_VARIABLES()
  native.invoke(
    Type.Void, 4820, false
  )
end


SHAPETEST = {}

function SHAPETEST.START_SHAPE_TEST_LOS_PROBE(x1, y1, z1, x2, y2, z2, flags, entity, p8)
  return native.invoke(
    Type.Int, 4821, false,
    arg(Type.Float, x1),
    arg(Type.Float, y1),
    arg(Type.Float, z1),
    arg(Type.Float, x2),
    arg(Type.Float, y2),
    arg(Type.Float, z2),
    arg(Type.Int, flags),
    arg(Type.Entity, entity),
    arg(Type.Int, p8)
  )
end

function SHAPETEST.START_EXPENSIVE_SYNCHRONOUS_SHAPE_TEST_LOS_PROBE(x1, y1, z1, x2, y2, z2, flags, entity, p8)
  return native.invoke(
    Type.Int, 4822, false,
    arg(Type.Float, x1),
    arg(Type.Float, y1),
    arg(Type.Float, z1),
    arg(Type.Float, x2),
    arg(Type.Float, y2),
    arg(Type.Float, z2),
    arg(Type.Int, flags),
    arg(Type.Entity, entity),
    arg(Type.Int, p8)
  )
end

function SHAPETEST.START_SHAPE_TEST_BOUNDING_BOX(entity, flags1, flags2)
  return native.invoke(
    Type.Int, 4823, false,
    arg(Type.Entity, entity),
    arg(Type.Int, flags1),
    arg(Type.Int, flags2)
  )
end

function SHAPETEST.START_SHAPE_TEST_BOX(x, y, z, dimX, dimY, dimZ, rotX, rotY, rotZ, p9, flags, entity, p12)
  return native.invoke(
    Type.Int, 4824, false,
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, z),
    arg(Type.Float, dimX),
    arg(Type.Float, dimY),
    arg(Type.Float, dimZ),
    arg(Type.Float, rotX),
    arg(Type.Float, rotY),
    arg(Type.Float, rotZ),
    arg(Type.Any, p9),
    arg(Type.Int, flags),
    arg(Type.Entity, entity),
    arg(Type.Any, p12)
  )
end

function SHAPETEST.START_SHAPE_TEST_BOUND(entity, flags1, flags2)
  return native.invoke(
    Type.Int, 4825, false,
    arg(Type.Entity, entity),
    arg(Type.Int, flags1),
    arg(Type.Int, flags2)
  )
end

function SHAPETEST.START_SHAPE_TEST_CAPSULE(x1, y1, z1, x2, y2, z2, radius, flags, entity, p9)
  return native.invoke(
    Type.Int, 4826, false,
    arg(Type.Float, x1),
    arg(Type.Float, y1),
    arg(Type.Float, z1),
    arg(Type.Float, x2),
    arg(Type.Float, y2),
    arg(Type.Float, z2),
    arg(Type.Float, radius),
    arg(Type.Int, flags),
    arg(Type.Entity, entity),
    arg(Type.Int, p9)
  )
end

function SHAPETEST.START_SHAPE_TEST_SWEPT_SPHERE(x1, y1, z1, x2, y2, z2, radius, flags, entity, p9)
  return native.invoke(
    Type.Int, 4827, false,
    arg(Type.Float, x1),
    arg(Type.Float, y1),
    arg(Type.Float, z1),
    arg(Type.Float, x2),
    arg(Type.Float, y2),
    arg(Type.Float, z2),
    arg(Type.Float, radius),
    arg(Type.Int, flags),
    arg(Type.Entity, entity),
    arg(Type.Any, p9)
  )
end

function SHAPETEST.START_SHAPE_TEST_MOUSE_CURSOR_LOS_PROBE(pVec1, pVec2, flag, entity, flag2)
  return native.invoke(
    Type.Int, 4828, true,
    ref(Type.Vector3, pVec1),
    ref(Type.Vector3, pVec2),
    arg(Type.Int, flag),
    arg(Type.Entity, entity),
    arg(Type.Int, flag2)
  )
end

function SHAPETEST.GET_SHAPE_TEST_RESULT(shapeTestHandle, hit, endCoords, surfaceNormal, entityHit)
  return native.invoke(
    Type.Int, 4829, true,
    arg(Type.Int, shapeTestHandle),
    ref(Type.Bool, hit),
    ref(Type.Vector3, endCoords),
    ref(Type.Vector3, surfaceNormal),
    ref(Type.Entity, entityHit)
  )
end

function SHAPETEST.GET_SHAPE_TEST_RESULT_INCLUDING_MATERIAL(shapeTestHandle, hit, endCoords, surfaceNormal, materialHash, entityHit)
  return native.invoke(
    Type.Int, 4830, true,
    arg(Type.Int, shapeTestHandle),
    ref(Type.Bool, hit),
    ref(Type.Vector3, endCoords),
    ref(Type.Vector3, surfaceNormal),
    ref(Type.Hash, materialHash),
    ref(Type.Entity, entityHit)
  )
end

function SHAPETEST.RELEASE_SCRIPT_GUID_FROM_ENTITY(entityHit)
  native.invoke(
    Type.Void, 4831, false,
    arg(Type.Entity, entityHit)
  )
end


SOCIALCLUB = {}

function SOCIALCLUB.SC_INBOX_GET_TOTAL_NUM_MESSAGES()
  return native.invoke(
    Type.Int, 4832, false
  )
end

function SOCIALCLUB.SC_INBOX_GET_MESSAGE_TYPE_AT_INDEX(msgIndex)
  return native.invoke(
    Type.Hash, 4833, false,
    arg(Type.Int, msgIndex)
  )
end

function SOCIALCLUB.SC_INBOX_GET_MESSAGE_IS_READ_AT_INDEX(msgIndex)
  return native.invoke(
    Type.Bool, 4834, false,
    arg(Type.Int, msgIndex)
  )
end

function SOCIALCLUB.SC_INBOX_SET_MESSAGE_AS_READ_AT_INDEX(msgIndex)
  return native.invoke(
    Type.Bool, 4835, false,
    arg(Type.Int, msgIndex)
  )
end

function SOCIALCLUB.SC_INBOX_MESSAGE_GET_DATA_INT(p0, context, out)
  return native.invoke(
    Type.Bool, 4836, false,
    arg(Type.Int, p0),
    arg(Type.String, context),
    ref(Type.Int, out)
  )
end

function SOCIALCLUB.SC_INBOX_MESSAGE_GET_DATA_BOOL(p0, p1)
  return native.invoke(
    Type.Bool, 4837, false,
    arg(Type.Int, p0),
    arg(Type.String, p1)
  )
end

function SOCIALCLUB.SC_INBOX_MESSAGE_GET_DATA_STRING(p0, context, out)
  return native.invoke(
    Type.Bool, 4838, false,
    arg(Type.Int, p0),
    arg(Type.String, context),
    ref(Type.Char, out)
  )
end

function SOCIALCLUB.SC_INBOX_MESSAGE_DO_APPLY(p0)
  return native.invoke(
    Type.Bool, 4839, false,
    arg(Type.Int, p0)
  )
end

function SOCIALCLUB.SC_INBOX_MESSAGE_GET_RAW_TYPE_AT_INDEX(p0)
  return native.invoke(
    Type.String, 4840, false,
    arg(Type.Int, p0)
  )
end

function SOCIALCLUB.SC_INBOX_MESSAGE_PUSH_GAMER_T0_RECIP_LIST(gamerHandle)
  native.invoke(
    Type.Void, 4841, false,
    ref(Type.Any, gamerHandle)
  )
end

function SOCIALCLUB.SC_INBOX_SEND_UGCSTATUPDATE_TO_RECIP_LIST(data)
  native.invoke(
    Type.Void, 4842, false,
    ref(Type.Any, data)
  )
end

function SOCIALCLUB.SC_INBOX_MESSAGE_GET_UGCDATA(p0, p1)
  return native.invoke(
    Type.Bool, 4843, false,
    arg(Type.Int, p0),
    ref(Type.Any, p1)
  )
end

function SOCIALCLUB.SC_INBOX_GET_BOUNTY_DATA_AT_INDEX(index, outData)
  return native.invoke(
    Type.Bool, 4844, false,
    arg(Type.Int, index),
    ref(Type.Any, outData)
  )
end

function SOCIALCLUB.SC_EMAIL_RETRIEVE_EMAILS(offset, limit)
  native.invoke(
    Type.Void, 4845, false,
    arg(Type.Int, offset),
    arg(Type.Int, limit)
  )
end

function SOCIALCLUB.SC_EMAIL_GET_RETRIEVAL_STATUS()
  return native.invoke(
    Type.Int, 4846, false
  )
end

function SOCIALCLUB.SC_EMAIL_GET_NUM_RETRIEVED_EMAILS()
  return native.invoke(
    Type.Int, 4847, false
  )
end

function SOCIALCLUB.SC_EMAIL_GET_EMAIL_AT_INDEX(p0, p1)
  return native.invoke(
    Type.Bool, 4848, false,
    arg(Type.Int, p0),
    ref(Type.Any, p1)
  )
end

function SOCIALCLUB.SC_EMAIL_DELETE_EMAILS(p0, p1)
  native.invoke(
    Type.Void, 4849, false,
    ref(Type.Any, p0),
    arg(Type.Any, p1)
  )
end

function SOCIALCLUB.SC_EMAIL_MESSAGE_PUSH_GAMER_TO_RECIP_LIST(gamerHandle)
  native.invoke(
    Type.Void, 4850, false,
    ref(Type.Any, gamerHandle)
  )
end

function SOCIALCLUB.SC_EMAIL_MESSAGE_CLEAR_RECIP_LIST()
  native.invoke(
    Type.Void, 4851, false
  )
end

function SOCIALCLUB.SC_EMAIL_SEND_EMAIL(p0)
  native.invoke(
    Type.Void, 4852, false,
    arg(Type.String, p0)
  )
end

function SOCIALCLUB.SC_EMAIL_SET_CURRENT_EMAIL_TAG(p0)
  return native.invoke(
    Type.Bool, 4853, false,
    arg(Type.Any, p0)
  )
end

function SOCIALCLUB.SC_CACHE_NEW_ROCKSTAR_MSGS(toggle)
  native.invoke(
    Type.Void, 4854, false,
    arg(Type.Bool, toggle)
  )
end

function SOCIALCLUB.SC_HAS_NEW_ROCKSTAR_MSG()
  return native.invoke(
    Type.Bool, 4855, false
  )
end

function SOCIALCLUB.SC_GET_NEW_ROCKSTAR_MSG()
  return native.invoke(
    Type.String, 4856, false
  )
end

function SOCIALCLUB.SC_PRESENCE_ATTR_SET_INT(attrHash, value)
  return native.invoke(
    Type.Bool, 4857, false,
    arg(Type.Hash, attrHash),
    arg(Type.Int, value)
  )
end

function SOCIALCLUB.SC_PRESENCE_ATTR_SET_FLOAT(attrHash, value)
  return native.invoke(
    Type.Bool, 4858, false,
    arg(Type.Hash, attrHash),
    arg(Type.Float, value)
  )
end

function SOCIALCLUB.SC_PRESENCE_ATTR_SET_STRING(attrHash, value)
  return native.invoke(
    Type.Bool, 4859, false,
    arg(Type.Hash, attrHash),
    arg(Type.String, value)
  )
end

function SOCIALCLUB.SC_PRESENCE_SET_ACTIVITY_RATING(p0, p1)
  return native.invoke(
    Type.Bool, 4860, false,
    arg(Type.Any, p0),
    arg(Type.Float, p1)
  )
end

function SOCIALCLUB.SC_GAMERDATA_GET_INT(name, value)
  return native.invoke(
    Type.Bool, 4861, false,
    arg(Type.String, name),
    ref(Type.Int, value)
  )
end

function SOCIALCLUB.SC_GAMERDATA_GET_FLOAT(name, value)
  return native.invoke(
    Type.Bool, 4862, false,
    arg(Type.String, name),
    ref(Type.Float, value)
  )
end

function SOCIALCLUB.SC_GAMERDATA_GET_BOOL(name)
  return native.invoke(
    Type.Bool, 4863, false,
    arg(Type.String, name)
  )
end

function SOCIALCLUB.SC_GAMERDATA_GET_STRING(name, value)
  return native.invoke(
    Type.Bool, 4864, false,
    arg(Type.String, name),
    ref(Type.Char, value)
  )
end

function SOCIALCLUB.SC_GAMERDATA_GET_ACTIVE_XP_BONUS(value)
  return native.invoke(
    Type.Bool, 4865, false,
    ref(Type.Float, value)
  )
end

function SOCIALCLUB.SC_PROFANITY_CHECK_STRING(string, token)
  return native.invoke(
    Type.Bool, 4866, false,
    arg(Type.String, string),
    ref(Type.Int, token)
  )
end

function SOCIALCLUB.SC_PROFANITY_CHECK_STRING_UGC(string, token)
  return native.invoke(
    Type.Bool, 4867, false,
    arg(Type.String, string),
    ref(Type.Int, token)
  )
end

function SOCIALCLUB.SC_PROFANITY_GET_CHECK_IS_VALID(token)
  return native.invoke(
    Type.Bool, 4868, false,
    arg(Type.Int, token)
  )
end

function SOCIALCLUB.SC_PROFANITY_GET_CHECK_IS_PENDING(token)
  return native.invoke(
    Type.Bool, 4869, false,
    arg(Type.Int, token)
  )
end

function SOCIALCLUB.SC_PROFANITY_GET_STRING_PASSED(token)
  return native.invoke(
    Type.Bool, 4870, false,
    arg(Type.Int, token)
  )
end

function SOCIALCLUB.SC_PROFANITY_GET_STRING_STATUS(token)
  return native.invoke(
    Type.Int, 4871, false,
    arg(Type.Int, token)
  )
end

function SOCIALCLUB.SC_LICENSEPLATE_CHECK_STRING(p0, p1)
  return native.invoke(
    Type.Bool, 4872, false,
    arg(Type.String, p0),
    ref(Type.Int, p1)
  )
end

function SOCIALCLUB.SC_LICENSEPLATE_GET_CHECK_IS_VALID(p0)
  return native.invoke(
    Type.Bool, 4873, false,
    arg(Type.Any, p0)
  )
end

function SOCIALCLUB.SC_LICENSEPLATE_GET_CHECK_IS_PENDING(p0)
  return native.invoke(
    Type.Bool, 4874, false,
    arg(Type.Any, p0)
  )
end

function SOCIALCLUB.SC_LICENSEPLATE_GET_COUNT(token)
  return native.invoke(
    Type.Int, 4875, false,
    arg(Type.Int, token)
  )
end

function SOCIALCLUB.SC_LICENSEPLATE_GET_PLATE(token, plateIndex)
  return native.invoke(
    Type.String, 4876, false,
    arg(Type.Int, token),
    arg(Type.Int, plateIndex)
  )
end

function SOCIALCLUB.SC_LICENSEPLATE_GET_PLATE_DATA(token, plateIndex)
  return native.invoke(
    Type.String, 4877, false,
    arg(Type.Int, token),
    arg(Type.Int, plateIndex)
  )
end

function SOCIALCLUB.SC_LICENSEPLATE_SET_PLATE_DATA(oldPlateText, newPlateText, plateData)
  return native.invoke(
    Type.Bool, 4878, false,
    arg(Type.String, oldPlateText),
    arg(Type.String, newPlateText),
    ref(Type.Any, plateData)
  )
end

function SOCIALCLUB.SC_LICENSEPLATE_ADD(plateText, plateData, token)
  return native.invoke(
    Type.Bool, 4879, false,
    arg(Type.String, plateText),
    ref(Type.Any, plateData),
    ref(Type.Int, token)
  )
end

function SOCIALCLUB.SC_LICENSEPLATE_GET_ADD_IS_PENDING(token)
  return native.invoke(
    Type.Bool, 4880, false,
    arg(Type.Int, token)
  )
end

function SOCIALCLUB.SC_LICENSEPLATE_GET_ADD_STATUS(token)
  return native.invoke(
    Type.Int, 4881, false,
    arg(Type.Int, token)
  )
end

function SOCIALCLUB.SC_LICENSEPLATE_ISVALID(plateText, token)
  return native.invoke(
    Type.Bool, 4882, false,
    arg(Type.String, plateText),
    ref(Type.Int, token)
  )
end

function SOCIALCLUB.SC_LICENSEPLATE_GET_ISVALID_IS_PENDING(token)
  return native.invoke(
    Type.Bool, 4883, false,
    arg(Type.Int, token)
  )
end

function SOCIALCLUB.SC_LICENSEPLATE_GET_ISVALID_STATUS(token)
  return native.invoke(
    Type.Int, 4884, false,
    arg(Type.Int, token)
  )
end

function SOCIALCLUB.SC_COMMUNITY_EVENT_IS_ACTIVE()
  return native.invoke(
    Type.Bool, 4885, false
  )
end

function SOCIALCLUB.SC_COMMUNITY_EVENT_GET_EVENT_ID()
  return native.invoke(
    Type.Int, 4886, false
  )
end

function SOCIALCLUB.SC_COMMUNITY_EVENT_GET_EXTRA_DATA_INT(p0, p1)
  return native.invoke(
    Type.Bool, 4887, false,
    arg(Type.String, p0),
    ref(Type.Int, p1)
  )
end

function SOCIALCLUB.SC_COMMUNITY_EVENT_GET_EXTRA_DATA_FLOAT(p0, p1)
  return native.invoke(
    Type.Bool, 4888, false,
    arg(Type.String, p0),
    ref(Type.Float, p1)
  )
end

function SOCIALCLUB.SC_COMMUNITY_EVENT_GET_EXTRA_DATA_STRING(p0, p1)
  return native.invoke(
    Type.Bool, 4889, false,
    arg(Type.String, p0),
    ref(Type.Char, p1)
  )
end

function SOCIALCLUB.SC_COMMUNITY_EVENT_GET_DISPLAY_NAME(p0)
  return native.invoke(
    Type.Bool, 4890, false,
    ref(Type.Char, p0)
  )
end

function SOCIALCLUB.SC_COMMUNITY_EVENT_IS_ACTIVE_FOR_TYPE(p0)
  return native.invoke(
    Type.Bool, 4891, false,
    arg(Type.String, p0)
  )
end

function SOCIALCLUB.SC_COMMUNITY_EVENT_GET_EVENT_ID_FOR_TYPE(p0)
  return native.invoke(
    Type.Int, 4892, false,
    arg(Type.String, p0)
  )
end

function SOCIALCLUB.SC_COMMUNITY_EVENT_GET_EXTRA_DATA_INT_FOR_TYPE(p0, p1, p2)
  return native.invoke(
    Type.Bool, 4893, false,
    arg(Type.String, p0),
    ref(Type.Int, p1),
    arg(Type.String, p2)
  )
end

function SOCIALCLUB.SC_COMMUNITY_EVENT_GET_EXTRA_DATA_FLOAT_FOR_TYPE(p0, p1, p2)
  return native.invoke(
    Type.Bool, 4894, false,
    arg(Type.String, p0),
    ref(Type.Float, p1),
    arg(Type.String, p2)
  )
end

function SOCIALCLUB.SC_COMMUNITY_EVENT_GET_EXTRA_DATA_STRING_FOR_TYPE(p0, p1, p2)
  return native.invoke(
    Type.Bool, 4895, false,
    arg(Type.String, p0),
    ref(Type.Char, p1),
    arg(Type.String, p2)
  )
end

function SOCIALCLUB.SC_COMMUNITY_EVENT_GET_DISPLAY_NAME_FOR_TYPE(p0, p1)
  return native.invoke(
    Type.Bool, 4896, false,
    ref(Type.Char, p0),
    arg(Type.String, p1)
  )
end

function SOCIALCLUB.SC_COMMUNITY_EVENT_IS_ACTIVE_BY_ID(p0)
  return native.invoke(
    Type.Bool, 4897, false,
    arg(Type.Int, p0)
  )
end

function SOCIALCLUB.SC_COMMUNITY_EVENT_GET_EXTRA_DATA_INT_BY_ID(p0, p1, p2)
  return native.invoke(
    Type.Bool, 4898, false,
    arg(Type.Int, p0),
    arg(Type.String, p1),
    ref(Type.Int, p2)
  )
end

function SOCIALCLUB.SC_COMMUNITY_EVENT_GET_EXTRA_DATA_FLOAT_BY_ID(p0, p1, p2)
  return native.invoke(
    Type.Bool, 4899, false,
    arg(Type.Int, p0),
    arg(Type.String, p1),
    ref(Type.Float, p2)
  )
end

function SOCIALCLUB.SC_COMMUNITY_EVENT_GET_EXTRA_DATA_STRING_BY_ID(p0, p1, p2)
  return native.invoke(
    Type.Bool, 4900, false,
    arg(Type.Int, p0),
    arg(Type.String, p1),
    ref(Type.Char, p2)
  )
end

function SOCIALCLUB.SC_COMMUNITY_EVENT_GET_DISPLAY_NAME_BY_ID(p0, p1)
  return native.invoke(
    Type.Bool, 4901, false,
    arg(Type.Int, p0),
    ref(Type.Char, p1)
  )
end

function SOCIALCLUB.SC_TRANSITION_NEWS_SHOW(p0)
  return native.invoke(
    Type.Bool, 4902, false,
    arg(Type.Any, p0)
  )
end

function SOCIALCLUB.SC_TRANSITION_NEWS_SHOW_TIMED(p0, p1)
  return native.invoke(
    Type.Bool, 4903, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1)
  )
end

function SOCIALCLUB.SC_TRANSITION_NEWS_SHOW_NEXT_ITEM()
  return native.invoke(
    Type.Bool, 4904, false
  )
end

function SOCIALCLUB.SC_TRANSITION_NEWS_HAS_EXTRA_DATA_TU()
  return native.invoke(
    Type.Bool, 4905, false
  )
end

function SOCIALCLUB.SC_TRANSITION_NEWS_GET_EXTRA_DATA_INT_TU(p0, p1)
  return native.invoke(
    Type.Bool, 4906, false,
    arg(Type.String, p0),
    ref(Type.Int, p1)
  )
end

function SOCIALCLUB.SC_TRANSITION_NEWS_END()
  native.invoke(
    Type.Void, 4907, false
  )
end

function SOCIALCLUB.SC_PAUSE_NEWS_INIT_STARTER_PACK(p0)
  return native.invoke(
    Type.Bool, 4908, false,
    arg(Type.Any, p0)
  )
end

function SOCIALCLUB.SC_PAUSE_NEWS_GET_PENDING_STORY(p0)
  return native.invoke(
    Type.Bool, 4909, false,
    arg(Type.Any, p0)
  )
end

function SOCIALCLUB.SC_PAUSE_NEWS_SHUTDOWN()
  native.invoke(
    Type.Void, 4910, false
  )
end

function SOCIALCLUB.SC_ACCOUNT_INFO_GET_NICKNAME()
  return native.invoke(
    Type.String, 4911, false
  )
end

function SOCIALCLUB.SC_ACHIEVEMENT_INFO_STATUS(p0)
  return native.invoke(
    Type.Bool, 4912, false,
    ref(Type.Int, p0)
  )
end

function SOCIALCLUB.SC_HAS_ACHIEVEMENT_BEEN_PASSED(achievementId)
  return native.invoke(
    Type.Bool, 4913, false,
    arg(Type.Int, achievementId)
  )
end


STATS = {}

function STATS.STAT_CLEAR_SLOT_FOR_RELOAD(statSlot)
  return native.invoke(
    Type.Bool, 4914, false,
    arg(Type.Int, statSlot)
  )
end

function STATS.STAT_LOAD(statSlot)
  return native.invoke(
    Type.Bool, 4915, false,
    arg(Type.Int, statSlot)
  )
end

function STATS.STAT_SAVE(p0, p1, p2, p3)
  return native.invoke(
    Type.Bool, 4916, false,
    arg(Type.Int, p0),
    arg(Type.Bool, p1),
    arg(Type.Int, p2),
    arg(Type.Bool, p3)
  )
end

function STATS.STAT_SET_OPEN_SAVETYPE_IN_JOB(p0)
  native.invoke(
    Type.Void, 4917, false,
    arg(Type.Int, p0)
  )
end

function STATS.STAT_LOAD_PENDING(statSlot)
  return native.invoke(
    Type.Bool, 4918, false,
    arg(Type.Int, statSlot)
  )
end

function STATS.STAT_SAVE_PENDING()
  return native.invoke(
    Type.Bool, 4919, false
  )
end

function STATS.STAT_SAVE_PENDING_OR_REQUESTED()
  return native.invoke(
    Type.Bool, 4920, false
  )
end

function STATS.STAT_DELETE_SLOT(p0)
  return native.invoke(
    Type.Bool, 4921, false,
    arg(Type.Int, p0)
  )
end

function STATS.STAT_SLOT_IS_LOADED(statSlot)
  return native.invoke(
    Type.Bool, 4922, false,
    arg(Type.Int, statSlot)
  )
end

function STATS.STAT_CLOUD_SLOT_LOAD_FAILED(p0)
  return native.invoke(
    Type.Bool, 4923, false,
    arg(Type.Int, p0)
  )
end

function STATS.STAT_CLOUD_SLOT_LOAD_FAILED_CODE(p0)
  return native.invoke(
    Type.Int, 4924, false,
    arg(Type.Any, p0)
  )
end

function STATS.STAT_SET_BLOCK_SAVES(toggle)
  native.invoke(
    Type.Void, 4925, false,
    arg(Type.Bool, toggle)
  )
end

function STATS.STAT_GET_BLOCK_SAVES()
  return native.invoke(
    Type.Bool, 4926, false
  )
end

function STATS.STAT_CLOUD_SLOT_SAVE_FAILED(p0)
  return native.invoke(
    Type.Bool, 4927, false,
    arg(Type.Any, p0)
  )
end

function STATS.STAT_CLEAR_PENDING_SAVES(p0)
  native.invoke(
    Type.Void, 4928, false,
    arg(Type.Any, p0)
  )
end

function STATS.STAT_LOAD_DIRTY_READ_DETECTED()
  return native.invoke(
    Type.Bool, 4929, false
  )
end

function STATS.STAT_CLEAR_DIRTY_READ_DETECTED()
  native.invoke(
    Type.Void, 4930, false
  )
end

function STATS.STAT_GET_LOAD_SAFE_TO_PROGRESS_TO_MP_FROM_SP()
  return native.invoke(
    Type.Bool, 4931, false
  )
end

function STATS._GET_STAT_HASH_FOR_CHARACTER_STAT(dataType, statIndex, charSlot)
  return native.invoke(
    Type.Hash, 4932, false,
    arg(Type.Int, dataType),
    arg(Type.Int, statIndex),
    arg(Type.Int, charSlot)
  )
end

function STATS.STAT_SET_INT(statName, value, save)
  return native.invoke(
    Type.Bool, 4933, false,
    arg(Type.Hash, statName),
    arg(Type.Int, value),
    arg(Type.Bool, save)
  )
end

function STATS.STAT_SET_FLOAT(statName, value, save)
  return native.invoke(
    Type.Bool, 4934, false,
    arg(Type.Hash, statName),
    arg(Type.Float, value),
    arg(Type.Bool, save)
  )
end

function STATS.STAT_SET_BOOL(statName, value, save)
  return native.invoke(
    Type.Bool, 4935, false,
    arg(Type.Hash, statName),
    arg(Type.Bool, value),
    arg(Type.Bool, save)
  )
end

function STATS.STAT_SET_GXT_LABEL(statName, value, save)
  return native.invoke(
    Type.Bool, 4936, false,
    arg(Type.Hash, statName),
    arg(Type.String, value),
    arg(Type.Bool, save)
  )
end

function STATS.STAT_SET_DATE(statName, value, numFields, save)
  return native.invoke(
    Type.Bool, 4937, false,
    arg(Type.Hash, statName),
    ref(Type.Any, value),
    arg(Type.Int, numFields),
    arg(Type.Bool, save)
  )
end

function STATS.STAT_SET_STRING(statName, value, save)
  return native.invoke(
    Type.Bool, 4938, false,
    arg(Type.Hash, statName),
    arg(Type.String, value),
    arg(Type.Bool, save)
  )
end

function STATS.STAT_SET_POS(statName, x, y, z, save)
  return native.invoke(
    Type.Bool, 4939, false,
    arg(Type.Hash, statName),
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, z),
    arg(Type.Bool, save)
  )
end

function STATS.STAT_SET_MASKED_INT(statName, p1, p2, p3, save)
  return native.invoke(
    Type.Bool, 4940, false,
    arg(Type.Hash, statName),
    arg(Type.Int, p1),
    arg(Type.Int, p2),
    arg(Type.Int, p3),
    arg(Type.Bool, save)
  )
end

function STATS.STAT_SET_USER_ID(statName, value, save)
  return native.invoke(
    Type.Bool, 4941, false,
    arg(Type.Hash, statName),
    arg(Type.String, value),
    arg(Type.Bool, save)
  )
end

function STATS.STAT_SET_CURRENT_POSIX_TIME(statName, p1)
  return native.invoke(
    Type.Bool, 4942, false,
    arg(Type.Hash, statName),
    arg(Type.Bool, p1)
  )
end

function STATS.STAT_GET_INT(statHash, outValue, p2)
  return native.invoke(
    Type.Bool, 4943, false,
    arg(Type.Hash, statHash),
    ref(Type.Int, outValue),
    arg(Type.Int, p2)
  )
end

function STATS.STAT_GET_FLOAT(statHash, outValue, p2)
  return native.invoke(
    Type.Bool, 4944, false,
    arg(Type.Hash, statHash),
    ref(Type.Float, outValue),
    arg(Type.Any, p2)
  )
end

function STATS.STAT_GET_BOOL(statHash, outValue, p2)
  return native.invoke(
    Type.Bool, 4945, false,
    arg(Type.Hash, statHash),
    ref(Type.Bool, outValue),
    arg(Type.Any, p2)
  )
end

function STATS.STAT_GET_DATE(statHash, outValue, numFields, p3)
  return native.invoke(
    Type.Bool, 4946, false,
    arg(Type.Hash, statHash),
    ref(Type.Any, outValue),
    arg(Type.Int, numFields),
    arg(Type.Any, p3)
  )
end

function STATS.STAT_GET_STRING(statHash, p1)
  return native.invoke(
    Type.String, 4947, false,
    arg(Type.Hash, statHash),
    arg(Type.Int, p1)
  )
end

function STATS.STAT_GET_POS(statName, outX, outY, outZ, p4)
  return native.invoke(
    Type.Bool, 4948, false,
    arg(Type.Hash, statName),
    ref(Type.Float, outX),
    ref(Type.Float, outY),
    ref(Type.Float, outZ),
    arg(Type.Any, p4)
  )
end

function STATS.STAT_GET_MASKED_INT(statHash, outValue, p2, p3, p4)
  return native.invoke(
    Type.Bool, 4949, false,
    arg(Type.Hash, statHash),
    ref(Type.Int, outValue),
    arg(Type.Int, p2),
    arg(Type.Int, p3),
    arg(Type.Any, p4)
  )
end

function STATS.STAT_GET_USER_ID(statHash)
  return native.invoke(
    Type.String, 4950, false,
    arg(Type.Hash, statHash)
  )
end

function STATS.STAT_GET_LICENSE_PLATE(statName)
  return native.invoke(
    Type.String, 4951, false,
    arg(Type.Hash, statName)
  )
end

function STATS.STAT_SET_LICENSE_PLATE(statName, str)
  return native.invoke(
    Type.Bool, 4952, false,
    arg(Type.Hash, statName),
    arg(Type.String, str)
  )
end

function STATS.STAT_INCREMENT(statName, value)
  native.invoke(
    Type.Void, 4953, false,
    arg(Type.Hash, statName),
    arg(Type.Float, value)
  )
end

function STATS.STAT_COMMUNITY_START_SYNCH()
  return native.invoke(
    Type.Bool, 4954, false
  )
end

function STATS.STAT_COMMUNITY_SYNCH_IS_PENDING()
  return native.invoke(
    Type.Bool, 4955, false
  )
end

function STATS.STAT_COMMUNITY_GET_HISTORY(statName, p1, outValue)
  return native.invoke(
    Type.Bool, 4956, false,
    arg(Type.Hash, statName),
    arg(Type.Int, p1),
    ref(Type.Float, outValue)
  )
end

function STATS.STAT_RESET_ALL_ONLINE_CHARACTER_STATS(p0)
  native.invoke(
    Type.Void, 4957, false,
    arg(Type.Int, p0)
  )
end

function STATS.STAT_LOCAL_RESET_ALL_ONLINE_CHARACTER_STATS(p0)
  native.invoke(
    Type.Void, 4958, false,
    arg(Type.Int, p0)
  )
end

function STATS.STAT_GET_NUMBER_OF_DAYS(statName)
  return native.invoke(
    Type.Int, 4959, false,
    arg(Type.Hash, statName)
  )
end

function STATS.STAT_GET_NUMBER_OF_HOURS(statName)
  return native.invoke(
    Type.Int, 4960, false,
    arg(Type.Hash, statName)
  )
end

function STATS.STAT_GET_NUMBER_OF_MINUTES(statName)
  return native.invoke(
    Type.Int, 4961, false,
    arg(Type.Hash, statName)
  )
end

function STATS.STAT_GET_NUMBER_OF_SECONDS(statName)
  return native.invoke(
    Type.Int, 4962, false,
    arg(Type.Hash, statName)
  )
end

function STATS.STAT_SET_PROFILE_SETTING_VALUE(profileSetting, value)
  native.invoke(
    Type.Void, 4963, false,
    arg(Type.Int, profileSetting),
    arg(Type.Int, value)
  )
end

function STATS.STATS_COMPLETED_CHARACTER_CREATION(p0)
  native.invoke(
    Type.Void, 4964, false,
    arg(Type.Any, p0)
  )
end

function STATS.PACKED_STAT_GET_INT_STAT_INDEX(p0)
  return native.invoke(
    Type.Int, 4965, false,
    arg(Type.Int, p0)
  )
end

function STATS.GET_PACKED_INT_STAT_KEY(index, spStat, charStat, character)
  return native.invoke(
    Type.Hash, 4966, false,
    arg(Type.Int, index),
    arg(Type.Bool, spStat),
    arg(Type.Bool, charStat),
    arg(Type.Int, character)
  )
end

function STATS.GET_PACKED_TU_INT_STAT_KEY(index, spStat, charStat, character)
  return native.invoke(
    Type.Hash, 4967, false,
    arg(Type.Int, index),
    arg(Type.Bool, spStat),
    arg(Type.Bool, charStat),
    arg(Type.Int, character)
  )
end

function STATS.GET_PACKED_NG_INT_STAT_KEY(index, spStat, charStat, character, section)
  return native.invoke(
    Type.Hash, 4968, false,
    arg(Type.Int, index),
    arg(Type.Bool, spStat),
    arg(Type.Bool, charStat),
    arg(Type.Int, character),
    arg(Type.String, section)
  )
end

function STATS.GET_PACKED_STAT_BOOL_CODE(index, characterSlot)
  return native.invoke(
    Type.Bool, 4969, false,
    arg(Type.Int, index),
    arg(Type.Int, characterSlot)
  )
end

function STATS.GET_PACKED_STAT_INT_CODE(index, characterSlot)
  return native.invoke(
    Type.Int, 4970, false,
    arg(Type.Int, index),
    arg(Type.Int, characterSlot)
  )
end

function STATS.SET_PACKED_STAT_BOOL_CODE(index, value, characterSlot)
  native.invoke(
    Type.Void, 4971, false,
    arg(Type.Int, index),
    arg(Type.Bool, value),
    arg(Type.Int, characterSlot)
  )
end

function STATS.SET_PACKED_STAT_INT_CODE(index, value, characterSlot)
  native.invoke(
    Type.Void, 4972, false,
    arg(Type.Int, index),
    arg(Type.Int, value),
    arg(Type.Int, characterSlot)
  )
end

function STATS.PLAYSTATS_BACKGROUND_SCRIPT_ACTION(action, value)
  native.invoke(
    Type.Void, 4973, false,
    arg(Type.String, action),
    arg(Type.Int, value)
  )
end

function STATS._PLAYSTATS_FLOW_LOW(posX, posY, posZ, p3, p4, amount)
  native.invoke(
    Type.Void, 4974, false,
    arg(Type.Float, posX),
    arg(Type.Float, posY),
    arg(Type.Float, posZ),
    arg(Type.String, p3),
    arg(Type.Any, p4),
    arg(Type.Int, amount)
  )
end

function STATS._PLAYSTATS_FLOW_MEDIUM(x, y, z, interiorAction, p4, p5)
  native.invoke(
    Type.Void, 4975, false,
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, z),
    arg(Type.String, interiorAction),
    arg(Type.Int, p4),
    arg(Type.Hash, p5)
  )
end

function STATS.PLAYSTATS_NPC_INVITE(p0)
  native.invoke(
    Type.Void, 4976, false,
    arg(Type.String, p0)
  )
end

function STATS.PLAYSTATS_AWARD_XP(amount, type, category)
  native.invoke(
    Type.Void, 4977, false,
    arg(Type.Int, amount),
    arg(Type.Hash, type),
    arg(Type.Hash, category)
  )
end

function STATS.PLAYSTATS_RANK_UP(rank)
  native.invoke(
    Type.Void, 4978, false,
    arg(Type.Int, rank)
  )
end

function STATS.PLAYSTATS_STARTED_SESSION_IN_OFFLINEMODE()
  native.invoke(
    Type.Void, 4979, false
  )
end

function STATS.PLAYSTATS_ACTIVITY_DONE(p0, activityId, p2)
  native.invoke(
    Type.Void, 4980, false,
    arg(Type.Int, p0),
    arg(Type.Int, activityId),
    arg(Type.Any, p2)
  )
end

function STATS.PLAYSTATS_LEAVE_JOB_CHAIN(p0, p1, p2, p3, p4)
  native.invoke(
    Type.Void, 4981, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1),
    arg(Type.Any, p2),
    arg(Type.Any, p3),
    arg(Type.Any, p4)
  )
end

function STATS.PLAYSTATS_MISSION_STARTED(p0, p1, p2, p3)
  native.invoke(
    Type.Void, 4982, false,
    arg(Type.String, p0),
    arg(Type.Any, p1),
    arg(Type.Any, p2),
    arg(Type.Bool, p3)
  )
end

function STATS.PLAYSTATS_MISSION_OVER(p0, p1, p2, p3, p4, p5)
  native.invoke(
    Type.Void, 4983, false,
    arg(Type.String, p0),
    arg(Type.Any, p1),
    arg(Type.Any, p2),
    arg(Type.Bool, p3),
    arg(Type.Bool, p4),
    arg(Type.Bool, p5)
  )
end

function STATS.PLAYSTATS_MISSION_CHECKPOINT(p0, p1, p2, p3)
  native.invoke(
    Type.Void, 4984, false,
    arg(Type.String, p0),
    arg(Type.Any, p1),
    arg(Type.Any, p2),
    arg(Type.Any, p3)
  )
end

function STATS.PLAYSTATS_RANDOM_MISSION_DONE(name, p1, p2, p3)
  native.invoke(
    Type.Void, 4985, false,
    arg(Type.String, name),
    arg(Type.Any, p1),
    arg(Type.Any, p2),
    arg(Type.Any, p3)
  )
end

function STATS.PLAYSTATS_ROS_BET(amount, act, player, cm)
  native.invoke(
    Type.Void, 4986, false,
    arg(Type.Int, amount),
    arg(Type.Int, act),
    arg(Type.Player, player),
    arg(Type.Float, cm)
  )
end

function STATS.PLAYSTATS_RACE_CHECKPOINT(p0, p1, p2, p3, p4)
  native.invoke(
    Type.Void, 4987, false,
    arg(Type.Vehicle, p0),
    arg(Type.Any, p1),
    arg(Type.Int, p2),
    arg(Type.Int, p3),
    arg(Type.Any, p4)
  )
end

function STATS.PLAYSTATS_CREATE_MATCH_HISTORY_ID_2(playerAccountId, posixTime)
  return native.invoke(
    Type.Bool, 4988, false,
    ref(Type.Int, playerAccountId),
    ref(Type.Int, posixTime)
  )
end

function STATS.PLAYSTATS_MATCH_STARTED(p0, p1, p2)
  native.invoke(
    Type.Void, 4989, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1),
    arg(Type.Any, p2)
  )
end

function STATS.PLAYSTATS_SHOP_ITEM(p0, p1, p2, p3, p4)
  native.invoke(
    Type.Void, 4990, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1),
    arg(Type.Any, p2),
    arg(Type.Any, p3),
    arg(Type.Any, p4)
  )
end

function STATS.PLAYSTATS_CRATE_DROP_MISSION_DONE(p0, p1, p2, p3, p4, p5, p6, p7)
  native.invoke(
    Type.Void, 4991, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1),
    arg(Type.Any, p2),
    arg(Type.Any, p3),
    arg(Type.Any, p4),
    arg(Type.Any, p5),
    arg(Type.Any, p6),
    arg(Type.Any, p7)
  )
end

function STATS.PLAYSTATS_CRATE_CREATED(p0, p1, p2)
  native.invoke(
    Type.Void, 4992, false,
    arg(Type.Float, p0),
    arg(Type.Float, p1),
    arg(Type.Float, p2)
  )
end

function STATS.PLAYSTATS_HOLD_UP_MISSION_DONE(p0, p1, p2, p3)
  native.invoke(
    Type.Void, 4993, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1),
    arg(Type.Any, p2),
    arg(Type.Any, p3)
  )
end

function STATS.PLAYSTATS_IMPORT_EXPORT_MISSION_DONE(p0, p1, p2, p3)
  native.invoke(
    Type.Void, 4994, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1),
    arg(Type.Any, p2),
    arg(Type.Any, p3)
  )
end

function STATS.PLAYSTATS_RACE_TO_POINT_MISSION_DONE(p0, p1, p2, p3)
  native.invoke(
    Type.Void, 4995, false,
    arg(Type.Int, p0),
    arg(Type.Any, p1),
    arg(Type.Any, p2),
    arg(Type.Any, p3)
  )
end

function STATS.PLAYSTATS_ACQUIRED_HIDDEN_PACKAGE(p0)
  native.invoke(
    Type.Void, 4996, false,
    arg(Type.Any, p0)
  )
end

function STATS.PLAYSTATS_WEBSITE_VISITED(scaleformHash, p1)
  native.invoke(
    Type.Void, 4997, false,
    arg(Type.Hash, scaleformHash),
    arg(Type.Int, p1)
  )
end

function STATS.PLAYSTATS_FRIEND_ACTIVITY(p0, p1)
  native.invoke(
    Type.Void, 4998, false,
    arg(Type.Int, p0),
    arg(Type.Bool, p1)
  )
end

function STATS.PLAYSTATS_ODDJOB_DONE(totalTimeMs, p1, p2)
  native.invoke(
    Type.Void, 4999, false,
    arg(Type.Int, totalTimeMs),
    arg(Type.Int, p1),
    arg(Type.Bool, p2)
  )
end

function STATS.PLAYSTATS_PROP_CHANGE(p0, p1, p2, p3)
  native.invoke(
    Type.Void, 5000, false,
    arg(Type.Ped, p0),
    arg(Type.Int, p1),
    arg(Type.Int, p2),
    arg(Type.Int, p3)
  )
end

function STATS.PLAYSTATS_CLOTH_CHANGE(p0, p1, p2, p3, p4)
  native.invoke(
    Type.Void, 5001, false,
    arg(Type.Ped, p0),
    arg(Type.Any, p1),
    arg(Type.Any, p2),
    arg(Type.Any, p3),
    arg(Type.Any, p4)
  )
end

function STATS.PLAYSTATS_WEAPON_MODE_CHANGE(weaponHash, componentHashTo, componentHashFrom)
  native.invoke(
    Type.Void, 5002, false,
    arg(Type.Hash, weaponHash),
    arg(Type.Hash, componentHashTo),
    arg(Type.Hash, componentHashFrom)
  )
end

function STATS.PLAYSTATS_CHEAT_APPLIED(cheat)
  native.invoke(
    Type.Void, 5003, false,
    arg(Type.String, cheat)
  )
end

function STATS.PLAYSTATS_JOB_ACTIVITY_END(p0, p1, p2, p3)
  native.invoke(
    Type.Void, 5004, false,
    ref(Type.Any, p0),
    ref(Type.Any, p1),
    ref(Type.Any, p2),
    ref(Type.Any, p3)
  )
end

function STATS.PLAYSTATS_JOB_BEND(p0, p1, p2, p3)
  native.invoke(
    Type.Void, 5005, false,
    ref(Type.Any, p0),
    ref(Type.Any, p1),
    ref(Type.Any, p2),
    ref(Type.Any, p3)
  )
end

function STATS.PLAYSTATS_JOB_LTS_END(p0, p1, p2, p3)
  native.invoke(
    Type.Void, 5006, false,
    ref(Type.Any, p0),
    ref(Type.Any, p1),
    ref(Type.Any, p2),
    ref(Type.Any, p3)
  )
end

function STATS.PLAYSTATS_JOB_LTS_ROUND_END(p0, p1, p2, p3)
  native.invoke(
    Type.Void, 5007, false,
    ref(Type.Any, p0),
    ref(Type.Any, p1),
    ref(Type.Any, p2),
    ref(Type.Any, p3)
  )
end

function STATS.PLAYSTATS_QUICKFIX_TOOL(element, item)
  native.invoke(
    Type.Void, 5008, false,
    arg(Type.Int, element),
    arg(Type.String, item)
  )
end

function STATS.PLAYSTATS_IDLE_KICK(msStoodIdle)
  native.invoke(
    Type.Void, 5009, false,
    arg(Type.Int, msStoodIdle)
  )
end

function STATS.PLAYSTATS_SET_JOIN_TYPE(joinType)
  native.invoke(
    Type.Void, 5010, false,
    arg(Type.Int, joinType)
  )
end

function STATS.PLAYSTATS_HEIST_SAVE_CHEAT(hash, p1)
  native.invoke(
    Type.Void, 5011, false,
    arg(Type.Hash, hash),
    arg(Type.Int, p1)
  )
end

function STATS.PLAYSTATS_APPEND_DIRECTOR_METRIC(p0)
  native.invoke(
    Type.Void, 5012, false,
    ref(Type.Any, p0)
  )
end

function STATS.PLAYSTATS_AWARD_BAD_SPORT(id)
  native.invoke(
    Type.Void, 5013, false,
    arg(Type.Int, id)
  )
end

function STATS.PLAYSTATS_PEGASUS_AS_PERSONAL_AIRCRAFT(modelHash)
  native.invoke(
    Type.Void, 5014, false,
    arg(Type.Hash, modelHash)
  )
end

function STATS._PLAYSTATS_SHOPMENU_NAV(p0, p1, p2, p3)
  native.invoke(
    Type.Void, 5015, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1),
    arg(Type.Any, p2),
    arg(Type.Any, p3)
  )
end

function STATS.PLAYSTATS_FM_EVENT_CHALLENGES(p0)
  native.invoke(
    Type.Void, 5016, false,
    arg(Type.Any, p0)
  )
end

function STATS.PLAYSTATS_FM_EVENT_VEHICLETARGET(p0)
  native.invoke(
    Type.Void, 5017, false,
    arg(Type.Any, p0)
  )
end

function STATS.PLAYSTATS_FM_EVENT_URBANWARFARE(p0)
  native.invoke(
    Type.Void, 5018, false,
    arg(Type.Any, p0)
  )
end

function STATS.PLAYSTATS_FM_EVENT_CHECKPOINTCOLLECTION(p0)
  native.invoke(
    Type.Void, 5019, false,
    arg(Type.Any, p0)
  )
end

function STATS.PLAYSTATS_FM_EVENT_ATOB(p0)
  native.invoke(
    Type.Void, 5020, false,
    arg(Type.Any, p0)
  )
end

function STATS.PLAYSTATS_FM_EVENT_PENNEDIN(p0)
  native.invoke(
    Type.Void, 5021, false,
    arg(Type.Any, p0)
  )
end

function STATS.PLAYSTATS_FM_EVENT_PASSTHEPARCEL(p0)
  native.invoke(
    Type.Void, 5022, false,
    arg(Type.Any, p0)
  )
end

function STATS.PLAYSTATS_FM_EVENT_HOTPROPERTY(p0)
  native.invoke(
    Type.Void, 5023, false,
    arg(Type.Any, p0)
  )
end

function STATS.PLAYSTATS_FM_EVENT_DEADDROP(p0)
  native.invoke(
    Type.Void, 5024, false,
    arg(Type.Any, p0)
  )
end

function STATS.PLAYSTATS_FM_EVENT_KINGOFTHECASTLE(p0)
  native.invoke(
    Type.Void, 5025, false,
    arg(Type.Any, p0)
  )
end

function STATS.PLAYSTATS_FM_EVENT_CRIMINALDAMAGE(p0)
  native.invoke(
    Type.Void, 5026, false,
    arg(Type.Any, p0)
  )
end

function STATS.PLAYSTATS_FM_EVENT_COMPETITIVEURBANWARFARE(p0)
  native.invoke(
    Type.Void, 5027, false,
    arg(Type.Any, p0)
  )
end

function STATS.PLAYSTATS_FM_EVENT_HUNTBEAST(p0)
  native.invoke(
    Type.Void, 5028, false,
    arg(Type.Any, p0)
  )
end

function STATS.PLAYSTATS_PIMENU_HIDE_OPTIONS(data)
  native.invoke(
    Type.Void, 5029, false,
    ref(Type.Any, data)
  )
end

function STATS.LEADERBOARDS_GET_NUMBER_OF_COLUMNS(p0, p1)
  return native.invoke(
    Type.Int, 5030, false,
    arg(Type.Int, p0),
    arg(Type.Any, p1)
  )
end

function STATS.LEADERBOARDS_GET_COLUMN_ID(p0, p1, p2)
  return native.invoke(
    Type.Int, 5031, false,
    arg(Type.Int, p0),
    arg(Type.Int, p1),
    arg(Type.Int, p2)
  )
end

function STATS.LEADERBOARDS_GET_COLUMN_TYPE(p0, p1, p2)
  return native.invoke(
    Type.Int, 5032, false,
    arg(Type.Int, p0),
    arg(Type.Any, p1),
    arg(Type.Any, p2)
  )
end

function STATS.LEADERBOARDS_READ_CLEAR_ALL()
  return native.invoke(
    Type.Int, 5033, false
  )
end

function STATS.LEADERBOARDS_READ_CLEAR(p0, p1, p2)
  return native.invoke(
    Type.Int, 5034, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1),
    arg(Type.Any, p2)
  )
end

function STATS.LEADERBOARDS_READ_PENDING(p0, p1, p2)
  return native.invoke(
    Type.Bool, 5035, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1),
    arg(Type.Any, p2)
  )
end

function STATS.LEADERBOARDS_READ_ANY_PENDING()
  return native.invoke(
    Type.Bool, 5036, false
  )
end

function STATS.LEADERBOARDS_READ_SUCCESSFUL(p0, p1, p2)
  return native.invoke(
    Type.Bool, 5037, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1),
    arg(Type.Any, p2)
  )
end

function STATS.LEADERBOARDS2_READ_FRIENDS_BY_ROW(p0, p1, p2, p3, p4, p5)
  return native.invoke(
    Type.Bool, 5038, false,
    ref(Type.Any, p0),
    ref(Type.Any, p1),
    arg(Type.Any, p2),
    arg(Type.Bool, p3),
    arg(Type.Any, p4),
    arg(Type.Any, p5)
  )
end

function STATS.LEADERBOARDS2_READ_BY_HANDLE(p0, p1)
  return native.invoke(
    Type.Bool, 5039, false,
    ref(Type.Any, p0),
    ref(Type.Any, p1)
  )
end

function STATS.LEADERBOARDS2_READ_BY_RANK(p0, p1, p2)
  return native.invoke(
    Type.Bool, 5040, false,
    ref(Type.Any, p0),
    arg(Type.Any, p1),
    arg(Type.Any, p2)
  )
end

function STATS.LEADERBOARDS2_READ_BY_RADIUS(p0, p1, p2)
  return native.invoke(
    Type.Bool, 5041, false,
    ref(Type.Any, p0),
    arg(Type.Any, p1),
    ref(Type.Any, p2)
  )
end

function STATS.LEADERBOARDS2_READ_BY_SCORE_INT(p0, p1, p2)
  return native.invoke(
    Type.Bool, 5042, false,
    ref(Type.Any, p0),
    arg(Type.Any, p1),
    arg(Type.Any, p2)
  )
end

function STATS.LEADERBOARDS2_READ_BY_SCORE_FLOAT(p0, p1, p2)
  return native.invoke(
    Type.Bool, 5043, false,
    ref(Type.Any, p0),
    arg(Type.Float, p1),
    arg(Type.Any, p2)
  )
end

function STATS.LEADERBOARDS2_READ_RANK_PREDICTION(p0, p1, p2)
  return native.invoke(
    Type.Bool, 5044, false,
    ref(Type.Any, p0),
    ref(Type.Any, p1),
    ref(Type.Any, p2)
  )
end

function STATS.LEADERBOARDS2_READ_BY_PLAFORM(p0, gamerHandleCsv, platformName)
  return native.invoke(
    Type.Bool, 5045, false,
    ref(Type.Any, p0),
    arg(Type.String, gamerHandleCsv),
    arg(Type.String, platformName)
  )
end

function STATS.LEADERBOARDS2_READ_GET_ROW_DATA_START(p0)
  return native.invoke(
    Type.Bool, 5046, false,
    ref(Type.Any, p0)
  )
end

function STATS.LEADERBOARDS2_READ_GET_ROW_DATA_END()
  native.invoke(
    Type.Void, 5047, false
  )
end

function STATS.LEADERBOARDS2_READ_GET_ROW_DATA_INFO(p0, p1)
  return native.invoke(
    Type.Bool, 5048, false,
    arg(Type.Any, p0),
    ref(Type.Any, p1)
  )
end

function STATS.LEADERBOARDS2_READ_GET_ROW_DATA_INT(p0, p1)
  return native.invoke(
    Type.Int, 5049, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1)
  )
end

function STATS.LEADERBOARDS2_READ_GET_ROW_DATA_FLOAT(p0, p1)
  return native.invoke(
    Type.Float, 5050, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1)
  )
end

function STATS.LEADERBOARDS2_WRITE_DATA(p0)
  return native.invoke(
    Type.Bool, 5051, false,
    ref(Type.Any, p0)
  )
end

function STATS.LEADERBOARDS_WRITE_ADD_COLUMN(p0, p1, p2)
  native.invoke(
    Type.Void, 5052, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1),
    arg(Type.Float, p2)
  )
end

function STATS.LEADERBOARDS_WRITE_ADD_COLUMN_LONG(p0, p1, p2)
  native.invoke(
    Type.Void, 5053, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1),
    arg(Type.Any, p2)
  )
end

function STATS.LEADERBOARDS_CACHE_DATA_ROW(p0)
  return native.invoke(
    Type.Bool, 5054, false,
    ref(Type.Any, p0)
  )
end

function STATS.LEADERBOARDS_CLEAR_CACHE_DATA()
  native.invoke(
    Type.Void, 5055, false
  )
end

function STATS.LEADERBOARDS_CLEAR_CACHE_DATA_ID(p0)
  native.invoke(
    Type.Void, 5056, false,
    arg(Type.Any, p0)
  )
end

function STATS.LEADERBOARDS_GET_CACHE_EXISTS(p0)
  return native.invoke(
    Type.Bool, 5057, false,
    arg(Type.Any, p0)
  )
end

function STATS.LEADERBOARDS_GET_CACHE_TIME(p0)
  return native.invoke(
    Type.Int, 5058, false,
    arg(Type.Any, p0)
  )
end

function STATS.LEADERBOARDS_GET_CACHE_NUMBER_OF_ROWS(p0)
  return native.invoke(
    Type.Int, 5059, false,
    arg(Type.Any, p0)
  )
end

function STATS.LEADERBOARDS_GET_CACHE_DATA_ROW(p0, p1, p2)
  return native.invoke(
    Type.Bool, 5060, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1),
    ref(Type.Any, p2)
  )
end

function STATS.PRESENCE_EVENT_UPDATESTAT_INT(statHash, value, p2)
  native.invoke(
    Type.Void, 5061, false,
    arg(Type.Hash, statHash),
    arg(Type.Int, value),
    arg(Type.Int, p2)
  )
end

function STATS.PRESENCE_EVENT_UPDATESTAT_FLOAT(statHash, value, p2)
  native.invoke(
    Type.Void, 5062, false,
    arg(Type.Hash, statHash),
    arg(Type.Float, value),
    arg(Type.Int, p2)
  )
end

function STATS.PRESENCE_EVENT_UPDATESTAT_INT_WITH_STRING(statHash, value, p2, string)
  native.invoke(
    Type.Void, 5063, false,
    arg(Type.Hash, statHash),
    arg(Type.Int, value),
    arg(Type.Int, p2),
    arg(Type.String, string)
  )
end

function STATS.GET_PLAYER_HAS_DRIVEN_ALL_VEHICLES()
  return native.invoke(
    Type.Bool, 5064, false
  )
end

function STATS.SET_HAS_POSTED_ALL_VEHICLES_DRIVEN()
  native.invoke(
    Type.Void, 5065, false
  )
end

function STATS.SET_PROFILE_SETTING_PROLOGUE_COMPLETE()
  native.invoke(
    Type.Void, 5066, false
  )
end

function STATS.SET_PROFILE_SETTING_SP_CHOP_MISSION_COMPLETE()
  native.invoke(
    Type.Void, 5067, false
  )
end

function STATS.SET_PROFILE_SETTING_CREATOR_RACES_DONE(value)
  native.invoke(
    Type.Void, 5068, false,
    arg(Type.Int, value)
  )
end

function STATS.SET_PROFILE_SETTING_CREATOR_DM_DONE(value)
  native.invoke(
    Type.Void, 5069, false,
    arg(Type.Int, value)
  )
end

function STATS.SET_PROFILE_SETTING_CREATOR_CTF_DONE(value)
  native.invoke(
    Type.Void, 5070, false,
    arg(Type.Int, value)
  )
end

function STATS.SET_JOB_ACTIVITY_ID_STARTED(p0, characterSlot)
  native.invoke(
    Type.Void, 5071, false,
    arg(Type.Any, p0),
    arg(Type.Int, characterSlot)
  )
end

function STATS.SET_FREEMODE_PROLOGUE_DONE(p0, characterSlot)
  native.invoke(
    Type.Void, 5072, false,
    arg(Type.Any, p0),
    arg(Type.Int, characterSlot)
  )
end

function STATS.SET_FREEMODE_STRAND_PROGRESSION_STATUS(profileSetting, settingValue)
  native.invoke(
    Type.Void, 5073, false,
    arg(Type.Int, profileSetting),
    arg(Type.Int, settingValue)
  )
end

function STATS.STAT_NETWORK_INCREMENT_ON_SUICIDE(p0, p1)
  native.invoke(
    Type.Void, 5074, false,
    arg(Type.Any, p0),
    arg(Type.Float, p1)
  )
end

function STATS.STAT_SET_CHEAT_IS_ACTIVE()
  native.invoke(
    Type.Void, 5075, false
  )
end

function STATS.LEADERBOARDS2_WRITE_DATA_FOR_EVENT_TYPE(p0, p1)
  return native.invoke(
    Type.Bool, 5076, false,
    ref(Type.Any, p0),
    ref(Type.Any, p1)
  )
end

function STATS.FORCE_CLOUD_MP_STATS_DOWNLOAD_AND_OVERWRITE_LOCAL_SAVE()
  native.invoke(
    Type.Void, 5077, false
  )
end

function STATS.STAT_MIGRATE_CLEAR_FOR_RESTART()
  native.invoke(
    Type.Void, 5078, false
  )
end

function STATS.STAT_MIGRATE_SAVEGAME_START(platformName)
  return native.invoke(
    Type.Bool, 5079, false,
    arg(Type.String, platformName)
  )
end

function STATS.STAT_MIGRATE_SAVEGAME_GET_STATUS()
  return native.invoke(
    Type.Int, 5080, false
  )
end

function STATS.STAT_MIGRATE_CHECK_ALREADY_DONE()
  return native.invoke(
    Type.Bool, 5081, false
  )
end

function STATS.STAT_MIGRATE_CHECK_START()
  return native.invoke(
    Type.Bool, 5082, false
  )
end

function STATS.STAT_MIGRATE_CHECK_GET_IS_PLATFORM_AVAILABLE(p0)
  return native.invoke(
    Type.Int, 5083, false,
    arg(Type.Int, p0)
  )
end

function STATS.STAT_MIGRATE_CHECK_GET_PLATFORM_STATUS(p0, p1)
  return native.invoke(
    Type.Int, 5084, false,
    arg(Type.Int, p0),
    ref(Type.Any, p1)
  )
end

function STATS.STAT_GET_SAVE_MIGRATION_STATUS(data)
  return native.invoke(
    Type.Int, 5085, false,
    ref(Type.Any, data)
  )
end

function STATS.STAT_SAVE_MIGRATION_CANCEL_PENDING_OPERATION()
  return native.invoke(
    Type.Bool, 5086, false
  )
end

function STATS.STAT_GET_CANCEL_SAVE_MIGRATION_STATUS()
  return native.invoke(
    Type.Int, 5087, false
  )
end

function STATS.STAT_SAVE_MIGRATION_CONSUME_CONTENT(contentId, srcPlatform, srcGamerHandle)
  return native.invoke(
    Type.Bool, 5088, false,
    arg(Type.Hash, contentId),
    arg(Type.String, srcPlatform),
    arg(Type.String, srcGamerHandle)
  )
end

function STATS.STAT_GET_SAVE_MIGRATION_CONSUME_CONTENT_STATUS(p0)
  return native.invoke(
    Type.Int, 5089, false,
    ref(Type.Int, p0)
  )
end

function STATS.STAT_ENABLE_STATS_TRACKING()
  native.invoke(
    Type.Void, 5090, false
  )
end

function STATS.STAT_DISABLE_STATS_TRACKING()
  native.invoke(
    Type.Void, 5091, false
  )
end

function STATS.STAT_IS_STATS_TRACKING_ENABLED()
  return native.invoke(
    Type.Bool, 5092, false
  )
end

function STATS.STAT_START_RECORD_STAT(statType, valueType)
  return native.invoke(
    Type.Bool, 5093, false,
    arg(Type.Int, statType),
    arg(Type.Int, valueType)
  )
end

function STATS.STAT_STOP_RECORD_STAT()
  return native.invoke(
    Type.Bool, 5094, false
  )
end

function STATS.STAT_GET_RECORDED_VALUE(value)
  return native.invoke(
    Type.Bool, 5095, false,
    ref(Type.Float, value)
  )
end

function STATS.STAT_IS_RECORDING_STAT()
  return native.invoke(
    Type.Bool, 5096, false
  )
end

function STATS.STAT_GET_CURRENT_NEAR_MISS_NOCRASH_PRECISE()
  return native.invoke(
    Type.Int, 5097, false
  )
end

function STATS.STAT_GET_CURRENT_REAR_WHEEL_DISTANCE()
  return native.invoke(
    Type.Float, 5098, false
  )
end

function STATS.STAT_GET_CURRENT_FRONT_WHEEL_DISTANCE()
  return native.invoke(
    Type.Float, 5099, false
  )
end

function STATS.STAT_GET_CURRENT_JUMP_DISTANCE()
  return native.invoke(
    Type.Float, 5100, false
  )
end

function STATS.STAT_GET_CURRENT_DRIVE_NOCRASH_DISTANCE()
  return native.invoke(
    Type.Float, 5101, false
  )
end

function STATS.STAT_GET_CURRENT_SPEED()
  return native.invoke(
    Type.Float, 5102, false
  )
end

function STATS.STAT_GET_CURRENT_DRIVING_REVERSE_DISTANCE()
  return native.invoke(
    Type.Float, 5103, false
  )
end

function STATS.STAT_GET_CURRENT_SKYDIVING_DISTANCE()
  return native.invoke(
    Type.Float, 5104, false
  )
end

function STATS.STAT_GET_CHALLENGE_FLYING_DIST()
  return native.invoke(
    Type.Float, 5105, false
  )
end

function STATS.STAT_GET_FLYING_ALTITUDE(outValue)
  return native.invoke(
    Type.Bool, 5106, false,
    ref(Type.Float, outValue)
  )
end

function STATS.STAT_IS_PLAYER_VEHICLE_ABOVE_OCEAN()
  return native.invoke(
    Type.Bool, 5107, false
  )
end

function STATS.STAT_GET_VEHICLE_BAIL_DISTANCE()
  return native.invoke(
    Type.Float, 5108, false
  )
end

function STATS.STAT_ROLLBACK_SAVE_MIGRATION()
  return native.invoke(
    Type.Bool, 5109, false
  )
end

function STATS.SET_HAS_SPECIALEDITION_CONTENT(value)
  native.invoke(
    Type.Void, 5110, false,
    arg(Type.Int, value)
  )
end

function STATS.SET_SAVE_MIGRATION_TRANSACTION_ID_WARNING(transactionId)
  native.invoke(
    Type.Void, 5111, false,
    arg(Type.Int, transactionId)
  )
end

function STATS.GET_BOSS_GOON_UUID(characterSlot, p1, p2)
  native.invoke(
    Type.Void, 5112, false,
    arg(Type.Int, characterSlot),
    arg(Type.Any, p1),
    arg(Type.Any, p2)
  )
end

function STATS.PLAYSTATS_BW_BOSSONBOSSDEATHMATCH(p0)
  native.invoke(
    Type.Void, 5113, false,
    arg(Type.Any, p0)
  )
end

function STATS.PLAYSTATS_BW_YATCHATTACK(p0)
  native.invoke(
    Type.Void, 5114, false,
    arg(Type.Any, p0)
  )
end

function STATS.PLAYSTATS_BW_HUNT_THE_BOSS(p0)
  native.invoke(
    Type.Void, 5115, false,
    arg(Type.Any, p0)
  )
end

function STATS.PLAYSTATS_BW_SIGHTSEER(p0)
  native.invoke(
    Type.Void, 5116, false,
    arg(Type.Any, p0)
  )
end

function STATS.PLAYSTATS_BW_ASSAULT(p0)
  native.invoke(
    Type.Void, 5117, false,
    arg(Type.Any, p0)
  )
end

function STATS.PLAYSTATS_BW_BELLY_OF_THE_BEAST(p0)
  native.invoke(
    Type.Void, 5118, false,
    arg(Type.Any, p0)
  )
end

function STATS.PLAYSTATS_BW_HEAD_HUNTER(p0)
  native.invoke(
    Type.Void, 5119, false,
    arg(Type.Any, p0)
  )
end

function STATS.PLAYSTATS_BW_FRAGILE_GOODS(p0)
  native.invoke(
    Type.Void, 5120, false,
    arg(Type.Any, p0)
  )
end

function STATS.PLAYSTATS_BW_AIR_FREIGHT(p0)
  native.invoke(
    Type.Void, 5121, false,
    arg(Type.Any, p0)
  )
end

function STATS.PLAYSTATS_BC_CAR_JACKING(p0)
  native.invoke(
    Type.Void, 5122, false,
    arg(Type.Any, p0)
  )
end

function STATS.PLAYSTATS_BC_SMASH_AND_GRAB(p0)
  native.invoke(
    Type.Void, 5123, false,
    arg(Type.Any, p0)
  )
end

function STATS.PLAYSTATS_BC_PROTECTION_RACKET(p0)
  native.invoke(
    Type.Void, 5124, false,
    arg(Type.Any, p0)
  )
end

function STATS.PLAYSTATS_BC_MOST_WANTED(p0)
  native.invoke(
    Type.Void, 5125, false,
    arg(Type.Any, p0)
  )
end

function STATS.PLAYSTATS_BC_FINDERS_KEEPERS(p0)
  native.invoke(
    Type.Void, 5126, false,
    arg(Type.Any, p0)
  )
end

function STATS.PLAYSTATS_BC_POINT_TO_POINT(p0)
  native.invoke(
    Type.Void, 5127, false,
    arg(Type.Any, p0)
  )
end

function STATS.PLAYSTATS_BC_CASHING(p0)
  native.invoke(
    Type.Void, 5128, false,
    arg(Type.Any, p0)
  )
end

function STATS.PLAYSTATS_BC_SALVAGE(p0)
  native.invoke(
    Type.Void, 5129, false,
    arg(Type.Any, p0)
  )
end

function STATS.PLAYSTATS_SPENT_PI_CUSTOM_LOADOUT(amount)
  native.invoke(
    Type.Void, 5130, false,
    arg(Type.Int, amount)
  )
end

function STATS.PLAYSTATS_BUY_CONTRABAND_MISSION(data)
  native.invoke(
    Type.Void, 5131, false,
    ref(Type.Any, data)
  )
end

function STATS.PLAYSTATS_SELL_CONTRABAND_MISSION(data)
  native.invoke(
    Type.Void, 5132, false,
    ref(Type.Any, data)
  )
end

function STATS.PLAYSTATS_DEFEND_CONTRABAND_MISSION(data)
  native.invoke(
    Type.Void, 5133, false,
    ref(Type.Any, data)
  )
end

function STATS.PLAYSTATS_RECOVER_CONTRABAND_MISSION(data)
  native.invoke(
    Type.Void, 5134, false,
    ref(Type.Any, data)
  )
end

function STATS.PLAYSTATS_HIT_CONTRABAND_DESTROY_LIMIT(p0)
  native.invoke(
    Type.Void, 5135, false,
    arg(Type.Any, p0)
  )
end

function STATS.START_BEING_BOSS(p0, p1, p2)
  native.invoke(
    Type.Void, 5136, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1),
    arg(Type.Any, p2)
  )
end

function STATS.START_BEING_GOON(p0, p1, p2)
  native.invoke(
    Type.Void, 5137, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1),
    arg(Type.Any, p2)
  )
end

function STATS.END_BEING_BOSS(p0, p1, p2)
  native.invoke(
    Type.Void, 5138, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1),
    arg(Type.Any, p2)
  )
end

function STATS.END_BEING_GOON(p0, p1, p2, p3, p4)
  native.invoke(
    Type.Void, 5139, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1),
    arg(Type.Any, p2),
    arg(Type.Any, p3),
    arg(Type.Any, p4)
  )
end

function STATS.HIRED_LIMO(p0, p1)
  native.invoke(
    Type.Void, 5140, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1)
  )
end

function STATS.ORDER_BOSS_VEHICLE(p0, p1, vehicleHash)
  native.invoke(
    Type.Void, 5141, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1),
    arg(Type.Hash, vehicleHash)
  )
end

function STATS.CHANGE_UNIFORM(p0, p1, p2)
  native.invoke(
    Type.Void, 5142, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1),
    arg(Type.Any, p2)
  )
end

function STATS.CHANGE_GOON_LOOKING_FOR_WORK(p0)
  native.invoke(
    Type.Void, 5143, false,
    arg(Type.Any, p0)
  )
end

function STATS.SEND_METRIC_GHOSTING_TO_PLAYER(p0)
  native.invoke(
    Type.Void, 5144, false,
    arg(Type.Any, p0)
  )
end

function STATS.SEND_METRIC_VIP_POACH(p0, p1, p2)
  native.invoke(
    Type.Void, 5145, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1),
    arg(Type.Any, p2)
  )
end

function STATS.SEND_METRIC_PUNISH_BODYGUARD(p0)
  native.invoke(
    Type.Void, 5146, false,
    arg(Type.Any, p0)
  )
end

function STATS.PLAYSTATS_START_TRACKING_STUNTS()
  native.invoke(
    Type.Void, 5147, false
  )
end

function STATS.PLAYSTATS_STOP_TRACKING_STUNTS()
  native.invoke(
    Type.Void, 5148, false
  )
end

function STATS.PLAYSTATS_MISSION_ENDED(p0)
  native.invoke(
    Type.Void, 5149, false,
    arg(Type.Any, p0)
  )
end

function STATS.PLAYSTATS_IMPEXP_MISSION_ENDED(p0)
  native.invoke(
    Type.Void, 5150, false,
    arg(Type.Any, p0)
  )
end

function STATS.PLAYSTATS_CHANGE_MC_ROLE(p0, p1, p2, p3, role, p5, p6)
  native.invoke(
    Type.Void, 5151, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1),
    arg(Type.Any, p2),
    arg(Type.Any, p3),
    arg(Type.Int, role),
    arg(Type.Int, p5),
    arg(Type.Any, p6)
  )
end

function STATS.PLAYSTATS_CHANGE_MC_OUTFIT(p0, p1, p2, p3, p4)
  native.invoke(
    Type.Void, 5152, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1),
    arg(Type.Any, p2),
    arg(Type.Any, p3),
    arg(Type.Any, p4)
  )
end

function STATS.PLAYSTATS_SWITCH_MC_EMBLEM(p0, p1, p2, p3, p4)
  native.invoke(
    Type.Void, 5153, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1),
    arg(Type.Any, p2),
    arg(Type.Any, p3),
    arg(Type.Any, p4)
  )
end

function STATS.PLAYSTATS_MC_REQUEST_BIKE(p0, p1, p2, p3, p4)
  native.invoke(
    Type.Void, 5154, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1),
    arg(Type.Any, p2),
    arg(Type.Any, p3),
    arg(Type.Any, p4)
  )
end

function STATS.PLAYSTATS_MC_KILLED_RIVAL_MC_MEMBER(p0, p1, p2, p3, p4)
  native.invoke(
    Type.Void, 5155, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1),
    arg(Type.Any, p2),
    arg(Type.Any, p3),
    arg(Type.Any, p4)
  )
end

function STATS.PLAYSTATS_ABANDONED_MC(p0, p1, p2, p3, p4)
  native.invoke(
    Type.Void, 5156, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1),
    arg(Type.Any, p2),
    arg(Type.Any, p3),
    arg(Type.Any, p4)
  )
end

function STATS.PLAYSTATS_EARNED_MC_POINTS(p0, p1, p2, p3, p4, p5)
  native.invoke(
    Type.Void, 5157, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1),
    arg(Type.Any, p2),
    arg(Type.Any, p3),
    arg(Type.Any, p4),
    arg(Type.Any, p5)
  )
end

function STATS.PLAYSTATS_MC_FORMATION_ENDS(p0, p1, p2, p3, p4, p5, p6)
  native.invoke(
    Type.Void, 5158, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1),
    arg(Type.Any, p2),
    arg(Type.Any, p3),
    arg(Type.Any, p4),
    arg(Type.Any, p5),
    arg(Type.Any, p6)
  )
end

function STATS.PLAYSTATS_MC_CLUBHOUSE_ACTIVITY(p0, p1, p2, p3, p4, p5, p6, p7)
  native.invoke(
    Type.Void, 5159, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1),
    arg(Type.Any, p2),
    arg(Type.Any, p3),
    arg(Type.Any, p4),
    arg(Type.Any, p5),
    arg(Type.Any, p6),
    arg(Type.Any, p7)
  )
end

function STATS.PLAYSTATS_RIVAL_BEHAVIOR(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9)
  native.invoke(
    Type.Void, 5160, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1),
    arg(Type.Any, p2),
    arg(Type.Any, p3),
    arg(Type.Any, p4),
    arg(Type.Any, p5),
    arg(Type.Any, p6),
    arg(Type.Any, p7),
    arg(Type.Any, p8),
    arg(Type.Any, p9)
  )
end

function STATS.PLAYSTATS_COPY_RANK_INTO_NEW_SLOT(p0, p1, p2, p3, p4, p5, p6)
  native.invoke(
    Type.Void, 5161, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1),
    arg(Type.Any, p2),
    arg(Type.Any, p3),
    arg(Type.Any, p4),
    arg(Type.Any, p5),
    arg(Type.Any, p6)
  )
end

function STATS.PLAYSTATS_DUPE_DETECTED(data)
  native.invoke(
    Type.Void, 5162, false,
    ref(Type.Any, data)
  )
end

function STATS.PLAYSTATS_BAN_ALERT(p0)
  native.invoke(
    Type.Void, 5163, false,
    arg(Type.Int, p0)
  )
end

function STATS.PLAYSTATS_GUNRUNNING_MISSION_ENDED(data)
  native.invoke(
    Type.Void, 5164, false,
    ref(Type.Any, data)
  )
end

function STATS.PLAYSTATS_GUNRUNNING_RND(p0)
  native.invoke(
    Type.Void, 5165, false,
    arg(Type.Any, p0)
  )
end

function STATS.PLAYSTATS_BUSINESS_BATTLE_ENDED(p0)
  native.invoke(
    Type.Void, 5166, false,
    arg(Type.Any, p0)
  )
end

function STATS.PLAYSTATS_WAREHOUSE_MISSION_ENDED(p0)
  native.invoke(
    Type.Void, 5167, false,
    arg(Type.Any, p0)
  )
end

function STATS.PLAYSTATS_NIGHTCLUB_MISSION_ENDED(p0)
  native.invoke(
    Type.Void, 5168, false,
    arg(Type.Any, p0)
  )
end

function STATS.PLAYSTATS_DJ_USAGE(p0, p1)
  native.invoke(
    Type.Void, 5169, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1)
  )
end

function STATS.PLAYSTATS_MINIGAME_USAGE(p0, p1, p2)
  native.invoke(
    Type.Void, 5170, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1),
    arg(Type.Any, p2)
  )
end

function STATS.PLAYSTATS_STONE_HATCHET_ENDED(data)
  native.invoke(
    Type.Void, 5171, false,
    ref(Type.Any, data)
  )
end

function STATS.PLAYSTATS_SMUGGLER_MISSION_ENDED(data)
  native.invoke(
    Type.Void, 5172, false,
    ref(Type.Any, data)
  )
end

function STATS.PLAYSTATS_FM_HEIST_PREP_ENDED(data)
  native.invoke(
    Type.Void, 5173, false,
    ref(Type.Any, data)
  )
end

function STATS.PLAYSTATS_INSTANCED_HEIST_ENDED(data, p1, p2, p3)
  native.invoke(
    Type.Void, 5174, false,
    ref(Type.Any, data),
    arg(Type.Any, p1),
    arg(Type.Any, p2),
    arg(Type.Any, p3)
  )
end

function STATS.PLAYSTATS_DAR_CHECKPOINT(data)
  native.invoke(
    Type.Void, 5175, false,
    ref(Type.Any, data)
  )
end

function STATS.PLAYSTATS_ENTER_SESSION_PACK(data)
  native.invoke(
    Type.Void, 5176, false,
    ref(Type.Any, data)
  )
end

function STATS.PLAYSTATS_DRONE_USAGE(p0, p1, p2)
  native.invoke(
    Type.Void, 5177, false,
    arg(Type.Int, p0),
    arg(Type.Int, p1),
    arg(Type.Int, p2)
  )
end

function STATS.PLAYSTATS_SPIN_WHEEL(p0, p1, p2, p3)
  native.invoke(
    Type.Void, 5178, false,
    arg(Type.Int, p0),
    arg(Type.Int, p1),
    arg(Type.Int, p2),
    arg(Type.Int, p3)
  )
end

function STATS.PLAYSTATS_ARENA_WARS_SPECTATOR(p0, p1, p2, p3, p4)
  native.invoke(
    Type.Void, 5179, false,
    arg(Type.Int, p0),
    arg(Type.Int, p1),
    arg(Type.Int, p2),
    arg(Type.Int, p3),
    arg(Type.Int, p4)
  )
end

function STATS.PLAYSTATS_ARENA_WARS_ENDED(data)
  native.invoke(
    Type.Void, 5180, false,
    ref(Type.Any, data)
  )
end

function STATS.PLAYSTATS_SWITCH_PASSIVE_MODE(p0, p1, p2, p3)
  native.invoke(
    Type.Void, 5181, false,
    arg(Type.Bool, p0),
    arg(Type.Int, p1),
    arg(Type.Int, p2),
    arg(Type.Int, p3)
  )
end

function STATS.PLAYSTATS_COLLECTIBLE_PICKED_UP(p0, objectHash, p2, p3, moneyAmount, rpAmount, chipsAmount, p7, p8, p9, p10)
  native.invoke(
    Type.Void, 5182, false,
    arg(Type.Int, p0),
    arg(Type.Hash, objectHash),
    arg(Type.Any, p2),
    arg(Type.Any, p3),
    arg(Type.Int, moneyAmount),
    arg(Type.Int, rpAmount),
    arg(Type.Int, chipsAmount),
    arg(Type.Any, p7),
    arg(Type.Int, p8),
    arg(Type.Any, p9),
    arg(Type.Any, p10)
  )
end

function STATS.PLAYSTATS_CASINO_STORY_MISSION_ENDED(p0, p1)
  native.invoke(
    Type.Void, 5183, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1)
  )
end

function STATS.PLAYSTATS_CASINO_CHIP(p0)
  native.invoke(
    Type.Void, 5184, false,
    arg(Type.Any, p0)
  )
end

function STATS.PLAYSTATS_CASINO_ROULETTE(p0)
  native.invoke(
    Type.Void, 5185, false,
    arg(Type.Any, p0)
  )
end

function STATS.PLAYSTATS_CASINO_BLACKJACK(p0)
  native.invoke(
    Type.Void, 5186, false,
    arg(Type.Any, p0)
  )
end

function STATS.PLAYSTATS_CASINO_THREE_CARD_POKER(p0)
  native.invoke(
    Type.Void, 5187, false,
    arg(Type.Any, p0)
  )
end

function STATS.PLAYSTATS_CASINO_SLOT_MACHINE(p0)
  native.invoke(
    Type.Void, 5188, false,
    arg(Type.Any, p0)
  )
end

function STATS.PLAYSTATS_CASINO_INSIDE_TRACK(p0)
  native.invoke(
    Type.Void, 5189, false,
    arg(Type.Any, p0)
  )
end

function STATS.PLAYSTATS_CASINO_LUCKY_SEVEN(p0)
  native.invoke(
    Type.Void, 5190, false,
    arg(Type.Any, p0)
  )
end

function STATS.PLAYSTATS_CASINO_ROULETTE_LIGHT(p0)
  native.invoke(
    Type.Void, 5191, false,
    arg(Type.Any, p0)
  )
end

function STATS.PLAYSTATS_CASINO_BLACKJACK_LIGHT(p0)
  native.invoke(
    Type.Void, 5192, false,
    arg(Type.Any, p0)
  )
end

function STATS.PLAYSTATS_CASINO_THREE_CARD_POKER_LIGHT(p0)
  native.invoke(
    Type.Void, 5193, false,
    arg(Type.Any, p0)
  )
end

function STATS.PLAYSTATS_CASINO_SLOT_MACHINE_LIGHT(p0)
  native.invoke(
    Type.Void, 5194, false,
    arg(Type.Any, p0)
  )
end

function STATS.PLAYSTATS_CASINO_INSIDE_TRACK_LIGHT(p0)
  native.invoke(
    Type.Void, 5195, false,
    arg(Type.Any, p0)
  )
end

function STATS.PLAYSTATS_ARCADE_GAME(p0, p1, p2, p3, p4, p5, p6)
  native.invoke(
    Type.Void, 5196, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1),
    arg(Type.Any, p2),
    arg(Type.Any, p3),
    arg(Type.Any, p4),
    arg(Type.Any, p5),
    arg(Type.Any, p6)
  )
end

function STATS.PLAYSTATS_ARCADE_LOVE_MATCH(p0, p1)
  native.invoke(
    Type.Void, 5197, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1)
  )
end

function STATS.PLAYSTATS_FREEMODE_CASINO_MISSION_ENDED(data)
  native.invoke(
    Type.Void, 5198, false,
    ref(Type.Any, data)
  )
end

function STATS.PLAYSTATS_HEIST3_DRONE(p0)
  native.invoke(
    Type.Void, 5199, false,
    arg(Type.Any, p0)
  )
end

function STATS.PLAYSTATS_HEIST3_HACK(p0, p1, p2, p3, p4, p5)
  native.invoke(
    Type.Void, 5200, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1),
    arg(Type.Any, p2),
    arg(Type.Any, p3),
    arg(Type.Any, p4),
    arg(Type.Any, p5)
  )
end

function STATS.PLAYSTATS_NPC_PHONE(p0)
  native.invoke(
    Type.Void, 5201, false,
    ref(Type.Any, p0)
  )
end

function STATS.PLAYSTATS_ARCADE_CABINET(p0)
  native.invoke(
    Type.Void, 5202, false,
    arg(Type.Any, p0)
  )
end

function STATS.PLAYSTATS_HEIST3_FINALE(p0)
  native.invoke(
    Type.Void, 5203, false,
    arg(Type.Any, p0)
  )
end

function STATS.PLAYSTATS_HEIST3_PREP(p0)
  native.invoke(
    Type.Void, 5204, false,
    arg(Type.Any, p0)
  )
end

function STATS.PLAYSTATS_MASTER_CONTROL(p0, p1, p2, p3)
  native.invoke(
    Type.Void, 5205, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1),
    arg(Type.Any, p2),
    arg(Type.Any, p3)
  )
end

function STATS.PLAYSTATS_QUIT_MODE(p0, p1, p2, p3, p4)
  native.invoke(
    Type.Void, 5206, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1),
    arg(Type.Any, p2),
    arg(Type.Any, p3),
    arg(Type.Any, p4)
  )
end

function STATS.PLAYSTATS_MISSION_VOTE(p0)
  native.invoke(
    Type.Void, 5207, false,
    arg(Type.Any, p0)
  )
end

function STATS.PLAYSTATS_NJVS_VOTE(p0)
  native.invoke(
    Type.Void, 5208, false,
    arg(Type.Any, p0)
  )
end

function STATS.PLAYSTATS_KILL_YOURSELF()
  native.invoke(
    Type.Void, 5209, false
  )
end

function STATS.PLAYSTATS_FM_MISSION_END(p0, p1, p2, p3)
  native.invoke(
    Type.Void, 5210, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1),
    arg(Type.Any, p2),
    arg(Type.Any, p3)
  )
end

function STATS.PLAYSTATS_HEIST4_PREP(p0)
  native.invoke(
    Type.Void, 5211, false,
    arg(Type.Any, p0)
  )
end

function STATS.PLAYSTATS_HEIST4_FINALE(p0)
  native.invoke(
    Type.Void, 5212, false,
    arg(Type.Any, p0)
  )
end

function STATS.PLAYSTATS_HEIST4_HACK(p0, p1, p2, p3, p4)
  native.invoke(
    Type.Void, 5213, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1),
    arg(Type.Any, p2),
    arg(Type.Any, p3),
    arg(Type.Any, p4)
  )
end

function STATS.PLAYSTATS_SUB_WEAP(p0, p1, p2, p3)
  native.invoke(
    Type.Void, 5214, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1),
    arg(Type.Any, p2),
    arg(Type.Any, p3)
  )
end

function STATS.PLAYSTATS_FAST_TRVL(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10)
  native.invoke(
    Type.Void, 5215, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1),
    arg(Type.Any, p2),
    arg(Type.Any, p3),
    arg(Type.Any, p4),
    arg(Type.Any, p5),
    arg(Type.Any, p6),
    arg(Type.Any, p7),
    arg(Type.Any, p8),
    arg(Type.Any, p9),
    arg(Type.Any, p10)
  )
end

function STATS.PLAYSTATS_HUB_ENTRY(p0)
  native.invoke(
    Type.Void, 5216, false,
    arg(Type.Any, p0)
  )
end

function STATS.PLAYSTATS_DJ_MISSION_ENDED(p0)
  native.invoke(
    Type.Void, 5217, false,
    arg(Type.Any, p0)
  )
end

function STATS.PLAYSTATS_ROBBERY_PREP(p0)
  native.invoke(
    Type.Void, 5218, false,
    arg(Type.Any, p0)
  )
end

function STATS.PLAYSTATS_ROBBERY_FINALE(p0)
  native.invoke(
    Type.Void, 5219, false,
    arg(Type.Any, p0)
  )
end

function STATS.PLAYSTATS_EXTRA_EVENT(p0)
  native.invoke(
    Type.Void, 5220, false,
    arg(Type.Any, p0)
  )
end

function STATS.PLAYSTATS_CARCLUB_POINTS(p0)
  native.invoke(
    Type.Void, 5221, false,
    arg(Type.Any, p0)
  )
end

function STATS.PLAYSTATS_CARCLUB_CHALLENGE(p0, p1, p2, p3)
  native.invoke(
    Type.Void, 5222, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1),
    arg(Type.Any, p2),
    arg(Type.Any, p3)
  )
end

function STATS.PLAYSTATS_CARCLUB_PRIZE(p0, vehicleModel)
  native.invoke(
    Type.Void, 5223, false,
    arg(Type.Int, p0),
    arg(Type.Hash, vehicleModel)
  )
end

function STATS.PLAYSTATS_AWARD_NAV(p0, p1, p2, p3)
  native.invoke(
    Type.Void, 5224, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1),
    arg(Type.Any, p2),
    arg(Type.Any, p3)
  )
end

function STATS.PLAYSTATS_INST_MISSION_END(p0)
  native.invoke(
    Type.Void, 5225, false,
    arg(Type.Any, p0)
  )
end

function STATS.PLAYSTATS_HUB_EXIT(p0)
  native.invoke(
    Type.Void, 5226, false,
    arg(Type.Any, p0)
  )
end

function STATS.PLAYSTATS_VEH_DEL(bossId1, bossId2, bossType, vehicleID, reason)
  native.invoke(
    Type.Void, 5227, false,
    arg(Type.Int, bossId1),
    arg(Type.Int, bossId2),
    arg(Type.Int, bossType),
    arg(Type.Int, vehicleID),
    arg(Type.Int, reason)
  )
end

function STATS.PLAYSTATS_INVENTORY(p0)
  native.invoke(
    Type.Void, 5228, false,
    arg(Type.Any, p0)
  )
end

function STATS._PLAYSTATS_ACID_MISSION_END(p0)
  native.invoke(
    Type.Void, 5229, false,
    arg(Type.Any, p0)
  )
end

function STATS._PLAYSTATS_ACID_RND(p0)
  native.invoke(
    Type.Void, 5230, false,
    arg(Type.Any, p0)
  )
end

function STATS._PLAYSTATS_IDLE(p0, p1, p2)
  native.invoke(
    Type.Void, 5231, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1),
    arg(Type.Any, p2)
  )
end

function STATS._PLAYSTATS_PLAYER_STYLE(p0)
  native.invoke(
    Type.Void, 5232, false,
    arg(Type.Any, p0)
  )
end

function STATS._PLAYSTATS_RANDOM_EVENT(p0)
  native.invoke(
    Type.Void, 5233, false,
    arg(Type.Any, p0)
  )
end

function STATS._PLAYSTATS_ALERT(data)
  native.invoke(
    Type.Void, 5234, false,
    ref(Type.Any, data)
  )
end

function STATS._PLAYSTATS_ATTRITION_STAGE_END(p0)
  native.invoke(
    Type.Void, 5235, false,
    arg(Type.Any, p0)
  )
end

function STATS._PLAYSTATS_SHOWROOM_NAV(p0, p1, entity)
  native.invoke(
    Type.Void, 5236, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1),
    arg(Type.Hash, entity)
  )
end

function STATS._PLAYSTATS_SHOWROOM_OVERVIEW(data)
  native.invoke(
    Type.Void, 5237, false,
    ref(Type.Any, data)
  )
end


STREAMING = {}

function STREAMING.LOAD_ALL_OBJECTS_NOW()
  native.invoke(
    Type.Void, 5238, false
  )
end

function STREAMING.LOAD_SCENE(x, y, z)
  native.invoke(
    Type.Void, 5239, false,
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, z)
  )
end

function STREAMING.NETWORK_UPDATE_LOAD_SCENE()
  return native.invoke(
    Type.Bool, 5240, false
  )
end

function STREAMING.IS_NETWORK_LOADING_SCENE()
  return native.invoke(
    Type.Bool, 5241, false
  )
end

function STREAMING.SET_INTERIOR_ACTIVE(interiorID, toggle)
  native.invoke(
    Type.Void, 5242, false,
    arg(Type.Int, interiorID),
    arg(Type.Bool, toggle)
  )
end

function STREAMING.REQUEST_MODEL(model)
  native.invoke(
    Type.Void, 5243, false,
    arg(Type.Hash, model)
  )
end

function STREAMING.REQUEST_MENU_PED_MODEL(model)
  native.invoke(
    Type.Void, 5244, false,
    arg(Type.Hash, model)
  )
end

function STREAMING.HAS_MODEL_LOADED(model)
  return native.invoke(
    Type.Bool, 5245, false,
    arg(Type.Hash, model)
  )
end

function STREAMING.REQUEST_MODELS_IN_ROOM(interior, roomName)
  native.invoke(
    Type.Void, 5246, false,
    arg(Type.Interior, interior),
    arg(Type.String, roomName)
  )
end

function STREAMING.SET_MODEL_AS_NO_LONGER_NEEDED(model)
  native.invoke(
    Type.Void, 5247, false,
    arg(Type.Hash, model)
  )
end

function STREAMING.IS_MODEL_IN_CDIMAGE(model)
  return native.invoke(
    Type.Bool, 5248, false,
    arg(Type.Hash, model)
  )
end

function STREAMING.IS_MODEL_VALID(model)
  return native.invoke(
    Type.Bool, 5249, false,
    arg(Type.Hash, model)
  )
end

function STREAMING.IS_MODEL_A_PED(model)
  return native.invoke(
    Type.Bool, 5250, false,
    arg(Type.Hash, model)
  )
end

function STREAMING.IS_MODEL_A_VEHICLE(model)
  return native.invoke(
    Type.Bool, 5251, false,
    arg(Type.Hash, model)
  )
end

function STREAMING.REQUEST_COLLISION_AT_COORD(x, y, z)
  native.invoke(
    Type.Void, 5252, false,
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, z)
  )
end

function STREAMING.REQUEST_COLLISION_FOR_MODEL(model)
  native.invoke(
    Type.Void, 5253, false,
    arg(Type.Hash, model)
  )
end

function STREAMING.HAS_COLLISION_FOR_MODEL_LOADED(model)
  return native.invoke(
    Type.Bool, 5254, false,
    arg(Type.Hash, model)
  )
end

function STREAMING.REQUEST_ADDITIONAL_COLLISION_AT_COORD(x, y, z)
  native.invoke(
    Type.Void, 5255, false,
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, z)
  )
end

function STREAMING.DOES_ANIM_DICT_EXIST(animDict)
  return native.invoke(
    Type.Bool, 5256, false,
    arg(Type.String, animDict)
  )
end

function STREAMING.REQUEST_ANIM_DICT(animDict)
  native.invoke(
    Type.Void, 5257, false,
    arg(Type.String, animDict)
  )
end

function STREAMING.HAS_ANIM_DICT_LOADED(animDict)
  return native.invoke(
    Type.Bool, 5258, false,
    arg(Type.String, animDict)
  )
end

function STREAMING.REMOVE_ANIM_DICT(animDict)
  native.invoke(
    Type.Void, 5259, false,
    arg(Type.String, animDict)
  )
end

function STREAMING.REQUEST_ANIM_SET(animSet)
  native.invoke(
    Type.Void, 5260, false,
    arg(Type.String, animSet)
  )
end

function STREAMING.HAS_ANIM_SET_LOADED(animSet)
  return native.invoke(
    Type.Bool, 5261, false,
    arg(Type.String, animSet)
  )
end

function STREAMING.REMOVE_ANIM_SET(animSet)
  native.invoke(
    Type.Void, 5262, false,
    arg(Type.String, animSet)
  )
end

function STREAMING.REQUEST_CLIP_SET(clipSet)
  native.invoke(
    Type.Void, 5263, false,
    arg(Type.String, clipSet)
  )
end

function STREAMING.HAS_CLIP_SET_LOADED(clipSet)
  return native.invoke(
    Type.Bool, 5264, false,
    arg(Type.String, clipSet)
  )
end

function STREAMING.REMOVE_CLIP_SET(clipSet)
  native.invoke(
    Type.Void, 5265, false,
    arg(Type.String, clipSet)
  )
end

function STREAMING.REQUEST_IPL(iplName)
  native.invoke(
    Type.Void, 5266, false,
    arg(Type.String, iplName)
  )
end

function STREAMING.REMOVE_IPL(iplName)
  native.invoke(
    Type.Void, 5267, false,
    arg(Type.String, iplName)
  )
end

function STREAMING.IS_IPL_ACTIVE(iplName)
  return native.invoke(
    Type.Bool, 5268, false,
    arg(Type.String, iplName)
  )
end

function STREAMING.SET_STREAMING(toggle)
  native.invoke(
    Type.Void, 5269, false,
    arg(Type.Bool, toggle)
  )
end

function STREAMING.LOAD_GLOBAL_WATER_FILE(waterType)
  native.invoke(
    Type.Void, 5270, false,
    arg(Type.Int, waterType)
  )
end

function STREAMING.GET_GLOBAL_WATER_FILE()
  return native.invoke(
    Type.Int, 5271, false
  )
end

function STREAMING.SET_GAME_PAUSES_FOR_STREAMING(toggle)
  native.invoke(
    Type.Void, 5272, false,
    arg(Type.Bool, toggle)
  )
end

function STREAMING.SET_REDUCE_PED_MODEL_BUDGET(toggle)
  native.invoke(
    Type.Void, 5273, false,
    arg(Type.Bool, toggle)
  )
end

function STREAMING.SET_REDUCE_VEHICLE_MODEL_BUDGET(toggle)
  native.invoke(
    Type.Void, 5274, false,
    arg(Type.Bool, toggle)
  )
end

function STREAMING.SET_DITCH_POLICE_MODELS(toggle)
  native.invoke(
    Type.Void, 5275, false,
    arg(Type.Bool, toggle)
  )
end

function STREAMING.GET_NUMBER_OF_STREAMING_REQUESTS()
  return native.invoke(
    Type.Int, 5276, false
  )
end

function STREAMING.REQUEST_PTFX_ASSET()
  native.invoke(
    Type.Void, 5277, false
  )
end

function STREAMING.HAS_PTFX_ASSET_LOADED()
  return native.invoke(
    Type.Bool, 5278, false
  )
end

function STREAMING.REMOVE_PTFX_ASSET()
  native.invoke(
    Type.Void, 5279, false
  )
end

function STREAMING.REQUEST_NAMED_PTFX_ASSET(fxName)
  native.invoke(
    Type.Void, 5280, false,
    arg(Type.String, fxName)
  )
end

function STREAMING.HAS_NAMED_PTFX_ASSET_LOADED(fxName)
  return native.invoke(
    Type.Bool, 5281, false,
    arg(Type.String, fxName)
  )
end

function STREAMING.REMOVE_NAMED_PTFX_ASSET(fxName)
  native.invoke(
    Type.Void, 5282, false,
    arg(Type.String, fxName)
  )
end

function STREAMING.SET_VEHICLE_POPULATION_BUDGET(p0)
  native.invoke(
    Type.Void, 5283, false,
    arg(Type.Int, p0)
  )
end

function STREAMING.SET_PED_POPULATION_BUDGET(p0)
  native.invoke(
    Type.Void, 5284, false,
    arg(Type.Int, p0)
  )
end

function STREAMING.CLEAR_FOCUS()
  native.invoke(
    Type.Void, 5285, false
  )
end

function STREAMING.SET_FOCUS_POS_AND_VEL(x, y, z, offsetX, offsetY, offsetZ)
  native.invoke(
    Type.Void, 5286, false,
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, z),
    arg(Type.Float, offsetX),
    arg(Type.Float, offsetY),
    arg(Type.Float, offsetZ)
  )
end

function STREAMING.SET_FOCUS_ENTITY(entity)
  native.invoke(
    Type.Void, 5287, false,
    arg(Type.Entity, entity)
  )
end

function STREAMING.IS_ENTITY_FOCUS(entity)
  return native.invoke(
    Type.Bool, 5288, false,
    arg(Type.Entity, entity)
  )
end

function STREAMING.SET_RESTORE_FOCUS_ENTITY(p0)
  native.invoke(
    Type.Void, 5289, false,
    arg(Type.Entity, p0)
  )
end

function STREAMING.SET_MAPDATACULLBOX_ENABLED(name, toggle)
  native.invoke(
    Type.Void, 5290, false,
    arg(Type.String, name),
    arg(Type.Bool, toggle)
  )
end

function STREAMING.SET_ALL_MAPDATA_CULLED(p0)
  native.invoke(
    Type.Void, 5291, false,
    arg(Type.Any, p0)
  )
end

function STREAMING.STREAMVOL_CREATE_SPHERE(x, y, z, rad, p4, p5)
  return native.invoke(
    Type.Int, 5292, false,
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, z),
    arg(Type.Float, rad),
    arg(Type.Any, p4),
    arg(Type.Any, p5)
  )
end

function STREAMING.STREAMVOL_CREATE_FRUSTUM(p0, p1, p2, p3, p4, p5, p6, p7, p8)
  return native.invoke(
    Type.Int, 5293, false,
    arg(Type.Float, p0),
    arg(Type.Float, p1),
    arg(Type.Float, p2),
    arg(Type.Float, p3),
    arg(Type.Float, p4),
    arg(Type.Float, p5),
    arg(Type.Float, p6),
    arg(Type.Any, p7),
    arg(Type.Any, p8)
  )
end

function STREAMING.STREAMVOL_CREATE_LINE(p0, p1, p2, p3, p4, p5, p6)
  return native.invoke(
    Type.Int, 5294, false,
    arg(Type.Float, p0),
    arg(Type.Float, p1),
    arg(Type.Float, p2),
    arg(Type.Float, p3),
    arg(Type.Float, p4),
    arg(Type.Float, p5),
    arg(Type.Any, p6)
  )
end

function STREAMING.STREAMVOL_DELETE(unused)
  native.invoke(
    Type.Void, 5295, false,
    arg(Type.Any, unused)
  )
end

function STREAMING.STREAMVOL_HAS_LOADED(unused)
  return native.invoke(
    Type.Bool, 5296, false,
    arg(Type.Any, unused)
  )
end

function STREAMING.STREAMVOL_IS_VALID(unused)
  return native.invoke(
    Type.Bool, 5297, false,
    arg(Type.Any, unused)
  )
end

function STREAMING.IS_STREAMVOL_ACTIVE()
  return native.invoke(
    Type.Bool, 5298, false
  )
end

function STREAMING.NEW_LOAD_SCENE_START(posX, posY, posZ, offsetX, offsetY, offsetZ, radius, p7)
  return native.invoke(
    Type.Bool, 5299, false,
    arg(Type.Float, posX),
    arg(Type.Float, posY),
    arg(Type.Float, posZ),
    arg(Type.Float, offsetX),
    arg(Type.Float, offsetY),
    arg(Type.Float, offsetZ),
    arg(Type.Float, radius),
    arg(Type.Int, p7)
  )
end

function STREAMING.NEW_LOAD_SCENE_START_SPHERE(x, y, z, radius, p4)
  return native.invoke(
    Type.Bool, 5300, false,
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, z),
    arg(Type.Float, radius),
    arg(Type.Any, p4)
  )
end

function STREAMING.NEW_LOAD_SCENE_STOP()
  native.invoke(
    Type.Void, 5301, false
  )
end

function STREAMING.IS_NEW_LOAD_SCENE_ACTIVE()
  return native.invoke(
    Type.Bool, 5302, false
  )
end

function STREAMING.IS_NEW_LOAD_SCENE_LOADED()
  return native.invoke(
    Type.Bool, 5303, false
  )
end

function STREAMING.IS_SAFE_TO_START_PLAYER_SWITCH()
  return native.invoke(
    Type.Bool, 5304, false
  )
end

function STREAMING.START_PLAYER_SWITCH(from, to, flags, switchType)
  native.invoke(
    Type.Void, 5305, false,
    arg(Type.Ped, from),
    arg(Type.Ped, to),
    arg(Type.Int, flags),
    arg(Type.Int, switchType)
  )
end

function STREAMING.STOP_PLAYER_SWITCH()
  native.invoke(
    Type.Void, 5306, false
  )
end

function STREAMING.IS_PLAYER_SWITCH_IN_PROGRESS()
  return native.invoke(
    Type.Bool, 5307, false
  )
end

function STREAMING.GET_PLAYER_SWITCH_TYPE()
  return native.invoke(
    Type.Int, 5308, false
  )
end

function STREAMING.GET_IDEAL_PLAYER_SWITCH_TYPE(x1, y1, z1, x2, y2, z2)
  return native.invoke(
    Type.Int, 5309, false,
    arg(Type.Float, x1),
    arg(Type.Float, y1),
    arg(Type.Float, z1),
    arg(Type.Float, x2),
    arg(Type.Float, y2),
    arg(Type.Float, z2)
  )
end

function STREAMING.GET_PLAYER_SWITCH_STATE()
  return native.invoke(
    Type.Int, 5310, false
  )
end

function STREAMING.GET_PLAYER_SHORT_SWITCH_STATE()
  return native.invoke(
    Type.Int, 5311, false
  )
end

function STREAMING.SET_PLAYER_SHORT_SWITCH_STYLE(p0)
  native.invoke(
    Type.Void, 5312, false,
    arg(Type.Int, p0)
  )
end

function STREAMING.GET_PLAYER_SWITCH_JUMP_CUT_INDEX()
  return native.invoke(
    Type.Int, 5313, false
  )
end

function STREAMING.SET_PLAYER_SWITCH_OUTRO(cameraCoordX, cameraCoordY, cameraCoordZ, camRotationX, camRotationY, camRotationZ, camFov, camFarClip, rotationOrder)
  native.invoke(
    Type.Void, 5314, false,
    arg(Type.Float, cameraCoordX),
    arg(Type.Float, cameraCoordY),
    arg(Type.Float, cameraCoordZ),
    arg(Type.Float, camRotationX),
    arg(Type.Float, camRotationY),
    arg(Type.Float, camRotationZ),
    arg(Type.Float, camFov),
    arg(Type.Float, camFarClip),
    arg(Type.Int, rotationOrder)
  )
end

function STREAMING.SET_PLAYER_SWITCH_ESTABLISHING_SHOT(name)
  native.invoke(
    Type.Void, 5315, false,
    arg(Type.String, name)
  )
end

function STREAMING.ALLOW_PLAYER_SWITCH_PAN()
  native.invoke(
    Type.Void, 5316, false
  )
end

function STREAMING.ALLOW_PLAYER_SWITCH_OUTRO()
  native.invoke(
    Type.Void, 5317, false
  )
end

function STREAMING.ALLOW_PLAYER_SWITCH_ASCENT()
  native.invoke(
    Type.Void, 5318, false
  )
end

function STREAMING.ALLOW_PLAYER_SWITCH_DESCENT()
  native.invoke(
    Type.Void, 5319, false
  )
end

function STREAMING.IS_SWITCH_READY_FOR_DESCENT()
  return native.invoke(
    Type.Bool, 5320, false
  )
end

function STREAMING.ENABLE_SWITCH_PAUSE_BEFORE_DESCENT()
  native.invoke(
    Type.Void, 5321, false
  )
end

function STREAMING.DISABLE_SWITCH_OUTRO_FX()
  native.invoke(
    Type.Void, 5322, false
  )
end

function STREAMING.SWITCH_TO_MULTI_FIRSTPART(ped, flags, switchType)
  native.invoke(
    Type.Void, 5323, false,
    arg(Type.Ped, ped),
    arg(Type.Int, flags),
    arg(Type.Int, switchType)
  )
end

function STREAMING.SWITCH_TO_MULTI_SECONDPART(ped)
  native.invoke(
    Type.Void, 5324, false,
    arg(Type.Ped, ped)
  )
end

function STREAMING.IS_SWITCH_TO_MULTI_FIRSTPART_FINISHED()
  return native.invoke(
    Type.Bool, 5325, false
  )
end

function STREAMING.GET_PLAYER_SWITCH_INTERP_OUT_DURATION()
  return native.invoke(
    Type.Int, 5326, false
  )
end

function STREAMING.GET_PLAYER_SWITCH_INTERP_OUT_CURRENT_TIME()
  return native.invoke(
    Type.Int, 5327, false
  )
end

function STREAMING.IS_SWITCH_SKIPPING_DESCENT()
  return native.invoke(
    Type.Bool, 5328, false
  )
end

function STREAMING.SET_SCENE_STREAMING_TRACKS_CAM_POS_THIS_FRAME()
  native.invoke(
    Type.Void, 5329, false
  )
end

function STREAMING.GET_LODSCALE()
  return native.invoke(
    Type.Float, 5330, false
  )
end

function STREAMING.OVERRIDE_LODSCALE_THIS_FRAME(scaling)
  native.invoke(
    Type.Void, 5331, false,
    arg(Type.Float, scaling)
  )
end

function STREAMING.REMAP_LODSCALE_RANGE_THIS_FRAME(p0, p1, p2, p3)
  native.invoke(
    Type.Void, 5332, false,
    arg(Type.Float, p0),
    arg(Type.Float, p1),
    arg(Type.Float, p2),
    arg(Type.Float, p3)
  )
end

function STREAMING.SUPPRESS_HD_MAP_STREAMING_THIS_FRAME()
  native.invoke(
    Type.Void, 5333, false
  )
end

function STREAMING.SET_RENDER_HD_ONLY(toggle)
  native.invoke(
    Type.Void, 5334, false,
    arg(Type.Bool, toggle)
  )
end

function STREAMING.FORCE_ALLOW_TIME_BASED_FADING_THIS_FRAME()
  native.invoke(
    Type.Void, 5335, false
  )
end

function STREAMING.IPL_GROUP_SWAP_START(iplName1, iplName2)
  native.invoke(
    Type.Void, 5336, false,
    arg(Type.String, iplName1),
    arg(Type.String, iplName2)
  )
end

function STREAMING.IPL_GROUP_SWAP_CANCEL()
  native.invoke(
    Type.Void, 5337, false
  )
end

function STREAMING.IPL_GROUP_SWAP_IS_READY()
  return native.invoke(
    Type.Bool, 5338, false
  )
end

function STREAMING.IPL_GROUP_SWAP_FINISH()
  native.invoke(
    Type.Void, 5339, false
  )
end

function STREAMING.IPL_GROUP_SWAP_IS_ACTIVE()
  return native.invoke(
    Type.Bool, 5340, false
  )
end

function STREAMING.PREFETCH_SRL(srl)
  native.invoke(
    Type.Void, 5341, false,
    arg(Type.String, srl)
  )
end

function STREAMING.IS_SRL_LOADED()
  return native.invoke(
    Type.Bool, 5342, false
  )
end

function STREAMING.BEGIN_SRL()
  native.invoke(
    Type.Void, 5343, false
  )
end

function STREAMING.END_SRL()
  native.invoke(
    Type.Void, 5344, false
  )
end

function STREAMING.SET_SRL_TIME(p0)
  native.invoke(
    Type.Void, 5345, false,
    arg(Type.Float, p0)
  )
end

function STREAMING.SET_SRL_POST_CUTSCENE_CAMERA(p0, p1, p2, p3, p4, p5)
  native.invoke(
    Type.Void, 5346, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1),
    arg(Type.Any, p2),
    arg(Type.Any, p3),
    arg(Type.Any, p4),
    arg(Type.Any, p5)
  )
end

function STREAMING.SET_SRL_READAHEAD_TIMES(p0, p1, p2, p3)
  native.invoke(
    Type.Void, 5347, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1),
    arg(Type.Any, p2),
    arg(Type.Any, p3)
  )
end

function STREAMING.SET_SRL_LONG_JUMP_MODE(p0)
  native.invoke(
    Type.Void, 5348, false,
    arg(Type.Bool, p0)
  )
end

function STREAMING.SET_SRL_FORCE_PRESTREAM(p0)
  native.invoke(
    Type.Void, 5349, false,
    arg(Type.Any, p0)
  )
end

function STREAMING.SET_HD_AREA(x, y, z, radius)
  native.invoke(
    Type.Void, 5350, false,
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, z),
    arg(Type.Float, radius)
  )
end

function STREAMING.CLEAR_HD_AREA()
  native.invoke(
    Type.Void, 5351, false
  )
end

function STREAMING.INIT_CREATOR_BUDGET()
  native.invoke(
    Type.Void, 5352, false
  )
end

function STREAMING.SHUTDOWN_CREATOR_BUDGET()
  native.invoke(
    Type.Void, 5353, false
  )
end

function STREAMING.ADD_MODEL_TO_CREATOR_BUDGET(modelHash)
  return native.invoke(
    Type.Bool, 5354, false,
    arg(Type.Hash, modelHash)
  )
end

function STREAMING.REMOVE_MODEL_FROM_CREATOR_BUDGET(modelHash)
  native.invoke(
    Type.Void, 5355, false,
    arg(Type.Hash, modelHash)
  )
end

function STREAMING.GET_USED_CREATOR_BUDGET()
  return native.invoke(
    Type.Float, 5356, false
  )
end

function STREAMING.SET_ISLAND_ENABLED(name, toggle)
  native.invoke(
    Type.Void, 5357, false,
    arg(Type.String, name),
    arg(Type.Bool, toggle)
  )
end


TASK = {}

function TASK.TASK_PAUSE(ped, ms)
  native.invoke(
    Type.Void, 5358, false,
    arg(Type.Ped, ped),
    arg(Type.Int, ms)
  )
end

function TASK.TASK_STAND_STILL(ped, time)
  native.invoke(
    Type.Void, 5359, false,
    arg(Type.Ped, ped),
    arg(Type.Int, time)
  )
end

function TASK.TASK_JUMP(ped, usePlayerLaunchForce, doSuperJump, useFullSuperJumpForce)
  native.invoke(
    Type.Void, 5360, false,
    arg(Type.Ped, ped),
    arg(Type.Bool, usePlayerLaunchForce),
    arg(Type.Bool, doSuperJump),
    arg(Type.Bool, useFullSuperJumpForce)
  )
end

function TASK.TASK_COWER(ped, duration)
  native.invoke(
    Type.Void, 5361, false,
    arg(Type.Ped, ped),
    arg(Type.Int, duration)
  )
end

function TASK.TASK_HANDS_UP(ped, duration, facingPed, timeToFacePed, flags)
  native.invoke(
    Type.Void, 5362, false,
    arg(Type.Ped, ped),
    arg(Type.Int, duration),
    arg(Type.Ped, facingPed),
    arg(Type.Int, timeToFacePed),
    arg(Type.Int, flags)
  )
end

function TASK.UPDATE_TASK_HANDS_UP_DURATION(ped, duration)
  native.invoke(
    Type.Void, 5363, false,
    arg(Type.Ped, ped),
    arg(Type.Int, duration)
  )
end

function TASK.TASK_OPEN_VEHICLE_DOOR(ped, vehicle, timeOut, seat, speed)
  native.invoke(
    Type.Void, 5364, false,
    arg(Type.Ped, ped),
    arg(Type.Vehicle, vehicle),
    arg(Type.Int, timeOut),
    arg(Type.Int, seat),
    arg(Type.Float, speed)
  )
end

function TASK.TASK_ENTER_VEHICLE(ped, vehicle, timeout, seat, speed, flag, overrideEntryClipsetName, p7)
  native.invoke(
    Type.Void, 5365, false,
    arg(Type.Ped, ped),
    arg(Type.Vehicle, vehicle),
    arg(Type.Int, timeout),
    arg(Type.Int, seat),
    arg(Type.Float, speed),
    arg(Type.Int, flag),
    arg(Type.String, overrideEntryClipsetName),
    arg(Type.Any, p7)
  )
end

function TASK.TASK_LEAVE_VEHICLE(ped, vehicle, flags)
  native.invoke(
    Type.Void, 5366, false,
    arg(Type.Ped, ped),
    arg(Type.Vehicle, vehicle),
    arg(Type.Int, flags)
  )
end

function TASK.TASK_GET_OFF_BOAT(ped, boat)
  native.invoke(
    Type.Void, 5367, false,
    arg(Type.Ped, ped),
    arg(Type.Vehicle, boat)
  )
end

function TASK.TASK_SKY_DIVE(ped, instant)
  native.invoke(
    Type.Void, 5368, false,
    arg(Type.Ped, ped),
    arg(Type.Bool, instant)
  )
end

function TASK.TASK_PARACHUTE(ped, giveParachuteItem, instant)
  native.invoke(
    Type.Void, 5369, false,
    arg(Type.Ped, ped),
    arg(Type.Bool, giveParachuteItem),
    arg(Type.Bool, instant)
  )
end

function TASK.TASK_PARACHUTE_TO_TARGET(ped, x, y, z)
  native.invoke(
    Type.Void, 5370, false,
    arg(Type.Ped, ped),
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, z)
  )
end

function TASK.SET_PARACHUTE_TASK_TARGET(ped, x, y, z)
  native.invoke(
    Type.Void, 5371, false,
    arg(Type.Ped, ped),
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, z)
  )
end

function TASK.SET_PARACHUTE_TASK_THRUST(ped, thrust)
  native.invoke(
    Type.Void, 5372, false,
    arg(Type.Ped, ped),
    arg(Type.Float, thrust)
  )
end

function TASK.TASK_RAPPEL_FROM_HELI(ped, minHeightAboveGround)
  native.invoke(
    Type.Void, 5373, false,
    arg(Type.Ped, ped),
    arg(Type.Float, minHeightAboveGround)
  )
end

function TASK.TASK_VEHICLE_DRIVE_TO_COORD(ped, vehicle, x, y, z, speed, p6, vehicleModel, drivingMode, stopRange, straightLineDistance)
  native.invoke(
    Type.Void, 5374, false,
    arg(Type.Ped, ped),
    arg(Type.Vehicle, vehicle),
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, z),
    arg(Type.Float, speed),
    arg(Type.Any, p6),
    arg(Type.Hash, vehicleModel),
    arg(Type.Int, drivingMode),
    arg(Type.Float, stopRange),
    arg(Type.Float, straightLineDistance)
  )
end

function TASK.TASK_VEHICLE_DRIVE_TO_COORD_LONGRANGE(ped, vehicle, x, y, z, speed, driveMode, stopRange)
  native.invoke(
    Type.Void, 5375, false,
    arg(Type.Ped, ped),
    arg(Type.Vehicle, vehicle),
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, z),
    arg(Type.Float, speed),
    arg(Type.Int, driveMode),
    arg(Type.Float, stopRange)
  )
end

function TASK.TASK_VEHICLE_DRIVE_WANDER(ped, vehicle, speed, drivingStyle)
  native.invoke(
    Type.Void, 5376, false,
    arg(Type.Ped, ped),
    arg(Type.Vehicle, vehicle),
    arg(Type.Float, speed),
    arg(Type.Int, drivingStyle)
  )
end

function TASK.TASK_FOLLOW_TO_OFFSET_OF_ENTITY(ped, entity, offsetX, offsetY, offsetZ, movementSpeed, timeout, stoppingRange, persistFollowing)
  native.invoke(
    Type.Void, 5377, false,
    arg(Type.Ped, ped),
    arg(Type.Entity, entity),
    arg(Type.Float, offsetX),
    arg(Type.Float, offsetY),
    arg(Type.Float, offsetZ),
    arg(Type.Float, movementSpeed),
    arg(Type.Int, timeout),
    arg(Type.Float, stoppingRange),
    arg(Type.Bool, persistFollowing)
  )
end

function TASK.TASK_GO_STRAIGHT_TO_COORD(ped, x, y, z, speed, timeout, targetHeading, distanceToSlide)
  native.invoke(
    Type.Void, 5378, false,
    arg(Type.Ped, ped),
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, z),
    arg(Type.Float, speed),
    arg(Type.Int, timeout),
    arg(Type.Float, targetHeading),
    arg(Type.Float, distanceToSlide)
  )
end

function TASK.TASK_GO_STRAIGHT_TO_COORD_RELATIVE_TO_ENTITY(ped, entity, x, y, z, moveBlendRatio, time)
  native.invoke(
    Type.Void, 5379, false,
    arg(Type.Ped, ped),
    arg(Type.Entity, entity),
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, z),
    arg(Type.Float, moveBlendRatio),
    arg(Type.Int, time)
  )
end

function TASK.TASK_ACHIEVE_HEADING(ped, heading, timeout)
  native.invoke(
    Type.Void, 5380, false,
    arg(Type.Ped, ped),
    arg(Type.Float, heading),
    arg(Type.Int, timeout)
  )
end

function TASK.TASK_FLUSH_ROUTE()
  native.invoke(
    Type.Void, 5381, false
  )
end

function TASK.TASK_EXTEND_ROUTE(x, y, z)
  native.invoke(
    Type.Void, 5382, false,
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, z)
  )
end

function TASK.TASK_FOLLOW_POINT_ROUTE(ped, speed, mode)
  native.invoke(
    Type.Void, 5383, false,
    arg(Type.Ped, ped),
    arg(Type.Float, speed),
    arg(Type.Int, mode)
  )
end

function TASK.TASK_GO_TO_ENTITY(entity, target, duration, distance, moveBlendRatio, slowDownDistance, flags)
  native.invoke(
    Type.Void, 5384, false,
    arg(Type.Entity, entity),
    arg(Type.Entity, target),
    arg(Type.Int, duration),
    arg(Type.Float, distance),
    arg(Type.Float, moveBlendRatio),
    arg(Type.Float, slowDownDistance),
    arg(Type.Int, flags)
  )
end

function TASK.TASK_SMART_FLEE_COORD(ped, x, y, z, distance, time, preferPavements, quitIfOutOfRange)
  native.invoke(
    Type.Void, 5385, false,
    arg(Type.Ped, ped),
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, z),
    arg(Type.Float, distance),
    arg(Type.Int, time),
    arg(Type.Bool, preferPavements),
    arg(Type.Bool, quitIfOutOfRange)
  )
end

function TASK.TASK_SMART_FLEE_PED(ped, fleeTarget, safeDistance, fleeTime, preferPavements, updateToNearestHatedPed)
  native.invoke(
    Type.Void, 5386, false,
    arg(Type.Ped, ped),
    arg(Type.Ped, fleeTarget),
    arg(Type.Float, safeDistance),
    arg(Type.Int, fleeTime),
    arg(Type.Bool, preferPavements),
    arg(Type.Bool, updateToNearestHatedPed)
  )
end

function TASK.TASK_REACT_AND_FLEE_PED(ped, fleeTarget)
  native.invoke(
    Type.Void, 5387, false,
    arg(Type.Ped, ped),
    arg(Type.Ped, fleeTarget)
  )
end

function TASK.TASK_SHOCKING_EVENT_REACT(ped, eventHandle)
  native.invoke(
    Type.Void, 5388, false,
    arg(Type.Ped, ped),
    arg(Type.Int, eventHandle)
  )
end

function TASK.TASK_WANDER_IN_AREA(ped, x, y, z, radius, minimalLength, timeBetweenWalks)
  native.invoke(
    Type.Void, 5389, false,
    arg(Type.Ped, ped),
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, z),
    arg(Type.Float, radius),
    arg(Type.Float, minimalLength),
    arg(Type.Float, timeBetweenWalks)
  )
end

function TASK.TASK_WANDER_STANDARD(ped, heading, flags)
  native.invoke(
    Type.Void, 5390, false,
    arg(Type.Ped, ped),
    arg(Type.Float, heading),
    arg(Type.Int, flags)
  )
end

function TASK.TASK_WANDER_SPECIFIC(ped, conditionalAnimGroupStr, conditionalAnimStr, heading)
  native.invoke(
    Type.Void, 5391, false,
    arg(Type.Ped, ped),
    arg(Type.String, conditionalAnimGroupStr),
    arg(Type.String, conditionalAnimStr),
    arg(Type.Float, heading)
  )
end

function TASK.TASK_VEHICLE_PARK(ped, vehicle, x, y, z, heading, mode, radius, keepEngineOn)
  native.invoke(
    Type.Void, 5392, false,
    arg(Type.Ped, ped),
    arg(Type.Vehicle, vehicle),
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, z),
    arg(Type.Float, heading),
    arg(Type.Int, mode),
    arg(Type.Float, radius),
    arg(Type.Bool, keepEngineOn)
  )
end

function TASK.TASK_STEALTH_KILL(killer, target, stealthKillActionResultHash, desiredMoveBlendRatio, stealthFlags)
  native.invoke(
    Type.Void, 5393, false,
    arg(Type.Ped, killer),
    arg(Type.Ped, target),
    arg(Type.Hash, stealthKillActionResultHash),
    arg(Type.Float, desiredMoveBlendRatio),
    arg(Type.Int, stealthFlags)
  )
end

function TASK.TASK_PLANT_BOMB(ped, x, y, z, heading)
  native.invoke(
    Type.Void, 5394, false,
    arg(Type.Ped, ped),
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, z),
    arg(Type.Float, heading)
  )
end

function TASK.TASK_FOLLOW_NAV_MESH_TO_COORD(ped, x, y, z, moveBlendRatio, time, targetRadius, flags, targetHeading)
  native.invoke(
    Type.Void, 5395, false,
    arg(Type.Ped, ped),
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, z),
    arg(Type.Float, moveBlendRatio),
    arg(Type.Int, time),
    arg(Type.Float, targetRadius),
    arg(Type.Int, flags),
    arg(Type.Float, targetHeading)
  )
end

function TASK.TASK_FOLLOW_NAV_MESH_TO_COORD_ADVANCED(ped, x, y, z, moveBlendRatio, time, targetRadius, flags, slideToCoordHeading, maxSlopeNavigable, clampMaxSearchDistance, targetHeading)
  native.invoke(
    Type.Void, 5396, false,
    arg(Type.Ped, ped),
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, z),
    arg(Type.Float, moveBlendRatio),
    arg(Type.Int, time),
    arg(Type.Float, targetRadius),
    arg(Type.Int, flags),
    arg(Type.Float, slideToCoordHeading),
    arg(Type.Float, maxSlopeNavigable),
    arg(Type.Float, clampMaxSearchDistance),
    arg(Type.Float, targetHeading)
  )
end

function TASK.SET_PED_PATH_CAN_USE_CLIMBOVERS(ped, Toggle)
  native.invoke(
    Type.Void, 5397, false,
    arg(Type.Ped, ped),
    arg(Type.Bool, Toggle)
  )
end

function TASK.SET_PED_PATH_CAN_USE_LADDERS(ped, Toggle)
  native.invoke(
    Type.Void, 5398, false,
    arg(Type.Ped, ped),
    arg(Type.Bool, Toggle)
  )
end

function TASK.SET_PED_PATH_CAN_DROP_FROM_HEIGHT(ped, Toggle)
  native.invoke(
    Type.Void, 5399, false,
    arg(Type.Ped, ped),
    arg(Type.Bool, Toggle)
  )
end

function TASK.SET_PED_PATH_CLIMB_COST_MODIFIER(ped, modifier)
  native.invoke(
    Type.Void, 5400, false,
    arg(Type.Ped, ped),
    arg(Type.Float, modifier)
  )
end

function TASK.SET_PED_PATH_MAY_ENTER_WATER(ped, mayEnterWater)
  native.invoke(
    Type.Void, 5401, false,
    arg(Type.Ped, ped),
    arg(Type.Bool, mayEnterWater)
  )
end

function TASK.SET_PED_PATH_PREFER_TO_AVOID_WATER(ped, avoidWater)
  native.invoke(
    Type.Void, 5402, false,
    arg(Type.Ped, ped),
    arg(Type.Bool, avoidWater)
  )
end

function TASK.SET_PED_PATH_AVOID_FIRE(ped, avoidFire)
  native.invoke(
    Type.Void, 5403, false,
    arg(Type.Ped, ped),
    arg(Type.Bool, avoidFire)
  )
end

function TASK.SET_GLOBAL_MIN_BIRD_FLIGHT_HEIGHT(height)
  native.invoke(
    Type.Void, 5404, false,
    arg(Type.Float, height)
  )
end

function TASK.GET_NAVMESH_ROUTE_DISTANCE_REMAINING(ped, distanceRemaining, isPathReady)
  return native.invoke(
    Type.Int, 5405, false,
    arg(Type.Ped, ped),
    ref(Type.Float, distanceRemaining),
    ref(Type.Bool, isPathReady)
  )
end

function TASK.GET_NAVMESH_ROUTE_RESULT(ped)
  return native.invoke(
    Type.Int, 5406, false,
    arg(Type.Ped, ped)
  )
end

function TASK.IS_CONTROLLED_VEHICLE_UNABLE_TO_GET_TO_ROAD(ped)
  return native.invoke(
    Type.Bool, 5407, false,
    arg(Type.Ped, ped)
  )
end

function TASK.TASK_GO_TO_COORD_ANY_MEANS(ped, x, y, z, moveBlendRatio, vehicle, useLongRangeVehiclePathing, drivingFlags, maxRangeToShootTargets)
  native.invoke(
    Type.Void, 5408, false,
    arg(Type.Ped, ped),
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, z),
    arg(Type.Float, moveBlendRatio),
    arg(Type.Vehicle, vehicle),
    arg(Type.Bool, useLongRangeVehiclePathing),
    arg(Type.Int, drivingFlags),
    arg(Type.Float, maxRangeToShootTargets)
  )
end

function TASK.TASK_GO_TO_COORD_ANY_MEANS_EXTRA_PARAMS(ped, x, y, z, moveBlendRatio, vehicle, useLongRangeVehiclePathing, drivingFlags, maxRangeToShootTargets, extraVehToTargetDistToPreferVehicle, driveStraightLineDistance, extraFlags, warpTimerMS)
  native.invoke(
    Type.Void, 5409, false,
    arg(Type.Ped, ped),
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, z),
    arg(Type.Float, moveBlendRatio),
    arg(Type.Vehicle, vehicle),
    arg(Type.Bool, useLongRangeVehiclePathing),
    arg(Type.Int, drivingFlags),
    arg(Type.Float, maxRangeToShootTargets),
    arg(Type.Float, extraVehToTargetDistToPreferVehicle),
    arg(Type.Float, driveStraightLineDistance),
    arg(Type.Int, extraFlags),
    arg(Type.Float, warpTimerMS)
  )
end

function TASK.TASK_GO_TO_COORD_ANY_MEANS_EXTRA_PARAMS_WITH_CRUISE_SPEED(ped, x, y, z, moveBlendRatio, vehicle, useLongRangeVehiclePathing, drivingFlags, maxRangeToShootTargets, extraVehToTargetDistToPreferVehicle, driveStraightLineDistance, extraFlags, cruiseSpeed, targetArriveDist)
  native.invoke(
    Type.Void, 5410, false,
    arg(Type.Ped, ped),
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, z),
    arg(Type.Float, moveBlendRatio),
    arg(Type.Vehicle, vehicle),
    arg(Type.Bool, useLongRangeVehiclePathing),
    arg(Type.Int, drivingFlags),
    arg(Type.Float, maxRangeToShootTargets),
    arg(Type.Float, extraVehToTargetDistToPreferVehicle),
    arg(Type.Float, driveStraightLineDistance),
    arg(Type.Int, extraFlags),
    arg(Type.Float, cruiseSpeed),
    arg(Type.Float, targetArriveDist)
  )
end

function TASK.TASK_PLAY_ANIM(ped, animDictionary, animationName, blendInSpeed, blendOutSpeed, duration, flag, playbackRate, lockX, lockY, lockZ)
  native.invoke(
    Type.Void, 5411, false,
    arg(Type.Ped, ped),
    arg(Type.String, animDictionary),
    arg(Type.String, animationName),
    arg(Type.Float, blendInSpeed),
    arg(Type.Float, blendOutSpeed),
    arg(Type.Int, duration),
    arg(Type.Int, flag),
    arg(Type.Float, playbackRate),
    arg(Type.Bool, lockX),
    arg(Type.Bool, lockY),
    arg(Type.Bool, lockZ)
  )
end

function TASK.TASK_PLAY_ANIM_ADVANCED(ped, animDict, animName, posX, posY, posZ, rotX, rotY, rotZ, animEnterSpeed, animExitSpeed, duration, flag, animTime, rotOrder, ikFlags)
  native.invoke(
    Type.Void, 5412, false,
    arg(Type.Ped, ped),
    arg(Type.String, animDict),
    arg(Type.String, animName),
    arg(Type.Float, posX),
    arg(Type.Float, posY),
    arg(Type.Float, posZ),
    arg(Type.Float, rotX),
    arg(Type.Float, rotY),
    arg(Type.Float, rotZ),
    arg(Type.Float, animEnterSpeed),
    arg(Type.Float, animExitSpeed),
    arg(Type.Int, duration),
    arg(Type.Any, flag),
    arg(Type.Float, animTime),
    arg(Type.Int, rotOrder),
    arg(Type.Int, ikFlags)
  )
end

function TASK.STOP_ANIM_TASK(entity, animDictionary, animationName, blendDelta)
  native.invoke(
    Type.Void, 5413, false,
    arg(Type.Entity, entity),
    arg(Type.String, animDictionary),
    arg(Type.String, animationName),
    arg(Type.Float, blendDelta)
  )
end

function TASK.TASK_SCRIPTED_ANIMATION(ped, priorityLowData, priorityMidData, priorityHighData, blendInDelta, blendOutDelta)
  native.invoke(
    Type.Void, 5414, false,
    arg(Type.Ped, ped),
    ref(Type.Int, priorityLowData),
    ref(Type.Int, priorityMidData),
    ref(Type.Int, priorityHighData),
    arg(Type.Float, blendInDelta),
    arg(Type.Float, blendOutDelta)
  )
end

function TASK.PLAY_ENTITY_SCRIPTED_ANIM(entity, priorityLowData, priorityMidData, priorityHighData, blendInDelta, blendOutDelta)
  native.invoke(
    Type.Void, 5415, false,
    arg(Type.Entity, entity),
    ref(Type.Int, priorityLowData),
    ref(Type.Int, priorityMidData),
    ref(Type.Int, priorityHighData),
    arg(Type.Float, blendInDelta),
    arg(Type.Float, blendOutDelta)
  )
end

function TASK.STOP_ANIM_PLAYBACK(entity, priority, secondary)
  native.invoke(
    Type.Void, 5416, false,
    arg(Type.Entity, entity),
    arg(Type.Int, priority),
    arg(Type.Bool, secondary)
  )
end

function TASK.SET_ANIM_WEIGHT(entity, weight, priority, index, secondary)
  native.invoke(
    Type.Void, 5417, false,
    arg(Type.Entity, entity),
    arg(Type.Float, weight),
    arg(Type.Int, priority),
    arg(Type.Int, index),
    arg(Type.Bool, secondary)
  )
end

function TASK.SET_ANIM_PHASE(entity, phase, priority, secondary)
  native.invoke(
    Type.Void, 5418, false,
    arg(Type.Entity, entity),
    arg(Type.Float, phase),
    arg(Type.Int, priority),
    arg(Type.Bool, secondary)
  )
end

function TASK.SET_ANIM_RATE(entity, rate, priority, secondary)
  native.invoke(
    Type.Void, 5419, false,
    arg(Type.Entity, entity),
    arg(Type.Float, rate),
    arg(Type.Int, priority),
    arg(Type.Bool, secondary)
  )
end

function TASK.SET_ANIM_LOOPED(entity, looped, priority, secondary)
  native.invoke(
    Type.Void, 5420, false,
    arg(Type.Entity, entity),
    arg(Type.Bool, looped),
    arg(Type.Int, priority),
    arg(Type.Bool, secondary)
  )
end

function TASK.TASK_PLAY_PHONE_GESTURE_ANIMATION(ped, animDict, animation, boneMaskType, blendInDuration, blendOutDuration, isLooping, holdLastFrame)
  native.invoke(
    Type.Void, 5421, false,
    arg(Type.Ped, ped),
    arg(Type.String, animDict),
    arg(Type.String, animation),
    arg(Type.String, boneMaskType),
    arg(Type.Float, blendInDuration),
    arg(Type.Float, blendOutDuration),
    arg(Type.Bool, isLooping),
    arg(Type.Bool, holdLastFrame)
  )
end

function TASK.TASK_STOP_PHONE_GESTURE_ANIMATION(ped, blendOutOverride)
  native.invoke(
    Type.Void, 5422, false,
    arg(Type.Ped, ped),
    arg(Type.Float, blendOutOverride)
  )
end

function TASK.IS_PLAYING_PHONE_GESTURE_ANIM(ped)
  return native.invoke(
    Type.Bool, 5423, false,
    arg(Type.Ped, ped)
  )
end

function TASK.GET_PHONE_GESTURE_ANIM_CURRENT_TIME(ped)
  return native.invoke(
    Type.Float, 5424, false,
    arg(Type.Ped, ped)
  )
end

function TASK.GET_PHONE_GESTURE_ANIM_TOTAL_TIME(ped)
  return native.invoke(
    Type.Float, 5425, false,
    arg(Type.Ped, ped)
  )
end

function TASK.TASK_VEHICLE_PLAY_ANIM(vehicle, animationSet, animationName)
  native.invoke(
    Type.Void, 5426, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.String, animationSet),
    arg(Type.String, animationName)
  )
end

function TASK.TASK_LOOK_AT_COORD(entity, x, y, z, duration, flags, priority)
  native.invoke(
    Type.Void, 5427, false,
    arg(Type.Entity, entity),
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, z),
    arg(Type.Int, duration),
    arg(Type.Int, flags),
    arg(Type.Int, priority)
  )
end

function TASK.TASK_LOOK_AT_ENTITY(ped, lookAt, duration, flags, priority)
  native.invoke(
    Type.Void, 5428, false,
    arg(Type.Ped, ped),
    arg(Type.Entity, lookAt),
    arg(Type.Int, duration),
    arg(Type.Int, flags),
    arg(Type.Int, priority)
  )
end

function TASK.TASK_CLEAR_LOOK_AT(ped)
  native.invoke(
    Type.Void, 5429, false,
    arg(Type.Ped, ped)
  )
end

function TASK.OPEN_SEQUENCE_TASK(taskSequenceId)
  native.invoke(
    Type.Void, 5430, false,
    ref(Type.Int, taskSequenceId)
  )
end

function TASK.CLOSE_SEQUENCE_TASK(taskSequenceId)
  native.invoke(
    Type.Void, 5431, false,
    arg(Type.Int, taskSequenceId)
  )
end

function TASK.TASK_PERFORM_SEQUENCE(ped, taskSequenceId)
  native.invoke(
    Type.Void, 5432, false,
    arg(Type.Ped, ped),
    arg(Type.Int, taskSequenceId)
  )
end

function TASK.TASK_PERFORM_SEQUENCE_LOCALLY(ped, taskSequenceId)
  native.invoke(
    Type.Void, 5433, false,
    arg(Type.Ped, ped),
    arg(Type.Int, taskSequenceId)
  )
end

function TASK.CLEAR_SEQUENCE_TASK(taskSequenceId)
  native.invoke(
    Type.Void, 5434, false,
    ref(Type.Int, taskSequenceId)
  )
end

function TASK.SET_SEQUENCE_TO_REPEAT(taskSequenceId, repeat_)
  native.invoke(
    Type.Void, 5435, false,
    arg(Type.Int, taskSequenceId),
    arg(Type.Bool, repeat_)
  )
end

function TASK.GET_SEQUENCE_PROGRESS(ped)
  return native.invoke(
    Type.Int, 5436, false,
    arg(Type.Ped, ped)
  )
end

function TASK.GET_IS_TASK_ACTIVE(ped, taskIndex)
  return native.invoke(
    Type.Bool, 5437, false,
    arg(Type.Ped, ped),
    arg(Type.Int, taskIndex)
  )
end

function TASK.GET_SCRIPT_TASK_STATUS(ped, taskHash)
  return native.invoke(
    Type.Int, 5438, false,
    arg(Type.Ped, ped),
    arg(Type.Hash, taskHash)
  )
end

function TASK.GET_ACTIVE_VEHICLE_MISSION_TYPE(vehicle)
  return native.invoke(
    Type.Int, 5439, false,
    arg(Type.Vehicle, vehicle)
  )
end

function TASK.TASK_LEAVE_ANY_VEHICLE(ped, delayTime, flags)
  native.invoke(
    Type.Void, 5440, false,
    arg(Type.Ped, ped),
    arg(Type.Int, delayTime),
    arg(Type.Int, flags)
  )
end

function TASK.TASK_AIM_GUN_SCRIPTED(ped, scriptTask, disableBlockingClip, instantBlendToAim)
  native.invoke(
    Type.Void, 5441, false,
    arg(Type.Ped, ped),
    arg(Type.Hash, scriptTask),
    arg(Type.Bool, disableBlockingClip),
    arg(Type.Bool, instantBlendToAim)
  )
end

function TASK.TASK_AIM_GUN_SCRIPTED_WITH_TARGET(ped, target, x, y, z, gunTaskType, disableBlockingClip, forceAim)
  native.invoke(
    Type.Void, 5442, false,
    arg(Type.Ped, ped),
    arg(Type.Ped, target),
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, z),
    arg(Type.Int, gunTaskType),
    arg(Type.Bool, disableBlockingClip),
    arg(Type.Bool, forceAim)
  )
end

function TASK.UPDATE_TASK_AIM_GUN_SCRIPTED_TARGET(ped, target, x, y, z, disableBlockingClip)
  native.invoke(
    Type.Void, 5443, false,
    arg(Type.Ped, ped),
    arg(Type.Ped, target),
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, z),
    arg(Type.Bool, disableBlockingClip)
  )
end

function TASK.GET_CLIP_SET_FOR_SCRIPTED_GUN_TASK(gunTaskType)
  return native.invoke(
    Type.String, 5444, false,
    arg(Type.Int, gunTaskType)
  )
end

function TASK.TASK_AIM_GUN_AT_ENTITY(ped, entity, duration, instantBlendToAim)
  native.invoke(
    Type.Void, 5445, false,
    arg(Type.Ped, ped),
    arg(Type.Entity, entity),
    arg(Type.Int, duration),
    arg(Type.Bool, instantBlendToAim)
  )
end

function TASK.TASK_TURN_PED_TO_FACE_ENTITY(ped, entity, duration)
  native.invoke(
    Type.Void, 5446, false,
    arg(Type.Ped, ped),
    arg(Type.Entity, entity),
    arg(Type.Int, duration)
  )
end

function TASK.TASK_AIM_GUN_AT_COORD(ped, x, y, z, time, instantBlendToAim, playAnimIntro)
  native.invoke(
    Type.Void, 5447, false,
    arg(Type.Ped, ped),
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, z),
    arg(Type.Int, time),
    arg(Type.Bool, instantBlendToAim),
    arg(Type.Bool, playAnimIntro)
  )
end

function TASK.TASK_SHOOT_AT_COORD(ped, x, y, z, duration, firingPattern)
  native.invoke(
    Type.Void, 5448, false,
    arg(Type.Ped, ped),
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, z),
    arg(Type.Int, duration),
    arg(Type.Hash, firingPattern)
  )
end

function TASK.TASK_SHUFFLE_TO_NEXT_VEHICLE_SEAT(ped, vehicle, useAlternateShuffle)
  native.invoke(
    Type.Void, 5449, false,
    arg(Type.Ped, ped),
    arg(Type.Vehicle, vehicle),
    arg(Type.Bool, useAlternateShuffle)
  )
end

function TASK.CLEAR_PED_TASKS(ped)
  native.invoke(
    Type.Void, 5450, false,
    arg(Type.Ped, ped)
  )
end

function TASK.CLEAR_PED_SECONDARY_TASK(ped)
  native.invoke(
    Type.Void, 5451, false,
    arg(Type.Ped, ped)
  )
end

function TASK.TASK_EVERYONE_LEAVE_VEHICLE(vehicle)
  native.invoke(
    Type.Void, 5452, false,
    arg(Type.Vehicle, vehicle)
  )
end

function TASK.TASK_GOTO_ENTITY_OFFSET(ped, entity, time, seekRadius, seekAngleDeg, moveBlendRatio, gotoEntityOffsetFlags)
  native.invoke(
    Type.Void, 5453, false,
    arg(Type.Ped, ped),
    arg(Type.Entity, entity),
    arg(Type.Int, time),
    arg(Type.Float, seekRadius),
    arg(Type.Float, seekAngleDeg),
    arg(Type.Float, moveBlendRatio),
    arg(Type.Int, gotoEntityOffsetFlags)
  )
end

function TASK.TASK_GOTO_ENTITY_OFFSET_XY(ped, entity, duration, targetRadius, offsetX, offsetY, moveBlendRatio, gotoEntityOffsetFlags)
  native.invoke(
    Type.Void, 5454, false,
    arg(Type.Ped, ped),
    arg(Type.Entity, entity),
    arg(Type.Int, duration),
    arg(Type.Float, targetRadius),
    arg(Type.Float, offsetX),
    arg(Type.Float, offsetY),
    arg(Type.Float, moveBlendRatio),
    arg(Type.Int, gotoEntityOffsetFlags)
  )
end

function TASK.TASK_TURN_PED_TO_FACE_COORD(ped, x, y, z, duration)
  native.invoke(
    Type.Void, 5455, false,
    arg(Type.Ped, ped),
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, z),
    arg(Type.Int, duration)
  )
end

function TASK.TASK_VEHICLE_TEMP_ACTION(driver, vehicle, action, time)
  native.invoke(
    Type.Void, 5456, false,
    arg(Type.Ped, driver),
    arg(Type.Vehicle, vehicle),
    arg(Type.Int, action),
    arg(Type.Int, time)
  )
end

function TASK.TASK_VEHICLE_MISSION(driver, vehicle, vehicleTarget, missionType, cruiseSpeed, drivingStyle, targetReached, straightLineDistance, DriveAgainstTraffic)
  native.invoke(
    Type.Void, 5457, false,
    arg(Type.Ped, driver),
    arg(Type.Vehicle, vehicle),
    arg(Type.Vehicle, vehicleTarget),
    arg(Type.Int, missionType),
    arg(Type.Float, cruiseSpeed),
    arg(Type.Int, drivingStyle),
    arg(Type.Float, targetReached),
    arg(Type.Float, straightLineDistance),
    arg(Type.Bool, DriveAgainstTraffic)
  )
end

function TASK.TASK_VEHICLE_MISSION_PED_TARGET(ped, vehicle, pedTarget, missionType, maxSpeed, drivingStyle, minDistance, straightLineDistance, DriveAgainstTraffic)
  native.invoke(
    Type.Void, 5458, false,
    arg(Type.Ped, ped),
    arg(Type.Vehicle, vehicle),
    arg(Type.Ped, pedTarget),
    arg(Type.Int, missionType),
    arg(Type.Float, maxSpeed),
    arg(Type.Int, drivingStyle),
    arg(Type.Float, minDistance),
    arg(Type.Float, straightLineDistance),
    arg(Type.Bool, DriveAgainstTraffic)
  )
end

function TASK.TASK_VEHICLE_MISSION_COORS_TARGET(ped, vehicle, x, y, z, mission, cruiseSpeed, drivingStyle, targetReached, straightLineDistance, DriveAgainstTraffic)
  native.invoke(
    Type.Void, 5459, false,
    arg(Type.Ped, ped),
    arg(Type.Vehicle, vehicle),
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, z),
    arg(Type.Int, mission),
    arg(Type.Float, cruiseSpeed),
    arg(Type.Int, drivingStyle),
    arg(Type.Float, targetReached),
    arg(Type.Float, straightLineDistance),
    arg(Type.Bool, DriveAgainstTraffic)
  )
end

function TASK.TASK_VEHICLE_ESCORT(ped, vehicle, targetVehicle, mode, speed, drivingStyle, minDistance, minHeightAboveTerrain, noRoadsDistance)
  native.invoke(
    Type.Void, 5460, false,
    arg(Type.Ped, ped),
    arg(Type.Vehicle, vehicle),
    arg(Type.Vehicle, targetVehicle),
    arg(Type.Int, mode),
    arg(Type.Float, speed),
    arg(Type.Int, drivingStyle),
    arg(Type.Float, minDistance),
    arg(Type.Int, minHeightAboveTerrain),
    arg(Type.Float, noRoadsDistance)
  )
end

function TASK.TASK_VEHICLE_FOLLOW(driver, vehicle, targetEntity, speed, drivingStyle, minDistance)
  native.invoke(
    Type.Void, 5461, false,
    arg(Type.Ped, driver),
    arg(Type.Vehicle, vehicle),
    arg(Type.Entity, targetEntity),
    arg(Type.Float, speed),
    arg(Type.Int, drivingStyle),
    arg(Type.Int, minDistance)
  )
end

function TASK.TASK_VEHICLE_CHASE(driver, targetEnt)
  native.invoke(
    Type.Void, 5462, false,
    arg(Type.Ped, driver),
    arg(Type.Entity, targetEnt)
  )
end

function TASK.TASK_VEHICLE_HELI_PROTECT(pilot, vehicle, entityToFollow, targetSpeed, drivingFlags, radius, altitude, heliFlags)
  native.invoke(
    Type.Void, 5463, false,
    arg(Type.Ped, pilot),
    arg(Type.Vehicle, vehicle),
    arg(Type.Entity, entityToFollow),
    arg(Type.Float, targetSpeed),
    arg(Type.Int, drivingFlags),
    arg(Type.Float, radius),
    arg(Type.Int, altitude),
    arg(Type.Int, heliFlags)
  )
end

function TASK.SET_TASK_VEHICLE_CHASE_BEHAVIOR_FLAG(ped, flag, set)
  native.invoke(
    Type.Void, 5464, false,
    arg(Type.Ped, ped),
    arg(Type.Int, flag),
    arg(Type.Bool, set)
  )
end

function TASK.SET_TASK_VEHICLE_CHASE_IDEAL_PURSUIT_DISTANCE(ped, distance)
  native.invoke(
    Type.Void, 5465, false,
    arg(Type.Ped, ped),
    arg(Type.Float, distance)
  )
end

function TASK.TASK_HELI_CHASE(pilot, entityToFollow, x, y, z)
  native.invoke(
    Type.Void, 5466, false,
    arg(Type.Ped, pilot),
    arg(Type.Entity, entityToFollow),
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, z)
  )
end

function TASK.TASK_PLANE_CHASE(pilot, entityToFollow, x, y, z)
  native.invoke(
    Type.Void, 5467, false,
    arg(Type.Ped, pilot),
    arg(Type.Entity, entityToFollow),
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, z)
  )
end

function TASK.TASK_PLANE_LAND(pilot, plane, runwayStartX, runwayStartY, runwayStartZ, runwayEndX, runwayEndY, runwayEndZ)
  native.invoke(
    Type.Void, 5468, false,
    arg(Type.Ped, pilot),
    arg(Type.Vehicle, plane),
    arg(Type.Float, runwayStartX),
    arg(Type.Float, runwayStartY),
    arg(Type.Float, runwayStartZ),
    arg(Type.Float, runwayEndX),
    arg(Type.Float, runwayEndY),
    arg(Type.Float, runwayEndZ)
  )
end

function TASK.CLEAR_DEFAULT_PRIMARY_TASK(ped)
  native.invoke(
    Type.Void, 5469, false,
    arg(Type.Ped, ped)
  )
end

function TASK.CLEAR_PRIMARY_VEHICLE_TASK(vehicle)
  native.invoke(
    Type.Void, 5470, false,
    arg(Type.Vehicle, vehicle)
  )
end

function TASK.CLEAR_VEHICLE_CRASH_TASK(vehicle)
  native.invoke(
    Type.Void, 5471, false,
    arg(Type.Vehicle, vehicle)
  )
end

function TASK.TASK_PLANE_GOTO_PRECISE_VTOL(ped, vehicle, x, y, z, flightHeight, minHeightAboveTerrain, useDesiredOrientation, desiredOrientation, autopilot)
  native.invoke(
    Type.Void, 5472, false,
    arg(Type.Ped, ped),
    arg(Type.Vehicle, vehicle),
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, z),
    arg(Type.Int, flightHeight),
    arg(Type.Int, minHeightAboveTerrain),
    arg(Type.Bool, useDesiredOrientation),
    arg(Type.Float, desiredOrientation),
    arg(Type.Bool, autopilot)
  )
end

function TASK.TASK_SUBMARINE_GOTO_AND_STOP(ped, submarine, x, y, z, autopilot)
  native.invoke(
    Type.Void, 5473, false,
    arg(Type.Ped, ped),
    arg(Type.Vehicle, submarine),
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, z),
    arg(Type.Bool, autopilot)
  )
end

function TASK.TASK_HELI_MISSION(pilot, aircraft, targetVehicle, targetPed, destinationX, destinationY, destinationZ, missionFlag, maxSpeed, radius, targetHeading, maxHeight, minHeight, slowDownDistance, behaviorFlags)
  native.invoke(
    Type.Void, 5474, false,
    arg(Type.Ped, pilot),
    arg(Type.Vehicle, aircraft),
    arg(Type.Vehicle, targetVehicle),
    arg(Type.Ped, targetPed),
    arg(Type.Float, destinationX),
    arg(Type.Float, destinationY),
    arg(Type.Float, destinationZ),
    arg(Type.Int, missionFlag),
    arg(Type.Float, maxSpeed),
    arg(Type.Float, radius),
    arg(Type.Float, targetHeading),
    arg(Type.Int, maxHeight),
    arg(Type.Int, minHeight),
    arg(Type.Float, slowDownDistance),
    arg(Type.Int, behaviorFlags)
  )
end

function TASK.TASK_HELI_ESCORT_HELI(pilot, heli1, heli2, offsetX, offsetY, offsetZ)
  native.invoke(
    Type.Void, 5475, false,
    arg(Type.Ped, pilot),
    arg(Type.Vehicle, heli1),
    arg(Type.Vehicle, heli2),
    arg(Type.Float, offsetX),
    arg(Type.Float, offsetY),
    arg(Type.Float, offsetZ)
  )
end

function TASK.TASK_PLANE_MISSION(pilot, aircraft, targetVehicle, targetPed, destinationX, destinationY, destinationZ, missionFlag, angularDrag, targetReached, targetHeading, maxZ, minZ, precise)
  native.invoke(
    Type.Void, 5476, false,
    arg(Type.Ped, pilot),
    arg(Type.Vehicle, aircraft),
    arg(Type.Vehicle, targetVehicle),
    arg(Type.Ped, targetPed),
    arg(Type.Float, destinationX),
    arg(Type.Float, destinationY),
    arg(Type.Float, destinationZ),
    arg(Type.Int, missionFlag),
    arg(Type.Float, angularDrag),
    arg(Type.Float, targetReached),
    arg(Type.Float, targetHeading),
    arg(Type.Float, maxZ),
    arg(Type.Float, minZ),
    arg(Type.Bool, precise)
  )
end

function TASK.TASK_PLANE_TAXI(pilot, aircraft, x, y, z, cruiseSpeed, targetReached)
  native.invoke(
    Type.Void, 5477, false,
    arg(Type.Ped, pilot),
    arg(Type.Vehicle, aircraft),
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, z),
    arg(Type.Float, cruiseSpeed),
    arg(Type.Float, targetReached)
  )
end

function TASK.TASK_BOAT_MISSION(pedDriver, vehicle, targetVehicle, targetPed, x, y, z, mission, maxSpeed, drivingStyle, targetReached, boatFlags)
  native.invoke(
    Type.Void, 5478, false,
    arg(Type.Ped, pedDriver),
    arg(Type.Vehicle, vehicle),
    arg(Type.Vehicle, targetVehicle),
    arg(Type.Ped, targetPed),
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, z),
    arg(Type.Int, mission),
    arg(Type.Float, maxSpeed),
    arg(Type.Int, drivingStyle),
    arg(Type.Float, targetReached),
    arg(Type.Any, boatFlags)
  )
end

function TASK.TASK_DRIVE_BY(driverPed, targetPed, targetVehicle, targetX, targetY, targetZ, distanceToShoot, pedAccuracy, pushUnderneathDrivingTaskIfDriving, firingPattern)
  native.invoke(
    Type.Void, 5479, false,
    arg(Type.Ped, driverPed),
    arg(Type.Ped, targetPed),
    arg(Type.Vehicle, targetVehicle),
    arg(Type.Float, targetX),
    arg(Type.Float, targetY),
    arg(Type.Float, targetZ),
    arg(Type.Float, distanceToShoot),
    arg(Type.Int, pedAccuracy),
    arg(Type.Bool, pushUnderneathDrivingTaskIfDriving),
    arg(Type.Hash, firingPattern)
  )
end

function TASK.SET_DRIVEBY_TASK_TARGET(shootingPed, targetPed, targetVehicle, x, y, z)
  native.invoke(
    Type.Void, 5480, false,
    arg(Type.Ped, shootingPed),
    arg(Type.Ped, targetPed),
    arg(Type.Vehicle, targetVehicle),
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, z)
  )
end

function TASK.CLEAR_DRIVEBY_TASK_UNDERNEATH_DRIVING_TASK(ped)
  native.invoke(
    Type.Void, 5481, false,
    arg(Type.Ped, ped)
  )
end

function TASK.IS_DRIVEBY_TASK_UNDERNEATH_DRIVING_TASK(ped)
  return native.invoke(
    Type.Bool, 5482, false,
    arg(Type.Ped, ped)
  )
end

function TASK.CONTROL_MOUNTED_WEAPON(ped)
  return native.invoke(
    Type.Bool, 5483, false,
    arg(Type.Ped, ped)
  )
end

function TASK.SET_MOUNTED_WEAPON_TARGET(shootingPed, targetPed, targetVehicle, x, y, z, taskMode, ignoreTargetVehDeadCheck)
  native.invoke(
    Type.Void, 5484, false,
    arg(Type.Ped, shootingPed),
    arg(Type.Ped, targetPed),
    arg(Type.Vehicle, targetVehicle),
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, z),
    arg(Type.Int, taskMode),
    arg(Type.Bool, ignoreTargetVehDeadCheck)
  )
end

function TASK.IS_MOUNTED_WEAPON_TASK_UNDERNEATH_DRIVING_TASK(ped)
  return native.invoke(
    Type.Bool, 5485, false,
    arg(Type.Ped, ped)
  )
end

function TASK.TASK_USE_MOBILE_PHONE(ped, usePhone, desiredPhoneMode)
  native.invoke(
    Type.Void, 5486, false,
    arg(Type.Ped, ped),
    arg(Type.Bool, usePhone),
    arg(Type.Int, desiredPhoneMode)
  )
end

function TASK.TASK_USE_MOBILE_PHONE_TIMED(ped, duration)
  native.invoke(
    Type.Void, 5487, false,
    arg(Type.Ped, ped),
    arg(Type.Int, duration)
  )
end

function TASK.TASK_CHAT_TO_PED(ped, target, flags, goToLocationX, goToLocationY, goToLocationZ, headingDegs, idleTime)
  native.invoke(
    Type.Void, 5488, false,
    arg(Type.Ped, ped),
    arg(Type.Ped, target),
    arg(Type.Int, flags),
    arg(Type.Float, goToLocationX),
    arg(Type.Float, goToLocationY),
    arg(Type.Float, goToLocationZ),
    arg(Type.Float, headingDegs),
    arg(Type.Float, idleTime)
  )
end

function TASK.TASK_WARP_PED_INTO_VEHICLE(ped, vehicle, seat)
  native.invoke(
    Type.Void, 5489, false,
    arg(Type.Ped, ped),
    arg(Type.Vehicle, vehicle),
    arg(Type.Int, seat)
  )
end

function TASK.TASK_SHOOT_AT_ENTITY(entity, target, duration, firingPattern)
  native.invoke(
    Type.Void, 5490, false,
    arg(Type.Entity, entity),
    arg(Type.Entity, target),
    arg(Type.Int, duration),
    arg(Type.Hash, firingPattern)
  )
end

function TASK.TASK_CLIMB(ped, usePlayerLaunchForce)
  native.invoke(
    Type.Void, 5491, false,
    arg(Type.Ped, ped),
    arg(Type.Bool, usePlayerLaunchForce)
  )
end

function TASK.TASK_CLIMB_LADDER(ped, fast)
  native.invoke(
    Type.Void, 5492, false,
    arg(Type.Ped, ped),
    arg(Type.Bool, fast)
  )
end

function TASK.TASK_RAPPEL_DOWN_WALL_USING_CLIPSET_OVERRIDE(ped, x1, y1, z1, x2, y2, z2, minZ, ropeHandle, clipSet, p10, p11)
  native.invoke(
    Type.Void, 5493, false,
    arg(Type.Ped, ped),
    arg(Type.Float, x1),
    arg(Type.Float, y1),
    arg(Type.Float, z1),
    arg(Type.Float, x2),
    arg(Type.Float, y2),
    arg(Type.Float, z2),
    arg(Type.Float, minZ),
    arg(Type.Int, ropeHandle),
    arg(Type.String, clipSet),
    arg(Type.Any, p10),
    arg(Type.Any, p11)
  )
end

function TASK.GET_TASK_RAPPEL_DOWN_WALL_STATE(ped)
  return native.invoke(
    Type.Int, 5494, false,
    arg(Type.Ped, ped)
  )
end

function TASK.CLEAR_PED_TASKS_IMMEDIATELY(ped)
  native.invoke(
    Type.Void, 5495, false,
    arg(Type.Ped, ped)
  )
end

function TASK.TASK_PERFORM_SEQUENCE_FROM_PROGRESS(ped, taskIndex, progress1, progress2)
  native.invoke(
    Type.Void, 5496, false,
    arg(Type.Ped, ped),
    arg(Type.Int, taskIndex),
    arg(Type.Int, progress1),
    arg(Type.Int, progress2)
  )
end

function TASK.SET_NEXT_DESIRED_MOVE_STATE(nextMoveState)
  native.invoke(
    Type.Void, 5497, false,
    arg(Type.Float, nextMoveState)
  )
end

function TASK.SET_PED_DESIRED_MOVE_BLEND_RATIO(ped, newMoveBlendRatio)
  native.invoke(
    Type.Void, 5498, false,
    arg(Type.Ped, ped),
    arg(Type.Float, newMoveBlendRatio)
  )
end

function TASK.GET_PED_DESIRED_MOVE_BLEND_RATIO(ped)
  return native.invoke(
    Type.Float, 5499, false,
    arg(Type.Ped, ped)
  )
end

function TASK.TASK_GOTO_ENTITY_AIMING(ped, target, distanceToStopAt, StartAimingDist)
  native.invoke(
    Type.Void, 5500, false,
    arg(Type.Ped, ped),
    arg(Type.Entity, target),
    arg(Type.Float, distanceToStopAt),
    arg(Type.Float, StartAimingDist)
  )
end

function TASK.TASK_SET_DECISION_MAKER(ped, decisionMakerId)
  native.invoke(
    Type.Void, 5501, false,
    arg(Type.Ped, ped),
    arg(Type.Hash, decisionMakerId)
  )
end

function TASK.TASK_SET_SPHERE_DEFENSIVE_AREA(ped, x, y, z, radius)
  native.invoke(
    Type.Void, 5502, false,
    arg(Type.Ped, ped),
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, z),
    arg(Type.Float, radius)
  )
end

function TASK.TASK_CLEAR_DEFENSIVE_AREA(ped)
  native.invoke(
    Type.Void, 5503, false,
    arg(Type.Ped, ped)
  )
end

function TASK.TASK_PED_SLIDE_TO_COORD(ped, x, y, z, heading, speed)
  native.invoke(
    Type.Void, 5504, false,
    arg(Type.Ped, ped),
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, z),
    arg(Type.Float, heading),
    arg(Type.Float, speed)
  )
end

function TASK.TASK_PED_SLIDE_TO_COORD_HDG_RATE(ped, x, y, z, heading, speed, headingChangeRate)
  native.invoke(
    Type.Void, 5505, false,
    arg(Type.Ped, ped),
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, z),
    arg(Type.Float, heading),
    arg(Type.Float, speed),
    arg(Type.Float, headingChangeRate)
  )
end

function TASK.ADD_COVER_POINT(x, y, z, direction, usage, height, arc, isPriority)
  return native.invoke(
    Type.Scrhandle, 5506, false,
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, z),
    arg(Type.Float, direction),
    arg(Type.Int, usage),
    arg(Type.Int, height),
    arg(Type.Int, arc),
    arg(Type.Bool, isPriority)
  )
end

function TASK.REMOVE_COVER_POINT(coverpoint)
  native.invoke(
    Type.Void, 5507, false,
    arg(Type.Scrhandle, coverpoint)
  )
end

function TASK.DOES_SCRIPTED_COVER_POINT_EXIST_AT_COORDS(x, y, z)
  return native.invoke(
    Type.Bool, 5508, false,
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, z)
  )
end

function TASK.GET_SCRIPTED_COVER_POINT_COORDS(coverpoint)
  return native.invoke(
    Type.Vector3, 5509, false,
    arg(Type.Scrhandle, coverpoint)
  )
end

function TASK.ADD_SCRIPTED_COVER_AREA(x, y, z, radius)
  native.invoke(
    Type.Void, 5510, false,
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, z),
    arg(Type.Float, radius)
  )
end

function TASK.TASK_COMBAT_PED(ped, targetPed, combatFlags, threatResponseFlags)
  native.invoke(
    Type.Void, 5511, false,
    arg(Type.Ped, ped),
    arg(Type.Ped, targetPed),
    arg(Type.Int, combatFlags),
    arg(Type.Int, threatResponseFlags)
  )
end

function TASK.TASK_COMBAT_PED_TIMED(ped, target, time, flags)
  native.invoke(
    Type.Void, 5512, false,
    arg(Type.Ped, ped),
    arg(Type.Ped, target),
    arg(Type.Int, time),
    arg(Type.Int, flags)
  )
end

function TASK.TASK_SEEK_COVER_FROM_POS(ped, x, y, z, duration, allowPeekingAndFiring)
  native.invoke(
    Type.Void, 5513, false,
    arg(Type.Ped, ped),
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, z),
    arg(Type.Int, duration),
    arg(Type.Bool, allowPeekingAndFiring)
  )
end

function TASK.TASK_SEEK_COVER_FROM_PED(ped, target, duration, allowPeekingAndFiring)
  native.invoke(
    Type.Void, 5514, false,
    arg(Type.Ped, ped),
    arg(Type.Ped, target),
    arg(Type.Int, duration),
    arg(Type.Bool, allowPeekingAndFiring)
  )
end

function TASK.TASK_SEEK_COVER_TO_COVER_POINT(ped, coverpoint, x, y, z, time, allowPeekingAndFiring)
  native.invoke(
    Type.Void, 5515, false,
    arg(Type.Ped, ped),
    arg(Type.Scrhandle, coverpoint),
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, z),
    arg(Type.Int, time),
    arg(Type.Bool, allowPeekingAndFiring)
  )
end

function TASK.TASK_SEEK_COVER_TO_COORDS(ped, x1, y1, z1, x2, y2, z2, timeout, shortRoute)
  native.invoke(
    Type.Void, 5516, false,
    arg(Type.Ped, ped),
    arg(Type.Float, x1),
    arg(Type.Float, y1),
    arg(Type.Float, z1),
    arg(Type.Float, x2),
    arg(Type.Float, y2),
    arg(Type.Float, z2),
    arg(Type.Int, timeout),
    arg(Type.Bool, shortRoute)
  )
end

function TASK.TASK_PUT_PED_DIRECTLY_INTO_COVER(ped, x, y, z, time, allowPeekingAndFiring, blendInDuration, forceInitialFacingDirection, forceFaceLeft, identifier, doEntry)
  native.invoke(
    Type.Void, 5517, false,
    arg(Type.Ped, ped),
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, z),
    arg(Type.Int, time),
    arg(Type.Bool, allowPeekingAndFiring),
    arg(Type.Float, blendInDuration),
    arg(Type.Bool, forceInitialFacingDirection),
    arg(Type.Bool, forceFaceLeft),
    arg(Type.Int, identifier),
    arg(Type.Bool, doEntry)
  )
end

function TASK.TASK_WARP_PED_DIRECTLY_INTO_COVER(ped, time, allowPeekingAndFiring, forceInitialFacingDirection, forceFaceLeft, identifier)
  native.invoke(
    Type.Void, 5518, false,
    arg(Type.Ped, ped),
    arg(Type.Int, time),
    arg(Type.Bool, allowPeekingAndFiring),
    arg(Type.Bool, forceInitialFacingDirection),
    arg(Type.Bool, forceFaceLeft),
    arg(Type.Int, identifier)
  )
end

function TASK.TASK_EXIT_COVER(ped, exitType, x, y, z)
  native.invoke(
    Type.Void, 5519, false,
    arg(Type.Ped, ped),
    arg(Type.Int, exitType),
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, z)
  )
end

function TASK.TASK_PUT_PED_DIRECTLY_INTO_MELEE(ped, meleeTarget, blendInDuration, timeInMelee, strafePhaseSync, aiCombatFlags)
  native.invoke(
    Type.Void, 5520, false,
    arg(Type.Ped, ped),
    arg(Type.Ped, meleeTarget),
    arg(Type.Float, blendInDuration),
    arg(Type.Float, timeInMelee),
    arg(Type.Float, strafePhaseSync),
    arg(Type.Int, aiCombatFlags)
  )
end

function TASK.TASK_TOGGLE_DUCK(ped, toggleType)
  native.invoke(
    Type.Void, 5521, false,
    arg(Type.Ped, ped),
    arg(Type.Int, toggleType)
  )
end

function TASK.TASK_GUARD_CURRENT_POSITION(ped, maxPatrolProximity, defensiveAreaRadius, setDefensiveArea)
  native.invoke(
    Type.Void, 5522, false,
    arg(Type.Ped, ped),
    arg(Type.Float, maxPatrolProximity),
    arg(Type.Float, defensiveAreaRadius),
    arg(Type.Bool, setDefensiveArea)
  )
end

function TASK.TASK_GUARD_ASSIGNED_DEFENSIVE_AREA(ped, x, y, z, heading, maxPatrolProximity, timer)
  native.invoke(
    Type.Void, 5523, false,
    arg(Type.Ped, ped),
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, z),
    arg(Type.Float, heading),
    arg(Type.Float, maxPatrolProximity),
    arg(Type.Int, timer)
  )
end

function TASK.TASK_GUARD_SPHERE_DEFENSIVE_AREA(ped, defendPositionX, defendPositionY, defendPositionZ, heading, maxPatrolProximity, time, x, y, z, defensiveAreaRadius)
  native.invoke(
    Type.Void, 5524, false,
    arg(Type.Ped, ped),
    arg(Type.Float, defendPositionX),
    arg(Type.Float, defendPositionY),
    arg(Type.Float, defendPositionZ),
    arg(Type.Float, heading),
    arg(Type.Float, maxPatrolProximity),
    arg(Type.Int, time),
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, z),
    arg(Type.Float, defensiveAreaRadius)
  )
end

function TASK.TASK_STAND_GUARD(ped, x, y, z, heading, scenarioName)
  native.invoke(
    Type.Void, 5525, false,
    arg(Type.Ped, ped),
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, z),
    arg(Type.Float, heading),
    arg(Type.String, scenarioName)
  )
end

function TASK.SET_DRIVE_TASK_CRUISE_SPEED(driver, cruiseSpeed)
  native.invoke(
    Type.Void, 5526, false,
    arg(Type.Ped, driver),
    arg(Type.Float, cruiseSpeed)
  )
end

function TASK.SET_DRIVE_TASK_MAX_CRUISE_SPEED(ped, speed)
  native.invoke(
    Type.Void, 5527, false,
    arg(Type.Ped, ped),
    arg(Type.Float, speed)
  )
end

function TASK.SET_DRIVE_TASK_DRIVING_STYLE(ped, drivingStyle)
  native.invoke(
    Type.Void, 5528, false,
    arg(Type.Ped, ped),
    arg(Type.Int, drivingStyle)
  )
end

function TASK.ADD_COVER_BLOCKING_AREA(startX, startY, startZ, endX, endY, endZ, blockObjects, blockVehicles, blockMap, blockPlayer)
  native.invoke(
    Type.Void, 5529, false,
    arg(Type.Float, startX),
    arg(Type.Float, startY),
    arg(Type.Float, startZ),
    arg(Type.Float, endX),
    arg(Type.Float, endY),
    arg(Type.Float, endZ),
    arg(Type.Bool, blockObjects),
    arg(Type.Bool, blockVehicles),
    arg(Type.Bool, blockMap),
    arg(Type.Bool, blockPlayer)
  )
end

function TASK.REMOVE_ALL_COVER_BLOCKING_AREAS()
  native.invoke(
    Type.Void, 5530, false
  )
end

function TASK.REMOVE_COVER_BLOCKING_AREAS_AT_POSITION(x, y, z)
  native.invoke(
    Type.Void, 5531, false,
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, z)
  )
end

function TASK.REMOVE_SPECIFIC_COVER_BLOCKING_AREAS(startX, startY, startZ, endX, endY, endZ, blockObjects, blockVehicles, blockMap, blockPlayer)
  native.invoke(
    Type.Void, 5532, false,
    arg(Type.Float, startX),
    arg(Type.Float, startY),
    arg(Type.Float, startZ),
    arg(Type.Float, endX),
    arg(Type.Float, endY),
    arg(Type.Float, endZ),
    arg(Type.Bool, blockObjects),
    arg(Type.Bool, blockVehicles),
    arg(Type.Bool, blockMap),
    arg(Type.Bool, blockPlayer)
  )
end

function TASK.TASK_START_SCENARIO_IN_PLACE(ped, scenarioName, unkDelay, playEnterAnim)
  native.invoke(
    Type.Void, 5533, false,
    arg(Type.Ped, ped),
    arg(Type.String, scenarioName),
    arg(Type.Int, unkDelay),
    arg(Type.Bool, playEnterAnim)
  )
end

function TASK.TASK_START_SCENARIO_AT_POSITION(ped, scenarioName, x, y, z, heading, duration, sittingScenario, teleport)
  native.invoke(
    Type.Void, 5534, false,
    arg(Type.Ped, ped),
    arg(Type.String, scenarioName),
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, z),
    arg(Type.Float, heading),
    arg(Type.Int, duration),
    arg(Type.Bool, sittingScenario),
    arg(Type.Bool, teleport)
  )
end

function TASK.TASK_USE_NEAREST_SCENARIO_TO_COORD(ped, x, y, z, distance, duration)
  native.invoke(
    Type.Void, 5535, false,
    arg(Type.Ped, ped),
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, z),
    arg(Type.Float, distance),
    arg(Type.Int, duration)
  )
end

function TASK.TASK_USE_NEAREST_SCENARIO_TO_COORD_WARP(ped, x, y, z, radius, timeToLeave)
  native.invoke(
    Type.Void, 5536, false,
    arg(Type.Ped, ped),
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, z),
    arg(Type.Float, radius),
    arg(Type.Int, timeToLeave)
  )
end

function TASK.TASK_USE_NEAREST_SCENARIO_CHAIN_TO_COORD(ped, x, y, z, maxRange, timeToLeave)
  native.invoke(
    Type.Void, 5537, false,
    arg(Type.Ped, ped),
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, z),
    arg(Type.Float, maxRange),
    arg(Type.Int, timeToLeave)
  )
end

function TASK.TASK_USE_NEAREST_SCENARIO_CHAIN_TO_COORD_WARP(ped, x, y, z, radius, timeToLeave)
  native.invoke(
    Type.Void, 5538, false,
    arg(Type.Ped, ped),
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, z),
    arg(Type.Float, radius),
    arg(Type.Int, timeToLeave)
  )
end

function TASK.DOES_SCENARIO_EXIST_IN_AREA(x, y, z, radius, mustBeFree)
  return native.invoke(
    Type.Bool, 5539, false,
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, z),
    arg(Type.Float, radius),
    arg(Type.Bool, mustBeFree)
  )
end

function TASK.DOES_SCENARIO_OF_TYPE_EXIST_IN_AREA(x, y, z, scenarioName, radius, mustBeFree)
  return native.invoke(
    Type.Bool, 5540, false,
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, z),
    arg(Type.String, scenarioName),
    arg(Type.Float, radius),
    arg(Type.Bool, mustBeFree)
  )
end

function TASK.IS_SCENARIO_OCCUPIED(x, y, z, maxRange, onlyUsersActuallyAtScenario)
  return native.invoke(
    Type.Bool, 5541, false,
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, z),
    arg(Type.Float, maxRange),
    arg(Type.Bool, onlyUsersActuallyAtScenario)
  )
end

function TASK.PED_HAS_USE_SCENARIO_TASK(ped)
  return native.invoke(
    Type.Bool, 5542, false,
    arg(Type.Ped, ped)
  )
end

function TASK.PLAY_ANIM_ON_RUNNING_SCENARIO(ped, animDict, animName)
  native.invoke(
    Type.Void, 5543, false,
    arg(Type.Ped, ped),
    arg(Type.String, animDict),
    arg(Type.String, animName)
  )
end

function TASK.DOES_SCENARIO_GROUP_EXIST(scenarioGroup)
  return native.invoke(
    Type.Bool, 5544, false,
    arg(Type.String, scenarioGroup)
  )
end

function TASK.IS_SCENARIO_GROUP_ENABLED(scenarioGroup)
  return native.invoke(
    Type.Bool, 5545, false,
    arg(Type.String, scenarioGroup)
  )
end

function TASK.SET_SCENARIO_GROUP_ENABLED(scenarioGroup, enabled)
  native.invoke(
    Type.Void, 5546, false,
    arg(Type.String, scenarioGroup),
    arg(Type.Bool, enabled)
  )
end

function TASK.RESET_SCENARIO_GROUPS_ENABLED()
  native.invoke(
    Type.Void, 5547, false
  )
end

function TASK.SET_EXCLUSIVE_SCENARIO_GROUP(scenarioGroup)
  native.invoke(
    Type.Void, 5548, false,
    arg(Type.String, scenarioGroup)
  )
end

function TASK.RESET_EXCLUSIVE_SCENARIO_GROUP()
  native.invoke(
    Type.Void, 5549, false
  )
end

function TASK.IS_SCENARIO_TYPE_ENABLED(scenarioType)
  return native.invoke(
    Type.Bool, 5550, false,
    arg(Type.String, scenarioType)
  )
end

function TASK.SET_SCENARIO_TYPE_ENABLED(scenarioType, toggle)
  native.invoke(
    Type.Void, 5551, false,
    arg(Type.String, scenarioType),
    arg(Type.Bool, toggle)
  )
end

function TASK.RESET_SCENARIO_TYPES_ENABLED()
  native.invoke(
    Type.Void, 5552, false
  )
end

function TASK.IS_PED_ACTIVE_IN_SCENARIO(ped)
  return native.invoke(
    Type.Bool, 5553, false,
    arg(Type.Ped, ped)
  )
end

function TASK.IS_PED_PLAYING_BASE_CLIP_IN_SCENARIO(ped)
  return native.invoke(
    Type.Bool, 5554, false,
    arg(Type.Ped, ped)
  )
end

function TASK.SET_PED_CAN_PLAY_AMBIENT_IDLES(ped, blockIdleClips, removeIdleClipIfPlaying)
  native.invoke(
    Type.Void, 5555, false,
    arg(Type.Ped, ped),
    arg(Type.Bool, blockIdleClips),
    arg(Type.Bool, removeIdleClipIfPlaying)
  )
end

function TASK.TASK_COMBAT_HATED_TARGETS_IN_AREA(ped, x, y, z, radius, combatFlags)
  native.invoke(
    Type.Void, 5556, false,
    arg(Type.Ped, ped),
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, z),
    arg(Type.Float, radius),
    arg(Type.Int, combatFlags)
  )
end

function TASK.TASK_COMBAT_HATED_TARGETS_AROUND_PED(ped, radius, combatFlags)
  native.invoke(
    Type.Void, 5557, false,
    arg(Type.Ped, ped),
    arg(Type.Float, radius),
    arg(Type.Int, combatFlags)
  )
end

function TASK.TASK_COMBAT_HATED_TARGETS_AROUND_PED_TIMED(ped, radius, time, combatFlags)
  native.invoke(
    Type.Void, 5558, false,
    arg(Type.Ped, ped),
    arg(Type.Float, radius),
    arg(Type.Int, time),
    arg(Type.Int, combatFlags)
  )
end

function TASK.TASK_THROW_PROJECTILE(ped, x, y, z, ignoreCollisionEntityIndex, createInvincibleProjectile)
  native.invoke(
    Type.Void, 5559, false,
    arg(Type.Ped, ped),
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, z),
    arg(Type.Int, ignoreCollisionEntityIndex),
    arg(Type.Bool, createInvincibleProjectile)
  )
end

function TASK.TASK_SWAP_WEAPON(ped, drawWeapon)
  native.invoke(
    Type.Void, 5560, false,
    arg(Type.Ped, ped),
    arg(Type.Bool, drawWeapon)
  )
end

function TASK.TASK_RELOAD_WEAPON(ped, drawWeapon)
  native.invoke(
    Type.Void, 5561, false,
    arg(Type.Ped, ped),
    arg(Type.Bool, drawWeapon)
  )
end

function TASK.IS_PED_GETTING_UP(ped)
  return native.invoke(
    Type.Bool, 5562, false,
    arg(Type.Ped, ped)
  )
end

function TASK.TASK_WRITHE(ped, target, minFireLoops, startState, forceShootOnGround, shootFromGroundTimer)
  native.invoke(
    Type.Void, 5563, false,
    arg(Type.Ped, ped),
    arg(Type.Ped, target),
    arg(Type.Int, minFireLoops),
    arg(Type.Int, startState),
    arg(Type.Bool, forceShootOnGround),
    arg(Type.Int, shootFromGroundTimer)
  )
end

function TASK.IS_PED_IN_WRITHE(ped)
  return native.invoke(
    Type.Bool, 5564, false,
    arg(Type.Ped, ped)
  )
end

function TASK.OPEN_PATROL_ROUTE(patrolRoute)
  native.invoke(
    Type.Void, 5565, false,
    arg(Type.String, patrolRoute)
  )
end

function TASK.CLOSE_PATROL_ROUTE()
  native.invoke(
    Type.Void, 5566, false
  )
end

function TASK.ADD_PATROL_ROUTE_NODE(nodeId, nodeType, posX, posY, posZ, headingX, headingY, headingZ, duration)
  native.invoke(
    Type.Void, 5567, false,
    arg(Type.Int, nodeId),
    arg(Type.String, nodeType),
    arg(Type.Float, posX),
    arg(Type.Float, posY),
    arg(Type.Float, posZ),
    arg(Type.Float, headingX),
    arg(Type.Float, headingY),
    arg(Type.Float, headingZ),
    arg(Type.Int, duration)
  )
end

function TASK.ADD_PATROL_ROUTE_LINK(nodeId1, nodeId2)
  native.invoke(
    Type.Void, 5568, false,
    arg(Type.Int, nodeId1),
    arg(Type.Int, nodeId2)
  )
end

function TASK.CREATE_PATROL_ROUTE()
  native.invoke(
    Type.Void, 5569, false
  )
end

function TASK.DELETE_PATROL_ROUTE(patrolRoute)
  native.invoke(
    Type.Void, 5570, false,
    arg(Type.String, patrolRoute)
  )
end

function TASK.GET_PATROL_TASK_INFO(ped, timeLeftAtNode, nodeId)
  return native.invoke(
    Type.Bool, 5571, false,
    arg(Type.Ped, ped),
    ref(Type.Int, timeLeftAtNode),
    ref(Type.Int, nodeId)
  )
end

function TASK.TASK_PATROL(ped, patrolRouteName, alertState, canChatToPeds, useHeadLookAt)
  native.invoke(
    Type.Void, 5572, false,
    arg(Type.Ped, ped),
    arg(Type.String, patrolRouteName),
    arg(Type.Int, alertState),
    arg(Type.Bool, canChatToPeds),
    arg(Type.Bool, useHeadLookAt)
  )
end

function TASK.TASK_STAY_IN_COVER(ped)
  native.invoke(
    Type.Void, 5573, false,
    arg(Type.Ped, ped)
  )
end

function TASK.ADD_VEHICLE_SUBTASK_ATTACK_COORD(ped, x, y, z)
  native.invoke(
    Type.Void, 5574, false,
    arg(Type.Ped, ped),
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, z)
  )
end

function TASK.ADD_VEHICLE_SUBTASK_ATTACK_PED(ped, target)
  native.invoke(
    Type.Void, 5575, false,
    arg(Type.Ped, ped),
    arg(Type.Ped, target)
  )
end

function TASK.TASK_VEHICLE_SHOOT_AT_PED(ped, target, fireTolerance)
  native.invoke(
    Type.Void, 5576, false,
    arg(Type.Ped, ped),
    arg(Type.Ped, target),
    arg(Type.Float, fireTolerance)
  )
end

function TASK.TASK_VEHICLE_AIM_AT_PED(ped, target)
  native.invoke(
    Type.Void, 5577, false,
    arg(Type.Ped, ped),
    arg(Type.Ped, target)
  )
end

function TASK.TASK_VEHICLE_SHOOT_AT_COORD(ped, x, y, z, fireTolerance)
  native.invoke(
    Type.Void, 5578, false,
    arg(Type.Ped, ped),
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, z),
    arg(Type.Float, fireTolerance)
  )
end

function TASK.TASK_VEHICLE_AIM_AT_COORD(ped, x, y, z)
  native.invoke(
    Type.Void, 5579, false,
    arg(Type.Ped, ped),
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, z)
  )
end

function TASK.TASK_VEHICLE_GOTO_NAVMESH(ped, vehicle, x, y, z, speed, behaviorFlag, stoppingRange)
  native.invoke(
    Type.Void, 5580, false,
    arg(Type.Ped, ped),
    arg(Type.Vehicle, vehicle),
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, z),
    arg(Type.Float, speed),
    arg(Type.Int, behaviorFlag),
    arg(Type.Float, stoppingRange)
  )
end

function TASK.TASK_GO_TO_COORD_WHILE_AIMING_AT_COORD(ped, x, y, z, aimAtX, aimAtY, aimAtZ, moveBlendRatio, shoot, targetRadius, slowDistance, useNavMesh, navFlags, instantBlendToAim, firingPattern)
  native.invoke(
    Type.Void, 5581, false,
    arg(Type.Ped, ped),
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, z),
    arg(Type.Float, aimAtX),
    arg(Type.Float, aimAtY),
    arg(Type.Float, aimAtZ),
    arg(Type.Float, moveBlendRatio),
    arg(Type.Bool, shoot),
    arg(Type.Float, targetRadius),
    arg(Type.Float, slowDistance),
    arg(Type.Bool, useNavMesh),
    arg(Type.Int, navFlags),
    arg(Type.Bool, instantBlendToAim),
    arg(Type.Hash, firingPattern)
  )
end

function TASK.TASK_GO_TO_COORD_WHILE_AIMING_AT_ENTITY(ped, x, y, z, aimAtID, moveBlendRatio, shoot, targetRadius, slowDistance, useNavMesh, navFlags, instantBlendToAim, firingPattern, time)
  native.invoke(
    Type.Void, 5582, false,
    arg(Type.Ped, ped),
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, z),
    arg(Type.Entity, aimAtID),
    arg(Type.Float, moveBlendRatio),
    arg(Type.Bool, shoot),
    arg(Type.Float, targetRadius),
    arg(Type.Float, slowDistance),
    arg(Type.Bool, useNavMesh),
    arg(Type.Int, navFlags),
    arg(Type.Bool, instantBlendToAim),
    arg(Type.Hash, firingPattern),
    arg(Type.Int, time)
  )
end

function TASK.TASK_GO_TO_COORD_AND_AIM_AT_HATED_ENTITIES_NEAR_COORD(pedHandle, goToLocationX, goToLocationY, goToLocationZ, focusLocationX, focusLocationY, focusLocationZ, speed, shootAtEnemies, distanceToStopAt, noRoadsDistance, useNavMesh, navFlags, taskFlags, firingPattern)
  native.invoke(
    Type.Void, 5583, false,
    arg(Type.Ped, pedHandle),
    arg(Type.Float, goToLocationX),
    arg(Type.Float, goToLocationY),
    arg(Type.Float, goToLocationZ),
    arg(Type.Float, focusLocationX),
    arg(Type.Float, focusLocationY),
    arg(Type.Float, focusLocationZ),
    arg(Type.Float, speed),
    arg(Type.Bool, shootAtEnemies),
    arg(Type.Float, distanceToStopAt),
    arg(Type.Float, noRoadsDistance),
    arg(Type.Bool, useNavMesh),
    arg(Type.Int, navFlags),
    arg(Type.Int, taskFlags),
    arg(Type.Hash, firingPattern)
  )
end

function TASK.TASK_GO_TO_ENTITY_WHILE_AIMING_AT_COORD(ped, entity, aimX, aimY, aimZ, moveBlendRatio, shoot, targetRadius, slowDistance, useNavMesh, instantBlendToAim, firingPattern)
  native.invoke(
    Type.Void, 5584, false,
    arg(Type.Ped, ped),
    arg(Type.Entity, entity),
    arg(Type.Float, aimX),
    arg(Type.Float, aimY),
    arg(Type.Float, aimZ),
    arg(Type.Float, moveBlendRatio),
    arg(Type.Bool, shoot),
    arg(Type.Float, targetRadius),
    arg(Type.Float, slowDistance),
    arg(Type.Bool, useNavMesh),
    arg(Type.Bool, instantBlendToAim),
    arg(Type.Hash, firingPattern)
  )
end

function TASK.TASK_GO_TO_ENTITY_WHILE_AIMING_AT_ENTITY(ped, entityToWalkTo, entityToAimAt, speed, shootatEntity, targetRadius, slowDistance, useNavMesh, instantBlendToAim, firingPattern)
  native.invoke(
    Type.Void, 5585, false,
    arg(Type.Ped, ped),
    arg(Type.Entity, entityToWalkTo),
    arg(Type.Entity, entityToAimAt),
    arg(Type.Float, speed),
    arg(Type.Bool, shootatEntity),
    arg(Type.Float, targetRadius),
    arg(Type.Float, slowDistance),
    arg(Type.Bool, useNavMesh),
    arg(Type.Bool, instantBlendToAim),
    arg(Type.Hash, firingPattern)
  )
end

function TASK.SET_HIGH_FALL_TASK(ped, minTime, maxTime, entryType)
  native.invoke(
    Type.Void, 5586, false,
    arg(Type.Ped, ped),
    arg(Type.Int, minTime),
    arg(Type.Int, maxTime),
    arg(Type.Int, entryType)
  )
end

function TASK.REQUEST_WAYPOINT_RECORDING(name)
  native.invoke(
    Type.Void, 5587, false,
    arg(Type.String, name)
  )
end

function TASK.GET_IS_WAYPOINT_RECORDING_LOADED(name)
  return native.invoke(
    Type.Bool, 5588, false,
    arg(Type.String, name)
  )
end

function TASK.REMOVE_WAYPOINT_RECORDING(name)
  native.invoke(
    Type.Void, 5589, false,
    arg(Type.String, name)
  )
end

function TASK.WAYPOINT_RECORDING_GET_NUM_POINTS(name, points)
  return native.invoke(
    Type.Bool, 5590, false,
    arg(Type.String, name),
    ref(Type.Int, points)
  )
end

function TASK.WAYPOINT_RECORDING_GET_COORD(name, point, coord)
  return native.invoke(
    Type.Bool, 5591, true,
    arg(Type.String, name),
    arg(Type.Int, point),
    ref(Type.Vector3, coord)
  )
end

function TASK.WAYPOINT_RECORDING_GET_SPEED_AT_POINT(name, point)
  return native.invoke(
    Type.Float, 5592, false,
    arg(Type.String, name),
    arg(Type.Int, point)
  )
end

function TASK.WAYPOINT_RECORDING_GET_CLOSEST_WAYPOINT(name, x, y, z, point)
  return native.invoke(
    Type.Bool, 5593, false,
    arg(Type.String, name),
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, z),
    ref(Type.Int, point)
  )
end

function TASK.TASK_FOLLOW_WAYPOINT_RECORDING(ped, name, p2, p3, p4)
  native.invoke(
    Type.Void, 5594, false,
    arg(Type.Ped, ped),
    arg(Type.String, name),
    arg(Type.Int, p2),
    arg(Type.Int, p3),
    arg(Type.Int, p4)
  )
end

function TASK.IS_WAYPOINT_PLAYBACK_GOING_ON_FOR_PED(ped)
  return native.invoke(
    Type.Bool, 5595, false,
    arg(Type.Ped, ped)
  )
end

function TASK.GET_PED_WAYPOINT_PROGRESS(ped)
  return native.invoke(
    Type.Int, 5596, false,
    arg(Type.Ped, ped)
  )
end

function TASK.GET_PED_WAYPOINT_DISTANCE(p0)
  return native.invoke(
    Type.Float, 5597, false,
    arg(Type.Any, p0)
  )
end

function TASK.SET_PED_WAYPOINT_ROUTE_OFFSET(ped, x, y, z)
  return native.invoke(
    Type.Bool, 5598, false,
    arg(Type.Ped, ped),
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, z)
  )
end

function TASK.GET_WAYPOINT_DISTANCE_ALONG_ROUTE(name, point)
  return native.invoke(
    Type.Float, 5599, false,
    arg(Type.String, name),
    arg(Type.Int, point)
  )
end

function TASK.WAYPOINT_PLAYBACK_GET_IS_PAUSED(p0)
  return native.invoke(
    Type.Bool, 5600, false,
    arg(Type.Any, p0)
  )
end

function TASK.WAYPOINT_PLAYBACK_PAUSE(p0, p1, p2)
  native.invoke(
    Type.Void, 5601, false,
    arg(Type.Any, p0),
    arg(Type.Bool, p1),
    arg(Type.Bool, p2)
  )
end

function TASK.WAYPOINT_PLAYBACK_RESUME(p0, p1, p2, p3)
  native.invoke(
    Type.Void, 5602, false,
    arg(Type.Any, p0),
    arg(Type.Bool, p1),
    arg(Type.Any, p2),
    arg(Type.Any, p3)
  )
end

function TASK.WAYPOINT_PLAYBACK_OVERRIDE_SPEED(p0, p1, p2)
  native.invoke(
    Type.Void, 5603, false,
    arg(Type.Any, p0),
    arg(Type.Float, p1),
    arg(Type.Bool, p2)
  )
end

function TASK.WAYPOINT_PLAYBACK_USE_DEFAULT_SPEED(p0)
  native.invoke(
    Type.Void, 5604, false,
    arg(Type.Any, p0)
  )
end

function TASK.USE_WAYPOINT_RECORDING_AS_ASSISTED_MOVEMENT_ROUTE(name, p1, p2, p3)
  native.invoke(
    Type.Void, 5605, false,
    arg(Type.String, name),
    arg(Type.Bool, p1),
    arg(Type.Float, p2),
    arg(Type.Float, p3)
  )
end

function TASK.WAYPOINT_PLAYBACK_START_AIMING_AT_PED(ped, target, p2)
  native.invoke(
    Type.Void, 5606, false,
    arg(Type.Ped, ped),
    arg(Type.Ped, target),
    arg(Type.Bool, p2)
  )
end

function TASK.WAYPOINT_PLAYBACK_START_AIMING_AT_COORD(ped, x, y, z, p4)
  native.invoke(
    Type.Void, 5607, false,
    arg(Type.Ped, ped),
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, z),
    arg(Type.Bool, p4)
  )
end

function TASK.WAYPOINT_PLAYBACK_START_SHOOTING_AT_PED(ped, ped2, p2, p3)
  native.invoke(
    Type.Void, 5608, false,
    arg(Type.Ped, ped),
    arg(Type.Ped, ped2),
    arg(Type.Bool, p2),
    arg(Type.Bool, p3)
  )
end

function TASK.WAYPOINT_PLAYBACK_START_SHOOTING_AT_COORD(ped, x, y, z, p4, firingPattern)
  native.invoke(
    Type.Void, 5609, false,
    arg(Type.Ped, ped),
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, z),
    arg(Type.Bool, p4),
    arg(Type.Hash, firingPattern)
  )
end

function TASK.WAYPOINT_PLAYBACK_STOP_AIMING_OR_SHOOTING(ped)
  native.invoke(
    Type.Void, 5610, false,
    arg(Type.Ped, ped)
  )
end

function TASK.ASSISTED_MOVEMENT_REQUEST_ROUTE(route)
  native.invoke(
    Type.Void, 5611, false,
    arg(Type.String, route)
  )
end

function TASK.ASSISTED_MOVEMENT_REMOVE_ROUTE(route)
  native.invoke(
    Type.Void, 5612, false,
    arg(Type.String, route)
  )
end

function TASK.ASSISTED_MOVEMENT_IS_ROUTE_LOADED(route)
  return native.invoke(
    Type.Bool, 5613, false,
    arg(Type.String, route)
  )
end

function TASK.ASSISTED_MOVEMENT_SET_ROUTE_PROPERTIES(route, props)
  native.invoke(
    Type.Void, 5614, false,
    arg(Type.String, route),
    arg(Type.Int, props)
  )
end

function TASK.ASSISTED_MOVEMENT_OVERRIDE_LOAD_DISTANCE_THIS_FRAME(dist)
  native.invoke(
    Type.Void, 5615, false,
    arg(Type.Float, dist)
  )
end

function TASK.TASK_VEHICLE_FOLLOW_WAYPOINT_RECORDING(ped, vehicle, WPRecording, p3, p4, p5, p6, p7, p8, p9)
  native.invoke(
    Type.Void, 5616, false,
    arg(Type.Ped, ped),
    arg(Type.Vehicle, vehicle),
    arg(Type.String, WPRecording),
    arg(Type.Int, p3),
    arg(Type.Int, p4),
    arg(Type.Int, p5),
    arg(Type.Int, p6),
    arg(Type.Float, p7),
    arg(Type.Bool, p8),
    arg(Type.Float, p9)
  )
end

function TASK.IS_WAYPOINT_PLAYBACK_GOING_ON_FOR_VEHICLE(vehicle)
  return native.invoke(
    Type.Bool, 5617, false,
    arg(Type.Vehicle, vehicle)
  )
end

function TASK.GET_VEHICLE_WAYPOINT_PROGRESS(vehicle)
  return native.invoke(
    Type.Int, 5618, false,
    arg(Type.Vehicle, vehicle)
  )
end

function TASK.GET_VEHICLE_WAYPOINT_TARGET_POINT(vehicle)
  return native.invoke(
    Type.Int, 5619, false,
    arg(Type.Vehicle, vehicle)
  )
end

function TASK.VEHICLE_WAYPOINT_PLAYBACK_PAUSE(vehicle)
  native.invoke(
    Type.Void, 5620, false,
    arg(Type.Vehicle, vehicle)
  )
end

function TASK.VEHICLE_WAYPOINT_PLAYBACK_RESUME(vehicle)
  native.invoke(
    Type.Void, 5621, false,
    arg(Type.Vehicle, vehicle)
  )
end

function TASK.VEHICLE_WAYPOINT_PLAYBACK_USE_DEFAULT_SPEED(vehicle)
  native.invoke(
    Type.Void, 5622, false,
    arg(Type.Vehicle, vehicle)
  )
end

function TASK.VEHICLE_WAYPOINT_PLAYBACK_OVERRIDE_SPEED(vehicle, speed)
  native.invoke(
    Type.Void, 5623, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Float, speed)
  )
end

function TASK.TASK_SET_BLOCKING_OF_NON_TEMPORARY_EVENTS(ped, toggle)
  native.invoke(
    Type.Void, 5624, false,
    arg(Type.Ped, ped),
    arg(Type.Bool, toggle)
  )
end

function TASK.TASK_FORCE_MOTION_STATE(ped, state, forceRestart)
  native.invoke(
    Type.Void, 5625, false,
    arg(Type.Ped, ped),
    arg(Type.Hash, state),
    arg(Type.Bool, forceRestart)
  )
end

function TASK.TASK_MOVE_NETWORK_BY_NAME(ped, task, multiplier, allowOverrideCloneUpdate, animDict, flags)
  native.invoke(
    Type.Void, 5626, false,
    arg(Type.Ped, ped),
    arg(Type.String, task),
    arg(Type.Float, multiplier),
    arg(Type.Bool, allowOverrideCloneUpdate),
    arg(Type.String, animDict),
    arg(Type.Int, flags)
  )
end

function TASK.TASK_MOVE_NETWORK_ADVANCED_BY_NAME(ped, network, x, y, z, rotX, rotY, rotZ, rotOrder, blendDuration, allowOverrideCloneUpdate, animDict, flags)
  native.invoke(
    Type.Void, 5627, false,
    arg(Type.Ped, ped),
    arg(Type.String, network),
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, z),
    arg(Type.Float, rotX),
    arg(Type.Float, rotY),
    arg(Type.Float, rotZ),
    arg(Type.Int, rotOrder),
    arg(Type.Float, blendDuration),
    arg(Type.Bool, allowOverrideCloneUpdate),
    arg(Type.String, animDict),
    arg(Type.Int, flags)
  )
end

function TASK.TASK_MOVE_NETWORK_BY_NAME_WITH_INIT_PARAMS(ped, network, initialParameters, blendDuration, allowOverrideCloneUpdate, animDict, flags)
  native.invoke(
    Type.Void, 5628, false,
    arg(Type.Ped, ped),
    arg(Type.String, network),
    ref(Type.Int, initialParameters),
    arg(Type.Float, blendDuration),
    arg(Type.Bool, allowOverrideCloneUpdate),
    arg(Type.String, animDict),
    arg(Type.Int, flags)
  )
end

function TASK.TASK_MOVE_NETWORK_ADVANCED_BY_NAME_WITH_INIT_PARAMS(ped, network, initialParameters, x, y, z, rotX, rotY, rotZ, rotOrder, blendDuration, allowOverrideCloneUpdate, dictionary, flags)
  native.invoke(
    Type.Void, 5629, false,
    arg(Type.Ped, ped),
    arg(Type.String, network),
    ref(Type.Int, initialParameters),
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, z),
    arg(Type.Float, rotX),
    arg(Type.Float, rotY),
    arg(Type.Float, rotZ),
    arg(Type.Int, rotOrder),
    arg(Type.Float, blendDuration),
    arg(Type.Bool, allowOverrideCloneUpdate),
    arg(Type.String, dictionary),
    arg(Type.Int, flags)
  )
end

function TASK.IS_TASK_MOVE_NETWORK_ACTIVE(ped)
  return native.invoke(
    Type.Bool, 5630, false,
    arg(Type.Ped, ped)
  )
end

function TASK.IS_TASK_MOVE_NETWORK_READY_FOR_TRANSITION(ped)
  return native.invoke(
    Type.Bool, 5631, false,
    arg(Type.Ped, ped)
  )
end

function TASK.REQUEST_TASK_MOVE_NETWORK_STATE_TRANSITION(ped, name)
  return native.invoke(
    Type.Bool, 5632, false,
    arg(Type.Ped, ped),
    arg(Type.String, name)
  )
end

function TASK.SET_EXPECTED_CLONE_NEXT_TASK_MOVE_NETWORK_STATE(ped, state)
  return native.invoke(
    Type.Bool, 5633, false,
    arg(Type.Ped, ped),
    arg(Type.String, state)
  )
end

function TASK.GET_TASK_MOVE_NETWORK_STATE(ped)
  return native.invoke(
    Type.String, 5634, false,
    arg(Type.Ped, ped)
  )
end

function TASK.SET_TASK_MOVE_NETWORK_ANIM_SET(ped, clipSet, variableClipSet)
  native.invoke(
    Type.Void, 5635, false,
    arg(Type.Ped, ped),
    arg(Type.Hash, clipSet),
    arg(Type.Hash, variableClipSet)
  )
end

function TASK.SET_TASK_MOVE_NETWORK_SIGNAL_FLOAT(ped, signalName, value)
  native.invoke(
    Type.Void, 5636, false,
    arg(Type.Ped, ped),
    arg(Type.String, signalName),
    arg(Type.Float, value)
  )
end

function TASK.SET_TASK_MOVE_NETWORK_SIGNAL_LOCAL_FLOAT(ped, signalName, value)
  native.invoke(
    Type.Void, 5637, false,
    arg(Type.Ped, ped),
    arg(Type.String, signalName),
    arg(Type.Float, value)
  )
end

function TASK.SET_TASK_MOVE_NETWORK_SIGNAL_FLOAT_LERP_RATE(ped, signalName, value)
  native.invoke(
    Type.Void, 5638, false,
    arg(Type.Ped, ped),
    arg(Type.String, signalName),
    arg(Type.Float, value)
  )
end

function TASK.SET_TASK_MOVE_NETWORK_SIGNAL_BOOL(ped, signalName, value)
  native.invoke(
    Type.Void, 5639, false,
    arg(Type.Ped, ped),
    arg(Type.String, signalName),
    arg(Type.Bool, value)
  )
end

function TASK.GET_TASK_MOVE_NETWORK_SIGNAL_FLOAT(ped, signalName)
  return native.invoke(
    Type.Float, 5640, false,
    arg(Type.Ped, ped),
    arg(Type.String, signalName)
  )
end

function TASK.GET_TASK_MOVE_NETWORK_SIGNAL_BOOL(ped, signalName)
  return native.invoke(
    Type.Bool, 5641, false,
    arg(Type.Ped, ped),
    arg(Type.String, signalName)
  )
end

function TASK.GET_TASK_MOVE_NETWORK_EVENT(ped, eventName)
  return native.invoke(
    Type.Bool, 5642, false,
    arg(Type.Ped, ped),
    arg(Type.String, eventName)
  )
end

function TASK.SET_TASK_MOVE_NETWORK_ENABLE_COLLISION_ON_NETWORK_CLONE_WHEN_FIXED(ped, enable)
  return native.invoke(
    Type.Bool, 5643, false,
    arg(Type.Ped, ped),
    arg(Type.Bool, enable)
  )
end

function TASK._SET_SCRIPT_TASK_ENABLE_COLLISION_ON_NETWORK_CLONE_WHEN_FIXED(ped, enable)
  native.invoke(
    Type.Void, 5644, false,
    arg(Type.Ped, ped),
    arg(Type.Bool, enable)
  )
end

function TASK.IS_MOVE_BLEND_RATIO_STILL(ped)
  return native.invoke(
    Type.Bool, 5645, false,
    arg(Type.Ped, ped)
  )
end

function TASK.IS_MOVE_BLEND_RATIO_WALKING(ped)
  return native.invoke(
    Type.Bool, 5646, false,
    arg(Type.Ped, ped)
  )
end

function TASK.IS_MOVE_BLEND_RATIO_RUNNING(ped)
  return native.invoke(
    Type.Bool, 5647, false,
    arg(Type.Ped, ped)
  )
end

function TASK.IS_MOVE_BLEND_RATIO_SPRINTING(ped)
  return native.invoke(
    Type.Bool, 5648, false,
    arg(Type.Ped, ped)
  )
end

function TASK.IS_PED_STILL(ped)
  return native.invoke(
    Type.Bool, 5649, false,
    arg(Type.Ped, ped)
  )
end

function TASK.IS_PED_WALKING(ped)
  return native.invoke(
    Type.Bool, 5650, false,
    arg(Type.Ped, ped)
  )
end

function TASK.IS_PED_RUNNING(ped)
  return native.invoke(
    Type.Bool, 5651, false,
    arg(Type.Ped, ped)
  )
end

function TASK.IS_PED_SPRINTING(ped)
  return native.invoke(
    Type.Bool, 5652, false,
    arg(Type.Ped, ped)
  )
end

function TASK.IS_PED_STRAFING(ped)
  return native.invoke(
    Type.Bool, 5653, false,
    arg(Type.Ped, ped)
  )
end

function TASK.TASK_SYNCHRONIZED_SCENE(ped, scene, animDictionary, animationName, blendIn, blendOut, flags, ragdollBlockingFlags, moverBlendDelta, ikFlags)
  native.invoke(
    Type.Void, 5654, false,
    arg(Type.Ped, ped),
    arg(Type.Int, scene),
    arg(Type.String, animDictionary),
    arg(Type.String, animationName),
    arg(Type.Float, blendIn),
    arg(Type.Float, blendOut),
    arg(Type.Int, flags),
    arg(Type.Int, ragdollBlockingFlags),
    arg(Type.Float, moverBlendDelta),
    arg(Type.Int, ikFlags)
  )
end

function TASK.TASK_AGITATED_ACTION_CONFRONT_RESPONSE(ped, ped2)
  native.invoke(
    Type.Void, 5655, false,
    arg(Type.Ped, ped),
    arg(Type.Ped, ped2)
  )
end

function TASK.TASK_SWEEP_AIM_ENTITY(ped, animDict, lowAnimName, medAnimName, hiAnimName, runtime, targetEntity, turnRate, blendInDuration)
  native.invoke(
    Type.Void, 5656, false,
    arg(Type.Ped, ped),
    arg(Type.String, animDict),
    arg(Type.String, lowAnimName),
    arg(Type.String, medAnimName),
    arg(Type.String, hiAnimName),
    arg(Type.Int, runtime),
    arg(Type.Entity, targetEntity),
    arg(Type.Float, turnRate),
    arg(Type.Float, blendInDuration)
  )
end

function TASK.UPDATE_TASK_SWEEP_AIM_ENTITY(ped, entity)
  native.invoke(
    Type.Void, 5657, false,
    arg(Type.Ped, ped),
    arg(Type.Entity, entity)
  )
end

function TASK.TASK_SWEEP_AIM_POSITION(ped, animDict, lowAnimName, medAnimName, hiAnimName, runtime, x, y, z, turnRate, blendInDuration)
  native.invoke(
    Type.Void, 5658, false,
    arg(Type.Ped, ped),
    arg(Type.String, animDict),
    arg(Type.String, lowAnimName),
    arg(Type.String, medAnimName),
    arg(Type.String, hiAnimName),
    arg(Type.Int, runtime),
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, z),
    arg(Type.Float, turnRate),
    arg(Type.Float, blendInDuration)
  )
end

function TASK.UPDATE_TASK_SWEEP_AIM_POSITION(ped, x, y, z)
  native.invoke(
    Type.Void, 5659, false,
    arg(Type.Ped, ped),
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, z)
  )
end

function TASK.TASK_ARREST_PED(ped, target)
  native.invoke(
    Type.Void, 5660, false,
    arg(Type.Ped, ped),
    arg(Type.Ped, target)
  )
end

function TASK.IS_PED_RUNNING_ARREST_TASK(ped)
  return native.invoke(
    Type.Bool, 5661, false,
    arg(Type.Ped, ped)
  )
end

function TASK.IS_PED_BEING_ARRESTED(ped)
  return native.invoke(
    Type.Bool, 5662, false,
    arg(Type.Ped, ped)
  )
end

function TASK.UNCUFF_PED(ped)
  native.invoke(
    Type.Void, 5663, false,
    arg(Type.Ped, ped)
  )
end

function TASK.IS_PED_CUFFED(ped)
  return native.invoke(
    Type.Bool, 5664, false,
    arg(Type.Ped, ped)
  )
end


VEHICLE = {}

function VEHICLE.CREATE_VEHICLE(modelHash, x, y, z, heading, isNetwork, bScriptHostVeh, p7)
  return native.invoke(
    Type.Vehicle, 5665, false,
    arg(Type.Hash, modelHash),
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, z),
    arg(Type.Float, heading),
    arg(Type.Bool, isNetwork),
    arg(Type.Bool, bScriptHostVeh),
    arg(Type.Bool, p7)
  )
end

function VEHICLE.DELETE_VEHICLE(vehicle)
  native.invoke(
    Type.Void, 5666, false,
    ref(Type.Vehicle, vehicle)
  )
end

function VEHICLE.SET_VEHICLE_ALLOW_HOMING_MISSLE_LOCKON(vehicle, toggle, p2)
  native.invoke(
    Type.Void, 5667, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Bool, toggle),
    arg(Type.Bool, p2)
  )
end

function VEHICLE.SET_VEHICLE_ALLOW_HOMING_MISSLE_LOCKON_SYNCED(vehicle, canBeLockedOn, p2)
  native.invoke(
    Type.Void, 5668, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Bool, canBeLockedOn),
    arg(Type.Bool, p2)
  )
end

function VEHICLE.SET_VEHICLE_ALLOW_NO_PASSENGERS_LOCKON(veh, toggle)
  native.invoke(
    Type.Void, 5669, false,
    arg(Type.Vehicle, veh),
    arg(Type.Bool, toggle)
  )
end

function VEHICLE.GET_VEHICLE_HOMING_LOCKON_STATE(vehicle)
  return native.invoke(
    Type.Int, 5670, false,
    arg(Type.Vehicle, vehicle)
  )
end

function VEHICLE.GET_VEHICLE_HOMING_LOCKEDONTO_STATE(p0)
  return native.invoke(
    Type.Int, 5671, false,
    arg(Type.Any, p0)
  )
end

function VEHICLE.SET_VEHICLE_HOMING_LOCKEDONTO_STATE(p0, p1)
  native.invoke(
    Type.Void, 5672, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1)
  )
end

function VEHICLE.IS_VEHICLE_MODEL(vehicle, model)
  return native.invoke(
    Type.Bool, 5673, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Hash, model)
  )
end

function VEHICLE.DOES_SCRIPT_VEHICLE_GENERATOR_EXIST(vehicleGenerator)
  return native.invoke(
    Type.Bool, 5674, false,
    arg(Type.Int, vehicleGenerator)
  )
end

function VEHICLE.CREATE_SCRIPT_VEHICLE_GENERATOR(x, y, z, heading, p4, p5, modelHash, p7, p8, p9, p10, p11, p12, p13, p14, p15, p16)
  return native.invoke(
    Type.Int, 5675, false,
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, z),
    arg(Type.Float, heading),
    arg(Type.Float, p4),
    arg(Type.Float, p5),
    arg(Type.Hash, modelHash),
    arg(Type.Int, p7),
    arg(Type.Int, p8),
    arg(Type.Int, p9),
    arg(Type.Int, p10),
    arg(Type.Bool, p11),
    arg(Type.Bool, p12),
    arg(Type.Bool, p13),
    arg(Type.Bool, p14),
    arg(Type.Bool, p15),
    arg(Type.Int, p16)
  )
end

function VEHICLE.DELETE_SCRIPT_VEHICLE_GENERATOR(vehicleGenerator)
  native.invoke(
    Type.Void, 5676, false,
    arg(Type.Int, vehicleGenerator)
  )
end

function VEHICLE.SET_SCRIPT_VEHICLE_GENERATOR(vehicleGenerator, enabled)
  native.invoke(
    Type.Void, 5677, false,
    arg(Type.Int, vehicleGenerator),
    arg(Type.Bool, enabled)
  )
end

function VEHICLE.SET_ALL_VEHICLE_GENERATORS_ACTIVE_IN_AREA(x1, y1, z1, x2, y2, z2, toggle, p7)
  native.invoke(
    Type.Void, 5678, false,
    arg(Type.Float, x1),
    arg(Type.Float, y1),
    arg(Type.Float, z1),
    arg(Type.Float, x2),
    arg(Type.Float, y2),
    arg(Type.Float, z2),
    arg(Type.Bool, toggle),
    arg(Type.Bool, p7)
  )
end

function VEHICLE.SET_ALL_VEHICLE_GENERATORS_ACTIVE()
  native.invoke(
    Type.Void, 5679, false
  )
end

function VEHICLE.SET_ALL_LOW_PRIORITY_VEHICLE_GENERATORS_ACTIVE(active)
  native.invoke(
    Type.Void, 5680, false,
    arg(Type.Bool, active)
  )
end

function VEHICLE.SET_VEHICLE_GENERATOR_AREA_OF_INTEREST(x, y, z, radius)
  native.invoke(
    Type.Void, 5681, false,
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, z),
    arg(Type.Float, radius)
  )
end

function VEHICLE.CLEAR_VEHICLE_GENERATOR_AREA_OF_INTEREST()
  native.invoke(
    Type.Void, 5682, false
  )
end

function VEHICLE.SET_VEHICLE_ON_GROUND_PROPERLY(vehicle, p1)
  return native.invoke(
    Type.Bool, 5683, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Float, p1)
  )
end

function VEHICLE.SET_VEHICLE_USE_CUTSCENE_WHEEL_COMPRESSION(p0, p1, p2, p3)
  return native.invoke(
    Type.Bool, 5684, false,
    arg(Type.Vehicle, p0),
    arg(Type.Bool, p1),
    arg(Type.Bool, p2),
    arg(Type.Bool, p3)
  )
end

function VEHICLE.IS_VEHICLE_STUCK_ON_ROOF(vehicle)
  return native.invoke(
    Type.Bool, 5685, false,
    arg(Type.Vehicle, vehicle)
  )
end

function VEHICLE.ADD_VEHICLE_UPSIDEDOWN_CHECK(vehicle)
  native.invoke(
    Type.Void, 5686, false,
    arg(Type.Vehicle, vehicle)
  )
end

function VEHICLE.REMOVE_VEHICLE_UPSIDEDOWN_CHECK(vehicle)
  native.invoke(
    Type.Void, 5687, false,
    arg(Type.Vehicle, vehicle)
  )
end

function VEHICLE.IS_VEHICLE_STOPPED(vehicle)
  return native.invoke(
    Type.Bool, 5688, false,
    arg(Type.Vehicle, vehicle)
  )
end

function VEHICLE.GET_VEHICLE_NUMBER_OF_PASSENGERS(vehicle, includeDriver, includeDeadOccupants)
  return native.invoke(
    Type.Int, 5689, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Bool, includeDriver),
    arg(Type.Bool, includeDeadOccupants)
  )
end

function VEHICLE.GET_VEHICLE_MAX_NUMBER_OF_PASSENGERS(vehicle)
  return native.invoke(
    Type.Int, 5690, false,
    arg(Type.Vehicle, vehicle)
  )
end

function VEHICLE.GET_VEHICLE_MODEL_NUMBER_OF_SEATS(modelHash)
  return native.invoke(
    Type.Int, 5691, false,
    arg(Type.Hash, modelHash)
  )
end

function VEHICLE.IS_SEAT_WARP_ONLY(vehicle, seatIndex)
  return native.invoke(
    Type.Bool, 5692, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Int, seatIndex)
  )
end

function VEHICLE.IS_TURRET_SEAT(vehicle, seatIndex)
  return native.invoke(
    Type.Bool, 5693, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Int, seatIndex)
  )
end

function VEHICLE.DOES_VEHICLE_ALLOW_RAPPEL(vehicle)
  return native.invoke(
    Type.Bool, 5694, false,
    arg(Type.Vehicle, vehicle)
  )
end

function VEHICLE.SET_VEHICLE_DENSITY_MULTIPLIER_THIS_FRAME(multiplier)
  native.invoke(
    Type.Void, 5695, false,
    arg(Type.Float, multiplier)
  )
end

function VEHICLE.SET_RANDOM_VEHICLE_DENSITY_MULTIPLIER_THIS_FRAME(multiplier)
  native.invoke(
    Type.Void, 5696, false,
    arg(Type.Float, multiplier)
  )
end

function VEHICLE.SET_PARKED_VEHICLE_DENSITY_MULTIPLIER_THIS_FRAME(multiplier)
  native.invoke(
    Type.Void, 5697, false,
    arg(Type.Float, multiplier)
  )
end

function VEHICLE.SET_DISABLE_RANDOM_TRAINS_THIS_FRAME(toggle)
  native.invoke(
    Type.Void, 5698, false,
    arg(Type.Bool, toggle)
  )
end

function VEHICLE.SET_AMBIENT_VEHICLE_RANGE_MULTIPLIER_THIS_FRAME(value)
  native.invoke(
    Type.Void, 5699, false,
    arg(Type.Float, value)
  )
end

function VEHICLE.SET_FAR_DRAW_VEHICLES(toggle)
  native.invoke(
    Type.Void, 5700, false,
    arg(Type.Bool, toggle)
  )
end

function VEHICLE.SET_NUMBER_OF_PARKED_VEHICLES(value)
  native.invoke(
    Type.Void, 5701, false,
    arg(Type.Int, value)
  )
end

function VEHICLE.SET_VEHICLE_DOORS_LOCKED(vehicle, doorLockStatus)
  native.invoke(
    Type.Void, 5702, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Int, doorLockStatus)
  )
end

function VEHICLE.SET_VEHICLE_INDIVIDUAL_DOORS_LOCKED(vehicle, doorId, doorLockStatus)
  native.invoke(
    Type.Void, 5703, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Int, doorId),
    arg(Type.Int, doorLockStatus)
  )
end

function VEHICLE.SET_VEHICLE_HAS_MUTED_SIRENS(vehicle, toggle)
  native.invoke(
    Type.Void, 5704, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Bool, toggle)
  )
end

function VEHICLE.SET_VEHICLE_DOORS_LOCKED_FOR_PLAYER(vehicle, player, toggle)
  native.invoke(
    Type.Void, 5705, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Player, player),
    arg(Type.Bool, toggle)
  )
end

function VEHICLE.GET_VEHICLE_DOORS_LOCKED_FOR_PLAYER(vehicle, player)
  return native.invoke(
    Type.Bool, 5706, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Player, player)
  )
end

function VEHICLE.SET_VEHICLE_DOORS_LOCKED_FOR_ALL_PLAYERS(vehicle, toggle)
  native.invoke(
    Type.Void, 5707, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Bool, toggle)
  )
end

function VEHICLE.SET_VEHICLE_DOORS_LOCKED_FOR_NON_SCRIPT_PLAYERS(vehicle, toggle)
  native.invoke(
    Type.Void, 5708, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Bool, toggle)
  )
end

function VEHICLE.SET_VEHICLE_DOORS_LOCKED_FOR_TEAM(vehicle, team, toggle)
  native.invoke(
    Type.Void, 5709, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Int, team),
    arg(Type.Bool, toggle)
  )
end

function VEHICLE.SET_VEHICLE_DOORS_LOCKED_FOR_ALL_TEAMS(vehicle, toggle)
  native.invoke(
    Type.Void, 5710, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Bool, toggle)
  )
end

function VEHICLE.SET_VEHICLE_DONT_TERMINATE_TASK_WHEN_ACHIEVED(vehicle)
  native.invoke(
    Type.Void, 5711, false,
    arg(Type.Vehicle, vehicle)
  )
end

function VEHICLE._SET_VEHICLE_MAX_LAUNCH_ENGINE_REVS(vehicle, modifier)
  native.invoke(
    Type.Void, 5712, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Float, modifier)
  )
end

function VEHICLE._GET_VEHICLE_THROTTLE(vehicle)
  return native.invoke(
    Type.Float, 5713, false,
    arg(Type.Vehicle, vehicle)
  )
end

function VEHICLE.EXPLODE_VEHICLE(vehicle, isAudible, isInvisible)
  native.invoke(
    Type.Void, 5714, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Bool, isAudible),
    arg(Type.Bool, isInvisible)
  )
end

function VEHICLE.SET_VEHICLE_OUT_OF_CONTROL(vehicle, killDriver, explodeOnImpact)
  native.invoke(
    Type.Void, 5715, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Bool, killDriver),
    arg(Type.Bool, explodeOnImpact)
  )
end

function VEHICLE.SET_VEHICLE_TIMED_EXPLOSION(vehicle, ped, toggle)
  native.invoke(
    Type.Void, 5716, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Ped, ped),
    arg(Type.Bool, toggle)
  )
end

function VEHICLE.ADD_VEHICLE_PHONE_EXPLOSIVE_DEVICE(vehicle)
  native.invoke(
    Type.Void, 5717, false,
    arg(Type.Vehicle, vehicle)
  )
end

function VEHICLE.CLEAR_VEHICLE_PHONE_EXPLOSIVE_DEVICE()
  native.invoke(
    Type.Void, 5718, false
  )
end

function VEHICLE.HAS_VEHICLE_PHONE_EXPLOSIVE_DEVICE()
  return native.invoke(
    Type.Bool, 5719, false
  )
end

function VEHICLE.DETONATE_VEHICLE_PHONE_EXPLOSIVE_DEVICE()
  native.invoke(
    Type.Void, 5720, false
  )
end

function VEHICLE.HAVE_VEHICLE_REAR_DOORS_BEEN_BLOWN_OPEN_BY_STICKYBOMB(vehicle)
  return native.invoke(
    Type.Bool, 5721, false,
    arg(Type.Vehicle, vehicle)
  )
end

function VEHICLE.SET_TAXI_LIGHTS(vehicle, state)
  native.invoke(
    Type.Void, 5722, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Bool, state)
  )
end

function VEHICLE.IS_TAXI_LIGHT_ON(vehicle)
  return native.invoke(
    Type.Bool, 5723, false,
    arg(Type.Vehicle, vehicle)
  )
end

function VEHICLE.IS_VEHICLE_IN_GARAGE_AREA(garageName, vehicle)
  return native.invoke(
    Type.Bool, 5724, false,
    arg(Type.String, garageName),
    arg(Type.Vehicle, vehicle)
  )
end

function VEHICLE.SET_VEHICLE_COLOURS(vehicle, colorPrimary, colorSecondary)
  native.invoke(
    Type.Void, 5725, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Int, colorPrimary),
    arg(Type.Int, colorSecondary)
  )
end

function VEHICLE.SET_VEHICLE_FULLBEAM(vehicle, toggle)
  native.invoke(
    Type.Void, 5726, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Bool, toggle)
  )
end

function VEHICLE.SET_VEHICLE_IS_RACING(vehicle, toggle)
  native.invoke(
    Type.Void, 5727, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Bool, toggle)
  )
end

function VEHICLE.SET_VEHICLE_CUSTOM_PRIMARY_COLOUR(vehicle, r, g, b)
  native.invoke(
    Type.Void, 5728, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Int, r),
    arg(Type.Int, g),
    arg(Type.Int, b)
  )
end

function VEHICLE.GET_VEHICLE_CUSTOM_PRIMARY_COLOUR(vehicle, r, g, b)
  native.invoke(
    Type.Void, 5729, false,
    arg(Type.Vehicle, vehicle),
    ref(Type.Int, r),
    ref(Type.Int, g),
    ref(Type.Int, b)
  )
end

function VEHICLE.CLEAR_VEHICLE_CUSTOM_PRIMARY_COLOUR(vehicle)
  native.invoke(
    Type.Void, 5730, false,
    arg(Type.Vehicle, vehicle)
  )
end

function VEHICLE.GET_IS_VEHICLE_PRIMARY_COLOUR_CUSTOM(vehicle)
  return native.invoke(
    Type.Bool, 5731, false,
    arg(Type.Vehicle, vehicle)
  )
end

function VEHICLE.SET_VEHICLE_CUSTOM_SECONDARY_COLOUR(vehicle, r, g, b)
  native.invoke(
    Type.Void, 5732, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Int, r),
    arg(Type.Int, g),
    arg(Type.Int, b)
  )
end

function VEHICLE.GET_VEHICLE_CUSTOM_SECONDARY_COLOUR(vehicle, r, g, b)
  native.invoke(
    Type.Void, 5733, false,
    arg(Type.Vehicle, vehicle),
    ref(Type.Int, r),
    ref(Type.Int, g),
    ref(Type.Int, b)
  )
end

function VEHICLE.CLEAR_VEHICLE_CUSTOM_SECONDARY_COLOUR(vehicle)
  native.invoke(
    Type.Void, 5734, false,
    arg(Type.Vehicle, vehicle)
  )
end

function VEHICLE.GET_IS_VEHICLE_SECONDARY_COLOUR_CUSTOM(vehicle)
  return native.invoke(
    Type.Bool, 5735, false,
    arg(Type.Vehicle, vehicle)
  )
end

function VEHICLE.SET_VEHICLE_ENVEFF_SCALE(vehicle, fade)
  native.invoke(
    Type.Void, 5736, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Float, fade)
  )
end

function VEHICLE.GET_VEHICLE_ENVEFF_SCALE(vehicle)
  return native.invoke(
    Type.Float, 5737, false,
    arg(Type.Vehicle, vehicle)
  )
end

function VEHICLE.SET_CAN_RESPRAY_VEHICLE(vehicle, state)
  native.invoke(
    Type.Void, 5738, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Bool, state)
  )
end

function VEHICLE.SET_GOON_BOSS_VEHICLE(vehicle, toggle)
  native.invoke(
    Type.Void, 5739, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Bool, toggle)
  )
end

function VEHICLE.SET_OPEN_REAR_DOORS_ON_EXPLOSION(vehicle, toggle)
  native.invoke(
    Type.Void, 5740, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Bool, toggle)
  )
end

function VEHICLE.FORCE_SUBMARINE_SURFACE_MODE(vehicle, toggle)
  native.invoke(
    Type.Void, 5741, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Bool, toggle)
  )
end

function VEHICLE.FORCE_SUBMARINE_NEURTAL_BUOYANCY(p0, p1)
  native.invoke(
    Type.Void, 5742, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1)
  )
end

function VEHICLE.SET_SUBMARINE_CRUSH_DEPTHS(vehicle, p1, depth1, depth2, depth3)
  native.invoke(
    Type.Void, 5743, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Bool, p1),
    arg(Type.Float, depth1),
    arg(Type.Float, depth2),
    arg(Type.Float, depth3)
  )
end

function VEHICLE.GET_SUBMARINE_IS_UNDER_DESIGN_DEPTH(submarine)
  return native.invoke(
    Type.Bool, 5744, false,
    arg(Type.Vehicle, submarine)
  )
end

function VEHICLE.GET_SUBMARINE_NUMBER_OF_AIR_LEAKS(submarine)
  return native.invoke(
    Type.Int, 5745, false,
    arg(Type.Vehicle, submarine)
  )
end

function VEHICLE.SET_BOAT_IGNORE_LAND_PROBES(p0, p1)
  native.invoke(
    Type.Void, 5746, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1)
  )
end

function VEHICLE._SET_BOUNDS_AFFECT_WATER_PROBES(vehicle, toggle)
  native.invoke(
    Type.Void, 5747, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Bool, toggle)
  )
end

function VEHICLE.SET_BOAT_ANCHOR(vehicle, toggle)
  native.invoke(
    Type.Void, 5748, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Bool, toggle)
  )
end

function VEHICLE.CAN_ANCHOR_BOAT_HERE(vehicle)
  return native.invoke(
    Type.Bool, 5749, false,
    arg(Type.Vehicle, vehicle)
  )
end

function VEHICLE.CAN_ANCHOR_BOAT_HERE_IGNORE_PLAYERS(vehicle)
  return native.invoke(
    Type.Bool, 5750, false,
    arg(Type.Vehicle, vehicle)
  )
end

function VEHICLE.SET_BOAT_REMAINS_ANCHORED_WHILE_PLAYER_IS_DRIVER(vehicle, toggle)
  native.invoke(
    Type.Void, 5751, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Bool, toggle)
  )
end

function VEHICLE.SET_FORCE_LOW_LOD_ANCHOR_MODE(vehicle, p1)
  native.invoke(
    Type.Void, 5752, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Bool, p1)
  )
end

function VEHICLE.SET_BOAT_LOW_LOD_ANCHOR_DISTANCE(vehicle, value)
  native.invoke(
    Type.Void, 5753, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Float, value)
  )
end

function VEHICLE.IS_BOAT_ANCHORED(vehicle)
  return native.invoke(
    Type.Bool, 5754, false,
    arg(Type.Vehicle, vehicle)
  )
end

function VEHICLE.SET_BOAT_SINKS_WHEN_WRECKED(vehicle, toggle)
  native.invoke(
    Type.Void, 5755, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Bool, toggle)
  )
end

function VEHICLE.SET_BOAT_WRECKED(vehicle)
  native.invoke(
    Type.Void, 5756, false,
    arg(Type.Vehicle, vehicle)
  )
end

function VEHICLE.SET_VEHICLE_SIREN(vehicle, toggle)
  native.invoke(
    Type.Void, 5757, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Bool, toggle)
  )
end

function VEHICLE.IS_VEHICLE_SIREN_ON(vehicle)
  return native.invoke(
    Type.Bool, 5758, false,
    arg(Type.Vehicle, vehicle)
  )
end

function VEHICLE.IS_VEHICLE_SIREN_AUDIO_ON(vehicle)
  return native.invoke(
    Type.Bool, 5759, false,
    arg(Type.Vehicle, vehicle)
  )
end

function VEHICLE.SET_VEHICLE_STRONG(vehicle, toggle)
  native.invoke(
    Type.Void, 5760, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Bool, toggle)
  )
end

function VEHICLE.REMOVE_VEHICLE_STUCK_CHECK(vehicle)
  native.invoke(
    Type.Void, 5761, false,
    arg(Type.Vehicle, vehicle)
  )
end

function VEHICLE.GET_VEHICLE_COLOURS(vehicle, colorPrimary, colorSecondary)
  native.invoke(
    Type.Void, 5762, false,
    arg(Type.Vehicle, vehicle),
    ref(Type.Int, colorPrimary),
    ref(Type.Int, colorSecondary)
  )
end

function VEHICLE.IS_VEHICLE_SEAT_FREE(vehicle, seatIndex, isTaskRunning)
  return native.invoke(
    Type.Bool, 5763, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Int, seatIndex),
    arg(Type.Bool, isTaskRunning)
  )
end

function VEHICLE.GET_PED_IN_VEHICLE_SEAT(vehicle, seatIndex, p2)
  return native.invoke(
    Type.Ped, 5764, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Int, seatIndex),
    arg(Type.Bool, p2)
  )
end

function VEHICLE.GET_LAST_PED_IN_VEHICLE_SEAT(vehicle, seatIndex)
  return native.invoke(
    Type.Ped, 5765, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Int, seatIndex)
  )
end

function VEHICLE.GET_VEHICLE_LIGHTS_STATE(vehicle, lightsOn, highbeamsOn)
  return native.invoke(
    Type.Bool, 5766, false,
    arg(Type.Vehicle, vehicle),
    ref(Type.Bool, lightsOn),
    ref(Type.Bool, highbeamsOn)
  )
end

function VEHICLE.IS_VEHICLE_TYRE_BURST(vehicle, wheelID, completely)
  return native.invoke(
    Type.Bool, 5767, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Int, wheelID),
    arg(Type.Bool, completely)
  )
end

function VEHICLE.SET_VEHICLE_FORWARD_SPEED(vehicle, speed)
  native.invoke(
    Type.Void, 5768, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Float, speed)
  )
end

function VEHICLE.SET_VEHICLE_FORWARD_SPEED_XY(vehicle, speed)
  native.invoke(
    Type.Void, 5769, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Float, speed)
  )
end

function VEHICLE.BRING_VEHICLE_TO_HALT(vehicle, distance, duration, p3)
  native.invoke(
    Type.Void, 5770, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Float, distance),
    arg(Type.Int, duration),
    arg(Type.Bool, p3)
  )
end

function VEHICLE.SET_VEHICLE_STEER_FOR_BUILDINGS(vehicle, p1)
  native.invoke(
    Type.Void, 5771, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Any, p1)
  )
end

function VEHICLE.SET_VEHICLE_CAUSES_SWERVING(vehicle, toggle)
  native.invoke(
    Type.Void, 5772, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Bool, toggle)
  )
end

function VEHICLE.SET_IGNORE_PLANES_SMALL_PITCH_CHANGE(p0, p1)
  native.invoke(
    Type.Void, 5773, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1)
  )
end

function VEHICLE.STOP_BRINGING_VEHICLE_TO_HALT(vehicle)
  native.invoke(
    Type.Void, 5774, false,
    arg(Type.Vehicle, vehicle)
  )
end

function VEHICLE.IS_VEHICLE_BEING_BROUGHT_TO_HALT(vehicle)
  return native.invoke(
    Type.Bool, 5775, false,
    arg(Type.Vehicle, vehicle)
  )
end

function VEHICLE.LOWER_FORKLIFT_FORKS(forklift)
  native.invoke(
    Type.Void, 5776, false,
    arg(Type.Vehicle, forklift)
  )
end

function VEHICLE.SET_FORKLIFT_FORK_HEIGHT(vehicle, height)
  native.invoke(
    Type.Void, 5777, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Float, height)
  )
end

function VEHICLE.IS_ENTITY_ATTACHED_TO_HANDLER_FRAME(vehicle, entity)
  return native.invoke(
    Type.Bool, 5778, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Entity, entity)
  )
end

function VEHICLE.IS_ANY_ENTITY_ATTACHED_TO_HANDLER_FRAME(vehicle)
  return native.invoke(
    Type.Bool, 5779, false,
    arg(Type.Vehicle, vehicle)
  )
end

function VEHICLE.FIND_HANDLER_VEHICLE_CONTAINER_IS_ATTACHED_TO(entity)
  return native.invoke(
    Type.Vehicle, 5780, false,
    arg(Type.Entity, entity)
  )
end

function VEHICLE.IS_HANDLER_FRAME_LINED_UP_WITH_CONTAINER(vehicle, entity)
  return native.invoke(
    Type.Bool, 5781, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Entity, entity)
  )
end

function VEHICLE.ATTACH_CONTAINER_TO_HANDLER_FRAME_WHEN_LINED_UP(vehicle, entity)
  native.invoke(
    Type.Void, 5782, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Entity, entity)
  )
end

function VEHICLE.DETACH_CONTAINER_FROM_HANDLER_FRAME(vehicle)
  native.invoke(
    Type.Void, 5783, false,
    arg(Type.Vehicle, vehicle)
  )
end

function VEHICLE.SET_VEHICLE_DISABLE_HEIGHT_MAP_AVOIDANCE(vehicle, p1)
  native.invoke(
    Type.Void, 5784, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Bool, p1)
  )
end

function VEHICLE.SET_BOAT_DISABLE_AVOIDANCE(vehicle, p1)
  native.invoke(
    Type.Void, 5785, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Bool, p1)
  )
end

function VEHICLE.IS_HELI_LANDING_AREA_BLOCKED(vehicle)
  return native.invoke(
    Type.Bool, 5786, false,
    arg(Type.Vehicle, vehicle)
  )
end

function VEHICLE.SET_SHORT_SLOWDOWN_FOR_LANDING(vehicle)
  native.invoke(
    Type.Void, 5787, false,
    arg(Type.Vehicle, vehicle)
  )
end

function VEHICLE.SET_HELI_TURBULENCE_SCALAR(vehicle, p1)
  native.invoke(
    Type.Void, 5788, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Float, p1)
  )
end

function VEHICLE.SET_CAR_BOOT_OPEN(vehicle)
  native.invoke(
    Type.Void, 5789, false,
    arg(Type.Vehicle, vehicle)
  )
end

function VEHICLE.SET_VEHICLE_TYRE_BURST(vehicle, index, onRim, p3)
  native.invoke(
    Type.Void, 5790, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Int, index),
    arg(Type.Bool, onRim),
    arg(Type.Float, p3)
  )
end

function VEHICLE.SET_VEHICLE_DOORS_SHUT(vehicle, closeInstantly)
  native.invoke(
    Type.Void, 5791, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Bool, closeInstantly)
  )
end

function VEHICLE.SET_VEHICLE_TYRES_CAN_BURST(vehicle, toggle)
  native.invoke(
    Type.Void, 5792, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Bool, toggle)
  )
end

function VEHICLE.GET_VEHICLE_TYRES_CAN_BURST(vehicle)
  return native.invoke(
    Type.Bool, 5793, false,
    arg(Type.Vehicle, vehicle)
  )
end

function VEHICLE.SET_VEHICLE_WHEELS_CAN_BREAK(vehicle, enabled)
  native.invoke(
    Type.Void, 5794, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Bool, enabled)
  )
end

function VEHICLE.SET_VEHICLE_DOOR_OPEN(vehicle, doorId, loose, openInstantly)
  native.invoke(
    Type.Void, 5795, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Int, doorId),
    arg(Type.Bool, loose),
    arg(Type.Bool, openInstantly)
  )
end

function VEHICLE.SET_VEHICLE_DOOR_AUTO_LOCK(vehicle, doorId, toggle)
  native.invoke(
    Type.Void, 5796, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Int, doorId),
    arg(Type.Bool, toggle)
  )
end

function VEHICLE.SET_FLEEING_VEHICLES_USE_SWITCHED_OFF_NODES(p0)
  native.invoke(
    Type.Void, 5797, false,
    arg(Type.Any, p0)
  )
end

function VEHICLE.REMOVE_VEHICLE_WINDOW(vehicle, windowIndex)
  native.invoke(
    Type.Void, 5798, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Int, windowIndex)
  )
end

function VEHICLE.ROLL_DOWN_WINDOWS(vehicle)
  native.invoke(
    Type.Void, 5799, false,
    arg(Type.Vehicle, vehicle)
  )
end

function VEHICLE.ROLL_DOWN_WINDOW(vehicle, windowIndex)
  native.invoke(
    Type.Void, 5800, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Int, windowIndex)
  )
end

function VEHICLE.ROLL_UP_WINDOW(vehicle, windowIndex)
  native.invoke(
    Type.Void, 5801, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Int, windowIndex)
  )
end

function VEHICLE.SMASH_VEHICLE_WINDOW(vehicle, windowIndex)
  native.invoke(
    Type.Void, 5802, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Int, windowIndex)
  )
end

function VEHICLE.FIX_VEHICLE_WINDOW(vehicle, windowIndex)
  native.invoke(
    Type.Void, 5803, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Int, windowIndex)
  )
end

function VEHICLE.POP_OUT_VEHICLE_WINDSCREEN(vehicle)
  native.invoke(
    Type.Void, 5804, false,
    arg(Type.Vehicle, vehicle)
  )
end

function VEHICLE.POP_OFF_VEHICLE_ROOF_WITH_IMPULSE(vehicle, x, y, z)
  native.invoke(
    Type.Void, 5805, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, z)
  )
end

function VEHICLE.SET_VEHICLE_LIGHTS(vehicle, state)
  native.invoke(
    Type.Void, 5806, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Int, state)
  )
end

function VEHICLE.SET_VEHICLE_USE_PLAYER_LIGHT_SETTINGS(vehicle, toggle)
  native.invoke(
    Type.Void, 5807, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Bool, toggle)
  )
end

function VEHICLE.SET_VEHICLE_HEADLIGHT_SHADOWS(vehicle, p1)
  native.invoke(
    Type.Void, 5808, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Int, p1)
  )
end

function VEHICLE.SET_VEHICLE_ALARM(vehicle, state)
  native.invoke(
    Type.Void, 5809, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Bool, state)
  )
end

function VEHICLE.START_VEHICLE_ALARM(vehicle)
  native.invoke(
    Type.Void, 5810, false,
    arg(Type.Vehicle, vehicle)
  )
end

function VEHICLE.IS_VEHICLE_ALARM_ACTIVATED(vehicle)
  return native.invoke(
    Type.Bool, 5811, false,
    arg(Type.Vehicle, vehicle)
  )
end

function VEHICLE.SET_VEHICLE_INTERIORLIGHT(vehicle, toggle)
  native.invoke(
    Type.Void, 5812, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Bool, toggle)
  )
end

function VEHICLE.SET_VEHICLE_FORCE_INTERIORLIGHT(vehicle, toggle)
  native.invoke(
    Type.Void, 5813, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Bool, toggle)
  )
end

function VEHICLE.SET_VEHICLE_LIGHT_MULTIPLIER(vehicle, multiplier)
  native.invoke(
    Type.Void, 5814, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Float, multiplier)
  )
end

function VEHICLE.ATTACH_VEHICLE_TO_TRAILER(vehicle, trailer, radius)
  native.invoke(
    Type.Void, 5815, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Vehicle, trailer),
    arg(Type.Float, radius)
  )
end

function VEHICLE.ATTACH_VEHICLE_ON_TO_TRAILER(vehicle, trailer, offsetX, offsetY, offsetZ, coordsX, coordsY, coordsZ, rotationX, rotationY, rotationZ, disableCollisions)
  native.invoke(
    Type.Void, 5816, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Vehicle, trailer),
    arg(Type.Float, offsetX),
    arg(Type.Float, offsetY),
    arg(Type.Float, offsetZ),
    arg(Type.Float, coordsX),
    arg(Type.Float, coordsY),
    arg(Type.Float, coordsZ),
    arg(Type.Float, rotationX),
    arg(Type.Float, rotationY),
    arg(Type.Float, rotationZ),
    arg(Type.Float, disableCollisions)
  )
end

function VEHICLE.STABILISE_ENTITY_ATTACHED_TO_HELI(vehicle, entity, p2)
  native.invoke(
    Type.Void, 5817, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Entity, entity),
    arg(Type.Float, p2)
  )
end

function VEHICLE.DETACH_VEHICLE_FROM_TRAILER(vehicle)
  native.invoke(
    Type.Void, 5818, false,
    arg(Type.Vehicle, vehicle)
  )
end

function VEHICLE.IS_VEHICLE_ATTACHED_TO_TRAILER(vehicle)
  return native.invoke(
    Type.Bool, 5819, false,
    arg(Type.Vehicle, vehicle)
  )
end

function VEHICLE.SET_TRAILER_INVERSE_MASS_SCALE(vehicle, p1)
  native.invoke(
    Type.Void, 5820, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Float, p1)
  )
end

function VEHICLE.SET_TRAILER_LEGS_RAISED(vehicle)
  native.invoke(
    Type.Void, 5821, false,
    arg(Type.Vehicle, vehicle)
  )
end

function VEHICLE.SET_TRAILER_LEGS_LOWERED(vehicle)
  native.invoke(
    Type.Void, 5822, false,
    arg(Type.Vehicle, vehicle)
  )
end

function VEHICLE.SET_VEHICLE_TYRE_FIXED(vehicle, tyreIndex)
  native.invoke(
    Type.Void, 5823, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Int, tyreIndex)
  )
end

function VEHICLE.SET_VEHICLE_NUMBER_PLATE_TEXT(vehicle, plateText)
  native.invoke(
    Type.Void, 5824, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.String, plateText)
  )
end

function VEHICLE.GET_VEHICLE_NUMBER_PLATE_TEXT(vehicle)
  return native.invoke(
    Type.String, 5825, false,
    arg(Type.Vehicle, vehicle)
  )
end

function VEHICLE.GET_NUMBER_OF_VEHICLE_NUMBER_PLATES()
  return native.invoke(
    Type.Int, 5826, false
  )
end

function VEHICLE.SET_VEHICLE_NUMBER_PLATE_TEXT_INDEX(vehicle, plateIndex)
  native.invoke(
    Type.Void, 5827, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Int, plateIndex)
  )
end

function VEHICLE.GET_VEHICLE_NUMBER_PLATE_TEXT_INDEX(vehicle)
  return native.invoke(
    Type.Int, 5828, false,
    arg(Type.Vehicle, vehicle)
  )
end

function VEHICLE.SET_RANDOM_TRAINS(toggle)
  native.invoke(
    Type.Void, 5829, false,
    arg(Type.Bool, toggle)
  )
end

function VEHICLE.CREATE_MISSION_TRAIN(variation, x, y, z, direction, p5, p6)
  return native.invoke(
    Type.Vehicle, 5830, false,
    arg(Type.Int, variation),
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, z),
    arg(Type.Bool, direction),
    arg(Type.Any, p5),
    arg(Type.Any, p6)
  )
end

function VEHICLE.SWITCH_TRAIN_TRACK(trackId, state)
  native.invoke(
    Type.Void, 5831, false,
    arg(Type.Int, trackId),
    arg(Type.Bool, state)
  )
end

function VEHICLE.SET_TRAIN_TRACK_SPAWN_FREQUENCY(trackIndex, frequency)
  native.invoke(
    Type.Void, 5832, false,
    arg(Type.Int, trackIndex),
    arg(Type.Int, frequency)
  )
end

function VEHICLE.ALLOW_TRAIN_TO_BE_REMOVED_BY_POPULATION(p0)
  native.invoke(
    Type.Void, 5833, false,
    arg(Type.Any, p0)
  )
end

function VEHICLE.DELETE_ALL_TRAINS()
  native.invoke(
    Type.Void, 5834, false
  )
end

function VEHICLE.SET_TRAIN_SPEED(train, speed)
  native.invoke(
    Type.Void, 5835, false,
    arg(Type.Vehicle, train),
    arg(Type.Float, speed)
  )
end

function VEHICLE.SET_TRAIN_CRUISE_SPEED(train, speed)
  native.invoke(
    Type.Void, 5836, false,
    arg(Type.Vehicle, train),
    arg(Type.Float, speed)
  )
end

function VEHICLE.SET_RANDOM_BOATS(toggle)
  native.invoke(
    Type.Void, 5837, false,
    arg(Type.Bool, toggle)
  )
end

function VEHICLE.SET_RANDOM_BOATS_MP(toggle)
  native.invoke(
    Type.Void, 5838, false,
    arg(Type.Bool, toggle)
  )
end

function VEHICLE.SET_GARBAGE_TRUCKS(toggle)
  native.invoke(
    Type.Void, 5839, false,
    arg(Type.Bool, toggle)
  )
end

function VEHICLE.DOES_VEHICLE_HAVE_STUCK_VEHICLE_CHECK(vehicle)
  return native.invoke(
    Type.Bool, 5840, false,
    arg(Type.Vehicle, vehicle)
  )
end

function VEHICLE.GET_VEHICLE_RECORDING_ID(recording, script)
  return native.invoke(
    Type.Int, 5841, false,
    arg(Type.Int, recording),
    arg(Type.String, script)
  )
end

function VEHICLE.REQUEST_VEHICLE_RECORDING(recording, script)
  native.invoke(
    Type.Void, 5842, false,
    arg(Type.Int, recording),
    arg(Type.String, script)
  )
end

function VEHICLE.HAS_VEHICLE_RECORDING_BEEN_LOADED(recording, script)
  return native.invoke(
    Type.Bool, 5843, false,
    arg(Type.Int, recording),
    arg(Type.String, script)
  )
end

function VEHICLE.REMOVE_VEHICLE_RECORDING(recording, script)
  native.invoke(
    Type.Void, 5844, false,
    arg(Type.Int, recording),
    arg(Type.String, script)
  )
end

function VEHICLE.GET_POSITION_OF_VEHICLE_RECORDING_ID_AT_TIME(id, time)
  return native.invoke(
    Type.Vector3, 5845, false,
    arg(Type.Int, id),
    arg(Type.Float, time)
  )
end

function VEHICLE.GET_POSITION_OF_VEHICLE_RECORDING_AT_TIME(recording, time, script)
  return native.invoke(
    Type.Vector3, 5846, false,
    arg(Type.Int, recording),
    arg(Type.Float, time),
    arg(Type.String, script)
  )
end

function VEHICLE.GET_ROTATION_OF_VEHICLE_RECORDING_ID_AT_TIME(id, time)
  return native.invoke(
    Type.Vector3, 5847, false,
    arg(Type.Int, id),
    arg(Type.Float, time)
  )
end

function VEHICLE.GET_ROTATION_OF_VEHICLE_RECORDING_AT_TIME(recording, time, script)
  return native.invoke(
    Type.Vector3, 5848, false,
    arg(Type.Int, recording),
    arg(Type.Float, time),
    arg(Type.String, script)
  )
end

function VEHICLE.GET_TOTAL_DURATION_OF_VEHICLE_RECORDING_ID(id)
  return native.invoke(
    Type.Float, 5849, false,
    arg(Type.Int, id)
  )
end

function VEHICLE.GET_TOTAL_DURATION_OF_VEHICLE_RECORDING(recording, script)
  return native.invoke(
    Type.Float, 5850, false,
    arg(Type.Int, recording),
    arg(Type.String, script)
  )
end

function VEHICLE.GET_POSITION_IN_RECORDING(vehicle)
  return native.invoke(
    Type.Float, 5851, false,
    arg(Type.Vehicle, vehicle)
  )
end

function VEHICLE.GET_TIME_POSITION_IN_RECORDING(vehicle)
  return native.invoke(
    Type.Float, 5852, false,
    arg(Type.Vehicle, vehicle)
  )
end

function VEHICLE.START_PLAYBACK_RECORDED_VEHICLE(vehicle, recording, script, p3)
  native.invoke(
    Type.Void, 5853, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Int, recording),
    arg(Type.String, script),
    arg(Type.Bool, p3)
  )
end

function VEHICLE.START_PLAYBACK_RECORDED_VEHICLE_WITH_FLAGS(vehicle, recording, script, flags, time, drivingStyle)
  native.invoke(
    Type.Void, 5854, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Int, recording),
    arg(Type.String, script),
    arg(Type.Int, flags),
    arg(Type.Int, time),
    arg(Type.Int, drivingStyle)
  )
end

function VEHICLE.FORCE_PLAYBACK_RECORDED_VEHICLE_UPDATE(vehicle, p1)
  native.invoke(
    Type.Void, 5855, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Bool, p1)
  )
end

function VEHICLE.STOP_PLAYBACK_RECORDED_VEHICLE(vehicle)
  native.invoke(
    Type.Void, 5856, false,
    arg(Type.Vehicle, vehicle)
  )
end

function VEHICLE.PAUSE_PLAYBACK_RECORDED_VEHICLE(vehicle)
  native.invoke(
    Type.Void, 5857, false,
    arg(Type.Vehicle, vehicle)
  )
end

function VEHICLE.UNPAUSE_PLAYBACK_RECORDED_VEHICLE(vehicle)
  native.invoke(
    Type.Void, 5858, false,
    arg(Type.Vehicle, vehicle)
  )
end

function VEHICLE.IS_PLAYBACK_GOING_ON_FOR_VEHICLE(vehicle)
  return native.invoke(
    Type.Bool, 5859, false,
    arg(Type.Vehicle, vehicle)
  )
end

function VEHICLE.IS_PLAYBACK_USING_AI_GOING_ON_FOR_VEHICLE(vehicle)
  return native.invoke(
    Type.Bool, 5860, false,
    arg(Type.Vehicle, vehicle)
  )
end

function VEHICLE.GET_CURRENT_PLAYBACK_FOR_VEHICLE(vehicle)
  return native.invoke(
    Type.Int, 5861, false,
    arg(Type.Vehicle, vehicle)
  )
end

function VEHICLE.SKIP_TO_END_AND_STOP_PLAYBACK_RECORDED_VEHICLE(vehicle)
  native.invoke(
    Type.Void, 5862, false,
    arg(Type.Vehicle, vehicle)
  )
end

function VEHICLE.SET_PLAYBACK_SPEED(vehicle, speed)
  native.invoke(
    Type.Void, 5863, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Float, speed)
  )
end

function VEHICLE.START_PLAYBACK_RECORDED_VEHICLE_USING_AI(vehicle, recording, script, speed, drivingStyle)
  native.invoke(
    Type.Void, 5864, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Int, recording),
    arg(Type.String, script),
    arg(Type.Float, speed),
    arg(Type.Int, drivingStyle)
  )
end

function VEHICLE.SKIP_TIME_IN_PLAYBACK_RECORDED_VEHICLE(vehicle, time)
  native.invoke(
    Type.Void, 5865, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Float, time)
  )
end

function VEHICLE.SET_PLAYBACK_TO_USE_AI(vehicle, drivingStyle)
  native.invoke(
    Type.Void, 5866, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Int, drivingStyle)
  )
end

function VEHICLE.SET_PLAYBACK_TO_USE_AI_TRY_TO_REVERT_BACK_LATER(vehicle, time, drivingStyle, p3)
  native.invoke(
    Type.Void, 5867, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Int, time),
    arg(Type.Int, drivingStyle),
    arg(Type.Bool, p3)
  )
end

function VEHICLE.SET_ADDITIONAL_ROTATION_FOR_RECORDED_VEHICLE_PLAYBACK(vehicle, x, y, z, p4)
  native.invoke(
    Type.Void, 5868, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, z),
    arg(Type.Any, p4)
  )
end

function VEHICLE.SET_POSITION_OFFSET_FOR_RECORDED_VEHICLE_PLAYBACK(vehicle, x, y, z)
  native.invoke(
    Type.Void, 5869, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, z)
  )
end

function VEHICLE.SET_GLOBAL_POSITION_OFFSET_FOR_RECORDED_VEHICLE_PLAYBACK(vehicle, x, y, z)
  native.invoke(
    Type.Void, 5870, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, z)
  )
end

function VEHICLE.SET_SHOULD_LERP_FROM_AI_TO_FULL_RECORDING(vehicle, p1)
  native.invoke(
    Type.Void, 5871, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Bool, p1)
  )
end

function VEHICLE.EXPLODE_VEHICLE_IN_CUTSCENE(vehicle, p1)
  native.invoke(
    Type.Void, 5872, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Bool, p1)
  )
end

function VEHICLE.ADD_VEHICLE_STUCK_CHECK_WITH_WARP(p0, p1, p2, p3, p4, p5, p6)
  native.invoke(
    Type.Void, 5873, false,
    arg(Type.Any, p0),
    arg(Type.Float, p1),
    arg(Type.Any, p2),
    arg(Type.Bool, p3),
    arg(Type.Bool, p4),
    arg(Type.Bool, p5),
    arg(Type.Any, p6)
  )
end

function VEHICLE.SET_VEHICLE_MODEL_IS_SUPPRESSED(model, suppressed)
  native.invoke(
    Type.Void, 5874, false,
    arg(Type.Hash, model),
    arg(Type.Bool, suppressed)
  )
end

function VEHICLE.GET_RANDOM_VEHICLE_IN_SPHERE(x, y, z, radius, modelHash, flags)
  return native.invoke(
    Type.Vehicle, 5875, false,
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, z),
    arg(Type.Float, radius),
    arg(Type.Hash, modelHash),
    arg(Type.Int, flags)
  )
end

function VEHICLE.GET_RANDOM_VEHICLE_FRONT_BUMPER_IN_SPHERE(p0, p1, p2, p3, p4, p5, p6)
  return native.invoke(
    Type.Vehicle, 5876, false,
    arg(Type.Float, p0),
    arg(Type.Float, p1),
    arg(Type.Float, p2),
    arg(Type.Float, p3),
    arg(Type.Int, p4),
    arg(Type.Int, p5),
    arg(Type.Int, p6)
  )
end

function VEHICLE.GET_RANDOM_VEHICLE_BACK_BUMPER_IN_SPHERE(p0, p1, p2, p3, p4, p5, p6)
  return native.invoke(
    Type.Vehicle, 5877, false,
    arg(Type.Float, p0),
    arg(Type.Float, p1),
    arg(Type.Float, p2),
    arg(Type.Float, p3),
    arg(Type.Int, p4),
    arg(Type.Int, p5),
    arg(Type.Int, p6)
  )
end

function VEHICLE.GET_CLOSEST_VEHICLE(x, y, z, radius, modelHash, flags)
  return native.invoke(
    Type.Vehicle, 5878, false,
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, z),
    arg(Type.Float, radius),
    arg(Type.Hash, modelHash),
    arg(Type.Int, flags)
  )
end

function VEHICLE.GET_TRAIN_CARRIAGE(train, trailerNumber)
  return native.invoke(
    Type.Vehicle, 5879, false,
    arg(Type.Vehicle, train),
    arg(Type.Int, trailerNumber)
  )
end

function VEHICLE.IS_MISSION_TRAIN(train)
  return native.invoke(
    Type.Bool, 5880, false,
    arg(Type.Vehicle, train)
  )
end

function VEHICLE.DELETE_MISSION_TRAIN(train)
  native.invoke(
    Type.Void, 5881, false,
    ref(Type.Vehicle, train)
  )
end

function VEHICLE.SET_MISSION_TRAIN_AS_NO_LONGER_NEEDED(train, p1)
  native.invoke(
    Type.Void, 5882, false,
    ref(Type.Vehicle, train),
    arg(Type.Bool, p1)
  )
end

function VEHICLE.SET_MISSION_TRAIN_COORDS(train, x, y, z)
  native.invoke(
    Type.Void, 5883, false,
    arg(Type.Vehicle, train),
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, z)
  )
end

function VEHICLE.IS_THIS_MODEL_A_BOAT(model)
  return native.invoke(
    Type.Bool, 5884, false,
    arg(Type.Hash, model)
  )
end

function VEHICLE.IS_THIS_MODEL_A_JETSKI(model)
  return native.invoke(
    Type.Bool, 5885, false,
    arg(Type.Hash, model)
  )
end

function VEHICLE.IS_THIS_MODEL_A_PLANE(model)
  return native.invoke(
    Type.Bool, 5886, false,
    arg(Type.Hash, model)
  )
end

function VEHICLE.IS_THIS_MODEL_A_HELI(model)
  return native.invoke(
    Type.Bool, 5887, false,
    arg(Type.Hash, model)
  )
end

function VEHICLE.IS_THIS_MODEL_A_CAR(model)
  return native.invoke(
    Type.Bool, 5888, false,
    arg(Type.Hash, model)
  )
end

function VEHICLE.IS_THIS_MODEL_A_TRAIN(model)
  return native.invoke(
    Type.Bool, 5889, false,
    arg(Type.Hash, model)
  )
end

function VEHICLE.IS_THIS_MODEL_A_BIKE(model)
  return native.invoke(
    Type.Bool, 5890, false,
    arg(Type.Hash, model)
  )
end

function VEHICLE.IS_THIS_MODEL_A_BICYCLE(model)
  return native.invoke(
    Type.Bool, 5891, false,
    arg(Type.Hash, model)
  )
end

function VEHICLE.IS_THIS_MODEL_A_QUADBIKE(model)
  return native.invoke(
    Type.Bool, 5892, false,
    arg(Type.Hash, model)
  )
end

function VEHICLE.IS_THIS_MODEL_AN_AMPHIBIOUS_CAR(model)
  return native.invoke(
    Type.Bool, 5893, false,
    arg(Type.Hash, model)
  )
end

function VEHICLE.IS_THIS_MODEL_AN_AMPHIBIOUS_QUADBIKE(model)
  return native.invoke(
    Type.Bool, 5894, false,
    arg(Type.Hash, model)
  )
end

function VEHICLE.SET_HELI_BLADES_FULL_SPEED(vehicle)
  native.invoke(
    Type.Void, 5895, false,
    arg(Type.Vehicle, vehicle)
  )
end

function VEHICLE.SET_HELI_BLADES_SPEED(vehicle, speed)
  native.invoke(
    Type.Void, 5896, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Float, speed)
  )
end

function VEHICLE.FORCE_SUB_THROTTLE_FOR_TIME(vehicle, p1, p2)
  native.invoke(
    Type.Void, 5897, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Float, p1),
    arg(Type.Float, p2)
  )
end

function VEHICLE.SET_VEHICLE_CAN_BE_TARGETTED(vehicle, state)
  native.invoke(
    Type.Void, 5898, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Bool, state)
  )
end

function VEHICLE.SET_DONT_ALLOW_PLAYER_TO_ENTER_VEHICLE_IF_LOCKED_FOR_PLAYER(vehicle, p1)
  native.invoke(
    Type.Void, 5899, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Bool, p1)
  )
end

function VEHICLE.SET_VEHICLE_CAN_BE_VISIBLY_DAMAGED(vehicle, state)
  native.invoke(
    Type.Void, 5900, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Bool, state)
  )
end

function VEHICLE.SET_VEHICLE_HAS_UNBREAKABLE_LIGHTS(vehicle, toggle)
  native.invoke(
    Type.Void, 5901, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Bool, toggle)
  )
end

function VEHICLE.SET_VEHICLE_RESPECTS_LOCKS_WHEN_HAS_DRIVER(vehicle, p1)
  native.invoke(
    Type.Void, 5902, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Bool, p1)
  )
end

function VEHICLE.SET_VEHICLE_CAN_EJECT_PASSENGERS_IF_LOCKED(p0, p1)
  native.invoke(
    Type.Void, 5903, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1)
  )
end

function VEHICLE.GET_VEHICLE_DIRT_LEVEL(vehicle)
  return native.invoke(
    Type.Float, 5904, false,
    arg(Type.Vehicle, vehicle)
  )
end

function VEHICLE.SET_VEHICLE_DIRT_LEVEL(vehicle, dirtLevel)
  native.invoke(
    Type.Void, 5905, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Float, dirtLevel)
  )
end

function VEHICLE.GET_DOES_VEHICLE_HAVE_DAMAGE_DECALS(vehicle)
  return native.invoke(
    Type.Bool, 5906, false,
    arg(Type.Vehicle, vehicle)
  )
end

function VEHICLE.IS_VEHICLE_DOOR_FULLY_OPEN(vehicle, doorId)
  return native.invoke(
    Type.Bool, 5907, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Int, doorId)
  )
end

function VEHICLE.SET_VEHICLE_ENGINE_ON(vehicle, value, instantly, disableAutoStart)
  native.invoke(
    Type.Void, 5908, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Bool, value),
    arg(Type.Bool, instantly),
    arg(Type.Bool, disableAutoStart)
  )
end

function VEHICLE.SET_VEHICLE_UNDRIVEABLE(vehicle, toggle)
  native.invoke(
    Type.Void, 5909, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Bool, toggle)
  )
end

function VEHICLE.SET_VEHICLE_PROVIDES_COVER(vehicle, toggle)
  native.invoke(
    Type.Void, 5910, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Bool, toggle)
  )
end

function VEHICLE.SET_VEHICLE_DOOR_CONTROL(vehicle, doorId, speed, angle)
  native.invoke(
    Type.Void, 5911, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Int, doorId),
    arg(Type.Int, speed),
    arg(Type.Float, angle)
  )
end

function VEHICLE.SET_VEHICLE_DOOR_LATCHED(vehicle, doorId, p2, p3, p4)
  native.invoke(
    Type.Void, 5912, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Int, doorId),
    arg(Type.Bool, p2),
    arg(Type.Bool, p3),
    arg(Type.Bool, p4)
  )
end

function VEHICLE.GET_VEHICLE_DOOR_ANGLE_RATIO(vehicle, doorId)
  return native.invoke(
    Type.Float, 5913, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Int, doorId)
  )
end

function VEHICLE.GET_PED_USING_VEHICLE_DOOR(vehicle, doord)
  return native.invoke(
    Type.Ped, 5914, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Int, doord)
  )
end

function VEHICLE.SET_VEHICLE_DOOR_SHUT(vehicle, doorId, closeInstantly)
  native.invoke(
    Type.Void, 5915, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Int, doorId),
    arg(Type.Bool, closeInstantly)
  )
end

function VEHICLE.SET_VEHICLE_DOOR_BROKEN(vehicle, doorId, deleteDoor)
  native.invoke(
    Type.Void, 5916, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Int, doorId),
    arg(Type.Bool, deleteDoor)
  )
end

function VEHICLE.SET_VEHICLE_CAN_BREAK(vehicle, toggle)
  native.invoke(
    Type.Void, 5917, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Bool, toggle)
  )
end

function VEHICLE.DOES_VEHICLE_HAVE_ROOF(vehicle)
  return native.invoke(
    Type.Bool, 5918, false,
    arg(Type.Vehicle, vehicle)
  )
end

function VEHICLE.SET_VEHICLE_REMOVE_AGGRESSIVE_CARJACK_MISSION(p0)
  native.invoke(
    Type.Void, 5919, false,
    arg(Type.Any, p0)
  )
end

function VEHICLE.SET_VEHICLE_AVOID_PLAYER_VEHICLE_RIOT_VAN_MISSION(p0)
  native.invoke(
    Type.Void, 5920, false,
    arg(Type.Any, p0)
  )
end

function VEHICLE.SET_CARJACK_MISSION_REMOVAL_PARAMETERS(p0, p1)
  native.invoke(
    Type.Void, 5921, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1)
  )
end

function VEHICLE.IS_BIG_VEHICLE(vehicle)
  return native.invoke(
    Type.Bool, 5922, false,
    arg(Type.Vehicle, vehicle)
  )
end

function VEHICLE.GET_NUMBER_OF_VEHICLE_COLOURS(vehicle)
  return native.invoke(
    Type.Int, 5923, false,
    arg(Type.Vehicle, vehicle)
  )
end

function VEHICLE.SET_VEHICLE_COLOUR_COMBINATION(vehicle, colorCombination)
  native.invoke(
    Type.Void, 5924, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Int, colorCombination)
  )
end

function VEHICLE.GET_VEHICLE_COLOUR_COMBINATION(vehicle)
  return native.invoke(
    Type.Int, 5925, false,
    arg(Type.Vehicle, vehicle)
  )
end

function VEHICLE.SET_VEHICLE_XENON_LIGHT_COLOR_INDEX(vehicle, colorIndex)
  native.invoke(
    Type.Void, 5926, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Int, colorIndex)
  )
end

function VEHICLE.GET_VEHICLE_XENON_LIGHT_COLOR_INDEX(vehicle)
  return native.invoke(
    Type.Int, 5927, false,
    arg(Type.Vehicle, vehicle)
  )
end

function VEHICLE.SET_VEHICLE_IS_CONSIDERED_BY_PLAYER(vehicle, toggle)
  native.invoke(
    Type.Void, 5928, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Bool, toggle)
  )
end

function VEHICLE.SET_VEHICLE_WILL_FORCE_OTHER_VEHICLES_TO_STOP(vehicle, toggle)
  native.invoke(
    Type.Void, 5929, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Bool, toggle)
  )
end

function VEHICLE.SET_VEHICLE_ACT_AS_IF_HAS_SIREN_ON(vehicle, p1)
  native.invoke(
    Type.Void, 5930, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Bool, p1)
  )
end

function VEHICLE.SET_VEHICLE_USE_MORE_RESTRICTIVE_SPAWN_CHECKS(vehicle, p1)
  native.invoke(
    Type.Void, 5931, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Bool, p1)
  )
end

function VEHICLE.SET_VEHICLE_MAY_BE_USED_BY_GOTO_POINT_ANY_MEANS(vehicle, p1)
  native.invoke(
    Type.Void, 5932, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Bool, p1)
  )
end

function VEHICLE.GET_RANDOM_VEHICLE_MODEL_IN_MEMORY(p0, modelHash, successIndicator)
  native.invoke(
    Type.Void, 5933, false,
    arg(Type.Bool, p0),
    ref(Type.Hash, modelHash),
    ref(Type.Int, successIndicator)
  )
end

function VEHICLE.GET_VEHICLE_DOOR_LOCK_STATUS(vehicle)
  return native.invoke(
    Type.Int, 5934, false,
    arg(Type.Vehicle, vehicle)
  )
end

function VEHICLE.GET_VEHICLE_INDIVIDUAL_DOOR_LOCK_STATUS(vehicle, doorId)
  return native.invoke(
    Type.Int, 5935, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Int, doorId)
  )
end

function VEHICLE.IS_VEHICLE_DOOR_DAMAGED(veh, doorID)
  return native.invoke(
    Type.Bool, 5936, false,
    arg(Type.Vehicle, veh),
    arg(Type.Int, doorID)
  )
end

function VEHICLE.SET_DOOR_ALLOWED_TO_BE_BROKEN_OFF(vehicle, doorId, isBreakable)
  native.invoke(
    Type.Void, 5937, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Int, doorId),
    arg(Type.Bool, isBreakable)
  )
end

function VEHICLE.IS_VEHICLE_BUMPER_BOUNCING(vehicle, frontBumper)
  return native.invoke(
    Type.Bool, 5938, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Bool, frontBumper)
  )
end

function VEHICLE.IS_VEHICLE_BUMPER_BROKEN_OFF(vehicle, frontBumper)
  return native.invoke(
    Type.Bool, 5939, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Bool, frontBumper)
  )
end

function VEHICLE.IS_COP_VEHICLE_IN_AREA_3D(x1, x2, y1, y2, z1, z2)
  return native.invoke(
    Type.Bool, 5940, false,
    arg(Type.Float, x1),
    arg(Type.Float, x2),
    arg(Type.Float, y1),
    arg(Type.Float, y2),
    arg(Type.Float, z1),
    arg(Type.Float, z2)
  )
end

function VEHICLE.IS_VEHICLE_ON_ALL_WHEELS(vehicle)
  return native.invoke(
    Type.Bool, 5941, false,
    arg(Type.Vehicle, vehicle)
  )
end

function VEHICLE.GET_VEHICLE_MODEL_VALUE(vehicleModel)
  return native.invoke(
    Type.Int, 5942, false,
    arg(Type.Hash, vehicleModel)
  )
end

function VEHICLE.GET_VEHICLE_LAYOUT_HASH(vehicle)
  return native.invoke(
    Type.Hash, 5943, false,
    arg(Type.Vehicle, vehicle)
  )
end

function VEHICLE.GET_IN_VEHICLE_CLIPSET_HASH_FOR_SEAT(vehicle, p1)
  return native.invoke(
    Type.Hash, 5944, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Int, p1)
  )
end

function VEHICLE.SET_RENDER_TRAIN_AS_DERAILED(train, toggle)
  native.invoke(
    Type.Void, 5945, false,
    arg(Type.Vehicle, train),
    arg(Type.Bool, toggle)
  )
end

function VEHICLE.SET_VEHICLE_EXTRA_COLOURS(vehicle, pearlescentColor, wheelColor)
  native.invoke(
    Type.Void, 5946, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Int, pearlescentColor),
    arg(Type.Int, wheelColor)
  )
end

function VEHICLE.GET_VEHICLE_EXTRA_COLOURS(vehicle, pearlescentColor, wheelColor)
  native.invoke(
    Type.Void, 5947, false,
    arg(Type.Vehicle, vehicle),
    ref(Type.Int, pearlescentColor),
    ref(Type.Int, wheelColor)
  )
end

function VEHICLE.SET_VEHICLE_EXTRA_COLOUR_5(vehicle, color)
  native.invoke(
    Type.Void, 5948, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Int, color)
  )
end

function VEHICLE.GET_VEHICLE_EXTRA_COLOUR_5(vehicle, color)
  native.invoke(
    Type.Void, 5949, false,
    arg(Type.Vehicle, vehicle),
    ref(Type.Int, color)
  )
end

function VEHICLE.SET_VEHICLE_EXTRA_COLOUR_6(vehicle, color)
  native.invoke(
    Type.Void, 5950, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Int, color)
  )
end

function VEHICLE.GET_VEHICLE_EXTRA_COLOUR_6(vehicle, color)
  native.invoke(
    Type.Void, 5951, false,
    arg(Type.Vehicle, vehicle),
    ref(Type.Int, color)
  )
end

function VEHICLE.STOP_ALL_GARAGE_ACTIVITY()
  native.invoke(
    Type.Void, 5952, false
  )
end

function VEHICLE.SET_VEHICLE_FIXED(vehicle)
  native.invoke(
    Type.Void, 5953, false,
    arg(Type.Vehicle, vehicle)
  )
end

function VEHICLE.SET_VEHICLE_DEFORMATION_FIXED(vehicle)
  native.invoke(
    Type.Void, 5954, false,
    arg(Type.Vehicle, vehicle)
  )
end

function VEHICLE.SET_VEHICLE_CAN_ENGINE_MISSFIRE(vehicle, toggle)
  native.invoke(
    Type.Void, 5955, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Bool, toggle)
  )
end

function VEHICLE.SET_VEHICLE_CAN_LEAK_OIL(vehicle, toggle)
  native.invoke(
    Type.Void, 5956, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Bool, toggle)
  )
end

function VEHICLE.SET_VEHICLE_CAN_LEAK_PETROL(vehicle, toggle)
  native.invoke(
    Type.Void, 5957, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Bool, toggle)
  )
end

function VEHICLE.SET_DISABLE_VEHICLE_PETROL_TANK_FIRES(vehicle, toggle)
  native.invoke(
    Type.Void, 5958, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Bool, toggle)
  )
end

function VEHICLE.SET_DISABLE_VEHICLE_PETROL_TANK_DAMAGE(vehicle, toggle)
  native.invoke(
    Type.Void, 5959, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Bool, toggle)
  )
end

function VEHICLE.SET_DISABLE_VEHICLE_ENGINE_FIRES(vehicle, toggle)
  native.invoke(
    Type.Void, 5960, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Bool, toggle)
  )
end

function VEHICLE.SET_VEHICLE_LIMIT_SPEED_WHEN_PLAYER_INACTIVE(vehicle, toggle)
  native.invoke(
    Type.Void, 5961, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Bool, toggle)
  )
end

function VEHICLE.SET_VEHICLE_STOP_INSTANTLY_WHEN_PLAYER_INACTIVE(vehicle, toggle)
  native.invoke(
    Type.Void, 5962, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Bool, toggle)
  )
end

function VEHICLE.SET_DISABLE_PRETEND_OCCUPANTS(vehicle, toggle)
  native.invoke(
    Type.Void, 5963, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Bool, toggle)
  )
end

function VEHICLE.REMOVE_VEHICLES_FROM_GENERATORS_IN_AREA(x1, y1, z1, x2, y2, z2, p6)
  native.invoke(
    Type.Void, 5964, false,
    arg(Type.Float, x1),
    arg(Type.Float, y1),
    arg(Type.Float, z1),
    arg(Type.Float, x2),
    arg(Type.Float, y2),
    arg(Type.Float, z2),
    arg(Type.Any, p6)
  )
end

function VEHICLE.SET_VEHICLE_STEER_BIAS(vehicle, value)
  native.invoke(
    Type.Void, 5965, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Float, value)
  )
end

function VEHICLE.IS_VEHICLE_EXTRA_TURNED_ON(vehicle, extraId)
  return native.invoke(
    Type.Bool, 5966, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Int, extraId)
  )
end

function VEHICLE.SET_VEHICLE_EXTRA(vehicle, extraId, disable)
  native.invoke(
    Type.Void, 5967, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Int, extraId),
    arg(Type.Bool, disable)
  )
end

function VEHICLE.DOES_EXTRA_EXIST(vehicle, extraId)
  return native.invoke(
    Type.Bool, 5968, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Int, extraId)
  )
end

function VEHICLE.IS_EXTRA_BROKEN_OFF(vehicle, extraId)
  return native.invoke(
    Type.Bool, 5969, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Int, extraId)
  )
end

function VEHICLE.SET_CONVERTIBLE_ROOF(vehicle, p1)
  native.invoke(
    Type.Void, 5970, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Bool, p1)
  )
end

function VEHICLE.LOWER_CONVERTIBLE_ROOF(vehicle, instantlyLower)
  native.invoke(
    Type.Void, 5971, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Bool, instantlyLower)
  )
end

function VEHICLE.RAISE_CONVERTIBLE_ROOF(vehicle, instantlyRaise)
  native.invoke(
    Type.Void, 5972, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Bool, instantlyRaise)
  )
end

function VEHICLE.GET_CONVERTIBLE_ROOF_STATE(vehicle)
  return native.invoke(
    Type.Int, 5973, false,
    arg(Type.Vehicle, vehicle)
  )
end

function VEHICLE.IS_VEHICLE_A_CONVERTIBLE(vehicle, p1)
  return native.invoke(
    Type.Bool, 5974, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Bool, p1)
  )
end

function VEHICLE.TRANSFORM_TO_SUBMARINE(vehicle, noAnimation)
  return native.invoke(
    Type.Bool, 5975, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Bool, noAnimation)
  )
end

function VEHICLE.TRANSFORM_TO_CAR(vehicle, noAnimation)
  native.invoke(
    Type.Void, 5976, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Bool, noAnimation)
  )
end

function VEHICLE.IS_VEHICLE_IN_SUBMARINE_MODE(vehicle)
  return native.invoke(
    Type.Bool, 5977, false,
    arg(Type.Vehicle, vehicle)
  )
end

function VEHICLE.IS_VEHICLE_STOPPED_AT_TRAFFIC_LIGHTS(vehicle)
  return native.invoke(
    Type.Bool, 5978, false,
    arg(Type.Vehicle, vehicle)
  )
end

function VEHICLE.SET_VEHICLE_DAMAGE(vehicle, xOffset, yOffset, zOffset, damage, radius, focusOnModel)
  native.invoke(
    Type.Void, 5979, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Float, xOffset),
    arg(Type.Float, yOffset),
    arg(Type.Float, zOffset),
    arg(Type.Float, damage),
    arg(Type.Float, radius),
    arg(Type.Bool, focusOnModel)
  )
end

function VEHICLE.SET_VEHICLE_OCCUPANTS_TAKE_EXPLOSIVE_DAMAGE(vehicle, toggle)
  native.invoke(
    Type.Void, 5980, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Bool, toggle)
  )
end

function VEHICLE.GET_VEHICLE_ENGINE_HEALTH(vehicle)
  return native.invoke(
    Type.Float, 5981, false,
    arg(Type.Vehicle, vehicle)
  )
end

function VEHICLE.SET_VEHICLE_ENGINE_HEALTH(vehicle, health)
  native.invoke(
    Type.Void, 5982, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Float, health)
  )
end

function VEHICLE.SET_PLANE_ENGINE_HEALTH(vehicle, health)
  native.invoke(
    Type.Void, 5983, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Float, health)
  )
end

function VEHICLE.GET_VEHICLE_PETROL_TANK_HEALTH(vehicle)
  return native.invoke(
    Type.Float, 5984, false,
    arg(Type.Vehicle, vehicle)
  )
end

function VEHICLE.SET_VEHICLE_PETROL_TANK_HEALTH(vehicle, health)
  native.invoke(
    Type.Void, 5985, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Float, health)
  )
end

function VEHICLE.IS_VEHICLE_STUCK_TIMER_UP(vehicle, p1, ms)
  return native.invoke(
    Type.Bool, 5986, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Int, p1),
    arg(Type.Int, ms)
  )
end

function VEHICLE.RESET_VEHICLE_STUCK_TIMER(vehicle, nullAttributes)
  native.invoke(
    Type.Void, 5987, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Int, nullAttributes)
  )
end

function VEHICLE.IS_VEHICLE_DRIVEABLE(vehicle, isOnFireCheck)
  return native.invoke(
    Type.Bool, 5988, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Bool, isOnFireCheck)
  )
end

function VEHICLE.SET_VEHICLE_HAS_BEEN_OWNED_BY_PLAYER(vehicle, owned)
  native.invoke(
    Type.Void, 5989, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Bool, owned)
  )
end

function VEHICLE.SET_VEHICLE_NEEDS_TO_BE_HOTWIRED(vehicle, toggle)
  native.invoke(
    Type.Void, 5990, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Bool, toggle)
  )
end

function VEHICLE.SET_VEHICLE_BLIP_THROTTLE_RANDOMLY(vehicle, p1)
  native.invoke(
    Type.Void, 5991, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Bool, p1)
  )
end

function VEHICLE.SET_POLICE_FOCUS_WILL_TRACK_VEHICLE(vehicle, toggle)
  native.invoke(
    Type.Void, 5992, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Bool, toggle)
  )
end

function VEHICLE.START_VEHICLE_HORN(vehicle, duration, mode, forever)
  native.invoke(
    Type.Void, 5993, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Int, duration),
    arg(Type.Hash, mode),
    arg(Type.Bool, forever)
  )
end

function VEHICLE.SET_VEHICLE_IN_CAR_MOD_SHOP(vehicle, toggle)
  native.invoke(
    Type.Void, 5994, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Bool, toggle)
  )
end

function VEHICLE.SET_VEHICLE_HAS_STRONG_AXLES(vehicle, toggle)
  native.invoke(
    Type.Void, 5995, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Bool, toggle)
  )
end

function VEHICLE.GET_DISPLAY_NAME_FROM_VEHICLE_MODEL(modelHash)
  return native.invoke(
    Type.String, 5996, false,
    arg(Type.Hash, modelHash)
  )
end

function VEHICLE.GET_MAKE_NAME_FROM_VEHICLE_MODEL(modelHash)
  return native.invoke(
    Type.String, 5997, false,
    arg(Type.Hash, modelHash)
  )
end

function VEHICLE.GET_VEHICLE_DEFORMATION_AT_POS(vehicle, offsetX, offsetY, offsetZ)
  return native.invoke(
    Type.Vector3, 5998, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Float, offsetX),
    arg(Type.Float, offsetY),
    arg(Type.Float, offsetZ)
  )
end

function VEHICLE.SET_VEHICLE_LIVERY(vehicle, livery)
  native.invoke(
    Type.Void, 5999, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Int, livery)
  )
end

function VEHICLE.GET_VEHICLE_LIVERY(vehicle)
  return native.invoke(
    Type.Int, 6000, false,
    arg(Type.Vehicle, vehicle)
  )
end

function VEHICLE.GET_VEHICLE_LIVERY_COUNT(vehicle)
  return native.invoke(
    Type.Int, 6001, false,
    arg(Type.Vehicle, vehicle)
  )
end

function VEHICLE.SET_VEHICLE_LIVERY2(vehicle, livery)
  native.invoke(
    Type.Void, 6002, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Int, livery)
  )
end

function VEHICLE.GET_VEHICLE_LIVERY2(vehicle)
  return native.invoke(
    Type.Int, 6003, false,
    arg(Type.Vehicle, vehicle)
  )
end

function VEHICLE.GET_VEHICLE_LIVERY2_COUNT(vehicle)
  return native.invoke(
    Type.Int, 6004, false,
    arg(Type.Vehicle, vehicle)
  )
end

function VEHICLE.IS_VEHICLE_WINDOW_INTACT(vehicle, windowIndex)
  return native.invoke(
    Type.Bool, 6005, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Int, windowIndex)
  )
end

function VEHICLE.ARE_ALL_VEHICLE_WINDOWS_INTACT(vehicle)
  return native.invoke(
    Type.Bool, 6006, false,
    arg(Type.Vehicle, vehicle)
  )
end

function VEHICLE.ARE_ANY_VEHICLE_SEATS_FREE(vehicle)
  return native.invoke(
    Type.Bool, 6007, false,
    arg(Type.Vehicle, vehicle)
  )
end

function VEHICLE.RESET_VEHICLE_WHEELS(vehicle, toggle)
  native.invoke(
    Type.Void, 6008, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Bool, toggle)
  )
end

function VEHICLE.IS_HELI_PART_BROKEN(vehicle, p1, p2, p3)
  return native.invoke(
    Type.Bool, 6009, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Bool, p1),
    arg(Type.Bool, p2),
    arg(Type.Bool, p3)
  )
end

function VEHICLE.GET_HELI_MAIN_ROTOR_HEALTH(vehicle)
  return native.invoke(
    Type.Float, 6010, false,
    arg(Type.Vehicle, vehicle)
  )
end

function VEHICLE.GET_HELI_TAIL_ROTOR_HEALTH(vehicle)
  return native.invoke(
    Type.Float, 6011, false,
    arg(Type.Vehicle, vehicle)
  )
end

function VEHICLE.GET_HELI_TAIL_BOOM_HEALTH(vehicle)
  return native.invoke(
    Type.Float, 6012, false,
    arg(Type.Vehicle, vehicle)
  )
end

function VEHICLE.SET_HELI_MAIN_ROTOR_HEALTH(vehicle, health)
  native.invoke(
    Type.Void, 6013, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Float, health)
  )
end

function VEHICLE.SET_HELI_TAIL_ROTOR_HEALTH(vehicle, health)
  native.invoke(
    Type.Void, 6014, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Float, health)
  )
end

function VEHICLE.SET_HELI_TAIL_BOOM_CAN_BREAK_OFF(vehicle, toggle)
  return native.invoke(
    Type.Bool, 6015, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Bool, toggle)
  )
end

function VEHICLE.SET_VEHICLE_NAME_DEBUG(vehicle, name)
  native.invoke(
    Type.Void, 6016, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.String, name)
  )
end

function VEHICLE.SET_VEHICLE_EXPLODES_ON_HIGH_EXPLOSION_DAMAGE(vehicle, toggle)
  native.invoke(
    Type.Void, 6017, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Bool, toggle)
  )
end

function VEHICLE.SET_VEHICLE_EXPLODES_ON_EXPLOSION_DAMAGE_AT_ZERO_BODY_HEALTH(vehicle, toggle)
  native.invoke(
    Type.Void, 6018, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Bool, toggle)
  )
end

function VEHICLE.SET_ALLOW_VEHICLE_EXPLODES_ON_CONTACT(vehicle, toggle)
  native.invoke(
    Type.Void, 6019, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Bool, toggle)
  )
end

function VEHICLE.SET_VEHICLE_DISABLE_TOWING(vehicle, toggle)
  native.invoke(
    Type.Void, 6020, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Bool, toggle)
  )
end

function VEHICLE.GET_VEHICLE_HAS_LANDING_GEAR(vehicle)
  return native.invoke(
    Type.Bool, 6021, false,
    arg(Type.Vehicle, vehicle)
  )
end

function VEHICLE.CONTROL_LANDING_GEAR(vehicle, state)
  native.invoke(
    Type.Void, 6022, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Int, state)
  )
end

function VEHICLE.GET_LANDING_GEAR_STATE(vehicle)
  return native.invoke(
    Type.Int, 6023, false,
    arg(Type.Vehicle, vehicle)
  )
end

function VEHICLE.IS_ANY_VEHICLE_NEAR_POINT(x, y, z, radius)
  return native.invoke(
    Type.Bool, 6024, false,
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, z),
    arg(Type.Float, radius)
  )
end

function VEHICLE.REQUEST_VEHICLE_HIGH_DETAIL_MODEL(vehicle)
  native.invoke(
    Type.Void, 6025, false,
    arg(Type.Vehicle, vehicle)
  )
end

function VEHICLE._GET_VEHICLE_MODEL_NUM_DRIVE_GEARS(vehicleModel)
  return native.invoke(
    Type.Int, 6026, false,
    arg(Type.Hash, vehicleModel)
  )
end

function VEHICLE._GET_VEHICLE_MAX_DRIVE_GEAR_COUNT(vehicle)
  return native.invoke(
    Type.Int, 6027, false,
    arg(Type.Vehicle, vehicle)
  )
end

function VEHICLE._GET_VEHICLE_CURRENT_DRIVE_GEAR(vehicle)
  return native.invoke(
    Type.Int, 6028, false,
    arg(Type.Vehicle, vehicle)
  )
end

function VEHICLE._GET_VEHICLE_CURRENT_REV_RATIO(vehicle)
  return native.invoke(
    Type.Float, 6029, false,
    arg(Type.Vehicle, vehicle)
  )
end

function VEHICLE.REMOVE_VEHICLE_HIGH_DETAIL_MODEL(vehicle)
  native.invoke(
    Type.Void, 6030, false,
    arg(Type.Vehicle, vehicle)
  )
end

function VEHICLE.IS_VEHICLE_HIGH_DETAIL(vehicle)
  return native.invoke(
    Type.Bool, 6031, false,
    arg(Type.Vehicle, vehicle)
  )
end

function VEHICLE.REQUEST_VEHICLE_ASSET(vehicleHash, vehicleAsset)
  native.invoke(
    Type.Void, 6032, false,
    arg(Type.Hash, vehicleHash),
    arg(Type.Int, vehicleAsset)
  )
end

function VEHICLE.HAS_VEHICLE_ASSET_LOADED(vehicleAsset)
  return native.invoke(
    Type.Bool, 6033, false,
    arg(Type.Int, vehicleAsset)
  )
end

function VEHICLE.REMOVE_VEHICLE_ASSET(vehicleAsset)
  native.invoke(
    Type.Void, 6034, false,
    arg(Type.Int, vehicleAsset)
  )
end

function VEHICLE.SET_VEHICLE_TOW_TRUCK_ARM_POSITION(vehicle, position)
  native.invoke(
    Type.Void, 6035, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Float, position)
  )
end

function VEHICLE._SET_ATTACHED_VEHICLE_TO_TOW_TRUCK_ARM(towTruck, vehicle)
  native.invoke(
    Type.Void, 6036, false,
    arg(Type.Vehicle, towTruck),
    arg(Type.Vehicle, vehicle)
  )
end

function VEHICLE.ATTACH_VEHICLE_TO_TOW_TRUCK(towTruck, vehicle, rear, hookOffsetX, hookOffsetY, hookOffsetZ)
  native.invoke(
    Type.Void, 6037, false,
    arg(Type.Vehicle, towTruck),
    arg(Type.Vehicle, vehicle),
    arg(Type.Bool, rear),
    arg(Type.Float, hookOffsetX),
    arg(Type.Float, hookOffsetY),
    arg(Type.Float, hookOffsetZ)
  )
end

function VEHICLE.DETACH_VEHICLE_FROM_TOW_TRUCK(towTruck, vehicle)
  native.invoke(
    Type.Void, 6038, false,
    arg(Type.Vehicle, towTruck),
    arg(Type.Vehicle, vehicle)
  )
end

function VEHICLE.DETACH_VEHICLE_FROM_ANY_TOW_TRUCK(vehicle)
  return native.invoke(
    Type.Bool, 6039, false,
    arg(Type.Vehicle, vehicle)
  )
end

function VEHICLE.IS_VEHICLE_ATTACHED_TO_TOW_TRUCK(towTruck, vehicle)
  return native.invoke(
    Type.Bool, 6040, false,
    arg(Type.Vehicle, towTruck),
    arg(Type.Vehicle, vehicle)
  )
end

function VEHICLE.GET_ENTITY_ATTACHED_TO_TOW_TRUCK(towTruck)
  return native.invoke(
    Type.Entity, 6041, false,
    arg(Type.Vehicle, towTruck)
  )
end

function VEHICLE.SET_VEHICLE_AUTOMATICALLY_ATTACHES(vehicle, p1, p2)
  return native.invoke(
    Type.Entity, 6042, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Bool, p1),
    arg(Type.Any, p2)
  )
end

function VEHICLE.SET_VEHICLE_BULLDOZER_ARM_POSITION(vehicle, position, p2)
  native.invoke(
    Type.Void, 6043, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Float, position),
    arg(Type.Bool, p2)
  )
end

function VEHICLE.SET_VEHICLE_TANK_TURRET_POSITION(vehicle, position, p2)
  native.invoke(
    Type.Void, 6044, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Float, position),
    arg(Type.Bool, p2)
  )
end

function VEHICLE.SET_VEHICLE_TURRET_TARGET(vehicle, p1, x, y, z, p5)
  native.invoke(
    Type.Void, 6045, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Bool, p1),
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, z),
    arg(Type.Bool, p5)
  )
end

function VEHICLE.SET_VEHICLE_TANK_STATIONARY(vehicle, p1)
  native.invoke(
    Type.Void, 6046, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Bool, p1)
  )
end

function VEHICLE.SET_VEHICLE_TURRET_SPEED_THIS_FRAME(vehicle, speed)
  native.invoke(
    Type.Void, 6047, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Float, speed)
  )
end

function VEHICLE.DISABLE_VEHICLE_TURRET_MOVEMENT_THIS_FRAME(vehicle)
  native.invoke(
    Type.Void, 6048, false,
    arg(Type.Vehicle, vehicle)
  )
end

function VEHICLE.SET_VEHICLE_FLIGHT_NOZZLE_POSITION(vehicle, angleRatio)
  native.invoke(
    Type.Void, 6049, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Float, angleRatio)
  )
end

function VEHICLE.SET_VEHICLE_FLIGHT_NOZZLE_POSITION_IMMEDIATE(vehicle, angle)
  native.invoke(
    Type.Void, 6050, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Float, angle)
  )
end

function VEHICLE.GET_VEHICLE_FLIGHT_NOZZLE_POSITION(plane)
  return native.invoke(
    Type.Float, 6051, false,
    arg(Type.Vehicle, plane)
  )
end

function VEHICLE.SET_DISABLE_VERTICAL_FLIGHT_MODE_TRANSITION(vehicle, toggle)
  native.invoke(
    Type.Void, 6052, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Bool, toggle)
  )
end

function VEHICLE.GENERATE_VEHICLE_CREATION_POS_FROM_PATHS(outVec, p1, outVec1, p3, p4, p5, p6, p7, p8)
  return native.invoke(
    Type.Bool, 6053, true,
    ref(Type.Vector3, outVec),
    arg(Type.Any, p1),
    ref(Type.Vector3, outVec1),
    arg(Type.Any, p3),
    arg(Type.Any, p4),
    arg(Type.Any, p5),
    arg(Type.Any, p6),
    arg(Type.Any, p7),
    arg(Type.Any, p8)
  )
end

function VEHICLE.SET_VEHICLE_BURNOUT(vehicle, toggle)
  native.invoke(
    Type.Void, 6054, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Bool, toggle)
  )
end

function VEHICLE.IS_VEHICLE_IN_BURNOUT(vehicle)
  return native.invoke(
    Type.Bool, 6055, false,
    arg(Type.Vehicle, vehicle)
  )
end

function VEHICLE.SET_VEHICLE_REDUCE_GRIP(vehicle, toggle)
  native.invoke(
    Type.Void, 6056, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Bool, toggle)
  )
end

function VEHICLE.SET_VEHICLE_REDUCE_GRIP_LEVEL(vehicle, val)
  native.invoke(
    Type.Void, 6057, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Int, val)
  )
end

function VEHICLE.SET_VEHICLE_INDICATOR_LIGHTS(vehicle, turnSignal, toggle)
  native.invoke(
    Type.Void, 6058, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Int, turnSignal),
    arg(Type.Bool, toggle)
  )
end

function VEHICLE.SET_VEHICLE_BRAKE_LIGHTS(vehicle, toggle)
  native.invoke(
    Type.Void, 6059, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Bool, toggle)
  )
end

function VEHICLE.SET_VEHICLE_TAIL_LIGHTS(vehicle, toggle)
  native.invoke(
    Type.Void, 6060, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Bool, toggle)
  )
end

function VEHICLE.SET_VEHICLE_HANDBRAKE(vehicle, toggle)
  native.invoke(
    Type.Void, 6061, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Bool, toggle)
  )
end

function VEHICLE.SET_VEHICLE_BRAKE(vehicle, toggle)
  native.invoke(
    Type.Void, 6062, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Bool, toggle)
  )
end

function VEHICLE.INSTANTLY_FILL_VEHICLE_POPULATION()
  native.invoke(
    Type.Void, 6063, false
  )
end

function VEHICLE.HAS_INSTANT_FILL_VEHICLE_POPULATION_FINISHED()
  return native.invoke(
    Type.Bool, 6064, false
  )
end

function VEHICLE.NETWORK_ENABLE_EMPTY_CROWDING_VEHICLES_REMOVAL(toggle)
  native.invoke(
    Type.Void, 6065, false,
    arg(Type.Bool, toggle)
  )
end

function VEHICLE.NETWORK_CAP_EMPTY_CROWDING_VEHICLES_REMOVAL(p0)
  native.invoke(
    Type.Void, 6066, false,
    arg(Type.Int, p0)
  )
end

function VEHICLE.GET_VEHICLE_TRAILER_VEHICLE(vehicle, trailer)
  return native.invoke(
    Type.Bool, 6067, false,
    arg(Type.Vehicle, vehicle),
    ref(Type.Vehicle, trailer)
  )
end

function VEHICLE._GET_VEHICLE_TRAILER_PARENT_VEHICLE(trailer)
  return native.invoke(
    Type.Vehicle, 6068, false,
    arg(Type.Vehicle, trailer)
  )
end

function VEHICLE.SET_VEHICLE_USES_LARGE_REAR_RAMP(vehicle, toggle)
  native.invoke(
    Type.Void, 6069, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Bool, toggle)
  )
end

function VEHICLE.SET_VEHICLE_RUDDER_BROKEN(vehicle, toggle)
  native.invoke(
    Type.Void, 6070, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Bool, toggle)
  )
end

function VEHICLE.SET_CONVERTIBLE_ROOF_LATCH_STATE(vehicle, state)
  native.invoke(
    Type.Void, 6071, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Bool, state)
  )
end

function VEHICLE.GET_VEHICLE_ESTIMATED_MAX_SPEED(vehicle)
  return native.invoke(
    Type.Float, 6072, false,
    arg(Type.Vehicle, vehicle)
  )
end

function VEHICLE.GET_VEHICLE_MAX_BRAKING(vehicle)
  return native.invoke(
    Type.Float, 6073, false,
    arg(Type.Vehicle, vehicle)
  )
end

function VEHICLE.GET_VEHICLE_MAX_TRACTION(vehicle)
  return native.invoke(
    Type.Float, 6074, false,
    arg(Type.Vehicle, vehicle)
  )
end

function VEHICLE.GET_VEHICLE_ACCELERATION(vehicle)
  return native.invoke(
    Type.Float, 6075, false,
    arg(Type.Vehicle, vehicle)
  )
end

function VEHICLE.GET_VEHICLE_MODEL_ESTIMATED_MAX_SPEED(modelHash)
  return native.invoke(
    Type.Float, 6076, false,
    arg(Type.Hash, modelHash)
  )
end

function VEHICLE.GET_VEHICLE_MODEL_MAX_BRAKING(modelHash)
  return native.invoke(
    Type.Float, 6077, false,
    arg(Type.Hash, modelHash)
  )
end

function VEHICLE.GET_VEHICLE_MODEL_MAX_BRAKING_MAX_MODS(modelHash)
  return native.invoke(
    Type.Float, 6078, false,
    arg(Type.Hash, modelHash)
  )
end

function VEHICLE.GET_VEHICLE_MODEL_MAX_TRACTION(modelHash)
  return native.invoke(
    Type.Float, 6079, false,
    arg(Type.Hash, modelHash)
  )
end

function VEHICLE.GET_VEHICLE_MODEL_ACCELERATION(modelHash)
  return native.invoke(
    Type.Float, 6080, false,
    arg(Type.Hash, modelHash)
  )
end

function VEHICLE.GET_VEHICLE_MODEL_ACCELERATION_MAX_MODS(modelHash)
  return native.invoke(
    Type.Float, 6081, false,
    arg(Type.Hash, modelHash)
  )
end

function VEHICLE.GET_FLYING_VEHICLE_MODEL_AGILITY(modelHash)
  return native.invoke(
    Type.Float, 6082, false,
    arg(Type.Hash, modelHash)
  )
end

function VEHICLE.GET_BOAT_VEHICLE_MODEL_AGILITY(modelHash)
  return native.invoke(
    Type.Float, 6083, false,
    arg(Type.Hash, modelHash)
  )
end

function VEHICLE.GET_VEHICLE_CLASS_ESTIMATED_MAX_SPEED(vehicleClass)
  return native.invoke(
    Type.Float, 6084, false,
    arg(Type.Int, vehicleClass)
  )
end

function VEHICLE.GET_VEHICLE_CLASS_MAX_TRACTION(vehicleClass)
  return native.invoke(
    Type.Float, 6085, false,
    arg(Type.Int, vehicleClass)
  )
end

function VEHICLE.GET_VEHICLE_CLASS_MAX_AGILITY(vehicleClass)
  return native.invoke(
    Type.Float, 6086, false,
    arg(Type.Int, vehicleClass)
  )
end

function VEHICLE.GET_VEHICLE_CLASS_MAX_ACCELERATION(vehicleClass)
  return native.invoke(
    Type.Float, 6087, false,
    arg(Type.Int, vehicleClass)
  )
end

function VEHICLE.GET_VEHICLE_CLASS_MAX_BRAKING(vehicleClass)
  return native.invoke(
    Type.Float, 6088, false,
    arg(Type.Int, vehicleClass)
  )
end

function VEHICLE.ADD_ROAD_NODE_SPEED_ZONE(x, y, z, radius, speed, p5)
  return native.invoke(
    Type.Int, 6089, false,
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, z),
    arg(Type.Float, radius),
    arg(Type.Float, speed),
    arg(Type.Bool, p5)
  )
end

function VEHICLE.REMOVE_ROAD_NODE_SPEED_ZONE(speedzone)
  return native.invoke(
    Type.Bool, 6090, false,
    arg(Type.Int, speedzone)
  )
end

function VEHICLE.OPEN_BOMB_BAY_DOORS(vehicle)
  native.invoke(
    Type.Void, 6091, false,
    arg(Type.Vehicle, vehicle)
  )
end

function VEHICLE.CLOSE_BOMB_BAY_DOORS(vehicle)
  native.invoke(
    Type.Void, 6092, false,
    arg(Type.Vehicle, vehicle)
  )
end

function VEHICLE.GET_ARE_BOMB_BAY_DOORS_OPEN(aircraft)
  return native.invoke(
    Type.Bool, 6093, false,
    arg(Type.Vehicle, aircraft)
  )
end

function VEHICLE.IS_VEHICLE_SEARCHLIGHT_ON(vehicle)
  return native.invoke(
    Type.Bool, 6094, false,
    arg(Type.Vehicle, vehicle)
  )
end

function VEHICLE.SET_VEHICLE_SEARCHLIGHT(heli, toggle, canBeUsedByAI)
  native.invoke(
    Type.Void, 6095, false,
    arg(Type.Vehicle, heli),
    arg(Type.Bool, toggle),
    arg(Type.Bool, canBeUsedByAI)
  )
end

function VEHICLE.DOES_VEHICLE_HAVE_SEARCHLIGHT(vehicle)
  return native.invoke(
    Type.Bool, 6096, false,
    arg(Type.Vehicle, vehicle)
  )
end

function VEHICLE.IS_ENTRY_POINT_FOR_SEAT_CLEAR(ped, vehicle, seatIndex, side, onEnter)
  return native.invoke(
    Type.Bool, 6097, false,
    arg(Type.Ped, ped),
    arg(Type.Vehicle, vehicle),
    arg(Type.Int, seatIndex),
    arg(Type.Bool, side),
    arg(Type.Bool, onEnter)
  )
end

function VEHICLE.GET_ENTRY_POINT_POSITION(vehicle, doorId)
  return native.invoke(
    Type.Vector3, 6098, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Int, doorId)
  )
end

function VEHICLE.CAN_SHUFFLE_SEAT(vehicle, seatIndex)
  return native.invoke(
    Type.Bool, 6099, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Int, seatIndex)
  )
end

function VEHICLE.GET_NUM_MOD_KITS(vehicle)
  return native.invoke(
    Type.Int, 6100, false,
    arg(Type.Vehicle, vehicle)
  )
end

function VEHICLE.SET_VEHICLE_MOD_KIT(vehicle, modKit)
  native.invoke(
    Type.Void, 6101, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Int, modKit)
  )
end

function VEHICLE.GET_VEHICLE_MOD_KIT(vehicle)
  return native.invoke(
    Type.Int, 6102, false,
    arg(Type.Vehicle, vehicle)
  )
end

function VEHICLE.GET_VEHICLE_MOD_KIT_TYPE(vehicle)
  return native.invoke(
    Type.Int, 6103, false,
    arg(Type.Vehicle, vehicle)
  )
end

function VEHICLE.GET_VEHICLE_WHEEL_TYPE(vehicle)
  return native.invoke(
    Type.Int, 6104, false,
    arg(Type.Vehicle, vehicle)
  )
end

function VEHICLE.SET_VEHICLE_WHEEL_TYPE(vehicle, WheelType)
  native.invoke(
    Type.Void, 6105, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Int, WheelType)
  )
end

function VEHICLE.GET_NUM_MOD_COLORS(paintType, p1)
  return native.invoke(
    Type.Int, 6106, false,
    arg(Type.Int, paintType),
    arg(Type.Bool, p1)
  )
end

function VEHICLE.SET_VEHICLE_MOD_COLOR_1(vehicle, paintType, color, pearlescentColor)
  native.invoke(
    Type.Void, 6107, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Int, paintType),
    arg(Type.Int, color),
    arg(Type.Int, pearlescentColor)
  )
end

function VEHICLE.SET_VEHICLE_MOD_COLOR_2(vehicle, paintType, color)
  native.invoke(
    Type.Void, 6108, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Int, paintType),
    arg(Type.Int, color)
  )
end

function VEHICLE.GET_VEHICLE_MOD_COLOR_1(vehicle, paintType, color, pearlescentColor)
  native.invoke(
    Type.Void, 6109, false,
    arg(Type.Vehicle, vehicle),
    ref(Type.Int, paintType),
    ref(Type.Int, color),
    ref(Type.Int, pearlescentColor)
  )
end

function VEHICLE.GET_VEHICLE_MOD_COLOR_2(vehicle, paintType, color)
  native.invoke(
    Type.Void, 6110, false,
    arg(Type.Vehicle, vehicle),
    ref(Type.Int, paintType),
    ref(Type.Int, color)
  )
end

function VEHICLE.GET_VEHICLE_MOD_COLOR_1_NAME(vehicle, p1)
  return native.invoke(
    Type.String, 6111, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Bool, p1)
  )
end

function VEHICLE.GET_VEHICLE_MOD_COLOR_2_NAME(vehicle)
  return native.invoke(
    Type.String, 6112, false,
    arg(Type.Vehicle, vehicle)
  )
end

function VEHICLE.HAVE_VEHICLE_MODS_STREAMED_IN(vehicle)
  return native.invoke(
    Type.Bool, 6113, false,
    arg(Type.Vehicle, vehicle)
  )
end

function VEHICLE.IS_VEHICLE_MOD_GEN9_EXCLUSIVE(vehicle, modType, modIndex)
  return native.invoke(
    Type.Bool, 6114, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Int, modType),
    arg(Type.Int, modIndex)
  )
end

function VEHICLE.SET_VEHICLE_MOD(vehicle, modType, modIndex, customTires)
  native.invoke(
    Type.Void, 6115, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Int, modType),
    arg(Type.Int, modIndex),
    arg(Type.Bool, customTires)
  )
end

function VEHICLE.GET_VEHICLE_MOD(vehicle, modType)
  return native.invoke(
    Type.Int, 6116, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Int, modType)
  )
end

function VEHICLE.GET_VEHICLE_MOD_VARIATION(vehicle, modType)
  return native.invoke(
    Type.Int, 6117, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Int, modType)
  )
end

function VEHICLE.GET_NUM_VEHICLE_MODS(vehicle, modType)
  return native.invoke(
    Type.Int, 6118, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Int, modType)
  )
end

function VEHICLE.REMOVE_VEHICLE_MOD(vehicle, modType)
  native.invoke(
    Type.Void, 6119, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Int, modType)
  )
end

function VEHICLE.TOGGLE_VEHICLE_MOD(vehicle, modType, toggle)
  native.invoke(
    Type.Void, 6120, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Int, modType),
    arg(Type.Bool, toggle)
  )
end

function VEHICLE.IS_TOGGLE_MOD_ON(vehicle, modType)
  return native.invoke(
    Type.Bool, 6121, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Int, modType)
  )
end

function VEHICLE.GET_MOD_TEXT_LABEL(vehicle, modType, modValue)
  return native.invoke(
    Type.String, 6122, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Int, modType),
    arg(Type.Int, modValue)
  )
end

function VEHICLE.GET_MOD_SLOT_NAME(vehicle, modType)
  return native.invoke(
    Type.String, 6123, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Int, modType)
  )
end

function VEHICLE.GET_LIVERY_NAME(vehicle, liveryIndex)
  return native.invoke(
    Type.String, 6124, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Int, liveryIndex)
  )
end

function VEHICLE.GET_VEHICLE_MOD_MODIFIER_VALUE(vehicle, modType, modIndex)
  return native.invoke(
    Type.Int, 6125, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Int, modType),
    arg(Type.Int, modIndex)
  )
end

function VEHICLE.GET_VEHICLE_MOD_IDENTIFIER_HASH(vehicle, modType, modIndex)
  return native.invoke(
    Type.Hash, 6126, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Int, modType),
    arg(Type.Int, modIndex)
  )
end

function VEHICLE.PRELOAD_VEHICLE_MOD(vehicle, modType, modIndex)
  native.invoke(
    Type.Void, 6127, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Int, modType),
    arg(Type.Int, modIndex)
  )
end

function VEHICLE.HAS_PRELOAD_MODS_FINISHED(vehicle)
  return native.invoke(
    Type.Bool, 6128, false,
    arg(Type.Vehicle, vehicle)
  )
end

function VEHICLE.RELEASE_PRELOAD_MODS(vehicle)
  native.invoke(
    Type.Void, 6129, false,
    arg(Type.Vehicle, vehicle)
  )
end

function VEHICLE.SET_VEHICLE_TYRE_SMOKE_COLOR(vehicle, r, g, b)
  native.invoke(
    Type.Void, 6130, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Int, r),
    arg(Type.Int, g),
    arg(Type.Int, b)
  )
end

function VEHICLE.GET_VEHICLE_TYRE_SMOKE_COLOR(vehicle, r, g, b)
  native.invoke(
    Type.Void, 6131, false,
    arg(Type.Vehicle, vehicle),
    ref(Type.Int, r),
    ref(Type.Int, g),
    ref(Type.Int, b)
  )
end

function VEHICLE.SET_VEHICLE_WINDOW_TINT(vehicle, tint)
  native.invoke(
    Type.Void, 6132, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Int, tint)
  )
end

function VEHICLE.GET_VEHICLE_WINDOW_TINT(vehicle)
  return native.invoke(
    Type.Int, 6133, false,
    arg(Type.Vehicle, vehicle)
  )
end

function VEHICLE.GET_NUM_VEHICLE_WINDOW_TINTS()
  return native.invoke(
    Type.Int, 6134, false
  )
end

function VEHICLE.GET_VEHICLE_COLOR(vehicle, r, g, b)
  native.invoke(
    Type.Void, 6135, false,
    arg(Type.Vehicle, vehicle),
    ref(Type.Int, r),
    ref(Type.Int, g),
    ref(Type.Int, b)
  )
end

function VEHICLE.GET_VEHICLE_COLOURS_WHICH_CAN_BE_SET(vehicle)
  return native.invoke(
    Type.Int, 6136, false,
    arg(Type.Vehicle, vehicle)
  )
end

function VEHICLE.GET_VEHICLE_CAUSE_OF_DESTRUCTION(vehicle)
  return native.invoke(
    Type.Hash, 6137, false,
    arg(Type.Vehicle, vehicle)
  )
end

function VEHICLE.OVERRIDE_PLANE_DAMAGE_THREHSOLD(vehicle, health)
  native.invoke(
    Type.Void, 6138, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Float, health)
  )
end

function VEHICLE._SET_TRANSMISSION_REDUCED_GEAR_RATIO(vehicle, toggle)
  native.invoke(
    Type.Void, 6139, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Bool, toggle)
  )
end

function VEHICLE._GET_VEHICLE_DESIRED_DRIVE_GEAR(vehicle)
  return native.invoke(
    Type.Int, 6140, false,
    arg(Type.Vehicle, vehicle)
  )
end

function VEHICLE.GET_IS_LEFT_VEHICLE_HEADLIGHT_DAMAGED(vehicle)
  return native.invoke(
    Type.Bool, 6141, false,
    arg(Type.Vehicle, vehicle)
  )
end

function VEHICLE.GET_IS_RIGHT_VEHICLE_HEADLIGHT_DAMAGED(vehicle)
  return native.invoke(
    Type.Bool, 6142, false,
    arg(Type.Vehicle, vehicle)
  )
end

function VEHICLE.GET_BOTH_VEHICLE_HEADLIGHTS_DAMAGED(vehicle)
  return native.invoke(
    Type.Bool, 6143, false,
    arg(Type.Vehicle, vehicle)
  )
end

function VEHICLE.MODIFY_VEHICLE_TOP_SPEED(vehicle, value)
  native.invoke(
    Type.Void, 6144, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Float, value)
  )
end

function VEHICLE.SET_VEHICLE_MAX_SPEED(vehicle, speed)
  native.invoke(
    Type.Void, 6145, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Float, speed)
  )
end

function VEHICLE.SET_VEHICLE_STAYS_FROZEN_WHEN_CLEANED_UP(vehicle, toggle)
  native.invoke(
    Type.Void, 6146, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Bool, toggle)
  )
end

function VEHICLE.SET_VEHICLE_ACT_AS_IF_HIGH_SPEED_FOR_FRAG_SMASHING(vehicle, p1)
  native.invoke(
    Type.Void, 6147, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Bool, p1)
  )
end

function VEHICLE.SET_PEDS_CAN_FALL_OFF_THIS_VEHICLE_FROM_LARGE_FALL_DAMAGE(vehicle, toggle, p2)
  native.invoke(
    Type.Void, 6148, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Bool, toggle),
    arg(Type.Float, p2)
  )
end

function VEHICLE.ADD_VEHICLE_COMBAT_ANGLED_AVOIDANCE_AREA(p0, p1, p2, p3, p4, p5, p6)
  return native.invoke(
    Type.Int, 6149, false,
    arg(Type.Float, p0),
    arg(Type.Float, p1),
    arg(Type.Float, p2),
    arg(Type.Float, p3),
    arg(Type.Float, p4),
    arg(Type.Float, p5),
    arg(Type.Float, p6)
  )
end

function VEHICLE.REMOVE_VEHICLE_COMBAT_AVOIDANCE_AREA(p0)
  native.invoke(
    Type.Void, 6150, false,
    arg(Type.Int, p0)
  )
end

function VEHICLE.IS_ANY_PED_RAPPELLING_FROM_HELI(vehicle)
  return native.invoke(
    Type.Bool, 6151, false,
    arg(Type.Vehicle, vehicle)
  )
end

function VEHICLE.SET_VEHICLE_CHEAT_POWER_INCREASE(vehicle, value)
  native.invoke(
    Type.Void, 6152, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Float, value)
  )
end

function VEHICLE.SET_VEHICLE_INFLUENCES_WANTED_LEVEL(p0, p1)
  native.invoke(
    Type.Void, 6153, false,
    arg(Type.Any, p0),
    arg(Type.Bool, p1)
  )
end

function VEHICLE.SET_VEHICLE_IS_WANTED(vehicle, state)
  native.invoke(
    Type.Void, 6154, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Bool, state)
  )
end

function VEHICLE.SWING_BOAT_BOOM_TO_RATIO(vehicle, ratio)
  native.invoke(
    Type.Void, 6155, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Float, ratio)
  )
end

function VEHICLE.SWING_BOAT_BOOM_FREELY(vehicle, toggle)
  native.invoke(
    Type.Void, 6156, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Bool, toggle)
  )
end

function VEHICLE.ALLOW_BOAT_BOOM_TO_ANIMATE(vehicle, toggle)
  native.invoke(
    Type.Void, 6157, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Bool, toggle)
  )
end

function VEHICLE.GET_BOAT_BOOM_POSITION_RATIO(vehicle)
  return native.invoke(
    Type.Float, 6158, false,
    arg(Type.Vehicle, vehicle)
  )
end

function VEHICLE.DISABLE_PLANE_AILERON(vehicle, p1, p2)
  native.invoke(
    Type.Void, 6159, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Bool, p1),
    arg(Type.Bool, p2)
  )
end

function VEHICLE.GET_IS_VEHICLE_ENGINE_RUNNING(vehicle)
  return native.invoke(
    Type.Bool, 6160, false,
    arg(Type.Vehicle, vehicle)
  )
end

function VEHICLE.SET_VEHICLE_USE_ALTERNATE_HANDLING(vehicle, toggle)
  native.invoke(
    Type.Void, 6161, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Bool, toggle)
  )
end

function VEHICLE.SET_BIKE_ON_STAND(vehicle, x, y)
  native.invoke(
    Type.Void, 6162, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Float, x),
    arg(Type.Float, y)
  )
end

function VEHICLE.SET_VEHICLE_NOT_STEALABLE_AMBIENTLY(vehicle, p1)
  native.invoke(
    Type.Void, 6163, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Bool, p1)
  )
end

function VEHICLE.LOCK_DOORS_WHEN_NO_LONGER_NEEDED(vehicle)
  native.invoke(
    Type.Void, 6164, false,
    arg(Type.Vehicle, vehicle)
  )
end

function VEHICLE.SET_LAST_DRIVEN_VEHICLE(vehicle)
  native.invoke(
    Type.Void, 6165, false,
    arg(Type.Vehicle, vehicle)
  )
end

function VEHICLE.GET_LAST_DRIVEN_VEHICLE()
  return native.invoke(
    Type.Vehicle, 6166, false
  )
end

function VEHICLE.CLEAR_LAST_DRIVEN_VEHICLE()
  native.invoke(
    Type.Void, 6167, false
  )
end

function VEHICLE.SET_VEHICLE_HAS_BEEN_DRIVEN_FLAG(vehicle, toggle)
  native.invoke(
    Type.Void, 6168, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Bool, toggle)
  )
end

function VEHICLE.SET_TASK_VEHICLE_GOTO_PLANE_MIN_HEIGHT_ABOVE_TERRAIN(plane, height)
  native.invoke(
    Type.Void, 6169, false,
    arg(Type.Vehicle, plane),
    arg(Type.Int, height)
  )
end

function VEHICLE.SET_VEHICLE_LOD_MULTIPLIER(vehicle, multiplier)
  native.invoke(
    Type.Void, 6170, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Float, multiplier)
  )
end

function VEHICLE.SET_VEHICLE_CAN_SAVE_IN_GARAGE(vehicle, toggle)
  native.invoke(
    Type.Void, 6171, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Bool, toggle)
  )
end

function VEHICLE.GET_VEHICLE_NUM_OF_BROKEN_OFF_PARTS(vehicle)
  return native.invoke(
    Type.Int, 6172, false,
    arg(Type.Vehicle, vehicle)
  )
end

function VEHICLE.GET_VEHICLE_NUM_OF_BROKEN_LOOSEN_PARTS(vehicle)
  return native.invoke(
    Type.Int, 6173, false,
    arg(Type.Vehicle, vehicle)
  )
end

function VEHICLE.SET_FORCE_VEHICLE_ENGINE_DAMAGE_BY_BULLET(p0, p1)
  native.invoke(
    Type.Void, 6174, false,
    arg(Type.Any, p0),
    arg(Type.Bool, p1)
  )
end

function VEHICLE.SET_VEHICLE_GENERATES_ENGINE_SHOCKING_EVENTS(vehicle, toggle)
  native.invoke(
    Type.Void, 6175, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Bool, toggle)
  )
end

function VEHICLE.COPY_VEHICLE_DAMAGES(sourceVehicle, targetVehicle)
  native.invoke(
    Type.Void, 6176, false,
    arg(Type.Vehicle, sourceVehicle),
    arg(Type.Vehicle, targetVehicle)
  )
end

function VEHICLE.DISABLE_VEHICLE_EXPLOSION_BREAK_OFF_PARTS()
  native.invoke(
    Type.Void, 6177, false
  )
end

function VEHICLE.SET_LIGHTS_CUTOFF_DISTANCE_TWEAK(distance)
  native.invoke(
    Type.Void, 6178, false,
    arg(Type.Float, distance)
  )
end

function VEHICLE.SET_VEHICLE_SHOOT_AT_TARGET(driver, entity, xTarget, yTarget, zTarget)
  native.invoke(
    Type.Void, 6179, false,
    arg(Type.Ped, driver),
    arg(Type.Entity, entity),
    arg(Type.Float, xTarget),
    arg(Type.Float, yTarget),
    arg(Type.Float, zTarget)
  )
end

function VEHICLE.GET_VEHICLE_LOCK_ON_TARGET(vehicle, entity)
  return native.invoke(
    Type.Bool, 6180, false,
    arg(Type.Vehicle, vehicle),
    ref(Type.Entity, entity)
  )
end

function VEHICLE.SET_FORCE_HD_VEHICLE(vehicle, toggle)
  native.invoke(
    Type.Void, 6181, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Bool, toggle)
  )
end

function VEHICLE.SET_VEHICLE_CUSTOM_PATH_NODE_STREAMING_RADIUS(vehicle, p1)
  native.invoke(
    Type.Void, 6182, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Float, p1)
  )
end

function VEHICLE.GET_VEHICLE_PLATE_TYPE(vehicle)
  return native.invoke(
    Type.Int, 6183, false,
    arg(Type.Vehicle, vehicle)
  )
end

function VEHICLE.TRACK_VEHICLE_VISIBILITY(vehicle)
  native.invoke(
    Type.Void, 6184, false,
    arg(Type.Vehicle, vehicle)
  )
end

function VEHICLE.IS_VEHICLE_VISIBLE(vehicle)
  return native.invoke(
    Type.Bool, 6185, false,
    arg(Type.Vehicle, vehicle)
  )
end

function VEHICLE.SET_VEHICLE_GRAVITY(vehicle, toggle)
  native.invoke(
    Type.Void, 6186, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Bool, toggle)
  )
end

function VEHICLE.SET_ENABLE_VEHICLE_SLIPSTREAMING(toggle)
  native.invoke(
    Type.Void, 6187, false,
    arg(Type.Bool, toggle)
  )
end

function VEHICLE.SET_VEHICLE_SLIPSTREAMING_SHOULD_TIME_OUT(toggle)
  native.invoke(
    Type.Void, 6188, false,
    arg(Type.Bool, toggle)
  )
end

function VEHICLE.GET_VEHICLE_CURRENT_TIME_IN_SLIP_STREAM(vehicle)
  return native.invoke(
    Type.Float, 6189, false,
    arg(Type.Vehicle, vehicle)
  )
end

function VEHICLE.IS_VEHICLE_PRODUCING_SLIP_STREAM(vehicle)
  return native.invoke(
    Type.Bool, 6190, false,
    arg(Type.Vehicle, vehicle)
  )
end

function VEHICLE.SET_VEHICLE_INACTIVE_DURING_PLAYBACK(vehicle, toggle)
  native.invoke(
    Type.Void, 6191, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Bool, toggle)
  )
end

function VEHICLE.SET_VEHICLE_ACTIVE_DURING_PLAYBACK(vehicle, toggle)
  native.invoke(
    Type.Void, 6192, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Bool, toggle)
  )
end

function VEHICLE.IS_VEHICLE_SPRAYABLE(vehicle)
  return native.invoke(
    Type.Bool, 6193, false,
    arg(Type.Vehicle, vehicle)
  )
end

function VEHICLE.SET_VEHICLE_ENGINE_CAN_DEGRADE(vehicle, toggle)
  native.invoke(
    Type.Void, 6194, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Bool, toggle)
  )
end

function VEHICLE.DISABLE_VEHCILE_DYNAMIC_AMBIENT_SCALES(vehicle, p1, p2)
  native.invoke(
    Type.Void, 6195, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Int, p1),
    arg(Type.Int, p2)
  )
end

function VEHICLE.ENABLE_VEHICLE_DYNAMIC_AMBIENT_SCALES(vehicle)
  native.invoke(
    Type.Void, 6196, false,
    arg(Type.Vehicle, vehicle)
  )
end

function VEHICLE.IS_PLANE_LANDING_GEAR_INTACT(plane)
  return native.invoke(
    Type.Bool, 6197, false,
    arg(Type.Vehicle, plane)
  )
end

function VEHICLE.ARE_PLANE_PROPELLERS_INTACT(plane)
  return native.invoke(
    Type.Bool, 6198, false,
    arg(Type.Vehicle, plane)
  )
end

function VEHICLE.SET_PLANE_PROPELLER_HEALTH(plane, health)
  return native.invoke(
    Type.Bool, 6199, false,
    arg(Type.Vehicle, plane),
    arg(Type.Float, health)
  )
end

function VEHICLE.SET_VEHICLE_CAN_DEFORM_WHEELS(vehicle, toggle)
  native.invoke(
    Type.Void, 6200, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Bool, toggle)
  )
end

function VEHICLE.IS_VEHICLE_STOLEN(vehicle)
  return native.invoke(
    Type.Bool, 6201, false,
    arg(Type.Vehicle, vehicle)
  )
end

function VEHICLE.SET_VEHICLE_IS_STOLEN(vehicle, isStolen)
  native.invoke(
    Type.Void, 6202, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Bool, isStolen)
  )
end

function VEHICLE.SET_PLANE_TURBULENCE_MULTIPLIER(vehicle, multiplier)
  native.invoke(
    Type.Void, 6203, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Float, multiplier)
  )
end

function VEHICLE.ARE_WINGS_OF_PLANE_INTACT(plane)
  return native.invoke(
    Type.Bool, 6204, false,
    arg(Type.Vehicle, plane)
  )
end

function VEHICLE.ALLOW_AMBIENT_VEHICLES_TO_AVOID_ADVERSE_CONDITIONS(vehicle)
  native.invoke(
    Type.Void, 6205, false,
    arg(Type.Vehicle, vehicle)
  )
end

function VEHICLE.DETACH_VEHICLE_FROM_CARGOBOB(vehicle, cargobob)
  native.invoke(
    Type.Void, 6206, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Vehicle, cargobob)
  )
end

function VEHICLE.DETACH_VEHICLE_FROM_ANY_CARGOBOB(vehicle)
  return native.invoke(
    Type.Bool, 6207, false,
    arg(Type.Vehicle, vehicle)
  )
end

function VEHICLE.DETACH_ENTITY_FROM_CARGOBOB(cargobob, entity)
  return native.invoke(
    Type.Bool, 6208, false,
    arg(Type.Vehicle, cargobob),
    arg(Type.Entity, entity)
  )
end

function VEHICLE.IS_VEHICLE_ATTACHED_TO_CARGOBOB(cargobob, vehicleAttached)
  return native.invoke(
    Type.Bool, 6209, false,
    arg(Type.Vehicle, cargobob),
    arg(Type.Vehicle, vehicleAttached)
  )
end

function VEHICLE.GET_VEHICLE_ATTACHED_TO_CARGOBOB(cargobob)
  return native.invoke(
    Type.Vehicle, 6210, false,
    arg(Type.Vehicle, cargobob)
  )
end

function VEHICLE.GET_ENTITY_ATTACHED_TO_CARGOBOB(p0)
  return native.invoke(
    Type.Entity, 6211, false,
    arg(Type.Any, p0)
  )
end

function VEHICLE.ATTACH_VEHICLE_TO_CARGOBOB(cargobob, vehicle, p2, x, y, z)
  native.invoke(
    Type.Void, 6212, false,
    arg(Type.Vehicle, cargobob),
    arg(Type.Vehicle, vehicle),
    arg(Type.Int, p2),
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, z)
  )
end

function VEHICLE.ATTACH_ENTITY_TO_CARGOBOB(p0, p1, p2, p3, p4, p5)
  native.invoke(
    Type.Void, 6213, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1),
    arg(Type.Any, p2),
    arg(Type.Any, p3),
    arg(Type.Any, p4),
    arg(Type.Any, p5)
  )
end

function VEHICLE.SET_CARGOBOB_FORCE_DONT_DETACH_VEHICLE(cargobob, toggle)
  native.invoke(
    Type.Void, 6214, false,
    arg(Type.Vehicle, cargobob),
    arg(Type.Bool, toggle)
  )
end

function VEHICLE.SET_CARGOBOB_EXCLUDE_FROM_PICKUP_ENTITY(p0, p1)
  native.invoke(
    Type.Void, 6215, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1)
  )
end

function VEHICLE.CAN_CARGOBOB_PICK_UP_ENTITY(p0, p1)
  return native.invoke(
    Type.Bool, 6216, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1)
  )
end

function VEHICLE.GET_ATTACHED_PICK_UP_HOOK_POSITION(cargobob)
  return native.invoke(
    Type.Vector3, 6217, false,
    arg(Type.Vehicle, cargobob)
  )
end

function VEHICLE.DOES_CARGOBOB_HAVE_PICK_UP_ROPE(cargobob)
  return native.invoke(
    Type.Bool, 6218, false,
    arg(Type.Vehicle, cargobob)
  )
end

function VEHICLE.CREATE_PICK_UP_ROPE_FOR_CARGOBOB(cargobob, state)
  native.invoke(
    Type.Void, 6219, false,
    arg(Type.Vehicle, cargobob),
    arg(Type.Int, state)
  )
end

function VEHICLE.REMOVE_PICK_UP_ROPE_FOR_CARGOBOB(cargobob)
  native.invoke(
    Type.Void, 6220, false,
    arg(Type.Vehicle, cargobob)
  )
end

function VEHICLE.SET_PICKUP_ROPE_LENGTH_FOR_CARGOBOB(cargobob, length1, length2, p3)
  native.invoke(
    Type.Void, 6221, false,
    arg(Type.Vehicle, cargobob),
    arg(Type.Float, length1),
    arg(Type.Float, length2),
    arg(Type.Bool, p3)
  )
end

function VEHICLE.SET_PICKUP_ROPE_LENGTH_WITHOUT_CREATING_ROPE_FOR_CARGOBOB(p0, p1, p2)
  native.invoke(
    Type.Void, 6222, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1),
    arg(Type.Any, p2)
  )
end

function VEHICLE.SET_CARGOBOB_PICKUP_ROPE_DAMPING_MULTIPLIER(p0, p1)
  native.invoke(
    Type.Void, 6223, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1)
  )
end

function VEHICLE.SET_CARGOBOB_PICKUP_ROPE_TYPE(p0, p1)
  native.invoke(
    Type.Void, 6224, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1)
  )
end

function VEHICLE.DOES_CARGOBOB_HAVE_PICKUP_MAGNET(cargobob)
  return native.invoke(
    Type.Bool, 6225, false,
    arg(Type.Vehicle, cargobob)
  )
end

function VEHICLE.SET_CARGOBOB_PICKUP_MAGNET_ACTIVE(cargobob, isActive)
  native.invoke(
    Type.Void, 6226, false,
    arg(Type.Vehicle, cargobob),
    arg(Type.Bool, isActive)
  )
end

function VEHICLE.SET_CARGOBOB_PICKUP_MAGNET_STRENGTH(cargobob, strength)
  native.invoke(
    Type.Void, 6227, false,
    arg(Type.Vehicle, cargobob),
    arg(Type.Float, strength)
  )
end

function VEHICLE.SET_CARGOBOB_PICKUP_MAGNET_FALLOFF(cargobob, p1)
  native.invoke(
    Type.Void, 6228, false,
    arg(Type.Vehicle, cargobob),
    arg(Type.Float, p1)
  )
end

function VEHICLE.SET_CARGOBOB_PICKUP_MAGNET_REDUCED_STRENGTH(cargobob, p1)
  native.invoke(
    Type.Void, 6229, false,
    arg(Type.Vehicle, cargobob),
    arg(Type.Float, p1)
  )
end

function VEHICLE.SET_CARGOBOB_PICKUP_MAGNET_REDUCED_FALLOFF(cargobob, p1)
  native.invoke(
    Type.Void, 6230, false,
    arg(Type.Vehicle, cargobob),
    arg(Type.Float, p1)
  )
end

function VEHICLE.SET_CARGOBOB_PICKUP_MAGNET_PULL_STRENGTH(cargobob, p1)
  native.invoke(
    Type.Void, 6231, false,
    arg(Type.Vehicle, cargobob),
    arg(Type.Float, p1)
  )
end

function VEHICLE.SET_CARGOBOB_PICKUP_MAGNET_PULL_ROPE_LENGTH(vehicle, p1)
  native.invoke(
    Type.Void, 6232, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Float, p1)
  )
end

function VEHICLE.SET_CARGOBOB_PICKUP_MAGNET_SET_TARGETED_MODE(vehicle, cargobob)
  native.invoke(
    Type.Void, 6233, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Vehicle, cargobob)
  )
end

function VEHICLE.SET_CARGOBOB_PICKUP_MAGNET_SET_AMBIENT_MODE(vehicle, p1, p2)
  native.invoke(
    Type.Void, 6234, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Bool, p1),
    arg(Type.Bool, p2)
  )
end

function VEHICLE.SET_CARGOBOB_PICKUP_MAGNET_ENSURE_PICKUP_ENTITY_UPRIGHT(vehicle, p1)
  native.invoke(
    Type.Void, 6235, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Bool, p1)
  )
end

function VEHICLE.DOES_VEHICLE_HAVE_WEAPONS(vehicle)
  return native.invoke(
    Type.Bool, 6236, false,
    arg(Type.Vehicle, vehicle)
  )
end

function VEHICLE.SET_VEHICLE_WILL_TELL_OTHERS_TO_HURRY(vehicle, p1)
  native.invoke(
    Type.Void, 6237, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Bool, p1)
  )
end

function VEHICLE.DISABLE_VEHICLE_WEAPON(disabled, weaponHash, vehicle, owner)
  native.invoke(
    Type.Void, 6238, false,
    arg(Type.Bool, disabled),
    arg(Type.Hash, weaponHash),
    arg(Type.Vehicle, vehicle),
    arg(Type.Ped, owner)
  )
end

function VEHICLE.IS_VEHICLE_WEAPON_DISABLED(weaponHash, vehicle, owner)
  return native.invoke(
    Type.Bool, 6239, false,
    arg(Type.Hash, weaponHash),
    arg(Type.Vehicle, vehicle),
    arg(Type.Ped, owner)
  )
end

function VEHICLE.SET_VEHICLE_USED_FOR_PILOT_SCHOOL(vehicle, toggle)
  native.invoke(
    Type.Void, 6240, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Bool, toggle)
  )
end

function VEHICLE.SET_VEHICLE_ACTIVE_FOR_PED_NAVIGATION(vehicle, toggle)
  native.invoke(
    Type.Void, 6241, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Bool, toggle)
  )
end

function VEHICLE.GET_VEHICLE_CLASS(vehicle)
  return native.invoke(
    Type.Int, 6242, false,
    arg(Type.Vehicle, vehicle)
  )
end

function VEHICLE.GET_VEHICLE_CLASS_FROM_NAME(modelHash)
  return native.invoke(
    Type.Int, 6243, false,
    arg(Type.Hash, modelHash)
  )
end

function VEHICLE.SET_PLAYERS_LAST_VEHICLE(vehicle)
  native.invoke(
    Type.Void, 6244, false,
    arg(Type.Vehicle, vehicle)
  )
end

function VEHICLE.SET_VEHICLE_CAN_BE_USED_BY_FLEEING_PEDS(vehicle, toggle)
  native.invoke(
    Type.Void, 6245, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Bool, toggle)
  )
end

function VEHICLE.SET_AIRCRAFT_PILOT_SKILL_NOISE_SCALAR(vehicle, p1)
  native.invoke(
    Type.Void, 6246, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Float, p1)
  )
end

function VEHICLE.SET_VEHICLE_DROPS_MONEY_WHEN_BLOWN_UP(vehicle, toggle)
  native.invoke(
    Type.Void, 6247, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Bool, toggle)
  )
end

function VEHICLE.SET_VEHICLE_KEEP_ENGINE_ON_WHEN_ABANDONED(vehicle, toggle)
  native.invoke(
    Type.Void, 6248, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Bool, toggle)
  )
end

function VEHICLE.SET_VEHICLE_IMPATIENCE_TIMER(vehicle, p1)
  native.invoke(
    Type.Void, 6249, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Any, p1)
  )
end

function VEHICLE.SET_VEHICLE_HANDLING_OVERRIDE(vehicle, hash)
  native.invoke(
    Type.Void, 6250, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Hash, hash)
  )
end

function VEHICLE.SET_VEHICLE_EXTENDED_REMOVAL_RANGE(vehicle, range)
  native.invoke(
    Type.Void, 6251, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Int, range)
  )
end

function VEHICLE.SET_VEHICLE_STEERING_BIAS_SCALAR(p0, p1)
  native.invoke(
    Type.Void, 6252, false,
    arg(Type.Any, p0),
    arg(Type.Float, p1)
  )
end

function VEHICLE.SET_HELI_CONTROL_LAGGING_RATE_SCALAR(helicopter, multiplier)
  native.invoke(
    Type.Void, 6253, false,
    arg(Type.Vehicle, helicopter),
    arg(Type.Float, multiplier)
  )
end

function VEHICLE.SET_VEHICLE_FRICTION_OVERRIDE(vehicle, friction)
  native.invoke(
    Type.Void, 6254, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Float, friction)
  )
end

function VEHICLE.SET_VEHICLE_WHEELS_CAN_BREAK_OFF_WHEN_BLOW_UP(vehicle, toggle)
  native.invoke(
    Type.Void, 6255, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Bool, toggle)
  )
end

function VEHICLE.ARE_PLANE_CONTROL_PANELS_INTACT(vehicle, p1)
  return native.invoke(
    Type.Bool, 6256, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Bool, p1)
  )
end

function VEHICLE.SET_VEHICLE_CEILING_HEIGHT(vehicle, height)
  native.invoke(
    Type.Void, 6257, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Float, height)
  )
end

function VEHICLE.SET_VEHICLE_NO_EXPLOSION_DAMAGE_FROM_DRIVER(vehicle, toggle)
  native.invoke(
    Type.Void, 6258, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Bool, toggle)
  )
end

function VEHICLE.CLEAR_VEHICLE_ROUTE_HISTORY(vehicle)
  native.invoke(
    Type.Void, 6259, false,
    arg(Type.Vehicle, vehicle)
  )
end

function VEHICLE.DOES_VEHICLE_EXIST_WITH_DECORATOR(decorator)
  return native.invoke(
    Type.Vehicle, 6260, false,
    arg(Type.String, decorator)
  )
end

function VEHICLE.SET_VEHICLE_AI_CAN_USE_EXCLUSIVE_SEATS(vehicle, toggle)
  native.invoke(
    Type.Void, 6261, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Bool, toggle)
  )
end

function VEHICLE.SET_VEHICLE_EXCLUSIVE_DRIVER(vehicle, ped, index)
  native.invoke(
    Type.Void, 6262, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Ped, ped),
    arg(Type.Int, index)
  )
end

function VEHICLE.IS_PED_EXCLUSIVE_DRIVER_OF_VEHICLE(ped, vehicle, outIndex)
  return native.invoke(
    Type.Bool, 6263, false,
    arg(Type.Ped, ped),
    arg(Type.Vehicle, vehicle),
    ref(Type.Int, outIndex)
  )
end

function VEHICLE.DISABLE_INDIVIDUAL_PLANE_PROPELLER(vehicle, propeller)
  native.invoke(
    Type.Void, 6264, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Int, propeller)
  )
end

function VEHICLE.SET_VEHICLE_FORCE_AFTERBURNER(vehicle, toggle)
  native.invoke(
    Type.Void, 6265, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Bool, toggle)
  )
end

function VEHICLE.SET_DONT_PROCESS_VEHICLE_GLASS(vehicle, toggle)
  native.invoke(
    Type.Void, 6266, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Bool, toggle)
  )
end

function VEHICLE.SET_DISABLE_WANTED_CONES_RESPONSE(vehicle, toggle)
  native.invoke(
    Type.Void, 6267, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Bool, toggle)
  )
end

function VEHICLE.SET_USE_DESIRED_Z_CRUISE_SPEED_FOR_LANDING(vehicle, toggle)
  native.invoke(
    Type.Void, 6268, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Bool, toggle)
  )
end

function VEHICLE.SET_ARRIVE_DISTANCE_OVERRIDE_FOR_VEHICLE_PERSUIT_ATTACK(vehicle, p1)
  native.invoke(
    Type.Void, 6269, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Float, p1)
  )
end

function VEHICLE.SET_VEHICLE_READY_FOR_CLEANUP(p0)
  native.invoke(
    Type.Void, 6270, false,
    arg(Type.Any, p0)
  )
end

function VEHICLE.SET_DISTANT_CARS_ENABLED(toggle)
  native.invoke(
    Type.Void, 6271, false,
    arg(Type.Bool, toggle)
  )
end

function VEHICLE.SET_VEHICLE_NEON_COLOUR(vehicle, r, g, b)
  native.invoke(
    Type.Void, 6272, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Int, r),
    arg(Type.Int, g),
    arg(Type.Int, b)
  )
end

function VEHICLE.SET_VEHICLE_NEON_INDEX_COLOUR(vehicle, index)
  native.invoke(
    Type.Void, 6273, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Int, index)
  )
end

function VEHICLE.GET_VEHICLE_NEON_COLOUR(vehicle, r, g, b)
  native.invoke(
    Type.Void, 6274, false,
    arg(Type.Vehicle, vehicle),
    ref(Type.Int, r),
    ref(Type.Int, g),
    ref(Type.Int, b)
  )
end

function VEHICLE.SET_VEHICLE_NEON_ENABLED(vehicle, index, toggle)
  native.invoke(
    Type.Void, 6275, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Int, index),
    arg(Type.Bool, toggle)
  )
end

function VEHICLE.GET_VEHICLE_NEON_ENABLED(vehicle, index)
  return native.invoke(
    Type.Bool, 6276, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Int, index)
  )
end

function VEHICLE.SET_AMBIENT_VEHICLE_NEON_ENABLED(p0)
  native.invoke(
    Type.Void, 6277, false,
    arg(Type.Bool, p0)
  )
end

function VEHICLE.SUPPRESS_NEONS_ON_VEHICLE(vehicle, toggle)
  native.invoke(
    Type.Void, 6278, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Bool, toggle)
  )
end

function VEHICLE.SET_DISABLE_SUPERDUMMY(vehicle, p1)
  native.invoke(
    Type.Void, 6279, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Bool, p1)
  )
end

function VEHICLE.REQUEST_VEHICLE_DIAL(vehicle)
  native.invoke(
    Type.Void, 6280, false,
    arg(Type.Vehicle, vehicle)
  )
end

function VEHICLE.GET_VEHICLE_BODY_HEALTH(vehicle)
  return native.invoke(
    Type.Float, 6281, false,
    arg(Type.Vehicle, vehicle)
  )
end

function VEHICLE.SET_VEHICLE_BODY_HEALTH(vehicle, value)
  native.invoke(
    Type.Void, 6282, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Float, value)
  )
end

function VEHICLE.GET_VEHICLE_SIZE(vehicle, out1, out2)
  native.invoke(
    Type.Void, 6283, true,
    arg(Type.Vehicle, vehicle),
    ref(Type.Vector3, out1),
    ref(Type.Vector3, out2)
  )
end

function VEHICLE.GET_FAKE_SUSPENSION_LOWERING_AMOUNT(vehicle)
  return native.invoke(
    Type.Float, 6284, false,
    arg(Type.Vehicle, vehicle)
  )
end

function VEHICLE.SET_CAR_HIGH_SPEED_BUMP_SEVERITY_MULTIPLIER(multiplier)
  native.invoke(
    Type.Void, 6285, false,
    arg(Type.Float, multiplier)
  )
end

function VEHICLE.GET_NUMBER_OF_VEHICLE_DOORS(vehicle)
  return native.invoke(
    Type.Int, 6286, false,
    arg(Type.Vehicle, vehicle)
  )
end

function VEHICLE.SET_HYDRAULICS_CONTROL(vehicle, toggle)
  native.invoke(
    Type.Void, 6287, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Bool, toggle)
  )
end

function VEHICLE.SET_CAN_ADJUST_GROUND_CLEARANCE(vehicle, p1)
  native.invoke(
    Type.Void, 6288, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Bool, p1)
  )
end

function VEHICLE.GET_VEHICLE_HEALTH_PERCENTAGE(vehicle, maxEngineHealth, maxPetrolTankHealth, maxBodyHealth, maxMainRotorHealth, maxTailRotorHealth, maxUnkHealth)
  return native.invoke(
    Type.Float, 6289, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Float, maxEngineHealth),
    arg(Type.Float, maxPetrolTankHealth),
    arg(Type.Float, maxBodyHealth),
    arg(Type.Float, maxMainRotorHealth),
    arg(Type.Float, maxTailRotorHealth),
    arg(Type.Float, maxUnkHealth)
  )
end

function VEHICLE.GET_VEHICLE_IS_MERCENARY(vehicle)
  return native.invoke(
    Type.Bool, 6290, false,
    arg(Type.Vehicle, vehicle)
  )
end

function VEHICLE.SET_VEHICLE_BROKEN_PARTS_DONT_AFFECT_AI_HANDLING(vehicle, p1)
  native.invoke(
    Type.Void, 6291, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Bool, p1)
  )
end

function VEHICLE.SET_VEHICLE_KERS_ALLOWED(vehicle, toggle)
  native.invoke(
    Type.Void, 6292, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Bool, toggle)
  )
end

function VEHICLE.GET_VEHICLE_HAS_KERS(vehicle)
  return native.invoke(
    Type.Bool, 6293, false,
    arg(Type.Vehicle, vehicle)
  )
end

function VEHICLE.SET_PLANE_RESIST_TO_EXPLOSION(vehicle, toggle)
  native.invoke(
    Type.Void, 6294, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Bool, toggle)
  )
end

function VEHICLE.SET_HELI_RESIST_TO_EXPLOSION(vehicle, toggle)
  native.invoke(
    Type.Void, 6295, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Bool, toggle)
  )
end

function VEHICLE.SET_DISABLE_BMX_EXTRA_TRICK_FORCES(p0)
  native.invoke(
    Type.Void, 6296, false,
    arg(Type.Any, p0)
  )
end

function VEHICLE.SET_HYDRAULIC_SUSPENSION_RAISE_FACTOR(vehicle, wheelId, value)
  native.invoke(
    Type.Void, 6297, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Int, wheelId),
    arg(Type.Float, value)
  )
end

function VEHICLE.GET_HYDRAULIC_SUSPENSION_RAISE_FACTOR(vehicle, wheelId)
  return native.invoke(
    Type.Float, 6298, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Int, wheelId)
  )
end

function VEHICLE.SET_CAN_USE_HYDRAULICS(vehicle, toggle)
  native.invoke(
    Type.Void, 6299, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Bool, toggle)
  )
end

function VEHICLE.SET_HYDRAULIC_VEHICLE_STATE(vehicle, state)
  native.invoke(
    Type.Void, 6300, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Int, state)
  )
end

function VEHICLE.SET_HYDRAULIC_WHEEL_STATE(vehicle, wheelId, state, value, p4)
  native.invoke(
    Type.Void, 6301, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Int, wheelId),
    arg(Type.Int, state),
    arg(Type.Float, value),
    arg(Type.Any, p4)
  )
end

function VEHICLE.HAS_VEHICLE_PETROLTANK_SET_ON_FIRE_BY_ENTITY(p0, p1)
  return native.invoke(
    Type.Bool, 6302, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1)
  )
end

function VEHICLE.CLEAR_VEHICLE_PETROLTANK_FIRE_CULPRIT(vehicle)
  native.invoke(
    Type.Void, 6303, false,
    arg(Type.Vehicle, vehicle)
  )
end

function VEHICLE.SET_VEHICLE_BOBBLEHEAD_VELOCITY(x, y, p2)
  native.invoke(
    Type.Void, 6304, false,
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, p2)
  )
end

function VEHICLE.GET_VEHICLE_IS_DUMMY(p0)
  return native.invoke(
    Type.Bool, 6305, false,
    arg(Type.Any, p0)
  )
end

function VEHICLE.SET_VEHICLE_DAMAGE_SCALE(vehicle, p1)
  return native.invoke(
    Type.Bool, 6306, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Float, p1)
  )
end

function VEHICLE.SET_VEHICLE_WEAPON_DAMAGE_SCALE(vehicle, multiplier)
  return native.invoke(
    Type.Bool, 6307, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Float, multiplier)
  )
end

function VEHICLE.SET_DISABLE_DAMAGE_WITH_PICKED_UP_ENTITY(p0, p1)
  return native.invoke(
    Type.Bool, 6308, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1)
  )
end

function VEHICLE.SET_VEHICLE_USES_MP_PLAYER_DAMAGE_MULTIPLIER(p0, p1)
  native.invoke(
    Type.Void, 6309, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1)
  )
end

function VEHICLE.SET_BIKE_EASY_TO_LAND(vehicle, toggle)
  native.invoke(
    Type.Void, 6310, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Bool, toggle)
  )
end

function VEHICLE.SET_INVERT_VEHICLE_CONTROLS(vehicle, state)
  native.invoke(
    Type.Void, 6311, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Bool, state)
  )
end

function VEHICLE.SET_SPEED_BOOST_EFFECT_DISABLED(disabled)
  native.invoke(
    Type.Void, 6312, false,
    arg(Type.Bool, disabled)
  )
end

function VEHICLE.SET_SLOW_DOWN_EFFECT_DISABLED(disabled)
  native.invoke(
    Type.Void, 6313, false,
    arg(Type.Bool, disabled)
  )
end

function VEHICLE.SET_FORMATION_LEADER(vehicle, x, y, z, p4)
  native.invoke(
    Type.Void, 6314, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, z),
    arg(Type.Float, p4)
  )
end

function VEHICLE.RESET_FORMATION_LEADER()
  native.invoke(
    Type.Void, 6315, false
  )
end

function VEHICLE.GET_IS_BOAT_CAPSIZED(vehicle)
  return native.invoke(
    Type.Bool, 6316, false,
    arg(Type.Vehicle, vehicle)
  )
end

function VEHICLE.SET_ALLOW_RAMMING_SOOP_OR_RAMP(p0, p1)
  native.invoke(
    Type.Void, 6317, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1)
  )
end

function VEHICLE.SET_SCRIPT_RAMP_IMPULSE_SCALE(vehicle, impulseScale)
  native.invoke(
    Type.Void, 6318, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Float, impulseScale)
  )
end

function VEHICLE.GET_IS_DOOR_VALID(vehicle, doorId)
  return native.invoke(
    Type.Bool, 6319, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Int, doorId)
  )
end

function VEHICLE.SET_SCRIPT_ROCKET_BOOST_RECHARGE_TIME(vehicle, seconds)
  native.invoke(
    Type.Void, 6320, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Float, seconds)
  )
end

function VEHICLE.GET_HAS_ROCKET_BOOST(vehicle)
  return native.invoke(
    Type.Bool, 6321, false,
    arg(Type.Vehicle, vehicle)
  )
end

function VEHICLE.IS_ROCKET_BOOST_ACTIVE(vehicle)
  return native.invoke(
    Type.Bool, 6322, false,
    arg(Type.Vehicle, vehicle)
  )
end

function VEHICLE.SET_ROCKET_BOOST_ACTIVE(vehicle, active)
  native.invoke(
    Type.Void, 6323, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Bool, active)
  )
end

function VEHICLE.GET_HAS_RETRACTABLE_WHEELS(vehicle)
  return native.invoke(
    Type.Bool, 6324, false,
    arg(Type.Vehicle, vehicle)
  )
end

function VEHICLE.GET_IS_WHEELS_RETRACTED(vehicle)
  return native.invoke(
    Type.Bool, 6325, false,
    arg(Type.Vehicle, vehicle)
  )
end

function VEHICLE.SET_WHEELS_EXTENDED_INSTANTLY(vehicle)
  native.invoke(
    Type.Void, 6326, false,
    arg(Type.Vehicle, vehicle)
  )
end

function VEHICLE.SET_WHEELS_RETRACTED_INSTANTLY(vehicle)
  native.invoke(
    Type.Void, 6327, false,
    arg(Type.Vehicle, vehicle)
  )
end

function VEHICLE.GET_CAR_HAS_JUMP(vehicle)
  return native.invoke(
    Type.Bool, 6328, false,
    arg(Type.Vehicle, vehicle)
  )
end

function VEHICLE.SET_USE_HIGHER_CAR_JUMP(vehicle, toggle)
  native.invoke(
    Type.Void, 6329, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Bool, toggle)
  )
end

function VEHICLE.SET_CLEAR_FREEZE_WAITING_ON_COLLISION_ONCE_PLAYER_ENTERS(vehicle, toggle)
  native.invoke(
    Type.Void, 6330, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Bool, toggle)
  )
end

function VEHICLE.SET_VEHICLE_WEAPON_RESTRICTED_AMMO(vehicle, weaponIndex, capacity)
  native.invoke(
    Type.Void, 6331, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Int, weaponIndex),
    arg(Type.Int, capacity)
  )
end

function VEHICLE.GET_VEHICLE_WEAPON_RESTRICTED_AMMO(vehicle, weaponIndex)
  return native.invoke(
    Type.Int, 6332, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Int, weaponIndex)
  )
end

function VEHICLE.GET_VEHICLE_HAS_PARACHUTE(vehicle)
  return native.invoke(
    Type.Bool, 6333, false,
    arg(Type.Vehicle, vehicle)
  )
end

function VEHICLE.GET_VEHICLE_CAN_DEPLOY_PARACHUTE(vehicle)
  return native.invoke(
    Type.Bool, 6334, false,
    arg(Type.Vehicle, vehicle)
  )
end

function VEHICLE.VEHICLE_START_PARACHUTING(vehicle, active)
  native.invoke(
    Type.Void, 6335, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Bool, active)
  )
end

function VEHICLE.IS_VEHICLE_PARACHUTE_DEPLOYED(vehicle)
  return native.invoke(
    Type.Bool, 6336, false,
    arg(Type.Vehicle, vehicle)
  )
end

function VEHICLE.VEHICLE_SET_RAMP_AND_RAMMING_CARS_TAKE_DAMAGE(vehicle, toggle)
  native.invoke(
    Type.Void, 6337, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Bool, toggle)
  )
end

function VEHICLE.VEHICLE_SET_ENABLE_RAMP_CAR_SIDE_IMPULSE(p0, p1)
  native.invoke(
    Type.Void, 6338, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1)
  )
end

function VEHICLE.VEHICLE_SET_ENABLE_NORMALISE_RAMP_CAR_VERTICAL_VELOCTIY(p0, p1)
  native.invoke(
    Type.Void, 6339, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1)
  )
end

function VEHICLE.VEHICLE_SET_JET_WASH_FORCE_ENABLED(p0)
  native.invoke(
    Type.Void, 6340, false,
    arg(Type.Any, p0)
  )
end

function VEHICLE.SET_VEHICLE_WEAPON_CAN_TARGET_OBJECTS(vehicle, toggle)
  native.invoke(
    Type.Void, 6341, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Bool, toggle)
  )
end

function VEHICLE.SET_VEHICLE_USE_BOOST_BUTTON_FOR_WHEEL_RETRACT(toggle)
  native.invoke(
    Type.Void, 6342, false,
    arg(Type.Bool, toggle)
  )
end

function VEHICLE._SET_VEHICLE_USE_HORN_BUTTON_FOR_NITROUS(toggle)
  native.invoke(
    Type.Void, 6343, false,
    arg(Type.Bool, toggle)
  )
end

function VEHICLE.VEHICLE_SET_PARACHUTE_MODEL_OVERRIDE(vehicle, modelHash)
  native.invoke(
    Type.Void, 6344, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Hash, modelHash)
  )
end

function VEHICLE.VEHICLE_SET_PARACHUTE_MODEL_TINT_INDEX(vehicle, textureVariation)
  native.invoke(
    Type.Void, 6345, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Int, textureVariation)
  )
end

function VEHICLE.VEHICLE_SET_OVERRIDE_EXTENABLE_SIDE_RATIO(p0, p1)
  return native.invoke(
    Type.Int, 6346, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1)
  )
end

function VEHICLE.VEHICLE_SET_EXTENABLE_SIDE_TARGET_RATIO(p0, p1)
  return native.invoke(
    Type.Int, 6347, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1)
  )
end

function VEHICLE.VEHICLE_SET_OVERRIDE_SIDE_RATIO(p0, p1)
  return native.invoke(
    Type.Int, 6348, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1)
  )
end

function VEHICLE.GET_ALL_VEHICLES(vehsStruct)
  return native.invoke(
    Type.Int, 6349, false,
    ref(Type.Any, vehsStruct)
  )
end

function VEHICLE.SET_CARGOBOB_EXTA_PICKUP_RANGE(p0, p1)
  native.invoke(
    Type.Void, 6350, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1)
  )
end

function VEHICLE.SET_OVERRIDE_VEHICLE_DOOR_TORQUE(p0, p1, p2)
  native.invoke(
    Type.Void, 6351, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1),
    arg(Type.Any, p2)
  )
end

function VEHICLE.SET_WHEELIE_ENABLED(vehicle, enabled)
  native.invoke(
    Type.Void, 6352, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Bool, enabled)
  )
end

function VEHICLE.SET_DISABLE_HELI_EXPLODE_FROM_BODY_DAMAGE(p0, p1)
  native.invoke(
    Type.Void, 6353, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1)
  )
end

function VEHICLE.SET_DISABLE_EXPLODE_FROM_BODY_DAMAGE_ON_COLLISION(vehicle, value)
  native.invoke(
    Type.Void, 6354, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Float, value)
  )
end

function VEHICLE.SET_TRAILER_ATTACHMENT_ENABLED(p0, p1)
  native.invoke(
    Type.Void, 6355, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1)
  )
end

function VEHICLE.SET_ROCKET_BOOST_FILL(vehicle, percentage)
  native.invoke(
    Type.Void, 6356, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Float, percentage)
  )
end

function VEHICLE.SET_GLIDER_ACTIVE(vehicle, state)
  native.invoke(
    Type.Void, 6357, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Bool, state)
  )
end

function VEHICLE.SET_SHOULD_RESET_TURRET_IN_SCRIPTED_CAMERAS(vehicle, shouldReset)
  native.invoke(
    Type.Void, 6358, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Bool, shouldReset)
  )
end

function VEHICLE.SET_VEHICLE_DISABLE_COLLISION_UPON_CREATION(vehicle, disable)
  native.invoke(
    Type.Void, 6359, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Bool, disable)
  )
end

function VEHICLE.SET_GROUND_EFFECT_REDUCES_DRAG(toggle)
  native.invoke(
    Type.Void, 6360, false,
    arg(Type.Bool, toggle)
  )
end

function VEHICLE.SET_DISABLE_MAP_COLLISION(vehicle)
  native.invoke(
    Type.Void, 6361, false,
    arg(Type.Vehicle, vehicle)
  )
end

function VEHICLE.SET_DISABLE_PED_STAND_ON_TOP(vehicle, toggle)
  native.invoke(
    Type.Void, 6362, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Bool, toggle)
  )
end

function VEHICLE.SET_VEHICLE_DAMAGE_SCALES(vehicle, p1, p2, p3, p4)
  native.invoke(
    Type.Void, 6363, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Any, p1),
    arg(Type.Any, p2),
    arg(Type.Any, p3),
    arg(Type.Any, p4)
  )
end

function VEHICLE.SET_PLANE_SECTION_DAMAGE_SCALE(vehicle, p1, p2)
  native.invoke(
    Type.Void, 6364, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Any, p1),
    arg(Type.Any, p2)
  )
end

function VEHICLE.SET_HELI_CAN_PICKUP_ENTITY_THAT_HAS_PICK_UP_DISABLED(vehicle, toggle)
  native.invoke(
    Type.Void, 6365, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Bool, toggle)
  )
end

function VEHICLE.SET_VEHICLE_BOMB_AMMO(vehicle, bombCount)
  native.invoke(
    Type.Void, 6366, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Int, bombCount)
  )
end

function VEHICLE.GET_VEHICLE_BOMB_AMMO(vehicle)
  return native.invoke(
    Type.Int, 6367, false,
    arg(Type.Vehicle, vehicle)
  )
end

function VEHICLE.SET_VEHICLE_COUNTERMEASURE_AMMO(vehicle, counterMeasureCount)
  native.invoke(
    Type.Void, 6368, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Int, counterMeasureCount)
  )
end

function VEHICLE.GET_VEHICLE_COUNTERMEASURE_AMMO(vehicle)
  return native.invoke(
    Type.Int, 6369, false,
    arg(Type.Vehicle, vehicle)
  )
end

function VEHICLE.SET_HELI_COMBAT_OFFSET(vehicle, x, y, z)
  native.invoke(
    Type.Void, 6370, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, z)
  )
end

function VEHICLE.GET_CAN_VEHICLE_BE_PLACED_HERE(vehicle, x, y, z, rotX, rotY, rotZ, p7, p8)
  return native.invoke(
    Type.Bool, 6371, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, z),
    arg(Type.Float, rotX),
    arg(Type.Float, rotY),
    arg(Type.Float, rotZ),
    arg(Type.Int, p7),
    arg(Type.Any, p8)
  )
end

function VEHICLE.SET_DISABLE_AUTOMATIC_CRASH_TASK(vehicle, toggle)
  native.invoke(
    Type.Void, 6372, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Bool, toggle)
  )
end

function VEHICLE.SET_SPECIAL_FLIGHT_MODE_RATIO(vehicle, ratio)
  native.invoke(
    Type.Void, 6373, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Float, ratio)
  )
end

function VEHICLE.SET_SPECIAL_FLIGHT_MODE_TARGET_RATIO(vehicle, targetRatio)
  native.invoke(
    Type.Void, 6374, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Float, targetRatio)
  )
end

function VEHICLE.SET_SPECIAL_FLIGHT_MODE_ALLOWED(vehicle, toggle)
  native.invoke(
    Type.Void, 6375, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Bool, toggle)
  )
end

function VEHICLE.SET_DISABLE_HOVER_MODE_FLIGHT(vehicle, toggle)
  native.invoke(
    Type.Void, 6376, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Bool, toggle)
  )
end

function VEHICLE.GET_OUTRIGGERS_DEPLOYED(vehicle)
  return native.invoke(
    Type.Bool, 6377, false,
    arg(Type.Vehicle, vehicle)
  )
end

function VEHICLE.FIND_SPAWN_COORDINATES_FOR_HELI(ped)
  return native.invoke(
    Type.Vector3, 6378, false,
    arg(Type.Ped, ped)
  )
end

function VEHICLE.SET_DEPLOY_FOLDING_WINGS(vehicle, deploy, p2)
  native.invoke(
    Type.Void, 6379, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Bool, deploy),
    arg(Type.Bool, p2)
  )
end

function VEHICLE.ARE_FOLDING_WINGS_DEPLOYED(vehicle)
  return native.invoke(
    Type.Bool, 6380, false,
    arg(Type.Vehicle, vehicle)
  )
end

function VEHICLE._SET_DEPLOY_MISSILE_BAYS(vehicle, deploy)
  native.invoke(
    Type.Void, 6381, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Bool, deploy)
  )
end

function VEHICLE._ARE_MISSILE_BAYS_DEPLOYED(vehicle)
  return native.invoke(
    Type.Bool, 6382, false,
    arg(Type.Vehicle, vehicle)
  )
end

function VEHICLE.SET_DIP_STRAIGHT_DOWN_WHEN_CRASHING_PLANE(vehicle, toggle)
  native.invoke(
    Type.Void, 6383, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Bool, toggle)
  )
end

function VEHICLE.SET_TURRET_HIDDEN(vehicle, index, toggle)
  native.invoke(
    Type.Void, 6384, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Int, index),
    arg(Type.Bool, toggle)
  )
end

function VEHICLE.SET_HOVER_MODE_WING_RATIO(vehicle, ratio)
  native.invoke(
    Type.Void, 6385, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Float, ratio)
  )
end

function VEHICLE.SET_DISABLE_TURRET_MOVEMENT(vehicle, turretId)
  native.invoke(
    Type.Void, 6386, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Int, turretId)
  )
end

function VEHICLE.SET_FORCE_FIX_LINK_MATRICES(vehicle)
  native.invoke(
    Type.Void, 6387, false,
    arg(Type.Vehicle, vehicle)
  )
end

function VEHICLE.SET_TRANSFORM_RATE_FOR_ANIMATION(vehicle, transformRate)
  native.invoke(
    Type.Void, 6388, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Float, transformRate)
  )
end

function VEHICLE.SET_TRANSFORM_TO_SUBMARINE_USES_ALTERNATE_INPUT(vehicle, toggle)
  native.invoke(
    Type.Void, 6389, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Bool, toggle)
  )
end

function VEHICLE.SET_VEHICLE_COMBAT_MODE(toggle)
  native.invoke(
    Type.Void, 6390, false,
    arg(Type.Bool, toggle)
  )
end

function VEHICLE.SET_VEHICLE_DETONATION_MODE(toggle)
  native.invoke(
    Type.Void, 6391, false,
    arg(Type.Bool, toggle)
  )
end

function VEHICLE.SET_VEHICLE_SHUNT_ON_STICK(toggle)
  native.invoke(
    Type.Void, 6392, false,
    arg(Type.Bool, toggle)
  )
end

function VEHICLE.GET_IS_VEHICLE_SHUNTING(vehicle)
  return native.invoke(
    Type.Bool, 6393, false,
    arg(Type.Vehicle, vehicle)
  )
end

function VEHICLE.GET_HAS_VEHICLE_BEEN_HIT_BY_SHUNT(vehicle)
  return native.invoke(
    Type.Bool, 6394, false,
    arg(Type.Vehicle, vehicle)
  )
end

function VEHICLE.GET_LAST_SHUNT_VEHICLE(vehicle)
  return native.invoke(
    Type.Vehicle, 6395, false,
    arg(Type.Vehicle, vehicle)
  )
end

function VEHICLE.SET_DISABLE_VEHICLE_EXPLOSIONS_DAMAGE(toggle)
  native.invoke(
    Type.Void, 6396, false,
    arg(Type.Bool, toggle)
  )
end

function VEHICLE.SET_OVERRIDE_NITROUS_LEVEL(vehicle, toggle, level, power, rechargeTime, disableSound)
  native.invoke(
    Type.Void, 6397, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Bool, toggle),
    arg(Type.Float, level),
    arg(Type.Float, power),
    arg(Type.Float, rechargeTime),
    arg(Type.Bool, disableSound)
  )
end

function VEHICLE.SET_NITROUS_IS_ACTIVE(vehicle, enabled)
  native.invoke(
    Type.Void, 6398, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Bool, enabled)
  )
end

function VEHICLE._SET_OVERRIDE_TRACTION_LOSS_MULTIPLIER(vehicle, modifier)
  native.invoke(
    Type.Void, 6399, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Float, modifier)
  )
end

function VEHICLE._SET_DRIFT_SLIP_ANGLE_LIMITS(vehicle, durationScalar, amplitudeScalar, slipAngleLimit)
  native.invoke(
    Type.Void, 6400, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Float, durationScalar),
    arg(Type.Float, amplitudeScalar),
    arg(Type.Float, slipAngleLimit)
  )
end

function VEHICLE._SET_MINIMUM_TIME_BETWEEN_GEAR_SHIFTS(vehicle, time)
  native.invoke(
    Type.Void, 6401, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Int, time)
  )
end

function VEHICLE.FULLY_CHARGE_NITROUS(vehicle)
  native.invoke(
    Type.Void, 6402, false,
    arg(Type.Vehicle, vehicle)
  )
end

function VEHICLE._GET_REMAINING_NITROUS_DURATION(vehicle)
  return native.invoke(
    Type.Float, 6403, false,
    arg(Type.Vehicle, vehicle)
  )
end

function VEHICLE.IS_NITROUS_ACTIVE(vehicle)
  return native.invoke(
    Type.Bool, 6404, false,
    arg(Type.Vehicle, vehicle)
  )
end

function VEHICLE.CLEAR_NITROUS(vehicle)
  native.invoke(
    Type.Void, 6405, false,
    arg(Type.Vehicle, vehicle)
  )
end

function VEHICLE.SET_INCREASE_WHEEL_CRUSH_DAMAGE(vehicle, toggle)
  native.invoke(
    Type.Void, 6406, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Bool, toggle)
  )
end

function VEHICLE.SET_DISABLE_WEAPON_BLADE_FORCES(toggle)
  native.invoke(
    Type.Void, 6407, false,
    arg(Type.Bool, toggle)
  )
end

function VEHICLE.SET_USE_DOUBLE_CLICK_FOR_CAR_JUMP(toggle)
  native.invoke(
    Type.Void, 6408, false,
    arg(Type.Bool, toggle)
  )
end

function VEHICLE.GET_DOES_VEHICLE_HAVE_TOMBSTONE(vehicle)
  return native.invoke(
    Type.Bool, 6409, false,
    arg(Type.Vehicle, vehicle)
  )
end

function VEHICLE.HIDE_TOMBSTONE(vehicle, toggle)
  native.invoke(
    Type.Void, 6410, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Bool, toggle)
  )
end

function VEHICLE.APPLY_EMP_EFFECT(vehicle)
  native.invoke(
    Type.Void, 6411, false,
    arg(Type.Vehicle, vehicle)
  )
end

function VEHICLE.GET_IS_VEHICLE_DISABLED_BY_EMP(vehicle)
  return native.invoke(
    Type.Bool, 6412, false,
    arg(Type.Vehicle, vehicle)
  )
end

function VEHICLE.SET_DISABLE_RETRACTING_WEAPON_BLADES(toggle)
  native.invoke(
    Type.Void, 6413, false,
    arg(Type.Bool, toggle)
  )
end

function VEHICLE.GET_TYRE_HEALTH(vehicle, wheelIndex)
  return native.invoke(
    Type.Float, 6414, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Int, wheelIndex)
  )
end

function VEHICLE.SET_TYRE_HEALTH(vehicle, wheelIndex, health)
  native.invoke(
    Type.Void, 6415, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Int, wheelIndex),
    arg(Type.Float, health)
  )
end

function VEHICLE.GET_TYRE_WEAR_RATE(vehicle, wheelIndex)
  return native.invoke(
    Type.Float, 6416, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Int, wheelIndex)
  )
end

function VEHICLE.SET_TYRE_WEAR_RATE(vehicle, wheelIndex, multiplier)
  native.invoke(
    Type.Void, 6417, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Int, wheelIndex),
    arg(Type.Float, multiplier)
  )
end

function VEHICLE.SET_TYRE_WEAR_RATE_SCALE(vehicle, wheelIndex, multiplier)
  native.invoke(
    Type.Void, 6418, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Int, wheelIndex),
    arg(Type.Float, multiplier)
  )
end

function VEHICLE.SET_TYRE_MAXIMUM_GRIP_DIFFERENCE_DUE_TO_WEAR_RATE(vehicle, wheelIndex, multiplier)
  native.invoke(
    Type.Void, 6419, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Int, wheelIndex),
    arg(Type.Float, multiplier)
  )
end

function VEHICLE.SET_AIRCRAFT_IGNORE_HIGHTMAP_OPTIMISATION(vehicle, p1)
  native.invoke(
    Type.Void, 6420, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Int, p1)
  )
end

function VEHICLE.SET_REDUCED_SUSPENSION_FORCE(vehicle, enable)
  native.invoke(
    Type.Void, 6421, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Bool, enable)
  )
end

function VEHICLE.SET_DRIFT_TYRES(vehicle, toggle)
  native.invoke(
    Type.Void, 6422, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Bool, toggle)
  )
end

function VEHICLE.GET_DRIFT_TYRES_SET(vehicle)
  return native.invoke(
    Type.Bool, 6423, false,
    arg(Type.Vehicle, vehicle)
  )
end

function VEHICLE.NETWORK_USE_HIGH_PRECISION_TRAIN_BLENDING(vehicle, toggle)
  native.invoke(
    Type.Void, 6424, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Bool, toggle)
  )
end

function VEHICLE.SET_CHECK_FOR_ENOUGH_ROOM_FOR_PED(vehicle, p1)
  native.invoke(
    Type.Void, 6425, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Bool, p1)
  )
end

function VEHICLE._SET_ALLOW_COLLISION_WHEN_IN_VEHICLE(vehicle, toggle)
  native.invoke(
    Type.Void, 6426, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Bool, toggle)
  )
end

function VEHICLE._IS_VEHICLE_GEN9_EXCLUSIVE_MODEL(vehicleModel)
  return native.invoke(
    Type.Bool, 6427, false,
    arg(Type.Hash, vehicleModel)
  )
end

function VEHICLE._GET_VEHICLE_MAX_EXHAUST_BONE_COUNT()
  return native.invoke(
    Type.Int, 6428, false
  )
end

function VEHICLE._GET_VEHICLE_EXHAUST_BONE(vehicle, index, boneIndex, axisX)
  return native.invoke(
    Type.Bool, 6429, false,
    arg(Type.Vehicle, vehicle),
    arg(Type.Int, index),
    ref(Type.Int, boneIndex),
    ref(Type.Bool, axisX)
  )
end


WATER = {}

function WATER.GET_WATER_HEIGHT(x, y, z, height)
  return native.invoke(
    Type.Bool, 6430, false,
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, z),
    ref(Type.Float, height)
  )
end

function WATER.GET_WATER_HEIGHT_NO_WAVES(x, y, z, height)
  return native.invoke(
    Type.Bool, 6431, false,
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, z),
    ref(Type.Float, height)
  )
end

function WATER.TEST_PROBE_AGAINST_WATER(x1, y1, z1, x2, y2, z2, result)
  return native.invoke(
    Type.Bool, 6432, true,
    arg(Type.Float, x1),
    arg(Type.Float, y1),
    arg(Type.Float, z1),
    arg(Type.Float, x2),
    arg(Type.Float, y2),
    arg(Type.Float, z2),
    ref(Type.Vector3, result)
  )
end

function WATER.TEST_PROBE_AGAINST_ALL_WATER(x1, y1, z1, x2, y2, z2, flags, waterHeight)
  return native.invoke(
    Type.Int, 6433, false,
    arg(Type.Float, x1),
    arg(Type.Float, y1),
    arg(Type.Float, z1),
    arg(Type.Float, x2),
    arg(Type.Float, y2),
    arg(Type.Float, z2),
    arg(Type.Int, flags),
    ref(Type.Float, waterHeight)
  )
end

function WATER.TEST_VERTICAL_PROBE_AGAINST_ALL_WATER(x, y, z, flags, waterHeight)
  return native.invoke(
    Type.Int, 6434, false,
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, z),
    arg(Type.Int, flags),
    ref(Type.Float, waterHeight)
  )
end

function WATER.MODIFY_WATER(x, y, radius, height)
  native.invoke(
    Type.Void, 6435, false,
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, radius),
    arg(Type.Float, height)
  )
end

function WATER.ADD_EXTRA_CALMING_QUAD(xLow, yLow, xHigh, yHigh, height)
  return native.invoke(
    Type.Int, 6436, false,
    arg(Type.Float, xLow),
    arg(Type.Float, yLow),
    arg(Type.Float, xHigh),
    arg(Type.Float, yHigh),
    arg(Type.Float, height)
  )
end

function WATER.REMOVE_EXTRA_CALMING_QUAD(calmingQuad)
  native.invoke(
    Type.Void, 6437, false,
    arg(Type.Int, calmingQuad)
  )
end

function WATER.SET_DEEP_OCEAN_SCALER(intensity)
  native.invoke(
    Type.Void, 6438, false,
    arg(Type.Float, intensity)
  )
end

function WATER.GET_DEEP_OCEAN_SCALER()
  return native.invoke(
    Type.Float, 6439, false
  )
end

function WATER.SET_CALMED_WAVE_HEIGHT_SCALER(height)
  native.invoke(
    Type.Void, 6440, false,
    arg(Type.Float, height)
  )
end

function WATER.RESET_DEEP_OCEAN_SCALER()
  native.invoke(
    Type.Void, 6441, false
  )
end


WEAPON = {}

function WEAPON.ENABLE_LASER_SIGHT_RENDERING(toggle)
  native.invoke(
    Type.Void, 6442, false,
    arg(Type.Bool, toggle)
  )
end

function WEAPON.GET_WEAPON_COMPONENT_TYPE_MODEL(componentHash)
  return native.invoke(
    Type.Hash, 6443, false,
    arg(Type.Hash, componentHash)
  )
end

function WEAPON.GET_WEAPONTYPE_MODEL(weaponHash)
  return native.invoke(
    Type.Hash, 6444, false,
    arg(Type.Hash, weaponHash)
  )
end

function WEAPON.GET_WEAPONTYPE_SLOT(weaponHash)
  return native.invoke(
    Type.Hash, 6445, false,
    arg(Type.Hash, weaponHash)
  )
end

function WEAPON.GET_WEAPONTYPE_GROUP(weaponHash)
  return native.invoke(
    Type.Hash, 6446, false,
    arg(Type.Hash, weaponHash)
  )
end

function WEAPON.GET_WEAPON_COMPONENT_VARIANT_EXTRA_COUNT(componentHash)
  return native.invoke(
    Type.Int, 6447, false,
    arg(Type.Hash, componentHash)
  )
end

function WEAPON.GET_WEAPON_COMPONENT_VARIANT_EXTRA_MODEL(componentHash, extraComponentIndex)
  return native.invoke(
    Type.Hash, 6448, false,
    arg(Type.Hash, componentHash),
    arg(Type.Int, extraComponentIndex)
  )
end

function WEAPON.SET_CURRENT_PED_WEAPON(ped, weaponHash, bForceInHand)
  native.invoke(
    Type.Void, 6449, false,
    arg(Type.Ped, ped),
    arg(Type.Hash, weaponHash),
    arg(Type.Bool, bForceInHand)
  )
end

function WEAPON.GET_CURRENT_PED_WEAPON(ped, weaponHash, p2)
  return native.invoke(
    Type.Bool, 6450, false,
    arg(Type.Ped, ped),
    ref(Type.Hash, weaponHash),
    arg(Type.Bool, p2)
  )
end

function WEAPON.GET_CURRENT_PED_WEAPON_ENTITY_INDEX(ped, p1)
  return native.invoke(
    Type.Entity, 6451, false,
    arg(Type.Ped, ped),
    arg(Type.Any, p1)
  )
end

function WEAPON.GET_BEST_PED_WEAPON(ped, p1)
  return native.invoke(
    Type.Hash, 6452, false,
    arg(Type.Ped, ped),
    arg(Type.Bool, p1)
  )
end

function WEAPON.SET_CURRENT_PED_VEHICLE_WEAPON(ped, weaponHash)
  return native.invoke(
    Type.Bool, 6453, false,
    arg(Type.Ped, ped),
    arg(Type.Hash, weaponHash)
  )
end

function WEAPON.GET_CURRENT_PED_VEHICLE_WEAPON(ped, weaponHash)
  return native.invoke(
    Type.Bool, 6454, false,
    arg(Type.Ped, ped),
    ref(Type.Hash, weaponHash)
  )
end

function WEAPON.SET_PED_CYCLE_VEHICLE_WEAPONS_ONLY(ped)
  native.invoke(
    Type.Void, 6455, false,
    arg(Type.Ped, ped)
  )
end

function WEAPON.IS_PED_ARMED(ped, typeFlags)
  return native.invoke(
    Type.Bool, 6456, false,
    arg(Type.Ped, ped),
    arg(Type.Int, typeFlags)
  )
end

function WEAPON.IS_WEAPON_VALID(weaponHash)
  return native.invoke(
    Type.Bool, 6457, false,
    arg(Type.Hash, weaponHash)
  )
end

function WEAPON.HAS_PED_GOT_WEAPON(ped, weaponHash, p2)
  return native.invoke(
    Type.Bool, 6458, false,
    arg(Type.Ped, ped),
    arg(Type.Hash, weaponHash),
    arg(Type.Bool, p2)
  )
end

function WEAPON.IS_PED_WEAPON_READY_TO_SHOOT(ped)
  return native.invoke(
    Type.Bool, 6459, false,
    arg(Type.Ped, ped)
  )
end

function WEAPON.GET_PED_WEAPONTYPE_IN_SLOT(ped, weaponSlot)
  return native.invoke(
    Type.Hash, 6460, false,
    arg(Type.Ped, ped),
    arg(Type.Hash, weaponSlot)
  )
end

function WEAPON.GET_AMMO_IN_PED_WEAPON(ped, weaponhash)
  return native.invoke(
    Type.Int, 6461, false,
    arg(Type.Ped, ped),
    arg(Type.Hash, weaponhash)
  )
end

function WEAPON.ADD_AMMO_TO_PED(ped, weaponHash, ammo)
  native.invoke(
    Type.Void, 6462, false,
    arg(Type.Ped, ped),
    arg(Type.Hash, weaponHash),
    arg(Type.Int, ammo)
  )
end

function WEAPON.SET_PED_AMMO(ped, weaponHash, ammo, p3)
  native.invoke(
    Type.Void, 6463, false,
    arg(Type.Ped, ped),
    arg(Type.Hash, weaponHash),
    arg(Type.Int, ammo),
    arg(Type.Bool, p3)
  )
end

function WEAPON.SET_PED_INFINITE_AMMO(ped, toggle, weaponHash)
  native.invoke(
    Type.Void, 6464, false,
    arg(Type.Ped, ped),
    arg(Type.Bool, toggle),
    arg(Type.Hash, weaponHash)
  )
end

function WEAPON.SET_PED_INFINITE_AMMO_CLIP(ped, toggle)
  native.invoke(
    Type.Void, 6465, false,
    arg(Type.Ped, ped),
    arg(Type.Bool, toggle)
  )
end

function WEAPON.SET_PED_STUN_GUN_FINITE_AMMO(p0, p1)
  native.invoke(
    Type.Void, 6466, false,
    arg(Type.Any, p0),
    arg(Type.Any, p1)
  )
end

function WEAPON.GIVE_WEAPON_TO_PED(ped, weaponHash, ammoCount, isHidden, bForceInHand)
  native.invoke(
    Type.Void, 6467, false,
    arg(Type.Ped, ped),
    arg(Type.Hash, weaponHash),
    arg(Type.Int, ammoCount),
    arg(Type.Bool, isHidden),
    arg(Type.Bool, bForceInHand)
  )
end

function WEAPON.GIVE_DELAYED_WEAPON_TO_PED(ped, weaponHash, ammoCount, bForceInHand)
  native.invoke(
    Type.Void, 6468, false,
    arg(Type.Ped, ped),
    arg(Type.Hash, weaponHash),
    arg(Type.Int, ammoCount),
    arg(Type.Bool, bForceInHand)
  )
end

function WEAPON.REMOVE_ALL_PED_WEAPONS(ped, p1)
  native.invoke(
    Type.Void, 6469, false,
    arg(Type.Ped, ped),
    arg(Type.Bool, p1)
  )
end

function WEAPON.REMOVE_WEAPON_FROM_PED(ped, weaponHash)
  native.invoke(
    Type.Void, 6470, false,
    arg(Type.Ped, ped),
    arg(Type.Hash, weaponHash)
  )
end

function WEAPON.HIDE_PED_WEAPON_FOR_SCRIPTED_CUTSCENE(ped, toggle)
  native.invoke(
    Type.Void, 6471, false,
    arg(Type.Ped, ped),
    arg(Type.Bool, toggle)
  )
end

function WEAPON.SET_PED_CURRENT_WEAPON_VISIBLE(ped, visible, deselectWeapon, p3, p4)
  native.invoke(
    Type.Void, 6472, false,
    arg(Type.Ped, ped),
    arg(Type.Bool, visible),
    arg(Type.Bool, deselectWeapon),
    arg(Type.Bool, p3),
    arg(Type.Bool, p4)
  )
end

function WEAPON.SET_PED_DROPS_WEAPONS_WHEN_DEAD(ped, toggle)
  native.invoke(
    Type.Void, 6473, false,
    arg(Type.Ped, ped),
    arg(Type.Bool, toggle)
  )
end

function WEAPON.HAS_PED_BEEN_DAMAGED_BY_WEAPON(ped, weaponHash, weaponType)
  return native.invoke(
    Type.Bool, 6474, false,
    arg(Type.Ped, ped),
    arg(Type.Hash, weaponHash),
    arg(Type.Int, weaponType)
  )
end

function WEAPON.CLEAR_PED_LAST_WEAPON_DAMAGE(ped)
  native.invoke(
    Type.Void, 6475, false,
    arg(Type.Ped, ped)
  )
end

function WEAPON.HAS_ENTITY_BEEN_DAMAGED_BY_WEAPON(entity, weaponHash, weaponType)
  return native.invoke(
    Type.Bool, 6476, false,
    arg(Type.Entity, entity),
    arg(Type.Hash, weaponHash),
    arg(Type.Int, weaponType)
  )
end

function WEAPON.CLEAR_ENTITY_LAST_WEAPON_DAMAGE(entity)
  native.invoke(
    Type.Void, 6477, false,
    arg(Type.Entity, entity)
  )
end

function WEAPON.SET_PED_DROPS_WEAPON(ped)
  native.invoke(
    Type.Void, 6478, false,
    arg(Type.Ped, ped)
  )
end

function WEAPON.SET_PED_DROPS_INVENTORY_WEAPON(ped, weaponHash, xOffset, yOffset, zOffset, ammoCount)
  native.invoke(
    Type.Void, 6479, false,
    arg(Type.Ped, ped),
    arg(Type.Hash, weaponHash),
    arg(Type.Float, xOffset),
    arg(Type.Float, yOffset),
    arg(Type.Float, zOffset),
    arg(Type.Int, ammoCount)
  )
end

function WEAPON.GET_MAX_AMMO_IN_CLIP(ped, weaponHash, p2)
  return native.invoke(
    Type.Int, 6480, false,
    arg(Type.Ped, ped),
    arg(Type.Hash, weaponHash),
    arg(Type.Bool, p2)
  )
end

function WEAPON.GET_AMMO_IN_CLIP(ped, weaponHash, ammo)
  return native.invoke(
    Type.Bool, 6481, false,
    arg(Type.Ped, ped),
    arg(Type.Hash, weaponHash),
    ref(Type.Int, ammo)
  )
end

function WEAPON.SET_AMMO_IN_CLIP(ped, weaponHash, ammo)
  return native.invoke(
    Type.Bool, 6482, false,
    arg(Type.Ped, ped),
    arg(Type.Hash, weaponHash),
    arg(Type.Int, ammo)
  )
end

function WEAPON.GET_MAX_AMMO(ped, weaponHash, ammo)
  return native.invoke(
    Type.Bool, 6483, false,
    arg(Type.Ped, ped),
    arg(Type.Hash, weaponHash),
    ref(Type.Int, ammo)
  )
end

function WEAPON.GET_MAX_AMMO_BY_TYPE(ped, ammoTypeHash, ammo)
  return native.invoke(
    Type.Bool, 6484, false,
    arg(Type.Ped, ped),
    arg(Type.Hash, ammoTypeHash),
    ref(Type.Int, ammo)
  )
end

function WEAPON.ADD_PED_AMMO_BY_TYPE(ped, ammoTypeHash, ammo)
  native.invoke(
    Type.Void, 6485, false,
    arg(Type.Ped, ped),
    arg(Type.Hash, ammoTypeHash),
    arg(Type.Int, ammo)
  )
end

function WEAPON.SET_PED_AMMO_BY_TYPE(ped, ammoTypeHash, ammo)
  native.invoke(
    Type.Void, 6486, false,
    arg(Type.Ped, ped),
    arg(Type.Hash, ammoTypeHash),
    arg(Type.Int, ammo)
  )
end

function WEAPON.GET_PED_AMMO_BY_TYPE(ped, ammoTypeHash)
  return native.invoke(
    Type.Int, 6487, false,
    arg(Type.Ped, ped),
    arg(Type.Hash, ammoTypeHash)
  )
end

function WEAPON.SET_PED_AMMO_TO_DROP(ped, p1)
  native.invoke(
    Type.Void, 6488, false,
    arg(Type.Ped, ped),
    arg(Type.Int, p1)
  )
end

function WEAPON.SET_PICKUP_AMMO_AMOUNT_SCALER(p0)
  native.invoke(
    Type.Void, 6489, false,
    arg(Type.Float, p0)
  )
end

function WEAPON.GET_PED_AMMO_TYPE_FROM_WEAPON(ped, weaponHash)
  return native.invoke(
    Type.Hash, 6490, false,
    arg(Type.Ped, ped),
    arg(Type.Hash, weaponHash)
  )
end

function WEAPON.GET_PED_ORIGINAL_AMMO_TYPE_FROM_WEAPON(ped, weaponHash)
  return native.invoke(
    Type.Hash, 6491, false,
    arg(Type.Ped, ped),
    arg(Type.Hash, weaponHash)
  )
end

function WEAPON.GET_PED_LAST_WEAPON_IMPACT_COORD(ped, coords)
  return native.invoke(
    Type.Bool, 6492, true,
    arg(Type.Ped, ped),
    ref(Type.Vector3, coords)
  )
end

function WEAPON.SET_PED_GADGET(ped, gadgetHash, p2)
  native.invoke(
    Type.Void, 6493, false,
    arg(Type.Ped, ped),
    arg(Type.Hash, gadgetHash),
    arg(Type.Bool, p2)
  )
end

function WEAPON.GET_IS_PED_GADGET_EQUIPPED(ped, gadgetHash)
  return native.invoke(
    Type.Bool, 6494, false,
    arg(Type.Ped, ped),
    arg(Type.Hash, gadgetHash)
  )
end

function WEAPON.GET_SELECTED_PED_WEAPON(ped)
  return native.invoke(
    Type.Hash, 6495, false,
    arg(Type.Ped, ped)
  )
end

function WEAPON.EXPLODE_PROJECTILES(ped, weaponHash, p2)
  native.invoke(
    Type.Void, 6496, false,
    arg(Type.Ped, ped),
    arg(Type.Hash, weaponHash),
    arg(Type.Bool, p2)
  )
end

function WEAPON.REMOVE_ALL_PROJECTILES_OF_TYPE(weaponHash, explode)
  native.invoke(
    Type.Void, 6497, false,
    arg(Type.Hash, weaponHash),
    arg(Type.Bool, explode)
  )
end

function WEAPON.GET_LOCKON_DISTANCE_OF_CURRENT_PED_WEAPON(ped)
  return native.invoke(
    Type.Float, 6498, false,
    arg(Type.Ped, ped)
  )
end

function WEAPON.GET_MAX_RANGE_OF_CURRENT_PED_WEAPON(ped)
  return native.invoke(
    Type.Float, 6499, false,
    arg(Type.Ped, ped)
  )
end

function WEAPON.HAS_VEHICLE_GOT_PROJECTILE_ATTACHED(driver, vehicle, weaponHash, p3)
  return native.invoke(
    Type.Bool, 6500, false,
    arg(Type.Ped, driver),
    arg(Type.Vehicle, vehicle),
    arg(Type.Hash, weaponHash),
    arg(Type.Any, p3)
  )
end

function WEAPON.GIVE_WEAPON_COMPONENT_TO_PED(ped, weaponHash, componentHash)
  native.invoke(
    Type.Void, 6501, false,
    arg(Type.Ped, ped),
    arg(Type.Hash, weaponHash),
    arg(Type.Hash, componentHash)
  )
end

function WEAPON.REMOVE_WEAPON_COMPONENT_FROM_PED(ped, weaponHash, componentHash)
  native.invoke(
    Type.Void, 6502, false,
    arg(Type.Ped, ped),
    arg(Type.Hash, weaponHash),
    arg(Type.Hash, componentHash)
  )
end

function WEAPON.HAS_PED_GOT_WEAPON_COMPONENT(ped, weaponHash, componentHash)
  return native.invoke(
    Type.Bool, 6503, false,
    arg(Type.Ped, ped),
    arg(Type.Hash, weaponHash),
    arg(Type.Hash, componentHash)
  )
end

function WEAPON.IS_PED_WEAPON_COMPONENT_ACTIVE(ped, weaponHash, componentHash)
  return native.invoke(
    Type.Bool, 6504, false,
    arg(Type.Ped, ped),
    arg(Type.Hash, weaponHash),
    arg(Type.Hash, componentHash)
  )
end

function WEAPON.REFILL_AMMO_INSTANTLY(ped)
  return native.invoke(
    Type.Bool, 6505, false,
    arg(Type.Ped, ped)
  )
end

function WEAPON.MAKE_PED_RELOAD(ped)
  return native.invoke(
    Type.Bool, 6506, false,
    arg(Type.Ped, ped)
  )
end

function WEAPON.REQUEST_WEAPON_ASSET(weaponHash, p1, p2)
  native.invoke(
    Type.Void, 6507, false,
    arg(Type.Hash, weaponHash),
    arg(Type.Int, p1),
    arg(Type.Int, p2)
  )
end

function WEAPON.HAS_WEAPON_ASSET_LOADED(weaponHash)
  return native.invoke(
    Type.Bool, 6508, false,
    arg(Type.Hash, weaponHash)
  )
end

function WEAPON.REMOVE_WEAPON_ASSET(weaponHash)
  native.invoke(
    Type.Void, 6509, false,
    arg(Type.Hash, weaponHash)
  )
end

function WEAPON.CREATE_WEAPON_OBJECT(weaponHash, ammoCount, x, y, z, showWorldModel, scale, p7, p8, p9)
  return native.invoke(
    Type.Object, 6510, false,
    arg(Type.Hash, weaponHash),
    arg(Type.Int, ammoCount),
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, z),
    arg(Type.Bool, showWorldModel),
    arg(Type.Float, scale),
    arg(Type.Any, p7),
    arg(Type.Any, p8),
    arg(Type.Any, p9)
  )
end

function WEAPON.GIVE_WEAPON_COMPONENT_TO_WEAPON_OBJECT(weaponObject, componentHash)
  native.invoke(
    Type.Void, 6511, false,
    arg(Type.Object, weaponObject),
    arg(Type.Hash, componentHash)
  )
end

function WEAPON.REMOVE_WEAPON_COMPONENT_FROM_WEAPON_OBJECT(object, componentHash)
  native.invoke(
    Type.Void, 6512, false,
    arg(Type.Object, object),
    arg(Type.Hash, componentHash)
  )
end

function WEAPON.HAS_WEAPON_GOT_WEAPON_COMPONENT(weapon, componentHash)
  return native.invoke(
    Type.Bool, 6513, false,
    arg(Type.Object, weapon),
    arg(Type.Hash, componentHash)
  )
end

function WEAPON.GIVE_WEAPON_OBJECT_TO_PED(weaponObject, ped)
  native.invoke(
    Type.Void, 6514, false,
    arg(Type.Object, weaponObject),
    arg(Type.Ped, ped)
  )
end

function WEAPON.DOES_WEAPON_TAKE_WEAPON_COMPONENT(weaponHash, componentHash)
  return native.invoke(
    Type.Bool, 6515, false,
    arg(Type.Hash, weaponHash),
    arg(Type.Hash, componentHash)
  )
end

function WEAPON.GET_WEAPON_OBJECT_FROM_PED(ped, p1)
  return native.invoke(
    Type.Object, 6516, false,
    arg(Type.Ped, ped),
    arg(Type.Bool, p1)
  )
end

function WEAPON.GIVE_LOADOUT_TO_PED(ped, loadoutHash)
  native.invoke(
    Type.Void, 6517, false,
    arg(Type.Ped, ped),
    arg(Type.Hash, loadoutHash)
  )
end

function WEAPON.SET_PED_WEAPON_TINT_INDEX(ped, weaponHash, tintIndex)
  native.invoke(
    Type.Void, 6518, false,
    arg(Type.Ped, ped),
    arg(Type.Hash, weaponHash),
    arg(Type.Int, tintIndex)
  )
end

function WEAPON.GET_PED_WEAPON_TINT_INDEX(ped, weaponHash)
  return native.invoke(
    Type.Int, 6519, false,
    arg(Type.Ped, ped),
    arg(Type.Hash, weaponHash)
  )
end

function WEAPON.SET_WEAPON_OBJECT_TINT_INDEX(weapon, tintIndex)
  native.invoke(
    Type.Void, 6520, false,
    arg(Type.Object, weapon),
    arg(Type.Int, tintIndex)
  )
end

function WEAPON.GET_WEAPON_OBJECT_TINT_INDEX(weapon)
  return native.invoke(
    Type.Int, 6521, false,
    arg(Type.Object, weapon)
  )
end

function WEAPON.GET_WEAPON_TINT_COUNT(weaponHash)
  return native.invoke(
    Type.Int, 6522, false,
    arg(Type.Hash, weaponHash)
  )
end

function WEAPON.SET_PED_WEAPON_COMPONENT_TINT_INDEX(ped, weaponHash, camoComponentHash, colorIndex)
  native.invoke(
    Type.Void, 6523, false,
    arg(Type.Ped, ped),
    arg(Type.Hash, weaponHash),
    arg(Type.Hash, camoComponentHash),
    arg(Type.Int, colorIndex)
  )
end

function WEAPON.GET_PED_WEAPON_COMPONENT_TINT_INDEX(ped, weaponHash, camoComponentHash)
  return native.invoke(
    Type.Int, 6524, false,
    arg(Type.Ped, ped),
    arg(Type.Hash, weaponHash),
    arg(Type.Hash, camoComponentHash)
  )
end

function WEAPON.SET_WEAPON_OBJECT_COMPONENT_TINT_INDEX(weaponObject, camoComponentHash, colorIndex)
  native.invoke(
    Type.Void, 6525, false,
    arg(Type.Object, weaponObject),
    arg(Type.Hash, camoComponentHash),
    arg(Type.Int, colorIndex)
  )
end

function WEAPON.GET_WEAPON_OBJECT_COMPONENT_TINT_INDEX(weaponObject, camoComponentHash)
  return native.invoke(
    Type.Int, 6526, false,
    arg(Type.Object, weaponObject),
    arg(Type.Hash, camoComponentHash)
  )
end

function WEAPON.GET_PED_WEAPON_CAMO_INDEX(ped, weaponHash)
  return native.invoke(
    Type.Int, 6527, false,
    arg(Type.Ped, ped),
    arg(Type.Hash, weaponHash)
  )
end

function WEAPON.SET_WEAPON_OBJECT_CAMO_INDEX(weaponObject, p1)
  native.invoke(
    Type.Void, 6528, false,
    arg(Type.Object, weaponObject),
    arg(Type.Int, p1)
  )
end

function WEAPON.GET_WEAPON_HUD_STATS(weaponHash, outData)
  return native.invoke(
    Type.Bool, 6529, false,
    arg(Type.Hash, weaponHash),
    ref(Type.Any, outData)
  )
end

function WEAPON.GET_WEAPON_COMPONENT_HUD_STATS(componentHash, outData)
  return native.invoke(
    Type.Bool, 6530, false,
    arg(Type.Hash, componentHash),
    ref(Type.Any, outData)
  )
end

function WEAPON.GET_WEAPON_DAMAGE(weaponHash, componentHash)
  return native.invoke(
    Type.Float, 6531, false,
    arg(Type.Hash, weaponHash),
    arg(Type.Hash, componentHash)
  )
end

function WEAPON.GET_WEAPON_CLIP_SIZE(weaponHash)
  return native.invoke(
    Type.Int, 6532, false,
    arg(Type.Hash, weaponHash)
  )
end

function WEAPON.GET_WEAPON_TIME_BETWEEN_SHOTS(weaponHash)
  return native.invoke(
    Type.Float, 6533, false,
    arg(Type.Hash, weaponHash)
  )
end

function WEAPON.SET_PED_CHANCE_OF_FIRING_BLANKS(ped, xBias, yBias)
  native.invoke(
    Type.Void, 6534, false,
    arg(Type.Ped, ped),
    arg(Type.Float, xBias),
    arg(Type.Float, yBias)
  )
end

function WEAPON.SET_PED_SHOOT_ORDNANCE_WEAPON(ped, p1)
  return native.invoke(
    Type.Object, 6535, false,
    arg(Type.Ped, ped),
    arg(Type.Float, p1)
  )
end

function WEAPON.REQUEST_WEAPON_HIGH_DETAIL_MODEL(weaponObject)
  native.invoke(
    Type.Void, 6536, false,
    arg(Type.Entity, weaponObject)
  )
end

function WEAPON._SET_WEAPON_PED_DAMAGE_MODIFIER(weapon, damageModifier)
  native.invoke(
    Type.Void, 6537, false,
    arg(Type.Hash, weapon),
    arg(Type.Float, damageModifier)
  )
end

function WEAPON.SET_WEAPON_DAMAGE_MODIFIER(weaponHash, damageMultiplier)
  native.invoke(
    Type.Void, 6538, false,
    arg(Type.Hash, weaponHash),
    arg(Type.Float, damageMultiplier)
  )
end

function WEAPON.SET_WEAPON_AOE_MODIFIER(weaponHash, multiplier)
  native.invoke(
    Type.Void, 6539, false,
    arg(Type.Hash, weaponHash),
    arg(Type.Float, multiplier)
  )
end

function WEAPON.SET_WEAPON_EFFECT_DURATION_MODIFIER(p0, p1)
  native.invoke(
    Type.Void, 6540, false,
    arg(Type.Hash, p0),
    arg(Type.Float, p1)
  )
end

function WEAPON.IS_PED_CURRENT_WEAPON_SILENCED(ped)
  return native.invoke(
    Type.Bool, 6541, false,
    arg(Type.Ped, ped)
  )
end

function WEAPON.IS_FLASH_LIGHT_ON(ped)
  return native.invoke(
    Type.Bool, 6542, false,
    arg(Type.Ped, ped)
  )
end

function WEAPON.SET_FLASH_LIGHT_FADE_DISTANCE(distance)
  return native.invoke(
    Type.Bool, 6543, false,
    arg(Type.Float, distance)
  )
end

function WEAPON.SET_FLASH_LIGHT_ACTIVE_HISTORY(ped, toggle)
  native.invoke(
    Type.Void, 6544, false,
    arg(Type.Ped, ped),
    arg(Type.Bool, toggle)
  )
end

function WEAPON.SET_WEAPON_ANIMATION_OVERRIDE(ped, animStyle)
  native.invoke(
    Type.Void, 6545, false,
    arg(Type.Ped, ped),
    arg(Type.Hash, animStyle)
  )
end

function WEAPON.GET_WEAPON_DAMAGE_TYPE(weaponHash)
  return native.invoke(
    Type.Int, 6546, false,
    arg(Type.Hash, weaponHash)
  )
end

function WEAPON.SET_EQIPPED_WEAPON_START_SPINNING_AT_FULL_SPEED(ped)
  native.invoke(
    Type.Void, 6547, false,
    arg(Type.Ped, ped)
  )
end

function WEAPON.CAN_USE_WEAPON_ON_PARACHUTE(weaponHash)
  return native.invoke(
    Type.Bool, 6548, false,
    arg(Type.Hash, weaponHash)
  )
end

function WEAPON.CREATE_AIR_DEFENCE_SPHERE(x, y, z, radius, p4, p5, p6, weaponHash)
  return native.invoke(
    Type.Int, 6549, false,
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, z),
    arg(Type.Float, radius),
    arg(Type.Float, p4),
    arg(Type.Float, p5),
    arg(Type.Float, p6),
    arg(Type.Hash, weaponHash)
  )
end

function WEAPON.CREATE_AIR_DEFENCE_ANGLED_AREA(p0, p1, p2, p3, p4, p5, p6, p7, p8, radius, weaponHash)
  return native.invoke(
    Type.Int, 6550, false,
    arg(Type.Float, p0),
    arg(Type.Float, p1),
    arg(Type.Float, p2),
    arg(Type.Float, p3),
    arg(Type.Float, p4),
    arg(Type.Float, p5),
    arg(Type.Float, p6),
    arg(Type.Float, p7),
    arg(Type.Float, p8),
    arg(Type.Float, radius),
    arg(Type.Hash, weaponHash)
  )
end

function WEAPON.REMOVE_AIR_DEFENCE_SPHERE(zoneId)
  return native.invoke(
    Type.Bool, 6551, false,
    arg(Type.Int, zoneId)
  )
end

function WEAPON.REMOVE_ALL_AIR_DEFENCE_SPHERES()
  native.invoke(
    Type.Void, 6552, false
  )
end

function WEAPON.SET_PLAYER_TARGETTABLE_FOR_AIR_DEFENCE_SPHERE(player, zoneId, enable)
  native.invoke(
    Type.Void, 6553, false,
    arg(Type.Player, player),
    arg(Type.Int, zoneId),
    arg(Type.Bool, enable)
  )
end

function WEAPON.IS_AIR_DEFENCE_SPHERE_IN_AREA(x, y, z, radius, outZoneId)
  return native.invoke(
    Type.Bool, 6554, false,
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, z),
    arg(Type.Float, radius),
    ref(Type.Int, outZoneId)
  )
end

function WEAPON.FIRE_AIR_DEFENCE_SPHERE_WEAPON_AT_POSITION(zoneId, x, y, z)
  native.invoke(
    Type.Void, 6555, false,
    arg(Type.Int, zoneId),
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, z)
  )
end

function WEAPON.DOES_AIR_DEFENCE_SPHERE_EXIST(zoneId)
  return native.invoke(
    Type.Bool, 6556, false,
    arg(Type.Int, zoneId)
  )
end

function WEAPON.SET_CAN_PED_SELECT_INVENTORY_WEAPON(ped, weaponHash, toggle)
  native.invoke(
    Type.Void, 6557, false,
    arg(Type.Ped, ped),
    arg(Type.Hash, weaponHash),
    arg(Type.Bool, toggle)
  )
end

function WEAPON.SET_CAN_PED_SELECT_ALL_WEAPONS(ped, toggle)
  native.invoke(
    Type.Void, 6558, false,
    arg(Type.Ped, ped),
    arg(Type.Bool, toggle)
  )
end


ZONE = {}

function ZONE.GET_ZONE_AT_COORDS(x, y, z)
  return native.invoke(
    Type.Int, 6559, false,
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, z)
  )
end

function ZONE.GET_ZONE_FROM_NAME_ID(zoneName)
  return native.invoke(
    Type.Int, 6560, false,
    arg(Type.String, zoneName)
  )
end

function ZONE.GET_ZONE_POPSCHEDULE(zoneId)
  return native.invoke(
    Type.Int, 6561, false,
    arg(Type.Int, zoneId)
  )
end

function ZONE.GET_NAME_OF_ZONE(x, y, z)
  return native.invoke(
    Type.String, 6562, false,
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, z)
  )
end

function ZONE.SET_ZONE_ENABLED(zoneId, toggle)
  native.invoke(
    Type.Void, 6563, false,
    arg(Type.Int, zoneId),
    arg(Type.Bool, toggle)
  )
end

function ZONE.GET_ZONE_SCUMMINESS(zoneId)
  return native.invoke(
    Type.Int, 6564, false,
    arg(Type.Int, zoneId)
  )
end

function ZONE.OVERRIDE_POPSCHEDULE_VEHICLE_MODEL(scheduleId, vehicleHash)
  native.invoke(
    Type.Void, 6565, false,
    arg(Type.Int, scheduleId),
    arg(Type.Hash, vehicleHash)
  )
end

function ZONE.CLEAR_POPSCHEDULE_OVERRIDE_VEHICLE_MODEL(scheduleId)
  native.invoke(
    Type.Void, 6566, false,
    arg(Type.Int, scheduleId)
  )
end

function ZONE.GET_HASH_OF_MAP_AREA_AT_COORDS(x, y, z)
  return native.invoke(
    Type.Hash, 6567, false,
    arg(Type.Float, x),
    arg(Type.Float, y),
    arg(Type.Float, z)
  )
end


